version: 2.1

# this allows to use CircleCI's dynamic configuration feature
setup: true

executors:
  python-cimg-executor:
    docker:
      - image: cimg/python:3.11
  base-cimg-executor:
    docker:
      - image: cimg/base:2022.07

orbs:
  path-filtering: circleci/path-filtering@0.1.3
  continuation: circleci/continuation@0.3.1

# TODO: Sync this with continue-workflows.yml
commands:
  asdf_install:
    description: "Install tools using ASDF"
    parameters:
      tools:
        type: string
        description:
          "Newline separated list of tools to install. If empty, will install
          everything."
        default: ""
      cache_name:
        type: string
        description: "Name of asdf cache"
        default: "default"
    steps:
      - run:
          name: Install ASDF
          command: |
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.2
            printf '\nsource "${HOME}/.asdf/asdf.sh"\n' >> "${BASH_ENV}"
            date +%m > ~/month
            date +%d > ~/day
      # We need to restore ASDF cache after installing, otherwise we will try to clone it to non-empty dir
      - restore_cache:
          name: Restore ASDF cache
          keys:
            - aperture-asdf-cache-v9-{{ checksum "~/month" }}-<<
              parameters.cache_name >>-{{ checksum ".tool-versions" }}-{{
              checksum "go.mod" }}
            - aperture-asdf-cache-v9-{{ checksum "~/month" }}-<<
              parameters.cache_name >>-
      - run:
          name: Install ASDF tools
          environment:
            TOOLS: << parameters.tools >>
          command: .circleci/scripts/asdf_install.sh
  asdf_save_cache:
    parameters:
      cache_name:
        type: string
        description: "Name of asdf cache"
        default: "default"
    steps:
      - save_cache:
          name: Save ASDF cache
          key:
            aperture-asdf-cache-v9-{{ checksum "~/month" }}-<<
            parameters.cache_name >>-{{ checksum ".tool-versions" }}-{{ checksum
            "go.mod" }}
          paths:
            - ~/.asdf
  opsninja_install:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "10:d1:92:4e:2a:55:81:c9:82:c2:74:ce:6d:0e:e8:a8" # fluxninja/cloud R/O
      - run:
          name: Install opsninja and its dependencies
          command: |
            # We need R/O access to cloud repository to be able to fetch opsninja library
            # FIXME: make "releases" of opsninja library somehow, even as a separate repository
            # to limit exposure.
            export CLOUD_RO_KEY_FINGERPRINT="10:d1:92:4e:2a:55:81:c9:82:c2:74:ce:6d:0e:e8:a8"
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_$(echo "${CLOUD_RO_KEY_FINGERPRINT}" | tr -d ':')"
            export SSH_AUTH_SOCK=""
            # Bust asdf cache as our opsninja version is always 0.0.0
            pip uninstall -y opsninja
            pip install 'git+ssh://git@github.com/fluxninja/cloud@main#egg=opsninja&subdirectory=ops/apps/opsninja/'
            asdf reshim

jobs:
  release-components:
    executor: python-cimg-executor
    steps:
      - checkout
      - asdf_install:
          cache_name: release
          tools: |-
            python
            gcloud
      - opsninja_install
      - run:
          name: Schedule release jobs
          working_directory: ops/apps/opsninja
          command: fn circleci trigger-release --tag << pipeline.git.tag >>
      - asdf_save_cache:
          cache_name: release

  helm-release:
    executor: base-cimg-executor
    steps:
      - add_ssh_keys:
          fingerprints:
            - "44:8f:25:14:ad:f5:55:a5:a9:37:b2:21:7e:15:8a:ab" # fluxninja/aperture R/W
      - checkout
      - run:
          name: "Package and release Helm Chart"
          command: |
            export APERTURE_RW_KEY_FINGERPRINT="44:8f:25:14:ad:f5:55:a5:a9:37:b2:21:7e:15:8a:ab"
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_$(echo "${APERTURE_RW_KEY_FINGERPRINT}" | tr -d ':')"
            export SSH_AUTH_SOCK=""
            .circleci/scripts/helm_release.sh

workflows:
  version: 2

  filter-paths-main:
    when:
      and:
        - equal: [main, << pipeline.git.branch >>]
        - not:
            matches:
              &is_not_empty_tag {
                value: << pipeline.git.tag >>,
                pattern: "^.+$",
              }
        - not: &scheduled
            equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - path-filtering/filter: &path_filtering_job
          base-revision: << pipeline.git.base_revision >>
          config-path: .circleci/continue-workflows.yml
          mapping: |
            .dockerignore updated-aperture true
            (cmd|pkg|extensions|api|test)/.* updated-aperture true
            packaging/agent/.* updated-aperture-agent-packaging true
            packaging/cli/.* updated-aperturectl-packaging true
            operator/(api|config|controllers|hack)/.*|operator/main.go updated-aperture-operator true
            (go.mod|go.sum) updated-aperture true
            docs/.*|.github/styles/Vocab/FluxNinja/.* updated-aperture-docs true
            manifests/charts/.* updated-aperture-charts true
            operator/config/crd/bases/.* updated-aperture-charts true
            playground/resources/demo-app/.* updated-demo-app true
            playground/resources/java-demo-app/.* updated-java-demo-app true
            sdks/aperture-go/.* updated-aperture-go true
            sdks/aperture-js/.* updated-aperture-js true
            sdks/aperture-java/.* updated-aperture-java true
            sdks/aperture-py/.* updated-aperture-py true
            cmd/sdk-validator/.* updated-sdk-validator true
            blueprints/.*|playground/tanka/.*|playground/scenarios/demo-app/manifests/.* updated-blueprints true

  filter-paths-pr:
    when:
      and:
        - not:
            equal: [main, << pipeline.git.branch >>]
        - not:
            matches: *is_not_empty_tag
        - not: *scheduled
    jobs:
      - path-filtering/filter:
          <<: *path_filtering_job
          base-revision: main

  release-components:
    when:
      matches:
        { value: << pipeline.git.tag >>, pattern: "^releases/(?!charts).*$" }
    jobs:
      - release-components:
          # both this and workflow's when is needed
          filters:
            branches:
              ignore: /.+/
            tags:
              only: /^releases\/.*$/

  helm-release:
    when:
      matches:
        { value: << pipeline.git.tag >>, pattern: "^releases/charts/.*/v.*" }
    jobs:
      - helm-release:
          filters:
            tags:
              only: /^releases/charts/.*/v.*/

  post-release:
    when:
      matches: { value: << pipeline.git.tag >>, pattern: "^v.*$" }
    jobs:
      - continuation/continue:
          filters:
            branches:
              ignore: /.+/
            tags:
              only: /^v.*$/
          configuration_path: .circleci/post-release.yaml
