version: 2.1

executors:
  base-cimg-executor:
    docker:
      - image: cimg/base:2021.07

jobs:
  publish-protobuf-files:
    parameters:
      tag:
        type: string
        description: What git tag to use when tagging remote repository
    executor: base-cimg-executor
    steps:
      - checkout
      - asdf_install:
          cache_name: release-protobuf
          tools: &tools_list |-
            buf
            python
      - opsninja_install
      - run:
          name: Login to buf.build
          command: |
            echo ${BUF_BUILD_TOKEN} | buf registry login --username kklimonda-fn --token-stdin
      - run:
          name: Publish protobuf to buf.build
          command: |
            fn release publish-aperture-protobuf \
            --path /home/circleci/project/api/ \
            --tag << parameters.tag >>
      - asdf_save_cache:
          tools: *tools_list
          cache_name: release-protobuf

  tag-github-repository:
    executor: base-cimg-executor
    parameters:
      repository:
        type: string
        description: Github repository to tag (organization/repository)
      deployment-key:
        type: string
        description: Deployment key to use when interacting with remote repository
      tag:
        type: string
        description: What git tag to use when tagging remote repository
    steps:
      - add_ssh_keys:
          fingerprints:
            - << parameters.deployment-key >>
      - run:
          name: Fetch git ssh host keys and add them to known_hosts
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Configure git identity for tag annotations
          command: |
            git config --global user.name "CircleCI-Gitbot"
            git config --global user.email "circleci-gitbot@fluxninja.com"
      - run:
          name: Checkout github repository
          command: |
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_$(echo "<< parameters.deployment-key >>" | tr -d ':')"
            export SSH_AUTH_SOCK=""
            git clone ssh://git@github.com/<< parameters.repository >> /home/circleci/project
      - run:
          name: Create release tag in the repository
          command: |
            cd /home/circleci/project
            git tag --annotate -m "Releasing version << parameters.tag >>" << parameters.tag >>
      - run:
          name: Push release tags to remote repository
          command: |
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_$(echo "<< parameters.deployment-key >>" | tr -d ':')"
            export SSH_AUTH_SOCK=""
            cd /home/circleci/project
            git push origin --tags

workflows:
  version: 2

  tag-aperture-blueprints:
    when: &job-when-clause
      matches: { value: << pipeline.git.tag >>, pattern: ^v.*$ }
    jobs:
      - tag-github-repository: &tag-github-repository
          # both this and workflow's when is needed
          filters:
            branches:
              ignore: /.+/
            tags:
              only: /^v.*/
          name: tag-aperture-blueprints
          repository: fluxninja/aperture-blueprints
          tag: << pipeline.git.tag >>
          deployment-key: f5:19:15:04:d3:5d:f4:66:3e:24:4f:7f:c6:e8:82:68

  tag-aperture-go-sdk:
    when: *job-when-clause
    jobs:
      - tag-github-repository:
          <<: *tag-github-repository
          name: tag-aperture-go-sdk
          repository: fluxninja/aperture-go
          deployment-key: af:55:26:47:84:7f:0e:36:6b:74:25:19:64:4a:f2:41

  publish-protobuf-files:
    when: *job-when-clause
    jobs:
      - publish-protobuf-files:
          filters:
            branches:
              ignore: /.+/
            tags:
              only: /^v.*/
          tag: << pipeline.git.tag >>


commands:
  asdf_install:
    description: "Install tools using ASDF"
    parameters:
      tools:
        type: string
        description:
          "Newline separated list of tools to install. If empty, will install
          everything."
        default: ""
      cache_name:
        type: string
        description: "Name of asdf cache"
        default: "default"
    steps:
      - run:
          name: Install ASDF
          command: |
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.2
            printf '\nsource "${HOME}/.asdf/asdf.sh"\n' >> "${BASH_ENV}"
            date +%m > ~/month
            date +%d > ~/day
            echo "<<parameters.tools>>" > ~/installed-tools
      # We need to restore ASDF cache after installing, otherwise we will try to clone it to non-empty dir
      - restore_cache:
          name: Restore ASDF cache
          keys:
            - aperture-asdf-cache-v7-{{ checksum "~/month" }}-<< parameters.cache_name >>-{{ checksum ".tool-versions" }}-{{ checksum "go.mod" }}-{{ checksum "~/installed-tools" }}
            - aperture-asdf-cache-v7-{{ checksum "~/month" }}-<< parameters.cache_name >>-
      - run:
          name: Install ASDF tools
          environment:
            TOOLS: << parameters.tools >>
          command: .circleci/scripts/asdf_install.sh
  asdf_save_cache:
    parameters:
      cache_name:
        type: string
        description: "Name of asdf cache"
        default: "default"
      tools:
        type: string
        description: Newline separated list of tools that has been installed
        default: ""
    steps:
      - save_cache:
          name: Save ASDF cache
          key: aperture-asdf-cache-v7-{{ checksum "~/month" }}-<< parameters.cache_name >>-{{ checksum ".tool-versions" }}-{{ checksum "go.mod" }}-{{ checksum "~/installed-tools" }}
          paths:
            - ~/.asdf
  opsninja_install:
    parameters:
      branch:
        type: string
        description: opsninja branch to install tools from
        default: main
    steps:
      - add_ssh_keys:
          fingerprints:
            - "8d:43:0f:09:ed:86:44:23:4f:43:88:29:71:bf:92:e7" # fluxninja/cloud R/O
      - run:
          name: Install opsninja and its dependencies
          command: |
            # We need R/O access to cloud repository to be able to fetch opsninja library
            # FIXME: make "releases" of opsninja library somehow, even as a separate repository
            # to limit exposure.
            export CLOUD_RO_KEY_FINGERPRINT="8d:43:0f:09:ed:86:44:23:4f:43:88:29:71:bf:92:e7"
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_$(echo "${CLOUD_RO_KEY_FINGERPRINT}" | tr -d ':')"
            export SSH_AUTH_SOCK=""
            # Bust asdf cache as our opsninja version is always 0.0.0
            pip uninstall -y opsninja
            pip install 'git+ssh://git@github.com/fluxninja/cloud@<<parameters.branch>>#egg=opsninja&subdirectory=ops/apps/opsninja/'
            asdf reshim
