version: 2.1

executors:
  base-cimg-executor:
    docker:
      - image: cimg/base:2021.07
  ubuntu-18-executor:
    docker:
      - image: cimg/base:2022.12-18.04

jobs:
  publish-protobuf-files:
    parameters:
      tag:
        type: string
        description: What git tag to use when tagging remote repository
    executor: base-cimg-executor
    steps:
      - checkout
      - asdf_install:
          cache_name: release-protobuf
          tools: &tools_list |-
            buf
            python
      - opsninja_install
      - run:
          name: Login to buf.build
          command: |
            echo ${BUF_BUILD_TOKEN} | buf registry login --username ${BUF_BUILD_USERNAME} --token-stdin
      - run:
          name: Publish protobuf to buf.build
          command: |
            fn release publish-aperture-protobuf \
            --path /home/circleci/project/api/ \
            --tag << parameters.tag >>
      - asdf_save_cache:
          tools: *tools_list
          cache_name: release-protobuf

  publish-aperture-java-release:
    parameters:
      path:
        type: string
        description: Path to aperture-java
        default: sdks/aperture-java
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-v1-{{ checksum <<parameters.path>>/"build.gradle.kts" }}
            - gradle-v1-
      # See https://discuss.circleci.com/t/gpg-keys-as-environment-variables/28641
      - run:
          name: Publish to Sonatype
          command: |
            cd <<parameters.path>>
            GPG_PRIVATE_KEY=$(echo -e ${GPG_PRIVATE_KEY}) gradle assemble publishToSonatype
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-v1-{{ checksum <<parameters.path>>/"build.gradle.kts" }}

  publish-packages:
    parameters:
      workspace-name:
        type: string
        description:
          the name of the workspace to which built packages should be added
        default: packages
      goarch:
        type: string
        description: the GOARCH to use for the build
        default: amd64
      component:
        type: string
        description: the component to build
      tag:
        type: string
        description: The release tag
    executor: ubuntu-18-executor
    environment:
      PACKAGES_DIR: "/tmp/packages"
      GOARCH: <<parameters.goarch>>
      COMPONENT: <<parameters.component>>
      VERSION: <<parameters.tag>>
    steps:
      - checkout
      - asdf_install:
          cache_name: aperture-{{ .Environment.COMPONENT }}-packages
          tools: |-
            golang
      - restore_cache:
          name: Restore go cache
          keys:
            - aperture-{{ .Environment.COMPONENT }}-packages-go-cache
      - run:
          name: "Compile binaries"
          command: ./.circleci/scripts/compile.sh "${COMPONENT}"
      - run:
          name: Install nFPM
          command: ./.circleci/scripts/install_nfpm.sh
      - run:
          name: Package
          command: ./.circleci/scripts/nfpm_package.sh
      - run: &install-gh-cli
          name: Install GH cli
          command: |
            type -p curl >/dev/null || sudo apt install curl -y
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
            && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y
      - run:
          name: Attach packages to release
          command: |
            to_upload=( $(ls dist/packages/*) )
            [ "${COMPONENT}" != "cli" ] || to_upload+=("dist/aperturectl")
            gh release upload "${VERSION}" "${to_upload[@]}" --repo=fluxninja/aperture

      - save_cache:
          name: Save go cache
          key: aperture-{{ .Environment.COMPONENT }}-packages-go-cache
          paths:
            - ../.cache/go-build
          when: on_success
      - asdf_save_cache:
          cache_name: aperture-{{ .Environment.COMPONENT }}-packages

  update-brews:
    parameters:
      tag:
        type: string
        description: The release tag
      deployment-key:
        type: string
        description:
          Deployment key to use when interacting with remote repository
    executor: ubuntu-18-executor
    environment:
      TAP_REPO: /home/circleci/taps
      APERTURE_DIR: /home/circleci/project
      VERSION: <<parameters.tag>>
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - << parameters.deployment-key >>
      - run:
          name: "Prepare brews repository"
          command: |
            ssh-keyscan github.com >> ~/.ssh/known_hosts

            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_${DEPLOYMENT_KEY//:/}"
            export SSH_AUTH_SOCK=""
            declare -p GIT_SSH_COMMAND SSH_AUTH_SOCK >> "${BASH_ENV}"

            git config --global user.name "CircleCI-Gitbot"
            git config --global user.email "circleci-gitbot@fluxninja.com"

            git clone --depth=1 git@github.com:fluxninja/homebrew-aperture.git "${TAP_REPO}"
            # TODO: Select proper branch!
          environment:
            DEPLOYMENT_KEY: << parameters.deployment-key >>
      - run:
          name: "Update brew formulas"
          command: |
            "${TAP_REPO}/scripts/update_brews.py" "${TAP_REPO}/Formulas/*.rb"
      - run: *install-gh-cli
      - opsninja_install
      - run:
          name: "Update brew repository"
          command: |
            cd "${TAP_REPO}"
            git add .
            git commit -m "Update brews for release ${VERSION}"
            release_args=(
              --repo-path "${TAP_REPO}"
              --version "${VERSION}"
              --ref "<TODO>"
              --message "Release ${VERSION}"
              --create-branch
              --push
            )
            fn release create-release "${release_args[@]]}"
            # TODO: If release is final and "latest", make sure to update main to point to the new commit

workflows:
  version: 2

  publish-protobuf-files:
    when:
      matches: { value: << pipeline.git.tag >>, pattern: ^v.*$ }
    jobs:
      - publish-protobuf-files:
          filters: &release-filters
            branches:
              ignore: /.+/
            tags:
              only: /^v.*/
          tag: << pipeline.git.tag >>

      - publish-aperture-java-release:
          path: sdks/aperture-java
          context: sonatype
          # both this and workflow's when is needed
          filters: *release-filters

      - publish-packages:
          filters: *release-filters
          tag: << pipeline.git.tag >>
          matrix:
            parameters:
              component:
                - agent
                - cli

      - update-brews:
          filters:
            <<: *release-filters
            tags:
              only: /^v.*/
              ignore: /^.*-rc.*/
          tag: << pipeline.git.tag >>
          deployment-key: "a4:df:98:54:5d:18:ba:a1:01:66:88:e2:26:e3:f2:eb"

commands:
  asdf_install:
    description: "Install tools using ASDF"
    parameters:
      tools:
        type: string
        description:
          "Newline separated list of tools to install. If empty, will install
          everything."
        default: ""
      cache_name:
        type: string
        description: "Name of asdf cache"
        default: "default"
    steps:
      - run:
          name: Install ASDF
          command: |
            git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.2
            printf '\nsource "${HOME}/.asdf/asdf.sh"\n' >> "${BASH_ENV}"
            date +%m > ~/month
            date +%d > ~/day
            echo "<<parameters.tools>>" > ~/installed-tools
      # We need to restore ASDF cache after installing, otherwise we will try to clone it to non-empty dir
      - restore_cache:
          name: Restore ASDF cache
          keys:
            - aperture-asdf-cache-v7-{{ checksum "~/month" }}-<<
              parameters.cache_name >>-{{ checksum ".tool-versions" }}-{{
              checksum "go.mod" }}-{{ checksum "~/installed-tools" }}
            - aperture-asdf-cache-v7-{{ checksum "~/month" }}-<<
              parameters.cache_name >>-
      - run:
          name: Install ASDF tools
          environment:
            TOOLS: << parameters.tools >>
          command: .circleci/scripts/asdf_install.sh
  asdf_save_cache:
    parameters:
      cache_name:
        type: string
        description: "Name of asdf cache"
        default: "default"
      tools:
        type: string
        description: Newline separated list of tools that has been installed
        default: ""
    steps:
      - save_cache:
          name: Save ASDF cache
          key:
            aperture-asdf-cache-v7-{{ checksum "~/month" }}-<<
            parameters.cache_name >>-{{ checksum ".tool-versions" }}-{{ checksum
            "go.mod" }}-{{ checksum "~/installed-tools" }}
          paths:
            - ~/.asdf
  opsninja_install:
    parameters:
      branch:
        type: string
        description: opsninja branch to install tools from
        default: main
    steps:
      - add_ssh_keys:
          fingerprints:
            - "10:d1:92:4e:2a:55:81:c9:82:c2:74:ce:6d:0e:e8:a8" # fluxninja/cloud R/O
      - run:
          name: Install opsninja and its dependencies
          command: |
            # We need R/O access to cloud repository to be able to fetch opsninja library
            # FIXME: make "releases" of opsninja library somehow, even as a separate repository
            # to limit exposure.
            export CLOUD_RO_KEY_FINGERPRINT="10:d1:92:4e:2a:55:81:c9:82:c2:74:ce:6d:0e:e8:a8"
            export GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa_$(echo "${CLOUD_RO_KEY_FINGERPRINT}" | tr -d ':')"
            export SSH_AUTH_SOCK=""
            # Bust asdf cache as our opsninja version is always 0.0.0
            pip uninstall -y opsninja
            pip install 'git+ssh://git@github.com/fluxninja/cloud@<<parameters.branch>>#egg=opsninja&subdirectory=ops/apps/opsninja/'
            asdf reshim
