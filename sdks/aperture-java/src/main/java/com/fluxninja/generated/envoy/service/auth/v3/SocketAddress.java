// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/auth/v3/authz_stripped.proto

package com.fluxninja.generated.envoy.service.auth.v3;

/**
 * <pre>
 * [#next-free-field: 7]
 * </pre>
 *
 * Protobuf type {@code envoy.service.auth.v3.SocketAddress}
 */
public final class SocketAddress extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:envoy.service.auth.v3.SocketAddress)
    SocketAddressOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SocketAddress.newBuilder() to construct.
  private SocketAddress(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SocketAddress() {
    protocol_ = 0;
    address_ = "";
    resolverName_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SocketAddress();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SocketAddress(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            protocol_ = rawValue;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            address_ = s;
            break;
          }
          case 24: {
            portSpecifier_ = input.readUInt32();
            portSpecifierCase_ = 3;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            portSpecifierCase_ = 4;
            portSpecifier_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            resolverName_ = s;
            break;
          }
          case 48: {

            ipv4Compat_ = input.readBool();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.envoy.service.auth.v3.AuthzStrippedProto.internal_static_envoy_service_auth_v3_SocketAddress_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.envoy.service.auth.v3.AuthzStrippedProto.internal_static_envoy_service_auth_v3_SocketAddress_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.class, com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Builder.class);
  }

  /**
   * Protobuf enum {@code envoy.service.auth.v3.SocketAddress.Protocol}
   */
  public enum Protocol
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TCP = 0;</code>
     */
    TCP(0),
    /**
     * <code>UDP = 1;</code>
     */
    UDP(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>TCP = 0;</code>
     */
    public static final int TCP_VALUE = 0;
    /**
     * <code>UDP = 1;</code>
     */
    public static final int UDP_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Protocol valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Protocol forNumber(int value) {
      switch (value) {
        case 0: return TCP;
        case 1: return UDP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Protocol>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Protocol> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Protocol>() {
            public Protocol findValueByNumber(int number) {
              return Protocol.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.getDescriptor().getEnumTypes().get(0);
    }

    private static final Protocol[] VALUES = values();

    public static Protocol valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Protocol(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:envoy.service.auth.v3.SocketAddress.Protocol)
  }

  private int portSpecifierCase_ = 0;
  private java.lang.Object portSpecifier_;
  public enum PortSpecifierCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    PORT_VALUE(3),
    NAMED_PORT(4),
    PORTSPECIFIER_NOT_SET(0);
    private final int value;
    private PortSpecifierCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PortSpecifierCase valueOf(int value) {
      return forNumber(value);
    }

    public static PortSpecifierCase forNumber(int value) {
      switch (value) {
        case 3: return PORT_VALUE;
        case 4: return NAMED_PORT;
        case 0: return PORTSPECIFIER_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public PortSpecifierCase
  getPortSpecifierCase() {
    return PortSpecifierCase.forNumber(
        portSpecifierCase_);
  }

  public static final int PROTOCOL_FIELD_NUMBER = 1;
  private int protocol_;
  /**
   * <code>.envoy.service.auth.v3.SocketAddress.Protocol protocol = 1 [json_name = "protocol", (.validate.rules) = { ... }</code>
   * @return The enum numeric value on the wire for protocol.
   */
  @java.lang.Override public int getProtocolValue() {
    return protocol_;
  }
  /**
   * <code>.envoy.service.auth.v3.SocketAddress.Protocol protocol = 1 [json_name = "protocol", (.validate.rules) = { ... }</code>
   * @return The protocol.
   */
  @java.lang.Override public com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol getProtocol() {
    @SuppressWarnings("deprecation")
    com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol result = com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol.valueOf(protocol_);
    return result == null ? com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol.UNRECOGNIZED : result;
  }

  public static final int ADDRESS_FIELD_NUMBER = 2;
  private volatile java.lang.Object address_;
  /**
   * <pre>
   * The address for this socket. :ref:`Listeners &lt;config_listeners&gt;` will bind
   * to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
   * to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
   * It is possible to distinguish a Listener address via the prefix/suffix matching
   * in :ref:`FilterChainMatch &lt;envoy_v3_api_msg_config.listener.v3.FilterChainMatch&gt;`.] When used
   * within an upstream :ref:`BindConfig &lt;envoy_v3_api_msg_config.core.v3.BindConfig&gt;`, the address
   * controls the source address of outbound connections. For :ref:`clusters
   * &lt;envoy_v3_api_msg_config.cluster.v3.Cluster&gt;`, the cluster type determines whether the
   * address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS
   * (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized
   * via :ref:`resolver_name &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;`.
   * </pre>
   *
   * <code>string address = 2 [json_name = "address", (.validate.rules) = { ... }</code>
   * @return The address.
   */
  @java.lang.Override
  public java.lang.String getAddress() {
    java.lang.Object ref = address_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      address_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The address for this socket. :ref:`Listeners &lt;config_listeners&gt;` will bind
   * to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
   * to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
   * It is possible to distinguish a Listener address via the prefix/suffix matching
   * in :ref:`FilterChainMatch &lt;envoy_v3_api_msg_config.listener.v3.FilterChainMatch&gt;`.] When used
   * within an upstream :ref:`BindConfig &lt;envoy_v3_api_msg_config.core.v3.BindConfig&gt;`, the address
   * controls the source address of outbound connections. For :ref:`clusters
   * &lt;envoy_v3_api_msg_config.cluster.v3.Cluster&gt;`, the cluster type determines whether the
   * address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS
   * (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized
   * via :ref:`resolver_name &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;`.
   * </pre>
   *
   * <code>string address = 2 [json_name = "address", (.validate.rules) = { ... }</code>
   * @return The bytes for address.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAddressBytes() {
    java.lang.Object ref = address_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      address_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PORT_VALUE_FIELD_NUMBER = 3;
  /**
   * <code>uint32 port_value = 3 [json_name = "portValue", (.validate.rules) = { ... }</code>
   * @return Whether the portValue field is set.
   */
  @java.lang.Override
  public boolean hasPortValue() {
    return portSpecifierCase_ == 3;
  }
  /**
   * <code>uint32 port_value = 3 [json_name = "portValue", (.validate.rules) = { ... }</code>
   * @return The portValue.
   */
  @java.lang.Override
  public int getPortValue() {
    if (portSpecifierCase_ == 3) {
      return (java.lang.Integer) portSpecifier_;
    }
    return 0;
  }

  public static final int NAMED_PORT_FIELD_NUMBER = 4;
  /**
   * <pre>
   * This is only valid if :ref:`resolver_name
   * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
   * named resolver is capable of named port resolution.
   * </pre>
   *
   * <code>string named_port = 4 [json_name = "namedPort"];</code>
   * @return Whether the namedPort field is set.
   */
  public boolean hasNamedPort() {
    return portSpecifierCase_ == 4;
  }
  /**
   * <pre>
   * This is only valid if :ref:`resolver_name
   * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
   * named resolver is capable of named port resolution.
   * </pre>
   *
   * <code>string named_port = 4 [json_name = "namedPort"];</code>
   * @return The namedPort.
   */
  public java.lang.String getNamedPort() {
    java.lang.Object ref = "";
    if (portSpecifierCase_ == 4) {
      ref = portSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (portSpecifierCase_ == 4) {
        portSpecifier_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * This is only valid if :ref:`resolver_name
   * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
   * named resolver is capable of named port resolution.
   * </pre>
   *
   * <code>string named_port = 4 [json_name = "namedPort"];</code>
   * @return The bytes for namedPort.
   */
  public com.google.protobuf.ByteString
      getNamedPortBytes() {
    java.lang.Object ref = "";
    if (portSpecifierCase_ == 4) {
      ref = portSpecifier_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (portSpecifierCase_ == 4) {
        portSpecifier_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RESOLVER_NAME_FIELD_NUMBER = 5;
  private volatile java.lang.Object resolverName_;
  /**
   * <pre>
   * The name of the custom resolver. This must have been registered with Envoy. If
   * this is empty, a context dependent default applies. If the address is a concrete
   * IP address, no resolution will occur. If address is a hostname this
   * should be set for resolution other than DNS. Specifying a custom resolver with
   * ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
   * </pre>
   *
   * <code>string resolver_name = 5 [json_name = "resolverName"];</code>
   * @return The resolverName.
   */
  @java.lang.Override
  public java.lang.String getResolverName() {
    java.lang.Object ref = resolverName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      resolverName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the custom resolver. This must have been registered with Envoy. If
   * this is empty, a context dependent default applies. If the address is a concrete
   * IP address, no resolution will occur. If address is a hostname this
   * should be set for resolution other than DNS. Specifying a custom resolver with
   * ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
   * </pre>
   *
   * <code>string resolver_name = 5 [json_name = "resolverName"];</code>
   * @return The bytes for resolverName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getResolverNameBytes() {
    java.lang.Object ref = resolverName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      resolverName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IPV4_COMPAT_FIELD_NUMBER = 6;
  private boolean ipv4Compat_;
  /**
   * <pre>
   * When binding to an IPv6 address above, this enables `IPv4 compatibility
   * &lt;https://tools.ietf.org/html/rfc3493#page-11&gt;`_. Binding to ``::`` will
   * allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
   * IPv6 space as ``::FFFF:&lt;IPv4-address&gt;``.
   * </pre>
   *
   * <code>bool ipv4_compat = 6 [json_name = "ipv4Compat"];</code>
   * @return The ipv4Compat.
   */
  @java.lang.Override
  public boolean getIpv4Compat() {
    return ipv4Compat_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (protocol_ != com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol.TCP.getNumber()) {
      output.writeEnum(1, protocol_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(address_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, address_);
    }
    if (portSpecifierCase_ == 3) {
      output.writeUInt32(
          3, (int)((java.lang.Integer) portSpecifier_));
    }
    if (portSpecifierCase_ == 4) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, portSpecifier_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(resolverName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, resolverName_);
    }
    if (ipv4Compat_ != false) {
      output.writeBool(6, ipv4Compat_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (protocol_ != com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol.TCP.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, protocol_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(address_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, address_);
    }
    if (portSpecifierCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(
            3, (int)((java.lang.Integer) portSpecifier_));
    }
    if (portSpecifierCase_ == 4) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, portSpecifier_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(resolverName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, resolverName_);
    }
    if (ipv4Compat_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, ipv4Compat_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.envoy.service.auth.v3.SocketAddress)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.envoy.service.auth.v3.SocketAddress other = (com.fluxninja.generated.envoy.service.auth.v3.SocketAddress) obj;

    if (protocol_ != other.protocol_) return false;
    if (!getAddress()
        .equals(other.getAddress())) return false;
    if (!getResolverName()
        .equals(other.getResolverName())) return false;
    if (getIpv4Compat()
        != other.getIpv4Compat()) return false;
    if (!getPortSpecifierCase().equals(other.getPortSpecifierCase())) return false;
    switch (portSpecifierCase_) {
      case 3:
        if (getPortValue()
            != other.getPortValue()) return false;
        break;
      case 4:
        if (!getNamedPort()
            .equals(other.getNamedPort())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PROTOCOL_FIELD_NUMBER;
    hash = (53 * hash) + protocol_;
    hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
    hash = (53 * hash) + getAddress().hashCode();
    hash = (37 * hash) + RESOLVER_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getResolverName().hashCode();
    hash = (37 * hash) + IPV4_COMPAT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getIpv4Compat());
    switch (portSpecifierCase_) {
      case 3:
        hash = (37 * hash) + PORT_VALUE_FIELD_NUMBER;
        hash = (53 * hash) + getPortValue();
        break;
      case 4:
        hash = (37 * hash) + NAMED_PORT_FIELD_NUMBER;
        hash = (53 * hash) + getNamedPort().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.envoy.service.auth.v3.SocketAddress prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * [#next-free-field: 7]
   * </pre>
   *
   * Protobuf type {@code envoy.service.auth.v3.SocketAddress}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:envoy.service.auth.v3.SocketAddress)
      com.fluxninja.generated.envoy.service.auth.v3.SocketAddressOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.envoy.service.auth.v3.AuthzStrippedProto.internal_static_envoy_service_auth_v3_SocketAddress_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.envoy.service.auth.v3.AuthzStrippedProto.internal_static_envoy_service_auth_v3_SocketAddress_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.class, com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Builder.class);
    }

    // Construct using com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      protocol_ = 0;

      address_ = "";

      resolverName_ = "";

      ipv4Compat_ = false;

      portSpecifierCase_ = 0;
      portSpecifier_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.envoy.service.auth.v3.AuthzStrippedProto.internal_static_envoy_service_auth_v3_SocketAddress_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.envoy.service.auth.v3.SocketAddress getDefaultInstanceForType() {
      return com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.envoy.service.auth.v3.SocketAddress build() {
      com.fluxninja.generated.envoy.service.auth.v3.SocketAddress result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.envoy.service.auth.v3.SocketAddress buildPartial() {
      com.fluxninja.generated.envoy.service.auth.v3.SocketAddress result = new com.fluxninja.generated.envoy.service.auth.v3.SocketAddress(this);
      result.protocol_ = protocol_;
      result.address_ = address_;
      if (portSpecifierCase_ == 3) {
        result.portSpecifier_ = portSpecifier_;
      }
      if (portSpecifierCase_ == 4) {
        result.portSpecifier_ = portSpecifier_;
      }
      result.resolverName_ = resolverName_;
      result.ipv4Compat_ = ipv4Compat_;
      result.portSpecifierCase_ = portSpecifierCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.envoy.service.auth.v3.SocketAddress) {
        return mergeFrom((com.fluxninja.generated.envoy.service.auth.v3.SocketAddress)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.envoy.service.auth.v3.SocketAddress other) {
      if (other == com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.getDefaultInstance()) return this;
      if (other.protocol_ != 0) {
        setProtocolValue(other.getProtocolValue());
      }
      if (!other.getAddress().isEmpty()) {
        address_ = other.address_;
        onChanged();
      }
      if (!other.getResolverName().isEmpty()) {
        resolverName_ = other.resolverName_;
        onChanged();
      }
      if (other.getIpv4Compat() != false) {
        setIpv4Compat(other.getIpv4Compat());
      }
      switch (other.getPortSpecifierCase()) {
        case PORT_VALUE: {
          setPortValue(other.getPortValue());
          break;
        }
        case NAMED_PORT: {
          portSpecifierCase_ = 4;
          portSpecifier_ = other.portSpecifier_;
          onChanged();
          break;
        }
        case PORTSPECIFIER_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.envoy.service.auth.v3.SocketAddress parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.envoy.service.auth.v3.SocketAddress) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int portSpecifierCase_ = 0;
    private java.lang.Object portSpecifier_;
    public PortSpecifierCase
        getPortSpecifierCase() {
      return PortSpecifierCase.forNumber(
          portSpecifierCase_);
    }

    public Builder clearPortSpecifier() {
      portSpecifierCase_ = 0;
      portSpecifier_ = null;
      onChanged();
      return this;
    }


    private int protocol_ = 0;
    /**
     * <code>.envoy.service.auth.v3.SocketAddress.Protocol protocol = 1 [json_name = "protocol", (.validate.rules) = { ... }</code>
     * @return The enum numeric value on the wire for protocol.
     */
    @java.lang.Override public int getProtocolValue() {
      return protocol_;
    }
    /**
     * <code>.envoy.service.auth.v3.SocketAddress.Protocol protocol = 1 [json_name = "protocol", (.validate.rules) = { ... }</code>
     * @param value The enum numeric value on the wire for protocol to set.
     * @return This builder for chaining.
     */
    public Builder setProtocolValue(int value) {
      
      protocol_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.envoy.service.auth.v3.SocketAddress.Protocol protocol = 1 [json_name = "protocol", (.validate.rules) = { ... }</code>
     * @return The protocol.
     */
    @java.lang.Override
    public com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol getProtocol() {
      @SuppressWarnings("deprecation")
      com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol result = com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol.valueOf(protocol_);
      return result == null ? com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol.UNRECOGNIZED : result;
    }
    /**
     * <code>.envoy.service.auth.v3.SocketAddress.Protocol protocol = 1 [json_name = "protocol", (.validate.rules) = { ... }</code>
     * @param value The protocol to set.
     * @return This builder for chaining.
     */
    public Builder setProtocol(com.fluxninja.generated.envoy.service.auth.v3.SocketAddress.Protocol value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      protocol_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.envoy.service.auth.v3.SocketAddress.Protocol protocol = 1 [json_name = "protocol", (.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearProtocol() {
      
      protocol_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object address_ = "";
    /**
     * <pre>
     * The address for this socket. :ref:`Listeners &lt;config_listeners&gt;` will bind
     * to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
     * to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
     * It is possible to distinguish a Listener address via the prefix/suffix matching
     * in :ref:`FilterChainMatch &lt;envoy_v3_api_msg_config.listener.v3.FilterChainMatch&gt;`.] When used
     * within an upstream :ref:`BindConfig &lt;envoy_v3_api_msg_config.core.v3.BindConfig&gt;`, the address
     * controls the source address of outbound connections. For :ref:`clusters
     * &lt;envoy_v3_api_msg_config.cluster.v3.Cluster&gt;`, the cluster type determines whether the
     * address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS
     * (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized
     * via :ref:`resolver_name &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;`.
     * </pre>
     *
     * <code>string address = 2 [json_name = "address", (.validate.rules) = { ... }</code>
     * @return The address.
     */
    public java.lang.String getAddress() {
      java.lang.Object ref = address_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        address_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The address for this socket. :ref:`Listeners &lt;config_listeners&gt;` will bind
     * to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
     * to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
     * It is possible to distinguish a Listener address via the prefix/suffix matching
     * in :ref:`FilterChainMatch &lt;envoy_v3_api_msg_config.listener.v3.FilterChainMatch&gt;`.] When used
     * within an upstream :ref:`BindConfig &lt;envoy_v3_api_msg_config.core.v3.BindConfig&gt;`, the address
     * controls the source address of outbound connections. For :ref:`clusters
     * &lt;envoy_v3_api_msg_config.cluster.v3.Cluster&gt;`, the cluster type determines whether the
     * address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS
     * (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized
     * via :ref:`resolver_name &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;`.
     * </pre>
     *
     * <code>string address = 2 [json_name = "address", (.validate.rules) = { ... }</code>
     * @return The bytes for address.
     */
    public com.google.protobuf.ByteString
        getAddressBytes() {
      java.lang.Object ref = address_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        address_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The address for this socket. :ref:`Listeners &lt;config_listeners&gt;` will bind
     * to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
     * to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
     * It is possible to distinguish a Listener address via the prefix/suffix matching
     * in :ref:`FilterChainMatch &lt;envoy_v3_api_msg_config.listener.v3.FilterChainMatch&gt;`.] When used
     * within an upstream :ref:`BindConfig &lt;envoy_v3_api_msg_config.core.v3.BindConfig&gt;`, the address
     * controls the source address of outbound connections. For :ref:`clusters
     * &lt;envoy_v3_api_msg_config.cluster.v3.Cluster&gt;`, the cluster type determines whether the
     * address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS
     * (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized
     * via :ref:`resolver_name &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;`.
     * </pre>
     *
     * <code>string address = 2 [json_name = "address", (.validate.rules) = { ... }</code>
     * @param value The address to set.
     * @return This builder for chaining.
     */
    public Builder setAddress(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      address_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The address for this socket. :ref:`Listeners &lt;config_listeners&gt;` will bind
     * to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
     * to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
     * It is possible to distinguish a Listener address via the prefix/suffix matching
     * in :ref:`FilterChainMatch &lt;envoy_v3_api_msg_config.listener.v3.FilterChainMatch&gt;`.] When used
     * within an upstream :ref:`BindConfig &lt;envoy_v3_api_msg_config.core.v3.BindConfig&gt;`, the address
     * controls the source address of outbound connections. For :ref:`clusters
     * &lt;envoy_v3_api_msg_config.cluster.v3.Cluster&gt;`, the cluster type determines whether the
     * address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS
     * (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized
     * via :ref:`resolver_name &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;`.
     * </pre>
     *
     * <code>string address = 2 [json_name = "address", (.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearAddress() {
      
      address_ = getDefaultInstance().getAddress();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The address for this socket. :ref:`Listeners &lt;config_listeners&gt;` will bind
     * to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
     * to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
     * It is possible to distinguish a Listener address via the prefix/suffix matching
     * in :ref:`FilterChainMatch &lt;envoy_v3_api_msg_config.listener.v3.FilterChainMatch&gt;`.] When used
     * within an upstream :ref:`BindConfig &lt;envoy_v3_api_msg_config.core.v3.BindConfig&gt;`, the address
     * controls the source address of outbound connections. For :ref:`clusters
     * &lt;envoy_v3_api_msg_config.cluster.v3.Cluster&gt;`, the cluster type determines whether the
     * address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS
     * (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized
     * via :ref:`resolver_name &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;`.
     * </pre>
     *
     * <code>string address = 2 [json_name = "address", (.validate.rules) = { ... }</code>
     * @param value The bytes for address to set.
     * @return This builder for chaining.
     */
    public Builder setAddressBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      address_ = value;
      onChanged();
      return this;
    }

    /**
     * <code>uint32 port_value = 3 [json_name = "portValue", (.validate.rules) = { ... }</code>
     * @return Whether the portValue field is set.
     */
    public boolean hasPortValue() {
      return portSpecifierCase_ == 3;
    }
    /**
     * <code>uint32 port_value = 3 [json_name = "portValue", (.validate.rules) = { ... }</code>
     * @return The portValue.
     */
    public int getPortValue() {
      if (portSpecifierCase_ == 3) {
        return (java.lang.Integer) portSpecifier_;
      }
      return 0;
    }
    /**
     * <code>uint32 port_value = 3 [json_name = "portValue", (.validate.rules) = { ... }</code>
     * @param value The portValue to set.
     * @return This builder for chaining.
     */
    public Builder setPortValue(int value) {
      portSpecifierCase_ = 3;
      portSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 port_value = 3 [json_name = "portValue", (.validate.rules) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearPortValue() {
      if (portSpecifierCase_ == 3) {
        portSpecifierCase_ = 0;
        portSpecifier_ = null;
        onChanged();
      }
      return this;
    }

    /**
     * <pre>
     * This is only valid if :ref:`resolver_name
     * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
     * named resolver is capable of named port resolution.
     * </pre>
     *
     * <code>string named_port = 4 [json_name = "namedPort"];</code>
     * @return Whether the namedPort field is set.
     */
    @java.lang.Override
    public boolean hasNamedPort() {
      return portSpecifierCase_ == 4;
    }
    /**
     * <pre>
     * This is only valid if :ref:`resolver_name
     * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
     * named resolver is capable of named port resolution.
     * </pre>
     *
     * <code>string named_port = 4 [json_name = "namedPort"];</code>
     * @return The namedPort.
     */
    @java.lang.Override
    public java.lang.String getNamedPort() {
      java.lang.Object ref = "";
      if (portSpecifierCase_ == 4) {
        ref = portSpecifier_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (portSpecifierCase_ == 4) {
          portSpecifier_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * This is only valid if :ref:`resolver_name
     * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
     * named resolver is capable of named port resolution.
     * </pre>
     *
     * <code>string named_port = 4 [json_name = "namedPort"];</code>
     * @return The bytes for namedPort.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNamedPortBytes() {
      java.lang.Object ref = "";
      if (portSpecifierCase_ == 4) {
        ref = portSpecifier_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (portSpecifierCase_ == 4) {
          portSpecifier_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * This is only valid if :ref:`resolver_name
     * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
     * named resolver is capable of named port resolution.
     * </pre>
     *
     * <code>string named_port = 4 [json_name = "namedPort"];</code>
     * @param value The namedPort to set.
     * @return This builder for chaining.
     */
    public Builder setNamedPort(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  portSpecifierCase_ = 4;
      portSpecifier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This is only valid if :ref:`resolver_name
     * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
     * named resolver is capable of named port resolution.
     * </pre>
     *
     * <code>string named_port = 4 [json_name = "namedPort"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNamedPort() {
      if (portSpecifierCase_ == 4) {
        portSpecifierCase_ = 0;
        portSpecifier_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * This is only valid if :ref:`resolver_name
     * &lt;envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name&gt;` is specified below and the
     * named resolver is capable of named port resolution.
     * </pre>
     *
     * <code>string named_port = 4 [json_name = "namedPort"];</code>
     * @param value The bytes for namedPort to set.
     * @return This builder for chaining.
     */
    public Builder setNamedPortBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      portSpecifierCase_ = 4;
      portSpecifier_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object resolverName_ = "";
    /**
     * <pre>
     * The name of the custom resolver. This must have been registered with Envoy. If
     * this is empty, a context dependent default applies. If the address is a concrete
     * IP address, no resolution will occur. If address is a hostname this
     * should be set for resolution other than DNS. Specifying a custom resolver with
     * ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
     * </pre>
     *
     * <code>string resolver_name = 5 [json_name = "resolverName"];</code>
     * @return The resolverName.
     */
    public java.lang.String getResolverName() {
      java.lang.Object ref = resolverName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        resolverName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the custom resolver. This must have been registered with Envoy. If
     * this is empty, a context dependent default applies. If the address is a concrete
     * IP address, no resolution will occur. If address is a hostname this
     * should be set for resolution other than DNS. Specifying a custom resolver with
     * ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
     * </pre>
     *
     * <code>string resolver_name = 5 [json_name = "resolverName"];</code>
     * @return The bytes for resolverName.
     */
    public com.google.protobuf.ByteString
        getResolverNameBytes() {
      java.lang.Object ref = resolverName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        resolverName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the custom resolver. This must have been registered with Envoy. If
     * this is empty, a context dependent default applies. If the address is a concrete
     * IP address, no resolution will occur. If address is a hostname this
     * should be set for resolution other than DNS. Specifying a custom resolver with
     * ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
     * </pre>
     *
     * <code>string resolver_name = 5 [json_name = "resolverName"];</code>
     * @param value The resolverName to set.
     * @return This builder for chaining.
     */
    public Builder setResolverName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      resolverName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the custom resolver. This must have been registered with Envoy. If
     * this is empty, a context dependent default applies. If the address is a concrete
     * IP address, no resolution will occur. If address is a hostname this
     * should be set for resolution other than DNS. Specifying a custom resolver with
     * ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
     * </pre>
     *
     * <code>string resolver_name = 5 [json_name = "resolverName"];</code>
     * @return This builder for chaining.
     */
    public Builder clearResolverName() {
      
      resolverName_ = getDefaultInstance().getResolverName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the custom resolver. This must have been registered with Envoy. If
     * this is empty, a context dependent default applies. If the address is a concrete
     * IP address, no resolution will occur. If address is a hostname this
     * should be set for resolution other than DNS. Specifying a custom resolver with
     * ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
     * </pre>
     *
     * <code>string resolver_name = 5 [json_name = "resolverName"];</code>
     * @param value The bytes for resolverName to set.
     * @return This builder for chaining.
     */
    public Builder setResolverNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      resolverName_ = value;
      onChanged();
      return this;
    }

    private boolean ipv4Compat_ ;
    /**
     * <pre>
     * When binding to an IPv6 address above, this enables `IPv4 compatibility
     * &lt;https://tools.ietf.org/html/rfc3493#page-11&gt;`_. Binding to ``::`` will
     * allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
     * IPv6 space as ``::FFFF:&lt;IPv4-address&gt;``.
     * </pre>
     *
     * <code>bool ipv4_compat = 6 [json_name = "ipv4Compat"];</code>
     * @return The ipv4Compat.
     */
    @java.lang.Override
    public boolean getIpv4Compat() {
      return ipv4Compat_;
    }
    /**
     * <pre>
     * When binding to an IPv6 address above, this enables `IPv4 compatibility
     * &lt;https://tools.ietf.org/html/rfc3493#page-11&gt;`_. Binding to ``::`` will
     * allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
     * IPv6 space as ``::FFFF:&lt;IPv4-address&gt;``.
     * </pre>
     *
     * <code>bool ipv4_compat = 6 [json_name = "ipv4Compat"];</code>
     * @param value The ipv4Compat to set.
     * @return This builder for chaining.
     */
    public Builder setIpv4Compat(boolean value) {
      
      ipv4Compat_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * When binding to an IPv6 address above, this enables `IPv4 compatibility
     * &lt;https://tools.ietf.org/html/rfc3493#page-11&gt;`_. Binding to ``::`` will
     * allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
     * IPv6 space as ``::FFFF:&lt;IPv4-address&gt;``.
     * </pre>
     *
     * <code>bool ipv4_compat = 6 [json_name = "ipv4Compat"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIpv4Compat() {
      
      ipv4Compat_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:envoy.service.auth.v3.SocketAddress)
  }

  // @@protoc_insertion_point(class_scope:envoy.service.auth.v3.SocketAddress)
  private static final com.fluxninja.generated.envoy.service.auth.v3.SocketAddress DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.envoy.service.auth.v3.SocketAddress();
  }

  public static com.fluxninja.generated.envoy.service.auth.v3.SocketAddress getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SocketAddress>
      PARSER = new com.google.protobuf.AbstractParser<SocketAddress>() {
    @java.lang.Override
    public SocketAddress parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SocketAddress(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SocketAddress> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SocketAddress> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.envoy.service.auth.v3.SocketAddress getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

