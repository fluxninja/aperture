// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: envoy/service/auth/v3/authz_stripped.proto

package com.fluxninja.generated.envoy.service.auth.v3;

public interface CheckResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:envoy.service.auth.v3.CheckResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Status ``OK`` allows the request. Any other status indicates the request should be denied, and
   * for HTTP filter, if not overridden by :ref:`denied HTTP response status &lt;envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status&gt;`
   * Envoy sends ``403 Forbidden`` HTTP status code by default.
   * </pre>
   *
   * <code>.google.rpc.Status status = 1 [json_name = "status"];</code>
   * @return Whether the status field is set.
   */
  boolean hasStatus();
  /**
   * <pre>
   * Status ``OK`` allows the request. Any other status indicates the request should be denied, and
   * for HTTP filter, if not overridden by :ref:`denied HTTP response status &lt;envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status&gt;`
   * Envoy sends ``403 Forbidden`` HTTP status code by default.
   * </pre>
   *
   * <code>.google.rpc.Status status = 1 [json_name = "status"];</code>
   * @return The status.
   */
  com.fluxninja.generated.google.rpc.Status getStatus();
  /**
   * <pre>
   * Status ``OK`` allows the request. Any other status indicates the request should be denied, and
   * for HTTP filter, if not overridden by :ref:`denied HTTP response status &lt;envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status&gt;`
   * Envoy sends ``403 Forbidden`` HTTP status code by default.
   * </pre>
   *
   * <code>.google.rpc.Status status = 1 [json_name = "status"];</code>
   */
  com.fluxninja.generated.google.rpc.StatusOrBuilder getStatusOrBuilder();

  /**
   * <pre>
   * Supplies http attributes for a denied response.
   * </pre>
   *
   * <code>.envoy.service.auth.v3.DeniedHttpResponse denied_response = 2 [json_name = "deniedResponse"];</code>
   * @return Whether the deniedResponse field is set.
   */
  boolean hasDeniedResponse();
  /**
   * <pre>
   * Supplies http attributes for a denied response.
   * </pre>
   *
   * <code>.envoy.service.auth.v3.DeniedHttpResponse denied_response = 2 [json_name = "deniedResponse"];</code>
   * @return The deniedResponse.
   */
  com.fluxninja.generated.envoy.service.auth.v3.DeniedHttpResponse getDeniedResponse();
  /**
   * <pre>
   * Supplies http attributes for a denied response.
   * </pre>
   *
   * <code>.envoy.service.auth.v3.DeniedHttpResponse denied_response = 2 [json_name = "deniedResponse"];</code>
   */
  com.fluxninja.generated.envoy.service.auth.v3.DeniedHttpResponseOrBuilder getDeniedResponseOrBuilder();

  /**
   * <pre>
   * Supplies http attributes for an ok response.
   * </pre>
   *
   * <code>.envoy.service.auth.v3.OkHttpResponse ok_response = 3 [json_name = "okResponse"];</code>
   * @return Whether the okResponse field is set.
   */
  boolean hasOkResponse();
  /**
   * <pre>
   * Supplies http attributes for an ok response.
   * </pre>
   *
   * <code>.envoy.service.auth.v3.OkHttpResponse ok_response = 3 [json_name = "okResponse"];</code>
   * @return The okResponse.
   */
  com.fluxninja.generated.envoy.service.auth.v3.OkHttpResponse getOkResponse();
  /**
   * <pre>
   * Supplies http attributes for an ok response.
   * </pre>
   *
   * <code>.envoy.service.auth.v3.OkHttpResponse ok_response = 3 [json_name = "okResponse"];</code>
   */
  com.fluxninja.generated.envoy.service.auth.v3.OkHttpResponseOrBuilder getOkResponseOrBuilder();

  /**
   * <pre>
   * Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
   * filter. This metadata lives in a namespace specified by the canonical name of extension filter
   * that requires it:
   * - :ref:`envoy.filters.http.ext_authz &lt;config_http_filters_ext_authz_dynamic_metadata&gt;` for HTTP filter.
   * - :ref:`envoy.filters.network.ext_authz &lt;config_network_filters_ext_authz_dynamic_metadata&gt;` for network filter.
   * </pre>
   *
   * <code>.google.protobuf.Struct dynamic_metadata = 4 [json_name = "dynamicMetadata"];</code>
   * @return Whether the dynamicMetadata field is set.
   */
  boolean hasDynamicMetadata();
  /**
   * <pre>
   * Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
   * filter. This metadata lives in a namespace specified by the canonical name of extension filter
   * that requires it:
   * - :ref:`envoy.filters.http.ext_authz &lt;config_http_filters_ext_authz_dynamic_metadata&gt;` for HTTP filter.
   * - :ref:`envoy.filters.network.ext_authz &lt;config_network_filters_ext_authz_dynamic_metadata&gt;` for network filter.
   * </pre>
   *
   * <code>.google.protobuf.Struct dynamic_metadata = 4 [json_name = "dynamicMetadata"];</code>
   * @return The dynamicMetadata.
   */
  com.google.protobuf.Struct getDynamicMetadata();
  /**
   * <pre>
   * Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
   * filter. This metadata lives in a namespace specified by the canonical name of extension filter
   * that requires it:
   * - :ref:`envoy.filters.http.ext_authz &lt;config_http_filters_ext_authz_dynamic_metadata&gt;` for HTTP filter.
   * - :ref:`envoy.filters.network.ext_authz &lt;config_network_filters_ext_authz_dynamic_metadata&gt;` for network filter.
   * </pre>
   *
   * <code>.google.protobuf.Struct dynamic_metadata = 4 [json_name = "dynamicMetadata"];</code>
   */
  com.google.protobuf.StructOrBuilder getDynamicMetadataOrBuilder();

  public com.fluxninja.generated.envoy.service.auth.v3.CheckResponse.HttpResponseCase getHttpResponseCase();
}
