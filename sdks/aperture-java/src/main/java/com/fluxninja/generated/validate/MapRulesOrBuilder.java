// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validate/validate.proto

package com.fluxninja.generated.validate;

public interface MapRulesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:validate.MapRules)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * MinPairs specifies that this field must have the specified number of
   * KVs at a minimum
   * </pre>
   *
   * <code>optional uint64 min_pairs = 1 [json_name = "minPairs"];</code>
   * @return Whether the minPairs field is set.
   */
  boolean hasMinPairs();
  /**
   * <pre>
   * MinPairs specifies that this field must have the specified number of
   * KVs at a minimum
   * </pre>
   *
   * <code>optional uint64 min_pairs = 1 [json_name = "minPairs"];</code>
   * @return The minPairs.
   */
  long getMinPairs();

  /**
   * <pre>
   * MaxPairs specifies that this field must have the specified number of
   * KVs at a maximum
   * </pre>
   *
   * <code>optional uint64 max_pairs = 2 [json_name = "maxPairs"];</code>
   * @return Whether the maxPairs field is set.
   */
  boolean hasMaxPairs();
  /**
   * <pre>
   * MaxPairs specifies that this field must have the specified number of
   * KVs at a maximum
   * </pre>
   *
   * <code>optional uint64 max_pairs = 2 [json_name = "maxPairs"];</code>
   * @return The maxPairs.
   */
  long getMaxPairs();

  /**
   * <pre>
   * NoSparse specifies values in this field cannot be unset. This only
   * applies to map's with message value types.
   * </pre>
   *
   * <code>optional bool no_sparse = 3 [json_name = "noSparse"];</code>
   * @return Whether the noSparse field is set.
   */
  boolean hasNoSparse();
  /**
   * <pre>
   * NoSparse specifies values in this field cannot be unset. This only
   * applies to map's with message value types.
   * </pre>
   *
   * <code>optional bool no_sparse = 3 [json_name = "noSparse"];</code>
   * @return The noSparse.
   */
  boolean getNoSparse();

  /**
   * <pre>
   * Keys specifies the constraints to be applied to each key in the field.
   * </pre>
   *
   * <code>optional .validate.FieldRules keys = 4 [json_name = "keys"];</code>
   * @return Whether the keys field is set.
   */
  boolean hasKeys();
  /**
   * <pre>
   * Keys specifies the constraints to be applied to each key in the field.
   * </pre>
   *
   * <code>optional .validate.FieldRules keys = 4 [json_name = "keys"];</code>
   * @return The keys.
   */
  com.fluxninja.generated.validate.FieldRules getKeys();
  /**
   * <pre>
   * Keys specifies the constraints to be applied to each key in the field.
   * </pre>
   *
   * <code>optional .validate.FieldRules keys = 4 [json_name = "keys"];</code>
   */
  com.fluxninja.generated.validate.FieldRulesOrBuilder getKeysOrBuilder();

  /**
   * <pre>
   * Values specifies the constraints to be applied to the value of each key
   * in the field. Message values will still have their validations evaluated
   * unless skip is specified here.
   * </pre>
   *
   * <code>optional .validate.FieldRules values = 5 [json_name = "values"];</code>
   * @return Whether the values field is set.
   */
  boolean hasValues();
  /**
   * <pre>
   * Values specifies the constraints to be applied to the value of each key
   * in the field. Message values will still have their validations evaluated
   * unless skip is specified here.
   * </pre>
   *
   * <code>optional .validate.FieldRules values = 5 [json_name = "values"];</code>
   * @return The values.
   */
  com.fluxninja.generated.validate.FieldRules getValues();
  /**
   * <pre>
   * Values specifies the constraints to be applied to the value of each key
   * in the field. Message values will still have their validations evaluated
   * unless skip is specified here.
   * </pre>
   *
   * <code>optional .validate.FieldRules values = 5 [json_name = "values"];</code>
   */
  com.fluxninja.generated.validate.FieldRulesOrBuilder getValuesOrBuilder();

  /**
   * <pre>
   * IgnoreEmpty specifies that the validation rules of this field should be
   * evaluated only if the field is not empty
   * </pre>
   *
   * <code>optional bool ignore_empty = 6 [json_name = "ignoreEmpty"];</code>
   * @return Whether the ignoreEmpty field is set.
   */
  boolean hasIgnoreEmpty();
  /**
   * <pre>
   * IgnoreEmpty specifies that the validation rules of this field should be
   * evaluated only if the field is not empty
   * </pre>
   *
   * <code>optional bool ignore_empty = 6 [json_name = "ignoreEmpty"];</code>
   * @return The ignoreEmpty.
   */
  boolean getIgnoreEmpty();
}
