// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: validate/validate.proto

package com.fluxninja.generated.validate;

public interface StringRulesOrBuilder extends
    // @@protoc_insertion_point(interface_extends:validate.StringRules)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Const specifies that this field must be exactly the specified value
   * </pre>
   *
   * <code>optional string const = 1 [json_name = "const"];</code>
   * @return Whether the const field is set.
   */
  boolean hasConst();
  /**
   * <pre>
   * Const specifies that this field must be exactly the specified value
   * </pre>
   *
   * <code>optional string const = 1 [json_name = "const"];</code>
   * @return The const.
   */
  java.lang.String getConst();
  /**
   * <pre>
   * Const specifies that this field must be exactly the specified value
   * </pre>
   *
   * <code>optional string const = 1 [json_name = "const"];</code>
   * @return The bytes for const.
   */
  com.google.protobuf.ByteString
      getConstBytes();

  /**
   * <pre>
   * Len specifies that this field must be the specified number of
   * characters (Unicode code points). Note that the number of
   * characters may differ from the number of bytes in the string.
   * </pre>
   *
   * <code>optional uint64 len = 19 [json_name = "len"];</code>
   * @return Whether the len field is set.
   */
  boolean hasLen();
  /**
   * <pre>
   * Len specifies that this field must be the specified number of
   * characters (Unicode code points). Note that the number of
   * characters may differ from the number of bytes in the string.
   * </pre>
   *
   * <code>optional uint64 len = 19 [json_name = "len"];</code>
   * @return The len.
   */
  long getLen();

  /**
   * <pre>
   * MinLen specifies that this field must be the specified number of
   * characters (Unicode code points) at a minimum. Note that the number of
   * characters may differ from the number of bytes in the string.
   * </pre>
   *
   * <code>optional uint64 min_len = 2 [json_name = "minLen"];</code>
   * @return Whether the minLen field is set.
   */
  boolean hasMinLen();
  /**
   * <pre>
   * MinLen specifies that this field must be the specified number of
   * characters (Unicode code points) at a minimum. Note that the number of
   * characters may differ from the number of bytes in the string.
   * </pre>
   *
   * <code>optional uint64 min_len = 2 [json_name = "minLen"];</code>
   * @return The minLen.
   */
  long getMinLen();

  /**
   * <pre>
   * MaxLen specifies that this field must be the specified number of
   * characters (Unicode code points) at a maximum. Note that the number of
   * characters may differ from the number of bytes in the string.
   * </pre>
   *
   * <code>optional uint64 max_len = 3 [json_name = "maxLen"];</code>
   * @return Whether the maxLen field is set.
   */
  boolean hasMaxLen();
  /**
   * <pre>
   * MaxLen specifies that this field must be the specified number of
   * characters (Unicode code points) at a maximum. Note that the number of
   * characters may differ from the number of bytes in the string.
   * </pre>
   *
   * <code>optional uint64 max_len = 3 [json_name = "maxLen"];</code>
   * @return The maxLen.
   */
  long getMaxLen();

  /**
   * <pre>
   * LenBytes specifies that this field must be the specified number of bytes
   * </pre>
   *
   * <code>optional uint64 len_bytes = 20 [json_name = "lenBytes"];</code>
   * @return Whether the lenBytes field is set.
   */
  boolean hasLenBytes();
  /**
   * <pre>
   * LenBytes specifies that this field must be the specified number of bytes
   * </pre>
   *
   * <code>optional uint64 len_bytes = 20 [json_name = "lenBytes"];</code>
   * @return The lenBytes.
   */
  long getLenBytes();

  /**
   * <pre>
   * MinBytes specifies that this field must be the specified number of bytes
   * at a minimum
   * </pre>
   *
   * <code>optional uint64 min_bytes = 4 [json_name = "minBytes"];</code>
   * @return Whether the minBytes field is set.
   */
  boolean hasMinBytes();
  /**
   * <pre>
   * MinBytes specifies that this field must be the specified number of bytes
   * at a minimum
   * </pre>
   *
   * <code>optional uint64 min_bytes = 4 [json_name = "minBytes"];</code>
   * @return The minBytes.
   */
  long getMinBytes();

  /**
   * <pre>
   * MaxBytes specifies that this field must be the specified number of bytes
   * at a maximum
   * </pre>
   *
   * <code>optional uint64 max_bytes = 5 [json_name = "maxBytes"];</code>
   * @return Whether the maxBytes field is set.
   */
  boolean hasMaxBytes();
  /**
   * <pre>
   * MaxBytes specifies that this field must be the specified number of bytes
   * at a maximum
   * </pre>
   *
   * <code>optional uint64 max_bytes = 5 [json_name = "maxBytes"];</code>
   * @return The maxBytes.
   */
  long getMaxBytes();

  /**
   * <pre>
   * Pattern specifes that this field must match against the specified
   * regular expression (RE2 syntax). The included expression should elide
   * any delimiters.
   * </pre>
   *
   * <code>optional string pattern = 6 [json_name = "pattern"];</code>
   * @return Whether the pattern field is set.
   */
  boolean hasPattern();
  /**
   * <pre>
   * Pattern specifes that this field must match against the specified
   * regular expression (RE2 syntax). The included expression should elide
   * any delimiters.
   * </pre>
   *
   * <code>optional string pattern = 6 [json_name = "pattern"];</code>
   * @return The pattern.
   */
  java.lang.String getPattern();
  /**
   * <pre>
   * Pattern specifes that this field must match against the specified
   * regular expression (RE2 syntax). The included expression should elide
   * any delimiters.
   * </pre>
   *
   * <code>optional string pattern = 6 [json_name = "pattern"];</code>
   * @return The bytes for pattern.
   */
  com.google.protobuf.ByteString
      getPatternBytes();

  /**
   * <pre>
   * Prefix specifies that this field must have the specified substring at
   * the beginning of the string.
   * </pre>
   *
   * <code>optional string prefix = 7 [json_name = "prefix"];</code>
   * @return Whether the prefix field is set.
   */
  boolean hasPrefix();
  /**
   * <pre>
   * Prefix specifies that this field must have the specified substring at
   * the beginning of the string.
   * </pre>
   *
   * <code>optional string prefix = 7 [json_name = "prefix"];</code>
   * @return The prefix.
   */
  java.lang.String getPrefix();
  /**
   * <pre>
   * Prefix specifies that this field must have the specified substring at
   * the beginning of the string.
   * </pre>
   *
   * <code>optional string prefix = 7 [json_name = "prefix"];</code>
   * @return The bytes for prefix.
   */
  com.google.protobuf.ByteString
      getPrefixBytes();

  /**
   * <pre>
   * Suffix specifies that this field must have the specified substring at
   * the end of the string.
   * </pre>
   *
   * <code>optional string suffix = 8 [json_name = "suffix"];</code>
   * @return Whether the suffix field is set.
   */
  boolean hasSuffix();
  /**
   * <pre>
   * Suffix specifies that this field must have the specified substring at
   * the end of the string.
   * </pre>
   *
   * <code>optional string suffix = 8 [json_name = "suffix"];</code>
   * @return The suffix.
   */
  java.lang.String getSuffix();
  /**
   * <pre>
   * Suffix specifies that this field must have the specified substring at
   * the end of the string.
   * </pre>
   *
   * <code>optional string suffix = 8 [json_name = "suffix"];</code>
   * @return The bytes for suffix.
   */
  com.google.protobuf.ByteString
      getSuffixBytes();

  /**
   * <pre>
   * Contains specifies that this field must have the specified substring
   * anywhere in the string.
   * </pre>
   *
   * <code>optional string contains = 9 [json_name = "contains"];</code>
   * @return Whether the contains field is set.
   */
  boolean hasContains();
  /**
   * <pre>
   * Contains specifies that this field must have the specified substring
   * anywhere in the string.
   * </pre>
   *
   * <code>optional string contains = 9 [json_name = "contains"];</code>
   * @return The contains.
   */
  java.lang.String getContains();
  /**
   * <pre>
   * Contains specifies that this field must have the specified substring
   * anywhere in the string.
   * </pre>
   *
   * <code>optional string contains = 9 [json_name = "contains"];</code>
   * @return The bytes for contains.
   */
  com.google.protobuf.ByteString
      getContainsBytes();

  /**
   * <pre>
   * NotContains specifies that this field cannot have the specified substring
   * anywhere in the string.
   * </pre>
   *
   * <code>optional string not_contains = 23 [json_name = "notContains"];</code>
   * @return Whether the notContains field is set.
   */
  boolean hasNotContains();
  /**
   * <pre>
   * NotContains specifies that this field cannot have the specified substring
   * anywhere in the string.
   * </pre>
   *
   * <code>optional string not_contains = 23 [json_name = "notContains"];</code>
   * @return The notContains.
   */
  java.lang.String getNotContains();
  /**
   * <pre>
   * NotContains specifies that this field cannot have the specified substring
   * anywhere in the string.
   * </pre>
   *
   * <code>optional string not_contains = 23 [json_name = "notContains"];</code>
   * @return The bytes for notContains.
   */
  com.google.protobuf.ByteString
      getNotContainsBytes();

  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated string in = 10 [json_name = "in"];</code>
   * @return A list containing the in.
   */
  java.util.List<java.lang.String>
      getInList();
  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated string in = 10 [json_name = "in"];</code>
   * @return The count of in.
   */
  int getInCount();
  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated string in = 10 [json_name = "in"];</code>
   * @param index The index of the element to return.
   * @return The in at the given index.
   */
  java.lang.String getIn(int index);
  /**
   * <pre>
   * In specifies that this field must be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated string in = 10 [json_name = "in"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the in at the given index.
   */
  com.google.protobuf.ByteString
      getInBytes(int index);

  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated string not_in = 11 [json_name = "notIn"];</code>
   * @return A list containing the notIn.
   */
  java.util.List<java.lang.String>
      getNotInList();
  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated string not_in = 11 [json_name = "notIn"];</code>
   * @return The count of notIn.
   */
  int getNotInCount();
  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated string not_in = 11 [json_name = "notIn"];</code>
   * @param index The index of the element to return.
   * @return The notIn at the given index.
   */
  java.lang.String getNotIn(int index);
  /**
   * <pre>
   * NotIn specifies that this field cannot be equal to one of the specified
   * values
   * </pre>
   *
   * <code>repeated string not_in = 11 [json_name = "notIn"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the notIn at the given index.
   */
  com.google.protobuf.ByteString
      getNotInBytes(int index);

  /**
   * <pre>
   * Email specifies that the field must be a valid email address as
   * defined by RFC 5322
   * </pre>
   *
   * <code>bool email = 12 [json_name = "email"];</code>
   * @return Whether the email field is set.
   */
  boolean hasEmail();
  /**
   * <pre>
   * Email specifies that the field must be a valid email address as
   * defined by RFC 5322
   * </pre>
   *
   * <code>bool email = 12 [json_name = "email"];</code>
   * @return The email.
   */
  boolean getEmail();

  /**
   * <pre>
   * Hostname specifies that the field must be a valid hostname as
   * defined by RFC 1034. This constraint does not support
   * internationalized domain names (IDNs).
   * </pre>
   *
   * <code>bool hostname = 13 [json_name = "hostname"];</code>
   * @return Whether the hostname field is set.
   */
  boolean hasHostname();
  /**
   * <pre>
   * Hostname specifies that the field must be a valid hostname as
   * defined by RFC 1034. This constraint does not support
   * internationalized domain names (IDNs).
   * </pre>
   *
   * <code>bool hostname = 13 [json_name = "hostname"];</code>
   * @return The hostname.
   */
  boolean getHostname();

  /**
   * <pre>
   * Ip specifies that the field must be a valid IP (v4 or v6) address.
   * Valid IPv6 addresses should not include surrounding square brackets.
   * </pre>
   *
   * <code>bool ip = 14 [json_name = "ip"];</code>
   * @return Whether the ip field is set.
   */
  boolean hasIp();
  /**
   * <pre>
   * Ip specifies that the field must be a valid IP (v4 or v6) address.
   * Valid IPv6 addresses should not include surrounding square brackets.
   * </pre>
   *
   * <code>bool ip = 14 [json_name = "ip"];</code>
   * @return The ip.
   */
  boolean getIp();

  /**
   * <pre>
   * Ipv4 specifies that the field must be a valid IPv4 address.
   * </pre>
   *
   * <code>bool ipv4 = 15 [json_name = "ipv4"];</code>
   * @return Whether the ipv4 field is set.
   */
  boolean hasIpv4();
  /**
   * <pre>
   * Ipv4 specifies that the field must be a valid IPv4 address.
   * </pre>
   *
   * <code>bool ipv4 = 15 [json_name = "ipv4"];</code>
   * @return The ipv4.
   */
  boolean getIpv4();

  /**
   * <pre>
   * Ipv6 specifies that the field must be a valid IPv6 address. Valid
   * IPv6 addresses should not include surrounding square brackets.
   * </pre>
   *
   * <code>bool ipv6 = 16 [json_name = "ipv6"];</code>
   * @return Whether the ipv6 field is set.
   */
  boolean hasIpv6();
  /**
   * <pre>
   * Ipv6 specifies that the field must be a valid IPv6 address. Valid
   * IPv6 addresses should not include surrounding square brackets.
   * </pre>
   *
   * <code>bool ipv6 = 16 [json_name = "ipv6"];</code>
   * @return The ipv6.
   */
  boolean getIpv6();

  /**
   * <pre>
   * Uri specifies that the field must be a valid, absolute URI as defined
   * by RFC 3986
   * </pre>
   *
   * <code>bool uri = 17 [json_name = "uri"];</code>
   * @return Whether the uri field is set.
   */
  boolean hasUri();
  /**
   * <pre>
   * Uri specifies that the field must be a valid, absolute URI as defined
   * by RFC 3986
   * </pre>
   *
   * <code>bool uri = 17 [json_name = "uri"];</code>
   * @return The uri.
   */
  boolean getUri();

  /**
   * <pre>
   * UriRef specifies that the field must be a valid URI as defined by RFC
   * 3986 and may be relative or absolute.
   * </pre>
   *
   * <code>bool uri_ref = 18 [json_name = "uriRef"];</code>
   * @return Whether the uriRef field is set.
   */
  boolean hasUriRef();
  /**
   * <pre>
   * UriRef specifies that the field must be a valid URI as defined by RFC
   * 3986 and may be relative or absolute.
   * </pre>
   *
   * <code>bool uri_ref = 18 [json_name = "uriRef"];</code>
   * @return The uriRef.
   */
  boolean getUriRef();

  /**
   * <pre>
   * Address specifies that the field must be either a valid hostname as
   * defined by RFC 1034 (which does not support internationalized domain
   * names or IDNs), or it can be a valid IP (v4 or v6).
   * </pre>
   *
   * <code>bool address = 21 [json_name = "address"];</code>
   * @return Whether the address field is set.
   */
  boolean hasAddress();
  /**
   * <pre>
   * Address specifies that the field must be either a valid hostname as
   * defined by RFC 1034 (which does not support internationalized domain
   * names or IDNs), or it can be a valid IP (v4 or v6).
   * </pre>
   *
   * <code>bool address = 21 [json_name = "address"];</code>
   * @return The address.
   */
  boolean getAddress();

  /**
   * <pre>
   * Uuid specifies that the field must be a valid UUID as defined by
   * RFC 4122
   * </pre>
   *
   * <code>bool uuid = 22 [json_name = "uuid"];</code>
   * @return Whether the uuid field is set.
   */
  boolean hasUuid();
  /**
   * <pre>
   * Uuid specifies that the field must be a valid UUID as defined by
   * RFC 4122
   * </pre>
   *
   * <code>bool uuid = 22 [json_name = "uuid"];</code>
   * @return The uuid.
   */
  boolean getUuid();

  /**
   * <pre>
   * WellKnownRegex specifies a common well known pattern defined as a regex.
   * </pre>
   *
   * <code>.validate.KnownRegex well_known_regex = 24 [json_name = "wellKnownRegex"];</code>
   * @return Whether the wellKnownRegex field is set.
   */
  boolean hasWellKnownRegex();
  /**
   * <pre>
   * WellKnownRegex specifies a common well known pattern defined as a regex.
   * </pre>
   *
   * <code>.validate.KnownRegex well_known_regex = 24 [json_name = "wellKnownRegex"];</code>
   * @return The wellKnownRegex.
   */
  com.fluxninja.generated.validate.KnownRegex getWellKnownRegex();

  /**
   * <pre>
   * This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
   * strict header validation.
   * By default, this is true, and HTTP header validations are RFC-compliant.
   * Setting to false will enable a looser validations that only disallows
   * &#92;r&#92;n&#92;0 characters, which can be used to bypass header matching rules.
   * </pre>
   *
   * <code>optional bool strict = 25 [default = true, json_name = "strict"];</code>
   * @return Whether the strict field is set.
   */
  boolean hasStrict();
  /**
   * <pre>
   * This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
   * strict header validation.
   * By default, this is true, and HTTP header validations are RFC-compliant.
   * Setting to false will enable a looser validations that only disallows
   * &#92;r&#92;n&#92;0 characters, which can be used to bypass header matching rules.
   * </pre>
   *
   * <code>optional bool strict = 25 [default = true, json_name = "strict"];</code>
   * @return The strict.
   */
  boolean getStrict();

  /**
   * <pre>
   * IgnoreEmpty specifies that the validation rules of this field should be
   * evaluated only if the field is not empty
   * </pre>
   *
   * <code>optional bool ignore_empty = 26 [json_name = "ignoreEmpty"];</code>
   * @return Whether the ignoreEmpty field is set.
   */
  boolean hasIgnoreEmpty();
  /**
   * <pre>
   * IgnoreEmpty specifies that the validation rules of this field should be
   * evaluated only if the field is not empty
   * </pre>
   *
   * <code>optional bool ignore_empty = 26 [json_name = "ignoreEmpty"];</code>
   * @return The ignoreEmpty.
   */
  boolean getIgnoreEmpty();

  public com.fluxninja.generated.validate.StringRules.WellKnownCase getWellKnownCase();
}
