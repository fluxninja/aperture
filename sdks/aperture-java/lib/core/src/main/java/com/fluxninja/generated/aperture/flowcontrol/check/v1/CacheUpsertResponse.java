// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/check/v1/check.proto

package com.fluxninja.generated.aperture.flowcontrol.check.v1;

/**
 * Protobuf type {@code aperture.flowcontrol.check.v1.CacheUpsertResponse}
 */
public final class CacheUpsertResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.flowcontrol.check.v1.CacheUpsertResponse)
    CacheUpsertResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CacheUpsertResponse.newBuilder() to construct.
  private CacheUpsertResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CacheUpsertResponse() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CacheUpsertResponse();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertResponse_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetGlobalCacheResponses();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse.class, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse.Builder.class);
  }

  private int bitField0_;
  public static final int RESULT_CACHE_RESPONSE_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse resultCacheResponse_;
  /**
   * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
   * @return Whether the resultCacheResponse field is set.
   */
  @java.lang.Override
  public boolean hasResultCacheResponse() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
   * @return The resultCacheResponse.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse getResultCacheResponse() {
    return resultCacheResponse_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.getDefaultInstance() : resultCacheResponse_;
  }
  /**
   * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponseOrBuilder getResultCacheResponseOrBuilder() {
    return resultCacheResponse_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.getDefaultInstance() : resultCacheResponse_;
  }

  public static final int GLOBAL_CACHE_RESPONSES_FIELD_NUMBER = 2;
  private static final class GlobalCacheResponsesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse>newDefaultInstance(
                com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertResponse_GlobalCacheResponsesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> globalCacheResponses_;
  private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse>
  internalGetGlobalCacheResponses() {
    if (globalCacheResponses_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          GlobalCacheResponsesDefaultEntryHolder.defaultEntry);
    }
    return globalCacheResponses_;
  }
  public int getGlobalCacheResponsesCount() {
    return internalGetGlobalCacheResponses().getMap().size();
  }
  /**
   * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
   */
  @java.lang.Override
  public boolean containsGlobalCacheResponses(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetGlobalCacheResponses().getMap().containsKey(key);
  }
  /**
   * Use {@link #getGlobalCacheResponsesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> getGlobalCacheResponses() {
    return getGlobalCacheResponsesMap();
  }
  /**
   * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> getGlobalCacheResponsesMap() {
    return internalGetGlobalCacheResponses().getMap();
  }
  /**
   * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
   */
  @java.lang.Override
  public /* nullable */
com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse getGlobalCacheResponsesOrDefault(
      java.lang.String key,
      /* nullable */
com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> map =
        internalGetGlobalCacheResponses().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse getGlobalCacheResponsesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> map =
        internalGetGlobalCacheResponses().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getResultCacheResponse());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetGlobalCacheResponses(),
        GlobalCacheResponsesDefaultEntryHolder.defaultEntry,
        2);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getResultCacheResponse());
    }
    for (java.util.Map.Entry<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> entry
         : internalGetGlobalCacheResponses().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse>
      globalCacheResponses__ = GlobalCacheResponsesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, globalCacheResponses__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse other = (com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse) obj;

    if (hasResultCacheResponse() != other.hasResultCacheResponse()) return false;
    if (hasResultCacheResponse()) {
      if (!getResultCacheResponse()
          .equals(other.getResultCacheResponse())) return false;
    }
    if (!internalGetGlobalCacheResponses().equals(
        other.internalGetGlobalCacheResponses())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasResultCacheResponse()) {
      hash = (37 * hash) + RESULT_CACHE_RESPONSE_FIELD_NUMBER;
      hash = (53 * hash) + getResultCacheResponse().hashCode();
    }
    if (!internalGetGlobalCacheResponses().getMap().isEmpty()) {
      hash = (37 * hash) + GLOBAL_CACHE_RESPONSES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetGlobalCacheResponses().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.flowcontrol.check.v1.CacheUpsertResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.check.v1.CacheUpsertResponse)
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetGlobalCacheResponses();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableGlobalCacheResponses();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse.class, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getResultCacheResponseFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      resultCacheResponse_ = null;
      if (resultCacheResponseBuilder_ != null) {
        resultCacheResponseBuilder_.dispose();
        resultCacheResponseBuilder_ = null;
      }
      internalGetMutableGlobalCacheResponses().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertResponse_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse build() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse buildPartial() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse result = new com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.resultCacheResponse_ = resultCacheResponseBuilder_ == null
            ? resultCacheResponse_
            : resultCacheResponseBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.globalCacheResponses_ = internalGetGlobalCacheResponses();
        result.globalCacheResponses_.makeImmutable();
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse) {
        return mergeFrom((com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse other) {
      if (other == com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse.getDefaultInstance()) return this;
      if (other.hasResultCacheResponse()) {
        mergeResultCacheResponse(other.getResultCacheResponse());
      }
      internalGetMutableGlobalCacheResponses().mergeFrom(
          other.internalGetGlobalCacheResponses());
      bitField0_ |= 0x00000002;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getResultCacheResponseFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse>
              globalCacheResponses__ = input.readMessage(
                  GlobalCacheResponsesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableGlobalCacheResponses().getMutableMap().put(
                  globalCacheResponses__.getKey(), globalCacheResponses__.getValue());
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse resultCacheResponse_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponseOrBuilder> resultCacheResponseBuilder_;
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     * @return Whether the resultCacheResponse field is set.
     */
    public boolean hasResultCacheResponse() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     * @return The resultCacheResponse.
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse getResultCacheResponse() {
      if (resultCacheResponseBuilder_ == null) {
        return resultCacheResponse_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.getDefaultInstance() : resultCacheResponse_;
      } else {
        return resultCacheResponseBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     */
    public Builder setResultCacheResponse(com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse value) {
      if (resultCacheResponseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        resultCacheResponse_ = value;
      } else {
        resultCacheResponseBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     */
    public Builder setResultCacheResponse(
        com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.Builder builderForValue) {
      if (resultCacheResponseBuilder_ == null) {
        resultCacheResponse_ = builderForValue.build();
      } else {
        resultCacheResponseBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     */
    public Builder mergeResultCacheResponse(com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse value) {
      if (resultCacheResponseBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          resultCacheResponse_ != null &&
          resultCacheResponse_ != com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.getDefaultInstance()) {
          getResultCacheResponseBuilder().mergeFrom(value);
        } else {
          resultCacheResponse_ = value;
        }
      } else {
        resultCacheResponseBuilder_.mergeFrom(value);
      }
      if (resultCacheResponse_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     */
    public Builder clearResultCacheResponse() {
      bitField0_ = (bitField0_ & ~0x00000001);
      resultCacheResponse_ = null;
      if (resultCacheResponseBuilder_ != null) {
        resultCacheResponseBuilder_.dispose();
        resultCacheResponseBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.Builder getResultCacheResponseBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getResultCacheResponseFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponseOrBuilder getResultCacheResponseOrBuilder() {
      if (resultCacheResponseBuilder_ != null) {
        return resultCacheResponseBuilder_.getMessageOrBuilder();
      } else {
        return resultCacheResponse_ == null ?
            com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.getDefaultInstance() : resultCacheResponse_;
      }
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.KeyUpsertResponse result_cache_response = 1 [json_name = "resultCacheResponse"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponseOrBuilder> 
        getResultCacheResponseFieldBuilder() {
      if (resultCacheResponseBuilder_ == null) {
        resultCacheResponseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponseOrBuilder>(
                getResultCacheResponse(),
                getParentForChildren(),
                isClean());
        resultCacheResponse_ = null;
      }
      return resultCacheResponseBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> globalCacheResponses_;
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse>
        internalGetGlobalCacheResponses() {
      if (globalCacheResponses_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            GlobalCacheResponsesDefaultEntryHolder.defaultEntry);
      }
      return globalCacheResponses_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse>
        internalGetMutableGlobalCacheResponses() {
      if (globalCacheResponses_ == null) {
        globalCacheResponses_ = com.google.protobuf.MapField.newMapField(
            GlobalCacheResponsesDefaultEntryHolder.defaultEntry);
      }
      if (!globalCacheResponses_.isMutable()) {
        globalCacheResponses_ = globalCacheResponses_.copy();
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return globalCacheResponses_;
    }
    public int getGlobalCacheResponsesCount() {
      return internalGetGlobalCacheResponses().getMap().size();
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
     */
    @java.lang.Override
    public boolean containsGlobalCacheResponses(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetGlobalCacheResponses().getMap().containsKey(key);
    }
    /**
     * Use {@link #getGlobalCacheResponsesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> getGlobalCacheResponses() {
      return getGlobalCacheResponsesMap();
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> getGlobalCacheResponsesMap() {
      return internalGetGlobalCacheResponses().getMap();
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
     */
    @java.lang.Override
    public /* nullable */
com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse getGlobalCacheResponsesOrDefault(
        java.lang.String key,
        /* nullable */
com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> map =
          internalGetGlobalCacheResponses().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse getGlobalCacheResponsesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> map =
          internalGetGlobalCacheResponses().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearGlobalCacheResponses() {
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableGlobalCacheResponses().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
     */
    public Builder removeGlobalCacheResponses(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableGlobalCacheResponses().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse>
        getMutableGlobalCacheResponses() {
      bitField0_ |= 0x00000002;
      return internalGetMutableGlobalCacheResponses().getMutableMap();
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
     */
    public Builder putGlobalCacheResponses(
        java.lang.String key,
        com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableGlobalCacheResponses().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.KeyUpsertResponse&gt; global_cache_responses = 2 [json_name = "globalCacheResponses"];</code>
     */
    public Builder putAllGlobalCacheResponses(
        java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.KeyUpsertResponse> values) {
      internalGetMutableGlobalCacheResponses().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000002;
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.check.v1.CacheUpsertResponse)
  }

  // @@protoc_insertion_point(class_scope:aperture.flowcontrol.check.v1.CacheUpsertResponse)
  private static final com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse();
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CacheUpsertResponse>
      PARSER = new com.google.protobuf.AbstractParser<CacheUpsertResponse>() {
    @java.lang.Override
    public CacheUpsertResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CacheUpsertResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CacheUpsertResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

