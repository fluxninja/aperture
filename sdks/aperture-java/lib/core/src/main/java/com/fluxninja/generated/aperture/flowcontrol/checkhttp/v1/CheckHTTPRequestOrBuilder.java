// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/checkhttp/v1/checkhttp.proto

package com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1;

public interface CheckHTTPRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The source of a network activity, such as starting a TCP connection.
   * In a multi hop network activity, the source represents the sender of the
   * last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
   * @return Whether the source field is set.
   */
  boolean hasSource();
  /**
   * <pre>
   * The source of a network activity, such as starting a TCP connection.
   * In a multi hop network activity, the source represents the sender of the
   * last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
   * @return The source.
   */
  com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress getSource();
  /**
   * <pre>
   * The source of a network activity, such as starting a TCP connection.
   * In a multi hop network activity, the source represents the sender of the
   * last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
   */
  com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder getSourceOrBuilder();

  /**
   * <pre>
   * The destination of a network activity, such as accepting a TCP connection.
   * In a multi hop network activity, the destination represents the receiver of
   * the last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
   * @return Whether the destination field is set.
   */
  boolean hasDestination();
  /**
   * <pre>
   * The destination of a network activity, such as accepting a TCP connection.
   * In a multi hop network activity, the destination represents the receiver of
   * the last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
   * @return The destination.
   */
  com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress getDestination();
  /**
   * <pre>
   * The destination of a network activity, such as accepting a TCP connection.
   * In a multi hop network activity, the destination represents the receiver of
   * the last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
   */
  com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder getDestinationOrBuilder();

  /**
   * <pre>
   * Represents a network request, such as an HTTP request.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
   * @return Whether the request field is set.
   */
  boolean hasRequest();
  /**
   * <pre>
   * Represents a network request, such as an HTTP request.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
   * @return The request.
   */
  com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest getRequest();
  /**
   * <pre>
   * Represents a network request, such as an HTTP request.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
   */
  com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequestOrBuilder getRequestOrBuilder();

  /**
   * <pre>
   * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
   * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
   * </pre>
   *
   * <code>string control_point = 4 [json_name = "controlPoint"];</code>
   * @return The controlPoint.
   */
  java.lang.String getControlPoint();
  /**
   * <pre>
   * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
   * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
   * </pre>
   *
   * <code>string control_point = 4 [json_name = "controlPoint"];</code>
   * @return The bytes for controlPoint.
   */
  com.google.protobuf.ByteString
      getControlPointBytes();

  /**
   * <pre>
   * A flow with ramp_mode flag will only be accepted if at least one ramp component matches and accepts the flow.
   * </pre>
   *
   * <code>bool ramp_mode = 5 [json_name = "rampMode"];</code>
   * @return The rampMode.
   */
  boolean getRampMode();
}
