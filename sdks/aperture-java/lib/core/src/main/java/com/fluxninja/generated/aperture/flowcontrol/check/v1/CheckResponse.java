// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/check/v1/check.proto

package com.fluxninja.generated.aperture.flowcontrol.check.v1;

/**
 * <pre>
 * CheckResponse contains fields that represent decision made by Check call.
 * </pre>
 *
 * Protobuf type {@code aperture.flowcontrol.check.v1.CheckResponse}
 */
public final class CheckResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.flowcontrol.check.v1.CheckResponse)
    CheckResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CheckResponse.newBuilder() to construct.
  private CheckResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CheckResponse() {
    services_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    controlPoint_ = "";
    flowLabelKeys_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    decisionType_ = 0;
    rejectReason_ = 0;
    classifierInfos_ = java.util.Collections.emptyList();
    fluxMeterInfos_ = java.util.Collections.emptyList();
    limiterDecisions_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CheckResponse();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckResponse_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 7:
        return internalGetTelemetryFlowLabels();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.class, com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.Builder.class);
  }

  /**
   * <pre>
   * RejectReason contains fields that give further information about rejection.
   * </pre>
   *
   * Protobuf enum {@code aperture.flowcontrol.check.v1.CheckResponse.RejectReason}
   */
  public enum RejectReason
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>REJECT_REASON_NONE = 0;</code>
     */
    REJECT_REASON_NONE(0),
    /**
     * <code>REJECT_REASON_RATE_LIMITED = 1;</code>
     */
    REJECT_REASON_RATE_LIMITED(1),
    /**
     * <code>REJECT_REASON_NO_TOKENS = 2;</code>
     */
    REJECT_REASON_NO_TOKENS(2),
    /**
     * <code>REJECT_REASON_REGULATED = 3;</code>
     */
    REJECT_REASON_REGULATED(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>REJECT_REASON_NONE = 0;</code>
     */
    public static final int REJECT_REASON_NONE_VALUE = 0;
    /**
     * <code>REJECT_REASON_RATE_LIMITED = 1;</code>
     */
    public static final int REJECT_REASON_RATE_LIMITED_VALUE = 1;
    /**
     * <code>REJECT_REASON_NO_TOKENS = 2;</code>
     */
    public static final int REJECT_REASON_NO_TOKENS_VALUE = 2;
    /**
     * <code>REJECT_REASON_REGULATED = 3;</code>
     */
    public static final int REJECT_REASON_REGULATED_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static RejectReason valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static RejectReason forNumber(int value) {
      switch (value) {
        case 0: return REJECT_REASON_NONE;
        case 1: return REJECT_REASON_RATE_LIMITED;
        case 2: return REJECT_REASON_NO_TOKENS;
        case 3: return REJECT_REASON_REGULATED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<RejectReason>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        RejectReason> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<RejectReason>() {
            public RejectReason findValueByNumber(int number) {
              return RejectReason.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.getDescriptor().getEnumTypes().get(0);
    }

    private static final RejectReason[] VALUES = values();

    public static RejectReason valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private RejectReason(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:aperture.flowcontrol.check.v1.CheckResponse.RejectReason)
  }

  /**
   * <pre>
   * DecisionType contains fields that represent decision made by Check call.
   * </pre>
   *
   * Protobuf enum {@code aperture.flowcontrol.check.v1.CheckResponse.DecisionType}
   */
  public enum DecisionType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DECISION_TYPE_ACCEPTED = 0;</code>
     */
    DECISION_TYPE_ACCEPTED(0),
    /**
     * <code>DECISION_TYPE_REJECTED = 1;</code>
     */
    DECISION_TYPE_REJECTED(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>DECISION_TYPE_ACCEPTED = 0;</code>
     */
    public static final int DECISION_TYPE_ACCEPTED_VALUE = 0;
    /**
     * <code>DECISION_TYPE_REJECTED = 1;</code>
     */
    public static final int DECISION_TYPE_REJECTED_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DecisionType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DecisionType forNumber(int value) {
      switch (value) {
        case 0: return DECISION_TYPE_ACCEPTED;
        case 1: return DECISION_TYPE_REJECTED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DecisionType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DecisionType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DecisionType>() {
            public DecisionType findValueByNumber(int number) {
              return DecisionType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.getDescriptor().getEnumTypes().get(1);
    }

    private static final DecisionType[] VALUES = values();

    public static DecisionType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DecisionType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:aperture.flowcontrol.check.v1.CheckResponse.DecisionType)
  }

  public static final int START_FIELD_NUMBER = 1;
  private com.google.protobuf.Timestamp start_;
  /**
   * <pre>
   * start timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
   * @return Whether the start field is set.
   */
  @java.lang.Override
  public boolean hasStart() {
    return start_ != null;
  }
  /**
   * <pre>
   * start timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
   * @return The start.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getStart() {
    return start_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : start_;
  }
  /**
   * <pre>
   * start timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getStartOrBuilder() {
    return start_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : start_;
  }

  public static final int END_FIELD_NUMBER = 2;
  private com.google.protobuf.Timestamp end_;
  /**
   * <pre>
   * end timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
   * @return Whether the end field is set.
   */
  @java.lang.Override
  public boolean hasEnd() {
    return end_ != null;
  }
  /**
   * <pre>
   * end timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
   * @return The end.
   */
  @java.lang.Override
  public com.google.protobuf.Timestamp getEnd() {
    return end_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : end_;
  }
  /**
   * <pre>
   * end timestamp
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.TimestampOrBuilder getEndOrBuilder() {
    return end_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : end_;
  }

  public static final int SERVICES_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList services_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * services that matched
   * </pre>
   *
   * <code>repeated string services = 4 [json_name = "services"];</code>
   * @return A list containing the services.
   */
  public com.google.protobuf.ProtocolStringList
      getServicesList() {
    return services_;
  }
  /**
   * <pre>
   * services that matched
   * </pre>
   *
   * <code>repeated string services = 4 [json_name = "services"];</code>
   * @return The count of services.
   */
  public int getServicesCount() {
    return services_.size();
  }
  /**
   * <pre>
   * services that matched
   * </pre>
   *
   * <code>repeated string services = 4 [json_name = "services"];</code>
   * @param index The index of the element to return.
   * @return The services at the given index.
   */
  public java.lang.String getServices(int index) {
    return services_.get(index);
  }
  /**
   * <pre>
   * services that matched
   * </pre>
   *
   * <code>repeated string services = 4 [json_name = "services"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the services at the given index.
   */
  public com.google.protobuf.ByteString
      getServicesBytes(int index) {
    return services_.getByteString(index);
  }

  public static final int CONTROL_POINT_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private volatile java.lang.Object controlPoint_ = "";
  /**
   * <pre>
   * control_point of request
   * </pre>
   *
   * <code>string control_point = 5 [json_name = "controlPoint"];</code>
   * @return The controlPoint.
   */
  @java.lang.Override
  public java.lang.String getControlPoint() {
    java.lang.Object ref = controlPoint_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      controlPoint_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * control_point of request
   * </pre>
   *
   * <code>string control_point = 5 [json_name = "controlPoint"];</code>
   * @return The bytes for controlPoint.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getControlPointBytes() {
    java.lang.Object ref = controlPoint_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      controlPoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FLOW_LABEL_KEYS_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList flowLabelKeys_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * flow label keys that were matched for this request.
   * </pre>
   *
   * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
   * @return A list containing the flowLabelKeys.
   */
  public com.google.protobuf.ProtocolStringList
      getFlowLabelKeysList() {
    return flowLabelKeys_;
  }
  /**
   * <pre>
   * flow label keys that were matched for this request.
   * </pre>
   *
   * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
   * @return The count of flowLabelKeys.
   */
  public int getFlowLabelKeysCount() {
    return flowLabelKeys_.size();
  }
  /**
   * <pre>
   * flow label keys that were matched for this request.
   * </pre>
   *
   * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
   * @param index The index of the element to return.
   * @return The flowLabelKeys at the given index.
   */
  public java.lang.String getFlowLabelKeys(int index) {
    return flowLabelKeys_.get(index);
  }
  /**
   * <pre>
   * flow label keys that were matched for this request.
   * </pre>
   *
   * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the flowLabelKeys at the given index.
   */
  public com.google.protobuf.ByteString
      getFlowLabelKeysBytes(int index) {
    return flowLabelKeys_.getByteString(index);
  }

  public static final int TELEMETRY_FLOW_LABELS_FIELD_NUMBER = 7;
  private static final class TelemetryFlowLabelsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckResponse_TelemetryFlowLabelsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> telemetryFlowLabels_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetTelemetryFlowLabels() {
    if (telemetryFlowLabels_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          TelemetryFlowLabelsDefaultEntryHolder.defaultEntry);
    }
    return telemetryFlowLabels_;
  }
  public int getTelemetryFlowLabelsCount() {
    return internalGetTelemetryFlowLabels().getMap().size();
  }
  /**
   * <pre>
   * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
   * </pre>
   *
   * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
   */
  @java.lang.Override
  public boolean containsTelemetryFlowLabels(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetTelemetryFlowLabels().getMap().containsKey(key);
  }
  /**
   * Use {@link #getTelemetryFlowLabelsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getTelemetryFlowLabels() {
    return getTelemetryFlowLabelsMap();
  }
  /**
   * <pre>
   * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
   * </pre>
   *
   * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getTelemetryFlowLabelsMap() {
    return internalGetTelemetryFlowLabels().getMap();
  }
  /**
   * <pre>
   * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
   * </pre>
   *
   * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
   */
  @java.lang.Override
  public /* nullable */
java.lang.String getTelemetryFlowLabelsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetTelemetryFlowLabels().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
   * </pre>
   *
   * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
   */
  @java.lang.Override
  public java.lang.String getTelemetryFlowLabelsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetTelemetryFlowLabels().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int DECISION_TYPE_FIELD_NUMBER = 8;
  private int decisionType_ = 0;
  /**
   * <pre>
   * decision_type contains what the decision was.
   * </pre>
   *
   * <code>.aperture.flowcontrol.check.v1.CheckResponse.DecisionType decision_type = 8 [json_name = "decisionType"];</code>
   * @return The enum numeric value on the wire for decisionType.
   */
  @java.lang.Override public int getDecisionTypeValue() {
    return decisionType_;
  }
  /**
   * <pre>
   * decision_type contains what the decision was.
   * </pre>
   *
   * <code>.aperture.flowcontrol.check.v1.CheckResponse.DecisionType decision_type = 8 [json_name = "decisionType"];</code>
   * @return The decisionType.
   */
  @java.lang.Override public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType getDecisionType() {
    com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType result = com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType.forNumber(decisionType_);
    return result == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType.UNRECOGNIZED : result;
  }

  public static final int REJECT_REASON_FIELD_NUMBER = 9;
  private int rejectReason_ = 0;
  /**
   * <pre>
   * reject_reason contains the reason for the rejection.
   * </pre>
   *
   * <code>.aperture.flowcontrol.check.v1.CheckResponse.RejectReason reject_reason = 9 [json_name = "rejectReason"];</code>
   * @return The enum numeric value on the wire for rejectReason.
   */
  @java.lang.Override public int getRejectReasonValue() {
    return rejectReason_;
  }
  /**
   * <pre>
   * reject_reason contains the reason for the rejection.
   * </pre>
   *
   * <code>.aperture.flowcontrol.check.v1.CheckResponse.RejectReason reject_reason = 9 [json_name = "rejectReason"];</code>
   * @return The rejectReason.
   */
  @java.lang.Override public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason getRejectReason() {
    com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason result = com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason.forNumber(rejectReason_);
    return result == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason.UNRECOGNIZED : result;
  }

  public static final int CLASSIFIER_INFOS_FIELD_NUMBER = 10;
  @SuppressWarnings("serial")
  private java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo> classifierInfos_;
  /**
   * <pre>
   * classifiers that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo> getClassifierInfosList() {
    return classifierInfos_;
  }
  /**
   * <pre>
   * classifiers that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfoOrBuilder> 
      getClassifierInfosOrBuilderList() {
    return classifierInfos_;
  }
  /**
   * <pre>
   * classifiers that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
   */
  @java.lang.Override
  public int getClassifierInfosCount() {
    return classifierInfos_.size();
  }
  /**
   * <pre>
   * classifiers that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo getClassifierInfos(int index) {
    return classifierInfos_.get(index);
  }
  /**
   * <pre>
   * classifiers that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfoOrBuilder getClassifierInfosOrBuilder(
      int index) {
    return classifierInfos_.get(index);
  }

  public static final int FLUX_METER_INFOS_FIELD_NUMBER = 11;
  @SuppressWarnings("serial")
  private java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo> fluxMeterInfos_;
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo> getFluxMeterInfosList() {
    return fluxMeterInfos_;
  }
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfoOrBuilder> 
      getFluxMeterInfosOrBuilderList() {
    return fluxMeterInfos_;
  }
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
   */
  @java.lang.Override
  public int getFluxMeterInfosCount() {
    return fluxMeterInfos_.size();
  }
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo getFluxMeterInfos(int index) {
    return fluxMeterInfos_.get(index);
  }
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfoOrBuilder getFluxMeterInfosOrBuilder(
      int index) {
    return fluxMeterInfos_.get(index);
  }

  public static final int LIMITER_DECISIONS_FIELD_NUMBER = 12;
  @SuppressWarnings("serial")
  private java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision> limiterDecisions_;
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision> getLimiterDecisionsList() {
    return limiterDecisions_;
  }
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecisionOrBuilder> 
      getLimiterDecisionsOrBuilderList() {
    return limiterDecisions_;
  }
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public int getLimiterDecisionsCount() {
    return limiterDecisions_.size();
  }
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision getLimiterDecisions(int index) {
    return limiterDecisions_.get(index);
  }
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecisionOrBuilder getLimiterDecisionsOrBuilder(
      int index) {
    return limiterDecisions_.get(index);
  }

  public static final int WAIT_TIME_FIELD_NUMBER = 13;
  private com.google.protobuf.Duration waitTime_;
  /**
   * <pre>
   * Recommended minimal amount of time to wait when retrying the request, if
   * decision_type is REJECTED. Optional.
   * </pre>
   *
   * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
   * @return Whether the waitTime field is set.
   */
  @java.lang.Override
  public boolean hasWaitTime() {
    return waitTime_ != null;
  }
  /**
   * <pre>
   * Recommended minimal amount of time to wait when retrying the request, if
   * decision_type is REJECTED. Optional.
   * </pre>
   *
   * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
   * @return The waitTime.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getWaitTime() {
    return waitTime_ == null ? com.google.protobuf.Duration.getDefaultInstance() : waitTime_;
  }
  /**
   * <pre>
   * Recommended minimal amount of time to wait when retrying the request, if
   * decision_type is REJECTED. Optional.
   * </pre>
   *
   * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getWaitTimeOrBuilder() {
    return waitTime_ == null ? com.google.protobuf.Duration.getDefaultInstance() : waitTime_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (start_ != null) {
      output.writeMessage(1, getStart());
    }
    if (end_ != null) {
      output.writeMessage(2, getEnd());
    }
    for (int i = 0; i < services_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, services_.getRaw(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(controlPoint_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, controlPoint_);
    }
    for (int i = 0; i < flowLabelKeys_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, flowLabelKeys_.getRaw(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetTelemetryFlowLabels(),
        TelemetryFlowLabelsDefaultEntryHolder.defaultEntry,
        7);
    if (decisionType_ != com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType.DECISION_TYPE_ACCEPTED.getNumber()) {
      output.writeEnum(8, decisionType_);
    }
    if (rejectReason_ != com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason.REJECT_REASON_NONE.getNumber()) {
      output.writeEnum(9, rejectReason_);
    }
    for (int i = 0; i < classifierInfos_.size(); i++) {
      output.writeMessage(10, classifierInfos_.get(i));
    }
    for (int i = 0; i < fluxMeterInfos_.size(); i++) {
      output.writeMessage(11, fluxMeterInfos_.get(i));
    }
    for (int i = 0; i < limiterDecisions_.size(); i++) {
      output.writeMessage(12, limiterDecisions_.get(i));
    }
    if (waitTime_ != null) {
      output.writeMessage(13, getWaitTime());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (start_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getStart());
    }
    if (end_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getEnd());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < services_.size(); i++) {
        dataSize += computeStringSizeNoTag(services_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getServicesList().size();
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(controlPoint_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, controlPoint_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < flowLabelKeys_.size(); i++) {
        dataSize += computeStringSizeNoTag(flowLabelKeys_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getFlowLabelKeysList().size();
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetTelemetryFlowLabels().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      telemetryFlowLabels__ = TelemetryFlowLabelsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, telemetryFlowLabels__);
    }
    if (decisionType_ != com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType.DECISION_TYPE_ACCEPTED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, decisionType_);
    }
    if (rejectReason_ != com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason.REJECT_REASON_NONE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, rejectReason_);
    }
    for (int i = 0; i < classifierInfos_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, classifierInfos_.get(i));
    }
    for (int i = 0; i < fluxMeterInfos_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, fluxMeterInfos_.get(i));
    }
    for (int i = 0; i < limiterDecisions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, limiterDecisions_.get(i));
    }
    if (waitTime_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getWaitTime());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse other = (com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse) obj;

    if (hasStart() != other.hasStart()) return false;
    if (hasStart()) {
      if (!getStart()
          .equals(other.getStart())) return false;
    }
    if (hasEnd() != other.hasEnd()) return false;
    if (hasEnd()) {
      if (!getEnd()
          .equals(other.getEnd())) return false;
    }
    if (!getServicesList()
        .equals(other.getServicesList())) return false;
    if (!getControlPoint()
        .equals(other.getControlPoint())) return false;
    if (!getFlowLabelKeysList()
        .equals(other.getFlowLabelKeysList())) return false;
    if (!internalGetTelemetryFlowLabels().equals(
        other.internalGetTelemetryFlowLabels())) return false;
    if (decisionType_ != other.decisionType_) return false;
    if (rejectReason_ != other.rejectReason_) return false;
    if (!getClassifierInfosList()
        .equals(other.getClassifierInfosList())) return false;
    if (!getFluxMeterInfosList()
        .equals(other.getFluxMeterInfosList())) return false;
    if (!getLimiterDecisionsList()
        .equals(other.getLimiterDecisionsList())) return false;
    if (hasWaitTime() != other.hasWaitTime()) return false;
    if (hasWaitTime()) {
      if (!getWaitTime()
          .equals(other.getWaitTime())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasStart()) {
      hash = (37 * hash) + START_FIELD_NUMBER;
      hash = (53 * hash) + getStart().hashCode();
    }
    if (hasEnd()) {
      hash = (37 * hash) + END_FIELD_NUMBER;
      hash = (53 * hash) + getEnd().hashCode();
    }
    if (getServicesCount() > 0) {
      hash = (37 * hash) + SERVICES_FIELD_NUMBER;
      hash = (53 * hash) + getServicesList().hashCode();
    }
    hash = (37 * hash) + CONTROL_POINT_FIELD_NUMBER;
    hash = (53 * hash) + getControlPoint().hashCode();
    if (getFlowLabelKeysCount() > 0) {
      hash = (37 * hash) + FLOW_LABEL_KEYS_FIELD_NUMBER;
      hash = (53 * hash) + getFlowLabelKeysList().hashCode();
    }
    if (!internalGetTelemetryFlowLabels().getMap().isEmpty()) {
      hash = (37 * hash) + TELEMETRY_FLOW_LABELS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetTelemetryFlowLabels().hashCode();
    }
    hash = (37 * hash) + DECISION_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + decisionType_;
    hash = (37 * hash) + REJECT_REASON_FIELD_NUMBER;
    hash = (53 * hash) + rejectReason_;
    if (getClassifierInfosCount() > 0) {
      hash = (37 * hash) + CLASSIFIER_INFOS_FIELD_NUMBER;
      hash = (53 * hash) + getClassifierInfosList().hashCode();
    }
    if (getFluxMeterInfosCount() > 0) {
      hash = (37 * hash) + FLUX_METER_INFOS_FIELD_NUMBER;
      hash = (53 * hash) + getFluxMeterInfosList().hashCode();
    }
    if (getLimiterDecisionsCount() > 0) {
      hash = (37 * hash) + LIMITER_DECISIONS_FIELD_NUMBER;
      hash = (53 * hash) + getLimiterDecisionsList().hashCode();
    }
    if (hasWaitTime()) {
      hash = (37 * hash) + WAIT_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getWaitTime().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CheckResponse contains fields that represent decision made by Check call.
   * </pre>
   *
   * Protobuf type {@code aperture.flowcontrol.check.v1.CheckResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.check.v1.CheckResponse)
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckResponse_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetTelemetryFlowLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetMutableTelemetryFlowLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.class, com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      start_ = null;
      if (startBuilder_ != null) {
        startBuilder_.dispose();
        startBuilder_ = null;
      }
      end_ = null;
      if (endBuilder_ != null) {
        endBuilder_.dispose();
        endBuilder_ = null;
      }
      services_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      controlPoint_ = "";
      flowLabelKeys_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      internalGetMutableTelemetryFlowLabels().clear();
      decisionType_ = 0;
      rejectReason_ = 0;
      if (classifierInfosBuilder_ == null) {
        classifierInfos_ = java.util.Collections.emptyList();
      } else {
        classifierInfos_ = null;
        classifierInfosBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000100);
      if (fluxMeterInfosBuilder_ == null) {
        fluxMeterInfos_ = java.util.Collections.emptyList();
      } else {
        fluxMeterInfos_ = null;
        fluxMeterInfosBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000200);
      if (limiterDecisionsBuilder_ == null) {
        limiterDecisions_ = java.util.Collections.emptyList();
      } else {
        limiterDecisions_ = null;
        limiterDecisionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000400);
      waitTime_ = null;
      if (waitTimeBuilder_ != null) {
        waitTimeBuilder_.dispose();
        waitTimeBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckResponse_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse build() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse buildPartial() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse result = new com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse result) {
      if (classifierInfosBuilder_ == null) {
        if (((bitField0_ & 0x00000100) != 0)) {
          classifierInfos_ = java.util.Collections.unmodifiableList(classifierInfos_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.classifierInfos_ = classifierInfos_;
      } else {
        result.classifierInfos_ = classifierInfosBuilder_.build();
      }
      if (fluxMeterInfosBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0)) {
          fluxMeterInfos_ = java.util.Collections.unmodifiableList(fluxMeterInfos_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.fluxMeterInfos_ = fluxMeterInfos_;
      } else {
        result.fluxMeterInfos_ = fluxMeterInfosBuilder_.build();
      }
      if (limiterDecisionsBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0)) {
          limiterDecisions_ = java.util.Collections.unmodifiableList(limiterDecisions_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.limiterDecisions_ = limiterDecisions_;
      } else {
        result.limiterDecisions_ = limiterDecisionsBuilder_.build();
      }
    }

    private void buildPartial0(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.start_ = startBuilder_ == null
            ? start_
            : startBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.end_ = endBuilder_ == null
            ? end_
            : endBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        services_.makeImmutable();
        result.services_ = services_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.controlPoint_ = controlPoint_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        flowLabelKeys_.makeImmutable();
        result.flowLabelKeys_ = flowLabelKeys_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.telemetryFlowLabels_ = internalGetTelemetryFlowLabels();
        result.telemetryFlowLabels_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.decisionType_ = decisionType_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.rejectReason_ = rejectReason_;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.waitTime_ = waitTimeBuilder_ == null
            ? waitTime_
            : waitTimeBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse) {
        return mergeFrom((com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse other) {
      if (other == com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.getDefaultInstance()) return this;
      if (other.hasStart()) {
        mergeStart(other.getStart());
      }
      if (other.hasEnd()) {
        mergeEnd(other.getEnd());
      }
      if (!other.services_.isEmpty()) {
        if (services_.isEmpty()) {
          services_ = other.services_;
          bitField0_ |= 0x00000004;
        } else {
          ensureServicesIsMutable();
          services_.addAll(other.services_);
        }
        onChanged();
      }
      if (!other.getControlPoint().isEmpty()) {
        controlPoint_ = other.controlPoint_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (!other.flowLabelKeys_.isEmpty()) {
        if (flowLabelKeys_.isEmpty()) {
          flowLabelKeys_ = other.flowLabelKeys_;
          bitField0_ |= 0x00000010;
        } else {
          ensureFlowLabelKeysIsMutable();
          flowLabelKeys_.addAll(other.flowLabelKeys_);
        }
        onChanged();
      }
      internalGetMutableTelemetryFlowLabels().mergeFrom(
          other.internalGetTelemetryFlowLabels());
      bitField0_ |= 0x00000020;
      if (other.decisionType_ != 0) {
        setDecisionTypeValue(other.getDecisionTypeValue());
      }
      if (other.rejectReason_ != 0) {
        setRejectReasonValue(other.getRejectReasonValue());
      }
      if (classifierInfosBuilder_ == null) {
        if (!other.classifierInfos_.isEmpty()) {
          if (classifierInfos_.isEmpty()) {
            classifierInfos_ = other.classifierInfos_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureClassifierInfosIsMutable();
            classifierInfos_.addAll(other.classifierInfos_);
          }
          onChanged();
        }
      } else {
        if (!other.classifierInfos_.isEmpty()) {
          if (classifierInfosBuilder_.isEmpty()) {
            classifierInfosBuilder_.dispose();
            classifierInfosBuilder_ = null;
            classifierInfos_ = other.classifierInfos_;
            bitField0_ = (bitField0_ & ~0x00000100);
            classifierInfosBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getClassifierInfosFieldBuilder() : null;
          } else {
            classifierInfosBuilder_.addAllMessages(other.classifierInfos_);
          }
        }
      }
      if (fluxMeterInfosBuilder_ == null) {
        if (!other.fluxMeterInfos_.isEmpty()) {
          if (fluxMeterInfos_.isEmpty()) {
            fluxMeterInfos_ = other.fluxMeterInfos_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureFluxMeterInfosIsMutable();
            fluxMeterInfos_.addAll(other.fluxMeterInfos_);
          }
          onChanged();
        }
      } else {
        if (!other.fluxMeterInfos_.isEmpty()) {
          if (fluxMeterInfosBuilder_.isEmpty()) {
            fluxMeterInfosBuilder_.dispose();
            fluxMeterInfosBuilder_ = null;
            fluxMeterInfos_ = other.fluxMeterInfos_;
            bitField0_ = (bitField0_ & ~0x00000200);
            fluxMeterInfosBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFluxMeterInfosFieldBuilder() : null;
          } else {
            fluxMeterInfosBuilder_.addAllMessages(other.fluxMeterInfos_);
          }
        }
      }
      if (limiterDecisionsBuilder_ == null) {
        if (!other.limiterDecisions_.isEmpty()) {
          if (limiterDecisions_.isEmpty()) {
            limiterDecisions_ = other.limiterDecisions_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureLimiterDecisionsIsMutable();
            limiterDecisions_.addAll(other.limiterDecisions_);
          }
          onChanged();
        }
      } else {
        if (!other.limiterDecisions_.isEmpty()) {
          if (limiterDecisionsBuilder_.isEmpty()) {
            limiterDecisionsBuilder_.dispose();
            limiterDecisionsBuilder_ = null;
            limiterDecisions_ = other.limiterDecisions_;
            bitField0_ = (bitField0_ & ~0x00000400);
            limiterDecisionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLimiterDecisionsFieldBuilder() : null;
          } else {
            limiterDecisionsBuilder_.addAllMessages(other.limiterDecisions_);
          }
        }
      }
      if (other.hasWaitTime()) {
        mergeWaitTime(other.getWaitTime());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getStartFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getEndFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureServicesIsMutable();
              services_.add(s);
              break;
            } // case 34
            case 42: {
              controlPoint_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 42
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureFlowLabelKeysIsMutable();
              flowLabelKeys_.add(s);
              break;
            } // case 50
            case 58: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              telemetryFlowLabels__ = input.readMessage(
                  TelemetryFlowLabelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableTelemetryFlowLabels().getMutableMap().put(
                  telemetryFlowLabels__.getKey(), telemetryFlowLabels__.getValue());
              bitField0_ |= 0x00000020;
              break;
            } // case 58
            case 64: {
              decisionType_ = input.readEnum();
              bitField0_ |= 0x00000040;
              break;
            } // case 64
            case 72: {
              rejectReason_ = input.readEnum();
              bitField0_ |= 0x00000080;
              break;
            } // case 72
            case 82: {
              com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo m =
                  input.readMessage(
                      com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.parser(),
                      extensionRegistry);
              if (classifierInfosBuilder_ == null) {
                ensureClassifierInfosIsMutable();
                classifierInfos_.add(m);
              } else {
                classifierInfosBuilder_.addMessage(m);
              }
              break;
            } // case 82
            case 90: {
              com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo m =
                  input.readMessage(
                      com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.parser(),
                      extensionRegistry);
              if (fluxMeterInfosBuilder_ == null) {
                ensureFluxMeterInfosIsMutable();
                fluxMeterInfos_.add(m);
              } else {
                fluxMeterInfosBuilder_.addMessage(m);
              }
              break;
            } // case 90
            case 98: {
              com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision m =
                  input.readMessage(
                      com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.parser(),
                      extensionRegistry);
              if (limiterDecisionsBuilder_ == null) {
                ensureLimiterDecisionsIsMutable();
                limiterDecisions_.add(m);
              } else {
                limiterDecisionsBuilder_.addMessage(m);
              }
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getWaitTimeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000800;
              break;
            } // case 106
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Timestamp start_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> startBuilder_;
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     * @return Whether the start field is set.
     */
    public boolean hasStart() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     * @return The start.
     */
    public com.google.protobuf.Timestamp getStart() {
      if (startBuilder_ == null) {
        return start_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : start_;
      } else {
        return startBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     */
    public Builder setStart(com.google.protobuf.Timestamp value) {
      if (startBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        start_ = value;
      } else {
        startBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     */
    public Builder setStart(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (startBuilder_ == null) {
        start_ = builderForValue.build();
      } else {
        startBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     */
    public Builder mergeStart(com.google.protobuf.Timestamp value) {
      if (startBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          start_ != null &&
          start_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getStartBuilder().mergeFrom(value);
        } else {
          start_ = value;
        }
      } else {
        startBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     */
    public Builder clearStart() {
      bitField0_ = (bitField0_ & ~0x00000001);
      start_ = null;
      if (startBuilder_ != null) {
        startBuilder_.dispose();
        startBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     */
    public com.google.protobuf.Timestamp.Builder getStartBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getStartFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     */
    public com.google.protobuf.TimestampOrBuilder getStartOrBuilder() {
      if (startBuilder_ != null) {
        return startBuilder_.getMessageOrBuilder();
      } else {
        return start_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : start_;
      }
    }
    /**
     * <pre>
     * start timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp start = 1 [json_name = "start"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getStartFieldBuilder() {
      if (startBuilder_ == null) {
        startBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getStart(),
                getParentForChildren(),
                isClean());
        start_ = null;
      }
      return startBuilder_;
    }

    private com.google.protobuf.Timestamp end_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> endBuilder_;
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     * @return Whether the end field is set.
     */
    public boolean hasEnd() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     * @return The end.
     */
    public com.google.protobuf.Timestamp getEnd() {
      if (endBuilder_ == null) {
        return end_ == null ? com.google.protobuf.Timestamp.getDefaultInstance() : end_;
      } else {
        return endBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     */
    public Builder setEnd(com.google.protobuf.Timestamp value) {
      if (endBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        end_ = value;
      } else {
        endBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     */
    public Builder setEnd(
        com.google.protobuf.Timestamp.Builder builderForValue) {
      if (endBuilder_ == null) {
        end_ = builderForValue.build();
      } else {
        endBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     */
    public Builder mergeEnd(com.google.protobuf.Timestamp value) {
      if (endBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          end_ != null &&
          end_ != com.google.protobuf.Timestamp.getDefaultInstance()) {
          getEndBuilder().mergeFrom(value);
        } else {
          end_ = value;
        }
      } else {
        endBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     */
    public Builder clearEnd() {
      bitField0_ = (bitField0_ & ~0x00000002);
      end_ = null;
      if (endBuilder_ != null) {
        endBuilder_.dispose();
        endBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     */
    public com.google.protobuf.Timestamp.Builder getEndBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getEndFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     */
    public com.google.protobuf.TimestampOrBuilder getEndOrBuilder() {
      if (endBuilder_ != null) {
        return endBuilder_.getMessageOrBuilder();
      } else {
        return end_ == null ?
            com.google.protobuf.Timestamp.getDefaultInstance() : end_;
      }
    }
    /**
     * <pre>
     * end timestamp
     * </pre>
     *
     * <code>.google.protobuf.Timestamp end = 2 [json_name = "end"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder> 
        getEndFieldBuilder() {
      if (endBuilder_ == null) {
        endBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Timestamp, com.google.protobuf.Timestamp.Builder, com.google.protobuf.TimestampOrBuilder>(
                getEnd(),
                getParentForChildren(),
                isClean());
        end_ = null;
      }
      return endBuilder_;
    }

    private com.google.protobuf.LazyStringArrayList services_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureServicesIsMutable() {
      if (!services_.isModifiable()) {
        services_ = new com.google.protobuf.LazyStringArrayList(services_);
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @return A list containing the services.
     */
    public com.google.protobuf.ProtocolStringList
        getServicesList() {
      services_.makeImmutable();
      return services_;
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @return The count of services.
     */
    public int getServicesCount() {
      return services_.size();
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @param index The index of the element to return.
     * @return The services at the given index.
     */
    public java.lang.String getServices(int index) {
      return services_.get(index);
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the services at the given index.
     */
    public com.google.protobuf.ByteString
        getServicesBytes(int index) {
      return services_.getByteString(index);
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @param index The index to set the value at.
     * @param value The services to set.
     * @return This builder for chaining.
     */
    public Builder setServices(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureServicesIsMutable();
      services_.set(index, value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @param value The services to add.
     * @return This builder for chaining.
     */
    public Builder addServices(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureServicesIsMutable();
      services_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @param values The services to add.
     * @return This builder for chaining.
     */
    public Builder addAllServices(
        java.lang.Iterable<java.lang.String> values) {
      ensureServicesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, services_);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @return This builder for chaining.
     */
    public Builder clearServices() {
      services_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * services that matched
     * </pre>
     *
     * <code>repeated string services = 4 [json_name = "services"];</code>
     * @param value The bytes of the services to add.
     * @return This builder for chaining.
     */
    public Builder addServicesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureServicesIsMutable();
      services_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.lang.Object controlPoint_ = "";
    /**
     * <pre>
     * control_point of request
     * </pre>
     *
     * <code>string control_point = 5 [json_name = "controlPoint"];</code>
     * @return The controlPoint.
     */
    public java.lang.String getControlPoint() {
      java.lang.Object ref = controlPoint_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        controlPoint_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * control_point of request
     * </pre>
     *
     * <code>string control_point = 5 [json_name = "controlPoint"];</code>
     * @return The bytes for controlPoint.
     */
    public com.google.protobuf.ByteString
        getControlPointBytes() {
      java.lang.Object ref = controlPoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        controlPoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * control_point of request
     * </pre>
     *
     * <code>string control_point = 5 [json_name = "controlPoint"];</code>
     * @param value The controlPoint to set.
     * @return This builder for chaining.
     */
    public Builder setControlPoint(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      controlPoint_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * control_point of request
     * </pre>
     *
     * <code>string control_point = 5 [json_name = "controlPoint"];</code>
     * @return This builder for chaining.
     */
    public Builder clearControlPoint() {
      controlPoint_ = getDefaultInstance().getControlPoint();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * control_point of request
     * </pre>
     *
     * <code>string control_point = 5 [json_name = "controlPoint"];</code>
     * @param value The bytes for controlPoint to set.
     * @return This builder for chaining.
     */
    public Builder setControlPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      controlPoint_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList flowLabelKeys_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureFlowLabelKeysIsMutable() {
      if (!flowLabelKeys_.isModifiable()) {
        flowLabelKeys_ = new com.google.protobuf.LazyStringArrayList(flowLabelKeys_);
      }
      bitField0_ |= 0x00000010;
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @return A list containing the flowLabelKeys.
     */
    public com.google.protobuf.ProtocolStringList
        getFlowLabelKeysList() {
      flowLabelKeys_.makeImmutable();
      return flowLabelKeys_;
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @return The count of flowLabelKeys.
     */
    public int getFlowLabelKeysCount() {
      return flowLabelKeys_.size();
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @param index The index of the element to return.
     * @return The flowLabelKeys at the given index.
     */
    public java.lang.String getFlowLabelKeys(int index) {
      return flowLabelKeys_.get(index);
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the flowLabelKeys at the given index.
     */
    public com.google.protobuf.ByteString
        getFlowLabelKeysBytes(int index) {
      return flowLabelKeys_.getByteString(index);
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @param index The index to set the value at.
     * @param value The flowLabelKeys to set.
     * @return This builder for chaining.
     */
    public Builder setFlowLabelKeys(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureFlowLabelKeysIsMutable();
      flowLabelKeys_.set(index, value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @param value The flowLabelKeys to add.
     * @return This builder for chaining.
     */
    public Builder addFlowLabelKeys(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureFlowLabelKeysIsMutable();
      flowLabelKeys_.add(value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @param values The flowLabelKeys to add.
     * @return This builder for chaining.
     */
    public Builder addAllFlowLabelKeys(
        java.lang.Iterable<java.lang.String> values) {
      ensureFlowLabelKeysIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, flowLabelKeys_);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFlowLabelKeys() {
      flowLabelKeys_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * flow label keys that were matched for this request.
     * </pre>
     *
     * <code>repeated string flow_label_keys = 6 [json_name = "flowLabelKeys"];</code>
     * @param value The bytes of the flowLabelKeys to add.
     * @return This builder for chaining.
     */
    public Builder addFlowLabelKeysBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureFlowLabelKeysIsMutable();
      flowLabelKeys_.add(value);
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> telemetryFlowLabels_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetTelemetryFlowLabels() {
      if (telemetryFlowLabels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            TelemetryFlowLabelsDefaultEntryHolder.defaultEntry);
      }
      return telemetryFlowLabels_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableTelemetryFlowLabels() {
      if (telemetryFlowLabels_ == null) {
        telemetryFlowLabels_ = com.google.protobuf.MapField.newMapField(
            TelemetryFlowLabelsDefaultEntryHolder.defaultEntry);
      }
      if (!telemetryFlowLabels_.isMutable()) {
        telemetryFlowLabels_ = telemetryFlowLabels_.copy();
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return telemetryFlowLabels_;
    }
    public int getTelemetryFlowLabelsCount() {
      return internalGetTelemetryFlowLabels().getMap().size();
    }
    /**
     * <pre>
     * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
     * </pre>
     *
     * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
     */
    @java.lang.Override
    public boolean containsTelemetryFlowLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetTelemetryFlowLabels().getMap().containsKey(key);
    }
    /**
     * Use {@link #getTelemetryFlowLabelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getTelemetryFlowLabels() {
      return getTelemetryFlowLabelsMap();
    }
    /**
     * <pre>
     * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
     * </pre>
     *
     * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getTelemetryFlowLabelsMap() {
      return internalGetTelemetryFlowLabels().getMap();
    }
    /**
     * <pre>
     * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
     * </pre>
     *
     * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getTelemetryFlowLabelsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTelemetryFlowLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
     * </pre>
     *
     * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
     */
    @java.lang.Override
    public java.lang.String getTelemetryFlowLabelsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetTelemetryFlowLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearTelemetryFlowLabels() {
      bitField0_ = (bitField0_ & ~0x00000020);
      internalGetMutableTelemetryFlowLabels().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
     * </pre>
     *
     * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
     */
    public Builder removeTelemetryFlowLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableTelemetryFlowLabels().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
        getMutableTelemetryFlowLabels() {
      bitField0_ |= 0x00000020;
      return internalGetMutableTelemetryFlowLabels().getMutableMap();
    }
    /**
     * <pre>
     * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
     * </pre>
     *
     * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
     */
    public Builder putTelemetryFlowLabels(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableTelemetryFlowLabels().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000020;
      return this;
    }
    /**
     * <pre>
     * telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
     * </pre>
     *
     * <code>map&lt;string, string&gt; telemetry_flow_labels = 7 [json_name = "telemetryFlowLabels"];</code>
     */
    public Builder putAllTelemetryFlowLabels(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableTelemetryFlowLabels().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000020;
      return this;
    }

    private int decisionType_ = 0;
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.DecisionType decision_type = 8 [json_name = "decisionType"];</code>
     * @return The enum numeric value on the wire for decisionType.
     */
    @java.lang.Override public int getDecisionTypeValue() {
      return decisionType_;
    }
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.DecisionType decision_type = 8 [json_name = "decisionType"];</code>
     * @param value The enum numeric value on the wire for decisionType to set.
     * @return This builder for chaining.
     */
    public Builder setDecisionTypeValue(int value) {
      decisionType_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.DecisionType decision_type = 8 [json_name = "decisionType"];</code>
     * @return The decisionType.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType getDecisionType() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType result = com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType.forNumber(decisionType_);
      return result == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.DecisionType decision_type = 8 [json_name = "decisionType"];</code>
     * @param value The decisionType to set.
     * @return This builder for chaining.
     */
    public Builder setDecisionType(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.DecisionType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000040;
      decisionType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.DecisionType decision_type = 8 [json_name = "decisionType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDecisionType() {
      bitField0_ = (bitField0_ & ~0x00000040);
      decisionType_ = 0;
      onChanged();
      return this;
    }

    private int rejectReason_ = 0;
    /**
     * <pre>
     * reject_reason contains the reason for the rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.RejectReason reject_reason = 9 [json_name = "rejectReason"];</code>
     * @return The enum numeric value on the wire for rejectReason.
     */
    @java.lang.Override public int getRejectReasonValue() {
      return rejectReason_;
    }
    /**
     * <pre>
     * reject_reason contains the reason for the rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.RejectReason reject_reason = 9 [json_name = "rejectReason"];</code>
     * @param value The enum numeric value on the wire for rejectReason to set.
     * @return This builder for chaining.
     */
    public Builder setRejectReasonValue(int value) {
      rejectReason_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * reject_reason contains the reason for the rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.RejectReason reject_reason = 9 [json_name = "rejectReason"];</code>
     * @return The rejectReason.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason getRejectReason() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason result = com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason.forNumber(rejectReason_);
      return result == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * reject_reason contains the reason for the rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.RejectReason reject_reason = 9 [json_name = "rejectReason"];</code>
     * @param value The rejectReason to set.
     * @return This builder for chaining.
     */
    public Builder setRejectReason(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse.RejectReason value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000080;
      rejectReason_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * reject_reason contains the reason for the rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.check.v1.CheckResponse.RejectReason reject_reason = 9 [json_name = "rejectReason"];</code>
     * @return This builder for chaining.
     */
    public Builder clearRejectReason() {
      bitField0_ = (bitField0_ & ~0x00000080);
      rejectReason_ = 0;
      onChanged();
      return this;
    }

    private java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo> classifierInfos_ =
      java.util.Collections.emptyList();
    private void ensureClassifierInfosIsMutable() {
      if (!((bitField0_ & 0x00000100) != 0)) {
        classifierInfos_ = new java.util.ArrayList<com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo>(classifierInfos_);
        bitField0_ |= 0x00000100;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfoOrBuilder> classifierInfosBuilder_;

    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo> getClassifierInfosList() {
      if (classifierInfosBuilder_ == null) {
        return java.util.Collections.unmodifiableList(classifierInfos_);
      } else {
        return classifierInfosBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public int getClassifierInfosCount() {
      if (classifierInfosBuilder_ == null) {
        return classifierInfos_.size();
      } else {
        return classifierInfosBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo getClassifierInfos(int index) {
      if (classifierInfosBuilder_ == null) {
        return classifierInfos_.get(index);
      } else {
        return classifierInfosBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder setClassifierInfos(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo value) {
      if (classifierInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClassifierInfosIsMutable();
        classifierInfos_.set(index, value);
        onChanged();
      } else {
        classifierInfosBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder setClassifierInfos(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder builderForValue) {
      if (classifierInfosBuilder_ == null) {
        ensureClassifierInfosIsMutable();
        classifierInfos_.set(index, builderForValue.build());
        onChanged();
      } else {
        classifierInfosBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder addClassifierInfos(com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo value) {
      if (classifierInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClassifierInfosIsMutable();
        classifierInfos_.add(value);
        onChanged();
      } else {
        classifierInfosBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder addClassifierInfos(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo value) {
      if (classifierInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClassifierInfosIsMutable();
        classifierInfos_.add(index, value);
        onChanged();
      } else {
        classifierInfosBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder addClassifierInfos(
        com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder builderForValue) {
      if (classifierInfosBuilder_ == null) {
        ensureClassifierInfosIsMutable();
        classifierInfos_.add(builderForValue.build());
        onChanged();
      } else {
        classifierInfosBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder addClassifierInfos(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder builderForValue) {
      if (classifierInfosBuilder_ == null) {
        ensureClassifierInfosIsMutable();
        classifierInfos_.add(index, builderForValue.build());
        onChanged();
      } else {
        classifierInfosBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder addAllClassifierInfos(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo> values) {
      if (classifierInfosBuilder_ == null) {
        ensureClassifierInfosIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, classifierInfos_);
        onChanged();
      } else {
        classifierInfosBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder clearClassifierInfos() {
      if (classifierInfosBuilder_ == null) {
        classifierInfos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
      } else {
        classifierInfosBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public Builder removeClassifierInfos(int index) {
      if (classifierInfosBuilder_ == null) {
        ensureClassifierInfosIsMutable();
        classifierInfos_.remove(index);
        onChanged();
      } else {
        classifierInfosBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder getClassifierInfosBuilder(
        int index) {
      return getClassifierInfosFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfoOrBuilder getClassifierInfosOrBuilder(
        int index) {
      if (classifierInfosBuilder_ == null) {
        return classifierInfos_.get(index);  } else {
        return classifierInfosBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfoOrBuilder> 
         getClassifierInfosOrBuilderList() {
      if (classifierInfosBuilder_ != null) {
        return classifierInfosBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(classifierInfos_);
      }
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder addClassifierInfosBuilder() {
      return getClassifierInfosFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder addClassifierInfosBuilder(
        int index) {
      return getClassifierInfosFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * classifiers that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.ClassifierInfo classifier_infos = 10 [json_name = "classifierInfos"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder> 
         getClassifierInfosBuilderList() {
      return getClassifierInfosFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfoOrBuilder> 
        getClassifierInfosFieldBuilder() {
      if (classifierInfosBuilder_ == null) {
        classifierInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfo.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.ClassifierInfoOrBuilder>(
                classifierInfos_,
                ((bitField0_ & 0x00000100) != 0),
                getParentForChildren(),
                isClean());
        classifierInfos_ = null;
      }
      return classifierInfosBuilder_;
    }

    private java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo> fluxMeterInfos_ =
      java.util.Collections.emptyList();
    private void ensureFluxMeterInfosIsMutable() {
      if (!((bitField0_ & 0x00000200) != 0)) {
        fluxMeterInfos_ = new java.util.ArrayList<com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo>(fluxMeterInfos_);
        bitField0_ |= 0x00000200;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfoOrBuilder> fluxMeterInfosBuilder_;

    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo> getFluxMeterInfosList() {
      if (fluxMeterInfosBuilder_ == null) {
        return java.util.Collections.unmodifiableList(fluxMeterInfos_);
      } else {
        return fluxMeterInfosBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public int getFluxMeterInfosCount() {
      if (fluxMeterInfosBuilder_ == null) {
        return fluxMeterInfos_.size();
      } else {
        return fluxMeterInfosBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo getFluxMeterInfos(int index) {
      if (fluxMeterInfosBuilder_ == null) {
        return fluxMeterInfos_.get(index);
      } else {
        return fluxMeterInfosBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder setFluxMeterInfos(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo value) {
      if (fluxMeterInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMeterInfosIsMutable();
        fluxMeterInfos_.set(index, value);
        onChanged();
      } else {
        fluxMeterInfosBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder setFluxMeterInfos(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder builderForValue) {
      if (fluxMeterInfosBuilder_ == null) {
        ensureFluxMeterInfosIsMutable();
        fluxMeterInfos_.set(index, builderForValue.build());
        onChanged();
      } else {
        fluxMeterInfosBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder addFluxMeterInfos(com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo value) {
      if (fluxMeterInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMeterInfosIsMutable();
        fluxMeterInfos_.add(value);
        onChanged();
      } else {
        fluxMeterInfosBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder addFluxMeterInfos(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo value) {
      if (fluxMeterInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMeterInfosIsMutable();
        fluxMeterInfos_.add(index, value);
        onChanged();
      } else {
        fluxMeterInfosBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder addFluxMeterInfos(
        com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder builderForValue) {
      if (fluxMeterInfosBuilder_ == null) {
        ensureFluxMeterInfosIsMutable();
        fluxMeterInfos_.add(builderForValue.build());
        onChanged();
      } else {
        fluxMeterInfosBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder addFluxMeterInfos(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder builderForValue) {
      if (fluxMeterInfosBuilder_ == null) {
        ensureFluxMeterInfosIsMutable();
        fluxMeterInfos_.add(index, builderForValue.build());
        onChanged();
      } else {
        fluxMeterInfosBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder addAllFluxMeterInfos(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo> values) {
      if (fluxMeterInfosBuilder_ == null) {
        ensureFluxMeterInfosIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fluxMeterInfos_);
        onChanged();
      } else {
        fluxMeterInfosBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder clearFluxMeterInfos() {
      if (fluxMeterInfosBuilder_ == null) {
        fluxMeterInfos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
      } else {
        fluxMeterInfosBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public Builder removeFluxMeterInfos(int index) {
      if (fluxMeterInfosBuilder_ == null) {
        ensureFluxMeterInfosIsMutable();
        fluxMeterInfos_.remove(index);
        onChanged();
      } else {
        fluxMeterInfosBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder getFluxMeterInfosBuilder(
        int index) {
      return getFluxMeterInfosFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfoOrBuilder getFluxMeterInfosOrBuilder(
        int index) {
      if (fluxMeterInfosBuilder_ == null) {
        return fluxMeterInfos_.get(index);  } else {
        return fluxMeterInfosBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfoOrBuilder> 
         getFluxMeterInfosOrBuilderList() {
      if (fluxMeterInfosBuilder_ != null) {
        return fluxMeterInfosBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(fluxMeterInfos_);
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder addFluxMeterInfosBuilder() {
      return getFluxMeterInfosFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder addFluxMeterInfosBuilder(
        int index) {
      return getFluxMeterInfosFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.FluxMeterInfo flux_meter_infos = 11 [json_name = "fluxMeterInfos"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder> 
         getFluxMeterInfosBuilderList() {
      return getFluxMeterInfosFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfoOrBuilder> 
        getFluxMeterInfosFieldBuilder() {
      if (fluxMeterInfosBuilder_ == null) {
        fluxMeterInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfo.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.FluxMeterInfoOrBuilder>(
                fluxMeterInfos_,
                ((bitField0_ & 0x00000200) != 0),
                getParentForChildren(),
                isClean());
        fluxMeterInfos_ = null;
      }
      return fluxMeterInfosBuilder_;
    }

    private java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision> limiterDecisions_ =
      java.util.Collections.emptyList();
    private void ensureLimiterDecisionsIsMutable() {
      if (!((bitField0_ & 0x00000400) != 0)) {
        limiterDecisions_ = new java.util.ArrayList<com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision>(limiterDecisions_);
        bitField0_ |= 0x00000400;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecisionOrBuilder> limiterDecisionsBuilder_;

    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision> getLimiterDecisionsList() {
      if (limiterDecisionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(limiterDecisions_);
      } else {
        return limiterDecisionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public int getLimiterDecisionsCount() {
      if (limiterDecisionsBuilder_ == null) {
        return limiterDecisions_.size();
      } else {
        return limiterDecisionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision getLimiterDecisions(int index) {
      if (limiterDecisionsBuilder_ == null) {
        return limiterDecisions_.get(index);
      } else {
        return limiterDecisionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder setLimiterDecisions(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision value) {
      if (limiterDecisionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.set(index, value);
        onChanged();
      } else {
        limiterDecisionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder setLimiterDecisions(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder builderForValue) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.set(index, builderForValue.build());
        onChanged();
      } else {
        limiterDecisionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder addLimiterDecisions(com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision value) {
      if (limiterDecisionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.add(value);
        onChanged();
      } else {
        limiterDecisionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder addLimiterDecisions(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision value) {
      if (limiterDecisionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.add(index, value);
        onChanged();
      } else {
        limiterDecisionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder addLimiterDecisions(
        com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder builderForValue) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.add(builderForValue.build());
        onChanged();
      } else {
        limiterDecisionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder addLimiterDecisions(
        int index, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder builderForValue) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.add(index, builderForValue.build());
        onChanged();
      } else {
        limiterDecisionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder addAllLimiterDecisions(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision> values) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, limiterDecisions_);
        onChanged();
      } else {
        limiterDecisionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder clearLimiterDecisions() {
      if (limiterDecisionsBuilder_ == null) {
        limiterDecisions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
      } else {
        limiterDecisionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public Builder removeLimiterDecisions(int index) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.remove(index);
        onChanged();
      } else {
        limiterDecisionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder getLimiterDecisionsBuilder(
        int index) {
      return getLimiterDecisionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecisionOrBuilder getLimiterDecisionsOrBuilder(
        int index) {
      if (limiterDecisionsBuilder_ == null) {
        return limiterDecisions_.get(index);  } else {
        return limiterDecisionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecisionOrBuilder> 
         getLimiterDecisionsOrBuilderList() {
      if (limiterDecisionsBuilder_ != null) {
        return limiterDecisionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(limiterDecisions_);
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder addLimiterDecisionsBuilder() {
      return getLimiterDecisionsFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.getDefaultInstance());
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder addLimiterDecisionsBuilder(
        int index) {
      return getLimiterDecisionsFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.getDefaultInstance());
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.check.v1.LimiterDecision limiter_decisions = 12 [json_name = "limiterDecisions"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder> 
         getLimiterDecisionsBuilderList() {
      return getLimiterDecisionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecisionOrBuilder> 
        getLimiterDecisionsFieldBuilder() {
      if (limiterDecisionsBuilder_ == null) {
        limiterDecisionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecision.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.LimiterDecisionOrBuilder>(
                limiterDecisions_,
                ((bitField0_ & 0x00000400) != 0),
                getParentForChildren(),
                isClean());
        limiterDecisions_ = null;
      }
      return limiterDecisionsBuilder_;
    }

    private com.google.protobuf.Duration waitTime_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> waitTimeBuilder_;
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     * @return Whether the waitTime field is set.
     */
    public boolean hasWaitTime() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     * @return The waitTime.
     */
    public com.google.protobuf.Duration getWaitTime() {
      if (waitTimeBuilder_ == null) {
        return waitTime_ == null ? com.google.protobuf.Duration.getDefaultInstance() : waitTime_;
      } else {
        return waitTimeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     */
    public Builder setWaitTime(com.google.protobuf.Duration value) {
      if (waitTimeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        waitTime_ = value;
      } else {
        waitTimeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     */
    public Builder setWaitTime(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (waitTimeBuilder_ == null) {
        waitTime_ = builderForValue.build();
      } else {
        waitTimeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     */
    public Builder mergeWaitTime(com.google.protobuf.Duration value) {
      if (waitTimeBuilder_ == null) {
        if (((bitField0_ & 0x00000800) != 0) &&
          waitTime_ != null &&
          waitTime_ != com.google.protobuf.Duration.getDefaultInstance()) {
          getWaitTimeBuilder().mergeFrom(value);
        } else {
          waitTime_ = value;
        }
      } else {
        waitTimeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     */
    public Builder clearWaitTime() {
      bitField0_ = (bitField0_ & ~0x00000800);
      waitTime_ = null;
      if (waitTimeBuilder_ != null) {
        waitTimeBuilder_.dispose();
        waitTimeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     */
    public com.google.protobuf.Duration.Builder getWaitTimeBuilder() {
      bitField0_ |= 0x00000800;
      onChanged();
      return getWaitTimeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     */
    public com.google.protobuf.DurationOrBuilder getWaitTimeOrBuilder() {
      if (waitTimeBuilder_ != null) {
        return waitTimeBuilder_.getMessageOrBuilder();
      } else {
        return waitTime_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : waitTime_;
      }
    }
    /**
     * <pre>
     * Recommended minimal amount of time to wait when retrying the request, if
     * decision_type is REJECTED. Optional.
     * </pre>
     *
     * <code>.google.protobuf.Duration wait_time = 13 [json_name = "waitTime"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getWaitTimeFieldBuilder() {
      if (waitTimeBuilder_ == null) {
        waitTimeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getWaitTime(),
                getParentForChildren(),
                isClean());
        waitTime_ = null;
      }
      return waitTimeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.check.v1.CheckResponse)
  }

  // @@protoc_insertion_point(class_scope:aperture.flowcontrol.check.v1.CheckResponse)
  private static final com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse();
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CheckResponse>
      PARSER = new com.google.protobuf.AbstractParser<CheckResponse>() {
    @java.lang.Override
    public CheckResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CheckResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CheckResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

