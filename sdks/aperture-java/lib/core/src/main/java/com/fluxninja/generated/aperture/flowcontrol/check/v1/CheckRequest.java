// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/check/v1/check.proto

package com.fluxninja.generated.aperture.flowcontrol.check.v1;

/**
 * <pre>
 * CheckRequest contains fields required to perform Check call.
 * </pre>
 *
 * Protobuf type {@code aperture.flowcontrol.check.v1.CheckRequest}
 */
public final class CheckRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.flowcontrol.check.v1.CheckRequest)
    CheckRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CheckRequest.newBuilder() to construct.
  private CheckRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CheckRequest() {
    controlPoint_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CheckRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckRequest_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetLabels();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest.class, com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest.Builder.class);
  }

  private int bitField0_;
  public static final int CONTROL_POINT_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object controlPoint_ = "";
  /**
   * <code>string control_point = 1 [json_name = "controlPoint"];</code>
   * @return The controlPoint.
   */
  @java.lang.Override
  public java.lang.String getControlPoint() {
    java.lang.Object ref = controlPoint_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      controlPoint_ = s;
      return s;
    }
  }
  /**
   * <code>string control_point = 1 [json_name = "controlPoint"];</code>
   * @return The bytes for controlPoint.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getControlPointBytes() {
    java.lang.Object ref = controlPoint_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      controlPoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LABELS_FIELD_NUMBER = 2;
  private static final class LabelsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckRequest_LabelsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> labels_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetLabels() {
    if (labels_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          LabelsDefaultEntryHolder.defaultEntry);
    }
    return labels_;
  }
  public int getLabelsCount() {
    return internalGetLabels().getMap().size();
  }
  /**
   * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
   */
  @java.lang.Override
  public boolean containsLabels(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetLabels().getMap().containsKey(key);
  }
  /**
   * Use {@link #getLabelsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getLabels() {
    return getLabelsMap();
  }
  /**
   * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
    return internalGetLabels().getMap();
  }
  /**
   * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
   */
  @java.lang.Override
  public /* nullable */
java.lang.String getLabelsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetLabels().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
   */
  @java.lang.Override
  public java.lang.String getLabelsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetLabels().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int RAMP_MODE_FIELD_NUMBER = 3;
  private boolean rampMode_ = false;
  /**
   * <code>bool ramp_mode = 3 [json_name = "rampMode"];</code>
   * @return The rampMode.
   */
  @java.lang.Override
  public boolean getRampMode() {
    return rampMode_;
  }

  public static final int CACHE_LOOKUP_REQUEST_FIELD_NUMBER = 4;
  private com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest cacheLookupRequest_;
  /**
   * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
   * @return Whether the cacheLookupRequest field is set.
   */
  @java.lang.Override
  public boolean hasCacheLookupRequest() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
   * @return The cacheLookupRequest.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest getCacheLookupRequest() {
    return cacheLookupRequest_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.getDefaultInstance() : cacheLookupRequest_;
  }
  /**
   * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequestOrBuilder getCacheLookupRequestOrBuilder() {
    return cacheLookupRequest_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.getDefaultInstance() : cacheLookupRequest_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(controlPoint_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, controlPoint_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetLabels(),
        LabelsDefaultEntryHolder.defaultEntry,
        2);
    if (rampMode_ != false) {
      output.writeBool(3, rampMode_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(4, getCacheLookupRequest());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(controlPoint_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, controlPoint_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetLabels().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      labels__ = LabelsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, labels__);
    }
    if (rampMode_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(3, rampMode_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getCacheLookupRequest());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest other = (com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest) obj;

    if (!getControlPoint()
        .equals(other.getControlPoint())) return false;
    if (!internalGetLabels().equals(
        other.internalGetLabels())) return false;
    if (getRampMode()
        != other.getRampMode()) return false;
    if (hasCacheLookupRequest() != other.hasCacheLookupRequest()) return false;
    if (hasCacheLookupRequest()) {
      if (!getCacheLookupRequest()
          .equals(other.getCacheLookupRequest())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CONTROL_POINT_FIELD_NUMBER;
    hash = (53 * hash) + getControlPoint().hashCode();
    if (!internalGetLabels().getMap().isEmpty()) {
      hash = (37 * hash) + LABELS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetLabels().hashCode();
    }
    hash = (37 * hash) + RAMP_MODE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRampMode());
    if (hasCacheLookupRequest()) {
      hash = (37 * hash) + CACHE_LOOKUP_REQUEST_FIELD_NUMBER;
      hash = (53 * hash) + getCacheLookupRequest().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CheckRequest contains fields required to perform Check call.
   * </pre>
   *
   * Protobuf type {@code aperture.flowcontrol.check.v1.CheckRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.check.v1.CheckRequest)
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest.class, com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getCacheLookupRequestFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      controlPoint_ = "";
      internalGetMutableLabels().clear();
      rampMode_ = false;
      cacheLookupRequest_ = null;
      if (cacheLookupRequestBuilder_ != null) {
        cacheLookupRequestBuilder_.dispose();
        cacheLookupRequestBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CheckRequest_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest build() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest buildPartial() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest result = new com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.controlPoint_ = controlPoint_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.labels_ = internalGetLabels();
        result.labels_.makeImmutable();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.rampMode_ = rampMode_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.cacheLookupRequest_ = cacheLookupRequestBuilder_ == null
            ? cacheLookupRequest_
            : cacheLookupRequestBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest) {
        return mergeFrom((com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest other) {
      if (other == com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest.getDefaultInstance()) return this;
      if (!other.getControlPoint().isEmpty()) {
        controlPoint_ = other.controlPoint_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      internalGetMutableLabels().mergeFrom(
          other.internalGetLabels());
      bitField0_ |= 0x00000002;
      if (other.getRampMode() != false) {
        setRampMode(other.getRampMode());
      }
      if (other.hasCacheLookupRequest()) {
        mergeCacheLookupRequest(other.getCacheLookupRequest());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              controlPoint_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              labels__ = input.readMessage(
                  LabelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableLabels().getMutableMap().put(
                  labels__.getKey(), labels__.getValue());
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              rampMode_ = input.readBool();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              input.readMessage(
                  getCacheLookupRequestFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object controlPoint_ = "";
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @return The controlPoint.
     */
    public java.lang.String getControlPoint() {
      java.lang.Object ref = controlPoint_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        controlPoint_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @return The bytes for controlPoint.
     */
    public com.google.protobuf.ByteString
        getControlPointBytes() {
      java.lang.Object ref = controlPoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        controlPoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @param value The controlPoint to set.
     * @return This builder for chaining.
     */
    public Builder setControlPoint(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      controlPoint_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @return This builder for chaining.
     */
    public Builder clearControlPoint() {
      controlPoint_ = getDefaultInstance().getControlPoint();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @param value The bytes for controlPoint to set.
     * @return This builder for chaining.
     */
    public Builder setControlPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      controlPoint_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> labels_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetLabels() {
      if (labels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            LabelsDefaultEntryHolder.defaultEntry);
      }
      return labels_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
        internalGetMutableLabels() {
      if (labels_ == null) {
        labels_ = com.google.protobuf.MapField.newMapField(
            LabelsDefaultEntryHolder.defaultEntry);
      }
      if (!labels_.isMutable()) {
        labels_ = labels_.copy();
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return labels_;
    }
    public int getLabelsCount() {
      return internalGetLabels().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
     */
    @java.lang.Override
    public boolean containsLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetLabels().getMap().containsKey(key);
    }
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getLabels() {
      return getLabelsMap();
    }
    /**
     * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
      return internalGetLabels().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getLabelsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
     */
    @java.lang.Override
    public java.lang.String getLabelsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearLabels() {
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableLabels().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
     */
    public Builder removeLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableLabels().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
        getMutableLabels() {
      bitField0_ |= 0x00000002;
      return internalGetMutableLabels().getMutableMap();
    }
    /**
     * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
     */
    public Builder putLabels(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableLabels().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000002;
      return this;
    }
    /**
     * <code>map&lt;string, string&gt; labels = 2 [json_name = "labels"];</code>
     */
    public Builder putAllLabels(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableLabels().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000002;
      return this;
    }

    private boolean rampMode_ ;
    /**
     * <code>bool ramp_mode = 3 [json_name = "rampMode"];</code>
     * @return The rampMode.
     */
    @java.lang.Override
    public boolean getRampMode() {
      return rampMode_;
    }
    /**
     * <code>bool ramp_mode = 3 [json_name = "rampMode"];</code>
     * @param value The rampMode to set.
     * @return This builder for chaining.
     */
    public Builder setRampMode(boolean value) {

      rampMode_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>bool ramp_mode = 3 [json_name = "rampMode"];</code>
     * @return This builder for chaining.
     */
    public Builder clearRampMode() {
      bitField0_ = (bitField0_ & ~0x00000004);
      rampMode_ = false;
      onChanged();
      return this;
    }

    private com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest cacheLookupRequest_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequestOrBuilder> cacheLookupRequestBuilder_;
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     * @return Whether the cacheLookupRequest field is set.
     */
    public boolean hasCacheLookupRequest() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     * @return The cacheLookupRequest.
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest getCacheLookupRequest() {
      if (cacheLookupRequestBuilder_ == null) {
        return cacheLookupRequest_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.getDefaultInstance() : cacheLookupRequest_;
      } else {
        return cacheLookupRequestBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     */
    public Builder setCacheLookupRequest(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest value) {
      if (cacheLookupRequestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cacheLookupRequest_ = value;
      } else {
        cacheLookupRequestBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     */
    public Builder setCacheLookupRequest(
        com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.Builder builderForValue) {
      if (cacheLookupRequestBuilder_ == null) {
        cacheLookupRequest_ = builderForValue.build();
      } else {
        cacheLookupRequestBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     */
    public Builder mergeCacheLookupRequest(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest value) {
      if (cacheLookupRequestBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          cacheLookupRequest_ != null &&
          cacheLookupRequest_ != com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.getDefaultInstance()) {
          getCacheLookupRequestBuilder().mergeFrom(value);
        } else {
          cacheLookupRequest_ = value;
        }
      } else {
        cacheLookupRequestBuilder_.mergeFrom(value);
      }
      if (cacheLookupRequest_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     */
    public Builder clearCacheLookupRequest() {
      bitField0_ = (bitField0_ & ~0x00000008);
      cacheLookupRequest_ = null;
      if (cacheLookupRequestBuilder_ != null) {
        cacheLookupRequestBuilder_.dispose();
        cacheLookupRequestBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.Builder getCacheLookupRequestBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getCacheLookupRequestFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequestOrBuilder getCacheLookupRequestOrBuilder() {
      if (cacheLookupRequestBuilder_ != null) {
        return cacheLookupRequestBuilder_.getMessageOrBuilder();
      } else {
        return cacheLookupRequest_ == null ?
            com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.getDefaultInstance() : cacheLookupRequest_;
      }
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheLookupRequest cache_lookup_request = 4 [json_name = "cacheLookupRequest"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequestOrBuilder> 
        getCacheLookupRequestFieldBuilder() {
      if (cacheLookupRequestBuilder_ == null) {
        cacheLookupRequestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequest.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheLookupRequestOrBuilder>(
                getCacheLookupRequest(),
                getParentForChildren(),
                isClean());
        cacheLookupRequest_ = null;
      }
      return cacheLookupRequestBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.check.v1.CheckRequest)
  }

  // @@protoc_insertion_point(class_scope:aperture.flowcontrol.check.v1.CheckRequest)
  private static final com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest();
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CheckRequest>
      PARSER = new com.google.protobuf.AbstractParser<CheckRequest>() {
    @java.lang.Override
    public CheckRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CheckRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CheckRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

