// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/check/v1/check.proto

package com.fluxninja.generated.aperture.flowcontrol.check.v1;

/**
 * Protobuf type {@code aperture.flowcontrol.check.v1.CacheUpsertRequest}
 */
public final class CacheUpsertRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.flowcontrol.check.v1.CacheUpsertRequest)
    CacheUpsertRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CacheUpsertRequest.newBuilder() to construct.
  private CacheUpsertRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CacheUpsertRequest() {
    controlPoint_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CacheUpsertRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertRequest_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 3:
        return internalGetGlobalCacheEntries();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest.class, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest.Builder.class);
  }

  private int bitField0_;
  public static final int CONTROL_POINT_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object controlPoint_ = "";
  /**
   * <code>string control_point = 1 [json_name = "controlPoint"];</code>
   * @return The controlPoint.
   */
  @java.lang.Override
  public java.lang.String getControlPoint() {
    java.lang.Object ref = controlPoint_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      controlPoint_ = s;
      return s;
    }
  }
  /**
   * <code>string control_point = 1 [json_name = "controlPoint"];</code>
   * @return The bytes for controlPoint.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getControlPointBytes() {
    java.lang.Object ref = controlPoint_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      controlPoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RESULT_CACHE_ENTRY_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry resultCacheEntry_;
  /**
   * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
   * @return Whether the resultCacheEntry field is set.
   */
  @java.lang.Override
  public boolean hasResultCacheEntry() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
   * @return The resultCacheEntry.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry getResultCacheEntry() {
    return resultCacheEntry_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.getDefaultInstance() : resultCacheEntry_;
  }
  /**
   * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntryOrBuilder getResultCacheEntryOrBuilder() {
    return resultCacheEntry_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.getDefaultInstance() : resultCacheEntry_;
  }

  public static final int GLOBAL_CACHE_ENTRIES_FIELD_NUMBER = 3;
  private static final class GlobalCacheEntriesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry>newDefaultInstance(
                com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertRequest_GlobalCacheEntriesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> globalCacheEntries_;
  private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry>
  internalGetGlobalCacheEntries() {
    if (globalCacheEntries_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          GlobalCacheEntriesDefaultEntryHolder.defaultEntry);
    }
    return globalCacheEntries_;
  }
  public int getGlobalCacheEntriesCount() {
    return internalGetGlobalCacheEntries().getMap().size();
  }
  /**
   * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
   */
  @java.lang.Override
  public boolean containsGlobalCacheEntries(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetGlobalCacheEntries().getMap().containsKey(key);
  }
  /**
   * Use {@link #getGlobalCacheEntriesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> getGlobalCacheEntries() {
    return getGlobalCacheEntriesMap();
  }
  /**
   * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> getGlobalCacheEntriesMap() {
    return internalGetGlobalCacheEntries().getMap();
  }
  /**
   * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
   */
  @java.lang.Override
  public /* nullable */
com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry getGlobalCacheEntriesOrDefault(
      java.lang.String key,
      /* nullable */
com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> map =
        internalGetGlobalCacheEntries().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry getGlobalCacheEntriesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> map =
        internalGetGlobalCacheEntries().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(controlPoint_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, controlPoint_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getResultCacheEntry());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetGlobalCacheEntries(),
        GlobalCacheEntriesDefaultEntryHolder.defaultEntry,
        3);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(controlPoint_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, controlPoint_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getResultCacheEntry());
    }
    for (java.util.Map.Entry<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> entry
         : internalGetGlobalCacheEntries().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry>
      globalCacheEntries__ = GlobalCacheEntriesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, globalCacheEntries__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest other = (com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest) obj;

    if (!getControlPoint()
        .equals(other.getControlPoint())) return false;
    if (hasResultCacheEntry() != other.hasResultCacheEntry()) return false;
    if (hasResultCacheEntry()) {
      if (!getResultCacheEntry()
          .equals(other.getResultCacheEntry())) return false;
    }
    if (!internalGetGlobalCacheEntries().equals(
        other.internalGetGlobalCacheEntries())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + CONTROL_POINT_FIELD_NUMBER;
    hash = (53 * hash) + getControlPoint().hashCode();
    if (hasResultCacheEntry()) {
      hash = (37 * hash) + RESULT_CACHE_ENTRY_FIELD_NUMBER;
      hash = (53 * hash) + getResultCacheEntry().hashCode();
    }
    if (!internalGetGlobalCacheEntries().getMap().isEmpty()) {
      hash = (37 * hash) + GLOBAL_CACHE_ENTRIES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetGlobalCacheEntries().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.flowcontrol.check.v1.CacheUpsertRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.check.v1.CacheUpsertRequest)
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetGlobalCacheEntries();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableGlobalCacheEntries();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest.class, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getResultCacheEntryFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      controlPoint_ = "";
      resultCacheEntry_ = null;
      if (resultCacheEntryBuilder_ != null) {
        resultCacheEntryBuilder_.dispose();
        resultCacheEntryBuilder_ = null;
      }
      internalGetMutableGlobalCacheEntries().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CheckProto.internal_static_aperture_flowcontrol_check_v1_CacheUpsertRequest_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest build() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest buildPartial() {
      com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest result = new com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.controlPoint_ = controlPoint_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.resultCacheEntry_ = resultCacheEntryBuilder_ == null
            ? resultCacheEntry_
            : resultCacheEntryBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.globalCacheEntries_ = internalGetGlobalCacheEntries();
        result.globalCacheEntries_.makeImmutable();
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest) {
        return mergeFrom((com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest other) {
      if (other == com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest.getDefaultInstance()) return this;
      if (!other.getControlPoint().isEmpty()) {
        controlPoint_ = other.controlPoint_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasResultCacheEntry()) {
        mergeResultCacheEntry(other.getResultCacheEntry());
      }
      internalGetMutableGlobalCacheEntries().mergeFrom(
          other.internalGetGlobalCacheEntries());
      bitField0_ |= 0x00000004;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              controlPoint_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getResultCacheEntryFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry>
              globalCacheEntries__ = input.readMessage(
                  GlobalCacheEntriesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableGlobalCacheEntries().getMutableMap().put(
                  globalCacheEntries__.getKey(), globalCacheEntries__.getValue());
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object controlPoint_ = "";
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @return The controlPoint.
     */
    public java.lang.String getControlPoint() {
      java.lang.Object ref = controlPoint_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        controlPoint_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @return The bytes for controlPoint.
     */
    public com.google.protobuf.ByteString
        getControlPointBytes() {
      java.lang.Object ref = controlPoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        controlPoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @param value The controlPoint to set.
     * @return This builder for chaining.
     */
    public Builder setControlPoint(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      controlPoint_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @return This builder for chaining.
     */
    public Builder clearControlPoint() {
      controlPoint_ = getDefaultInstance().getControlPoint();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>string control_point = 1 [json_name = "controlPoint"];</code>
     * @param value The bytes for controlPoint to set.
     * @return This builder for chaining.
     */
    public Builder setControlPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      controlPoint_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry resultCacheEntry_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntryOrBuilder> resultCacheEntryBuilder_;
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     * @return Whether the resultCacheEntry field is set.
     */
    public boolean hasResultCacheEntry() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     * @return The resultCacheEntry.
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry getResultCacheEntry() {
      if (resultCacheEntryBuilder_ == null) {
        return resultCacheEntry_ == null ? com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.getDefaultInstance() : resultCacheEntry_;
      } else {
        return resultCacheEntryBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     */
    public Builder setResultCacheEntry(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry value) {
      if (resultCacheEntryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        resultCacheEntry_ = value;
      } else {
        resultCacheEntryBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     */
    public Builder setResultCacheEntry(
        com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.Builder builderForValue) {
      if (resultCacheEntryBuilder_ == null) {
        resultCacheEntry_ = builderForValue.build();
      } else {
        resultCacheEntryBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     */
    public Builder mergeResultCacheEntry(com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry value) {
      if (resultCacheEntryBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          resultCacheEntry_ != null &&
          resultCacheEntry_ != com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.getDefaultInstance()) {
          getResultCacheEntryBuilder().mergeFrom(value);
        } else {
          resultCacheEntry_ = value;
        }
      } else {
        resultCacheEntryBuilder_.mergeFrom(value);
      }
      if (resultCacheEntry_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     */
    public Builder clearResultCacheEntry() {
      bitField0_ = (bitField0_ & ~0x00000002);
      resultCacheEntry_ = null;
      if (resultCacheEntryBuilder_ != null) {
        resultCacheEntryBuilder_.dispose();
        resultCacheEntryBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.Builder getResultCacheEntryBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getResultCacheEntryFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntryOrBuilder getResultCacheEntryOrBuilder() {
      if (resultCacheEntryBuilder_ != null) {
        return resultCacheEntryBuilder_.getMessageOrBuilder();
      } else {
        return resultCacheEntry_ == null ?
            com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.getDefaultInstance() : resultCacheEntry_;
      }
    }
    /**
     * <code>.aperture.flowcontrol.check.v1.CacheEntry result_cache_entry = 2 [json_name = "resultCacheEntry"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntryOrBuilder> 
        getResultCacheEntryFieldBuilder() {
      if (resultCacheEntryBuilder_ == null) {
        resultCacheEntryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry.Builder, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntryOrBuilder>(
                getResultCacheEntry(),
                getParentForChildren(),
                isClean());
        resultCacheEntry_ = null;
      }
      return resultCacheEntryBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> globalCacheEntries_;
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry>
        internalGetGlobalCacheEntries() {
      if (globalCacheEntries_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            GlobalCacheEntriesDefaultEntryHolder.defaultEntry);
      }
      return globalCacheEntries_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry>
        internalGetMutableGlobalCacheEntries() {
      if (globalCacheEntries_ == null) {
        globalCacheEntries_ = com.google.protobuf.MapField.newMapField(
            GlobalCacheEntriesDefaultEntryHolder.defaultEntry);
      }
      if (!globalCacheEntries_.isMutable()) {
        globalCacheEntries_ = globalCacheEntries_.copy();
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return globalCacheEntries_;
    }
    public int getGlobalCacheEntriesCount() {
      return internalGetGlobalCacheEntries().getMap().size();
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
     */
    @java.lang.Override
    public boolean containsGlobalCacheEntries(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetGlobalCacheEntries().getMap().containsKey(key);
    }
    /**
     * Use {@link #getGlobalCacheEntriesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> getGlobalCacheEntries() {
      return getGlobalCacheEntriesMap();
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> getGlobalCacheEntriesMap() {
      return internalGetGlobalCacheEntries().getMap();
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
     */
    @java.lang.Override
    public /* nullable */
com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry getGlobalCacheEntriesOrDefault(
        java.lang.String key,
        /* nullable */
com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> map =
          internalGetGlobalCacheEntries().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry getGlobalCacheEntriesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> map =
          internalGetGlobalCacheEntries().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearGlobalCacheEntries() {
      bitField0_ = (bitField0_ & ~0x00000004);
      internalGetMutableGlobalCacheEntries().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
     */
    public Builder removeGlobalCacheEntries(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableGlobalCacheEntries().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry>
        getMutableGlobalCacheEntries() {
      bitField0_ |= 0x00000004;
      return internalGetMutableGlobalCacheEntries().getMutableMap();
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
     */
    public Builder putGlobalCacheEntries(
        java.lang.String key,
        com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableGlobalCacheEntries().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.flowcontrol.check.v1.CacheEntry&gt; global_cache_entries = 3 [json_name = "globalCacheEntries"];</code>
     */
    public Builder putAllGlobalCacheEntries(
        java.util.Map<java.lang.String, com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheEntry> values) {
      internalGetMutableGlobalCacheEntries().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.check.v1.CacheUpsertRequest)
  }

  // @@protoc_insertion_point(class_scope:aperture.flowcontrol.check.v1.CacheUpsertRequest)
  private static final com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest();
  }

  public static com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CacheUpsertRequest>
      PARSER = new com.google.protobuf.AbstractParser<CacheUpsertRequest>() {
    @java.lang.Override
    public CacheUpsertRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CacheUpsertRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CacheUpsertRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.check.v1.CacheUpsertRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

