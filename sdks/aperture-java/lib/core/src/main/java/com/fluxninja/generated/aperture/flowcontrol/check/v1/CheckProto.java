// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/check/v1/check.proto

package com.fluxninja.generated.aperture.flowcontrol.check.v1;

public final class CheckProto {
  private CheckProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_CheckRequest_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_CheckRequest_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_CheckRequest_LabelsEntry_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_CheckRequest_LabelsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_CheckResponse_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_CheckResponse_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_CheckResponse_TelemetryFlowLabelsEntry_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_CheckResponse_TelemetryFlowLabelsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_ClassifierInfo_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_ClassifierInfo_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_LimiterDecision_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_RateLimiterInfo_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_LimiterDecision_RateLimiterInfo_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_ConcurrencyLimiterInfo_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_LimiterDecision_ConcurrencyLimiterInfo_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_check_v1_FluxMeterInfo_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_check_v1_FluxMeterInfo_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)aperture/flowcontrol/check/v1/check.pr" +
      "oto\022\035aperture.flowcontrol.check.v1\032\034goog" +
      "le/api/annotations.proto\032\037google/protobu" +
      "f/timestamp.proto\"\327\001\n\014CheckRequest\022#\n\rco" +
      "ntrol_point\030\001 \001(\tR\014controlPoint\022O\n\006label" +
      "s\030\002 \003(\01327.aperture.flowcontrol.check.v1." +
      "CheckRequest.LabelsEntryR\006labels\022\026\n\006toke" +
      "ns\030\003 \001(\004R\006tokens\0329\n\013LabelsEntry\022\020\n\003key\030\001" +
      " \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"\241\010\n\r" +
      "CheckResponse\0220\n\005start\030\001 \001(\0132\032.google.pr" +
      "otobuf.TimestampR\005start\022,\n\003end\030\002 \001(\0132\032.g" +
      "oogle.protobuf.TimestampR\003end\022\032\n\010service" +
      "s\030\004 \003(\tR\010services\022#\n\rcontrol_point\030\005 \001(\t" +
      "R\014controlPoint\022&\n\017flow_label_keys\030\006 \003(\tR" +
      "\rflowLabelKeys\022y\n\025telemetry_flow_labels\030" +
      "\007 \003(\0132E.aperture.flowcontrol.check.v1.Ch" +
      "eckResponse.TelemetryFlowLabelsEntryR\023te" +
      "lemetryFlowLabels\022^\n\rdecision_type\030\010 \001(\016" +
      "29.aperture.flowcontrol.check.v1.CheckRe" +
      "sponse.DecisionTypeR\014decisionType\022^\n\rrej" +
      "ect_reason\030\t \001(\01629.aperture.flowcontrol." +
      "check.v1.CheckResponse.RejectReasonR\014rej" +
      "ectReason\022X\n\020classifier_infos\030\n \003(\0132-.ap" +
      "erture.flowcontrol.check.v1.ClassifierIn" +
      "foR\017classifierInfos\022V\n\020flux_meter_infos\030" +
      "\013 \003(\0132,.aperture.flowcontrol.check.v1.Fl" +
      "uxMeterInfoR\016fluxMeterInfos\022[\n\021limiter_d" +
      "ecisions\030\014 \003(\0132..aperture.flowcontrol.ch" +
      "eck.v1.LimiterDecisionR\020limiterDecisions" +
      "\032F\n\030TelemetryFlowLabelsEntry\022\020\n\003key\030\001 \001(" +
      "\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"m\n\014Reje" +
      "ctReason\022\026\n\022REJECT_REASON_NONE\020\000\022\036\n\032REJE" +
      "CT_REASON_RATE_LIMITED\020\001\022%\n!REJECT_REASO" +
      "N_CONCURRENCY_LIMITED\020\002\"F\n\014DecisionType\022" +
      "\032\n\026DECISION_TYPE_ACCEPTED\020\000\022\032\n\026DECISION_" +
      "TYPE_REJECTED\020\001\"\355\002\n\016ClassifierInfo\022\037\n\013po" +
      "licy_name\030\001 \001(\tR\npolicyName\022\037\n\013policy_ha" +
      "sh\030\002 \001(\tR\npolicyHash\022)\n\020classifier_index" +
      "\030\003 \001(\003R\017classifierIndex\022I\n\005error\030\005 \001(\01623" +
      ".aperture.flowcontrol.check.v1.Classifie" +
      "rInfo.ErrorR\005error\"\242\001\n\005Error\022\016\n\nERROR_NO" +
      "NE\020\000\022\025\n\021ERROR_EVAL_FAILED\020\001\022\031\n\025ERROR_EMP" +
      "TY_RESULTSET\020\002\022\035\n\031ERROR_AMBIGUOUS_RESULT" +
      "SET\020\003\022\032\n\026ERROR_MULTI_EXPRESSION\020\004\022\034\n\030ERR" +
      "OR_EXPRESSION_NOT_MAP\020\005\"\330\005\n\017LimiterDecis" +
      "ion\022\037\n\013policy_name\030\001 \001(\tR\npolicyName\022\037\n\013" +
      "policy_hash\030\002 \001(\tR\npolicyHash\022!\n\014compone" +
      "nt_id\030\003 \001(\tR\013componentId\022\030\n\007dropped\030\004 \001(" +
      "\010R\007dropped\022T\n\006reason\030\005 \001(\0162<.aperture.fl" +
      "owcontrol.check.v1.LimiterDecision.Limit" +
      "erReasonR\006reason\022l\n\021rate_limiter_info\030\006 " +
      "\001(\0132>.aperture.flowcontrol.check.v1.Limi" +
      "terDecision.RateLimiterInfoH\000R\017rateLimit" +
      "erInfo\022\201\001\n\030concurrency_limiter_info\030\007 \001(" +
      "\0132E.aperture.flowcontrol.check.v1.Limite" +
      "rDecision.ConcurrencyLimiterInfoH\000R\026conc" +
      "urrencyLimiterInfo\032_\n\017RateLimiterInfo\022\034\n" +
      "\tremaining\030\001 \001(\003R\tremaining\022\030\n\007current\030\002" +
      " \001(\003R\007current\022\024\n\005label\030\003 \001(\tR\005label\032?\n\026C" +
      "oncurrencyLimiterInfo\022%\n\016workload_index\030" +
      "\001 \001(\tR\rworkloadIndex\"Q\n\rLimiterReason\022\036\n" +
      "\032LIMITER_REASON_UNSPECIFIED\020\000\022 \n\034LIMITER" +
      "_REASON_KEY_NOT_FOUND\020\001B\t\n\007details\"7\n\rFl" +
      "uxMeterInfo\022&\n\017flux_meter_name\030\001 \001(\tR\rfl" +
      "uxMeterName2\233\001\n\022FlowControlService\022\204\001\n\005C" +
      "heck\022+.aperture.flowcontrol.check.v1.Che" +
      "ckRequest\032,.aperture.flowcontrol.check.v" +
      "1.CheckResponse\" \202\323\344\223\002\032:\001*\"\025/v1/flowcont" +
      "rol/checkB\260\002\n5com.fluxninja.generated.ap" +
      "erture.flowcontrol.check.v1B\nCheckProtoP" +
      "\001ZTgithub.com/fluxninja/aperture/api/gen" +
      "/proto/go/aperture/flowcontrol/check/v1;" +
      "checkv1\242\002\003AFC\252\002\035Aperture.Flowcontrol.Che" +
      "ck.V1\312\002\035Aperture\\Flowcontrol\\Check\\V1\342\002)" +
      "Aperture\\Flowcontrol\\Check\\V1\\GPBMetadat" +
      "a\352\002 Aperture::Flowcontrol::Check::V1b\006pr" +
      "oto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.fluxninja.generated.google.api.AnnotationsProto.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_aperture_flowcontrol_check_v1_CheckRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_aperture_flowcontrol_check_v1_CheckRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_CheckRequest_descriptor,
        new java.lang.String[] { "ControlPoint", "Labels", "Tokens", });
    internal_static_aperture_flowcontrol_check_v1_CheckRequest_LabelsEntry_descriptor =
      internal_static_aperture_flowcontrol_check_v1_CheckRequest_descriptor.getNestedTypes().get(0);
    internal_static_aperture_flowcontrol_check_v1_CheckRequest_LabelsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_CheckRequest_LabelsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_aperture_flowcontrol_check_v1_CheckResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_aperture_flowcontrol_check_v1_CheckResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_CheckResponse_descriptor,
        new java.lang.String[] { "Start", "End", "Services", "ControlPoint", "FlowLabelKeys", "TelemetryFlowLabels", "DecisionType", "RejectReason", "ClassifierInfos", "FluxMeterInfos", "LimiterDecisions", });
    internal_static_aperture_flowcontrol_check_v1_CheckResponse_TelemetryFlowLabelsEntry_descriptor =
      internal_static_aperture_flowcontrol_check_v1_CheckResponse_descriptor.getNestedTypes().get(0);
    internal_static_aperture_flowcontrol_check_v1_CheckResponse_TelemetryFlowLabelsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_CheckResponse_TelemetryFlowLabelsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_aperture_flowcontrol_check_v1_ClassifierInfo_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_aperture_flowcontrol_check_v1_ClassifierInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_ClassifierInfo_descriptor,
        new java.lang.String[] { "PolicyName", "PolicyHash", "ClassifierIndex", "Error", });
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_LimiterDecision_descriptor,
        new java.lang.String[] { "PolicyName", "PolicyHash", "ComponentId", "Dropped", "Reason", "RateLimiterInfo", "ConcurrencyLimiterInfo", "Details", });
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_RateLimiterInfo_descriptor =
      internal_static_aperture_flowcontrol_check_v1_LimiterDecision_descriptor.getNestedTypes().get(0);
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_RateLimiterInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_LimiterDecision_RateLimiterInfo_descriptor,
        new java.lang.String[] { "Remaining", "Current", "Label", });
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_ConcurrencyLimiterInfo_descriptor =
      internal_static_aperture_flowcontrol_check_v1_LimiterDecision_descriptor.getNestedTypes().get(1);
    internal_static_aperture_flowcontrol_check_v1_LimiterDecision_ConcurrencyLimiterInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_LimiterDecision_ConcurrencyLimiterInfo_descriptor,
        new java.lang.String[] { "WorkloadIndex", });
    internal_static_aperture_flowcontrol_check_v1_FluxMeterInfo_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_aperture_flowcontrol_check_v1_FluxMeterInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_check_v1_FluxMeterInfo_descriptor,
        new java.lang.String[] { "FluxMeterName", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.fluxninja.generated.google.api.AnnotationsProto.http);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.fluxninja.generated.google.api.AnnotationsProto.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
