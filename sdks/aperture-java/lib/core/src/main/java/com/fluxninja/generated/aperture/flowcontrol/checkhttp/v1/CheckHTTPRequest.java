// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/checkhttp/v1/checkhttp.proto

package com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1;

/**
 * Protobuf type {@code aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest}
 */
public final class CheckHTTPRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest)
    CheckHTTPRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CheckHTTPRequest.newBuilder() to construct.
  private CheckHTTPRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CheckHTTPRequest() {
    controlPoint_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CheckHTTPRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.class, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.Builder.class);
  }

  public interface HttpRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The HTTP request method, such as `GET`, `POST`.
     * </pre>
     *
     * <code>string method = 1 [json_name = "method"];</code>
     * @return The method.
     */
    java.lang.String getMethod();
    /**
     * <pre>
     * The HTTP request method, such as `GET`, `POST`.
     * </pre>
     *
     * <code>string method = 1 [json_name = "method"];</code>
     * @return The bytes for method.
     */
    com.google.protobuf.ByteString
        getMethodBytes();

    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    int getHeadersCount();
    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    boolean containsHeaders(
        java.lang.String key);
    /**
     * Use {@link #getHeadersMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getHeaders();
    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getHeadersMap();
    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    /* nullable */
java.lang.String getHeadersOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    java.lang.String getHeadersOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * The request target, as it appears in the first line of the HTTP request. This includes
     * the URL path and query-string. No decoding is performed.
     * </pre>
     *
     * <code>string path = 3 [json_name = "path"];</code>
     * @return The path.
     */
    java.lang.String getPath();
    /**
     * <pre>
     * The request target, as it appears in the first line of the HTTP request. This includes
     * the URL path and query-string. No decoding is performed.
     * </pre>
     *
     * <code>string path = 3 [json_name = "path"];</code>
     * @return The bytes for path.
     */
    com.google.protobuf.ByteString
        getPathBytes();

    /**
     * <pre>
     * The HTTP request `Host` header value.
     * </pre>
     *
     * <code>string host = 4 [json_name = "host"];</code>
     * @return The host.
     */
    java.lang.String getHost();
    /**
     * <pre>
     * The HTTP request `Host` header value.
     * </pre>
     *
     * <code>string host = 4 [json_name = "host"];</code>
     * @return The bytes for host.
     */
    com.google.protobuf.ByteString
        getHostBytes();

    /**
     * <pre>
     * The HTTP URL scheme, such as `http` and `https`.
     * </pre>
     *
     * <code>string scheme = 5 [json_name = "scheme"];</code>
     * @return The scheme.
     */
    java.lang.String getScheme();
    /**
     * <pre>
     * The HTTP URL scheme, such as `http` and `https`.
     * </pre>
     *
     * <code>string scheme = 5 [json_name = "scheme"];</code>
     * @return The bytes for scheme.
     */
    com.google.protobuf.ByteString
        getSchemeBytes();

    /**
     * <pre>
     * The HTTP request size in bytes. If unknown, it must be -1.
     * </pre>
     *
     * <code>int64 size = 6 [json_name = "size"];</code>
     * @return The size.
     */
    long getSize();

    /**
     * <pre>
     * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
     * </pre>
     *
     * <code>string protocol = 7 [json_name = "protocol"];</code>
     * @return The protocol.
     */
    java.lang.String getProtocol();
    /**
     * <pre>
     * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
     * </pre>
     *
     * <code>string protocol = 7 [json_name = "protocol"];</code>
     * @return The bytes for protocol.
     */
    com.google.protobuf.ByteString
        getProtocolBytes();

    /**
     * <pre>
     * The HTTP request body.
     * </pre>
     *
     * <code>string body = 8 [json_name = "body"];</code>
     * @return The body.
     */
    java.lang.String getBody();
    /**
     * <pre>
     * The HTTP request body.
     * </pre>
     *
     * <code>string body = 8 [json_name = "body"];</code>
     * @return The bytes for body.
     */
    com.google.protobuf.ByteString
        getBodyBytes();
  }
  /**
   * <pre>
   * This message defines attributes for an HTTP request.
   * HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
   * </pre>
   *
   * Protobuf type {@code aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest}
   */
  public static final class HttpRequest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest)
      HttpRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HttpRequest.newBuilder() to construct.
    private HttpRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HttpRequest() {
      method_ = "";
      path_ = "";
      host_ = "";
      scheme_ = "";
      protocol_ = "";
      body_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HttpRequest();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_HttpRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetHeaders();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_HttpRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.class, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.Builder.class);
    }

    public static final int METHOD_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object method_ = "";
    /**
     * <pre>
     * The HTTP request method, such as `GET`, `POST`.
     * </pre>
     *
     * <code>string method = 1 [json_name = "method"];</code>
     * @return The method.
     */
    @java.lang.Override
    public java.lang.String getMethod() {
      java.lang.Object ref = method_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        method_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The HTTP request method, such as `GET`, `POST`.
     * </pre>
     *
     * <code>string method = 1 [json_name = "method"];</code>
     * @return The bytes for method.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMethodBytes() {
      java.lang.Object ref = method_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        method_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HEADERS_FIELD_NUMBER = 2;
    private static final class HeadersDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_HttpRequest_HeadersEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    @SuppressWarnings("serial")
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> headers_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetHeaders() {
      if (headers_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            HeadersDefaultEntryHolder.defaultEntry);
      }
      return headers_;
    }
    public int getHeadersCount() {
      return internalGetHeaders().getMap().size();
    }
    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    @java.lang.Override
    public boolean containsHeaders(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetHeaders().getMap().containsKey(key);
    }
    /**
     * Use {@link #getHeadersMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getHeaders() {
      return getHeadersMap();
    }
    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, java.lang.String> getHeadersMap() {
      return internalGetHeaders().getMap();
    }
    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    @java.lang.Override
    public /* nullable */
java.lang.String getHeadersOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetHeaders().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The HTTP request headers.
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
     */
    @java.lang.Override
    public java.lang.String getHeadersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetHeaders().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int PATH_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object path_ = "";
    /**
     * <pre>
     * The request target, as it appears in the first line of the HTTP request. This includes
     * the URL path and query-string. No decoding is performed.
     * </pre>
     *
     * <code>string path = 3 [json_name = "path"];</code>
     * @return The path.
     */
    @java.lang.Override
    public java.lang.String getPath() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        path_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The request target, as it appears in the first line of the HTTP request. This includes
     * the URL path and query-string. No decoding is performed.
     * </pre>
     *
     * <code>string path = 3 [json_name = "path"];</code>
     * @return The bytes for path.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPathBytes() {
      java.lang.Object ref = path_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        path_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HOST_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object host_ = "";
    /**
     * <pre>
     * The HTTP request `Host` header value.
     * </pre>
     *
     * <code>string host = 4 [json_name = "host"];</code>
     * @return The host.
     */
    @java.lang.Override
    public java.lang.String getHost() {
      java.lang.Object ref = host_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        host_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The HTTP request `Host` header value.
     * </pre>
     *
     * <code>string host = 4 [json_name = "host"];</code>
     * @return The bytes for host.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHostBytes() {
      java.lang.Object ref = host_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        host_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SCHEME_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private volatile java.lang.Object scheme_ = "";
    /**
     * <pre>
     * The HTTP URL scheme, such as `http` and `https`.
     * </pre>
     *
     * <code>string scheme = 5 [json_name = "scheme"];</code>
     * @return The scheme.
     */
    @java.lang.Override
    public java.lang.String getScheme() {
      java.lang.Object ref = scheme_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        scheme_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The HTTP URL scheme, such as `http` and `https`.
     * </pre>
     *
     * <code>string scheme = 5 [json_name = "scheme"];</code>
     * @return The bytes for scheme.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSchemeBytes() {
      java.lang.Object ref = scheme_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        scheme_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SIZE_FIELD_NUMBER = 6;
    private long size_ = 0L;
    /**
     * <pre>
     * The HTTP request size in bytes. If unknown, it must be -1.
     * </pre>
     *
     * <code>int64 size = 6 [json_name = "size"];</code>
     * @return The size.
     */
    @java.lang.Override
    public long getSize() {
      return size_;
    }

    public static final int PROTOCOL_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private volatile java.lang.Object protocol_ = "";
    /**
     * <pre>
     * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
     * </pre>
     *
     * <code>string protocol = 7 [json_name = "protocol"];</code>
     * @return The protocol.
     */
    @java.lang.Override
    public java.lang.String getProtocol() {
      java.lang.Object ref = protocol_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        protocol_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
     * </pre>
     *
     * <code>string protocol = 7 [json_name = "protocol"];</code>
     * @return The bytes for protocol.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getProtocolBytes() {
      java.lang.Object ref = protocol_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        protocol_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BODY_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private volatile java.lang.Object body_ = "";
    /**
     * <pre>
     * The HTTP request body.
     * </pre>
     *
     * <code>string body = 8 [json_name = "body"];</code>
     * @return The body.
     */
    @java.lang.Override
    public java.lang.String getBody() {
      java.lang.Object ref = body_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        body_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The HTTP request body.
     * </pre>
     *
     * <code>string body = 8 [json_name = "body"];</code>
     * @return The bytes for body.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBodyBytes() {
      java.lang.Object ref = body_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        body_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(method_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, method_);
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetHeaders(),
          HeadersDefaultEntryHolder.defaultEntry,
          2);
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, path_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(host_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, host_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(scheme_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, scheme_);
      }
      if (size_ != 0L) {
        output.writeInt64(6, size_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(protocol_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, protocol_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(body_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, body_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(method_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, method_);
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetHeaders().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        headers__ = HeadersDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, headers__);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(path_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, path_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(host_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, host_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(scheme_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, scheme_);
      }
      if (size_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, size_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(protocol_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, protocol_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(body_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, body_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest other = (com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest) obj;

      if (!getMethod()
          .equals(other.getMethod())) return false;
      if (!internalGetHeaders().equals(
          other.internalGetHeaders())) return false;
      if (!getPath()
          .equals(other.getPath())) return false;
      if (!getHost()
          .equals(other.getHost())) return false;
      if (!getScheme()
          .equals(other.getScheme())) return false;
      if (getSize()
          != other.getSize()) return false;
      if (!getProtocol()
          .equals(other.getProtocol())) return false;
      if (!getBody()
          .equals(other.getBody())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + METHOD_FIELD_NUMBER;
      hash = (53 * hash) + getMethod().hashCode();
      if (!internalGetHeaders().getMap().isEmpty()) {
        hash = (37 * hash) + HEADERS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetHeaders().hashCode();
      }
      hash = (37 * hash) + PATH_FIELD_NUMBER;
      hash = (53 * hash) + getPath().hashCode();
      hash = (37 * hash) + HOST_FIELD_NUMBER;
      hash = (53 * hash) + getHost().hashCode();
      hash = (37 * hash) + SCHEME_FIELD_NUMBER;
      hash = (53 * hash) + getScheme().hashCode();
      hash = (37 * hash) + SIZE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSize());
      hash = (37 * hash) + PROTOCOL_FIELD_NUMBER;
      hash = (53 * hash) + getProtocol().hashCode();
      hash = (37 * hash) + BODY_FIELD_NUMBER;
      hash = (53 * hash) + getBody().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This message defines attributes for an HTTP request.
     * HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
     * </pre>
     *
     * Protobuf type {@code aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest)
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_HttpRequest_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetHeaders();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 2:
            return internalGetMutableHeaders();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_HttpRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.class, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        method_ = "";
        internalGetMutableHeaders().clear();
        path_ = "";
        host_ = "";
        scheme_ = "";
        size_ = 0L;
        protocol_ = "";
        body_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_HttpRequest_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest build() {
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest buildPartial() {
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest result = new com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.method_ = method_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.headers_ = internalGetHeaders();
          result.headers_.makeImmutable();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.path_ = path_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.host_ = host_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.scheme_ = scheme_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.size_ = size_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.protocol_ = protocol_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.body_ = body_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest) {
          return mergeFrom((com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest other) {
        if (other == com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.getDefaultInstance()) return this;
        if (!other.getMethod().isEmpty()) {
          method_ = other.method_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        internalGetMutableHeaders().mergeFrom(
            other.internalGetHeaders());
        bitField0_ |= 0x00000002;
        if (!other.getPath().isEmpty()) {
          path_ = other.path_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (!other.getHost().isEmpty()) {
          host_ = other.host_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (!other.getScheme().isEmpty()) {
          scheme_ = other.scheme_;
          bitField0_ |= 0x00000010;
          onChanged();
        }
        if (other.getSize() != 0L) {
          setSize(other.getSize());
        }
        if (!other.getProtocol().isEmpty()) {
          protocol_ = other.protocol_;
          bitField0_ |= 0x00000040;
          onChanged();
        }
        if (!other.getBody().isEmpty()) {
          body_ = other.body_;
          bitField0_ |= 0x00000080;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                method_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
                headers__ = input.readMessage(
                    HeadersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
                internalGetMutableHeaders().getMutableMap().put(
                    headers__.getKey(), headers__.getValue());
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                path_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                host_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                scheme_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 48: {
                size_ = input.readInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 58: {
                protocol_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                body_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object method_ = "";
      /**
       * <pre>
       * The HTTP request method, such as `GET`, `POST`.
       * </pre>
       *
       * <code>string method = 1 [json_name = "method"];</code>
       * @return The method.
       */
      public java.lang.String getMethod() {
        java.lang.Object ref = method_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          method_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The HTTP request method, such as `GET`, `POST`.
       * </pre>
       *
       * <code>string method = 1 [json_name = "method"];</code>
       * @return The bytes for method.
       */
      public com.google.protobuf.ByteString
          getMethodBytes() {
        java.lang.Object ref = method_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          method_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The HTTP request method, such as `GET`, `POST`.
       * </pre>
       *
       * <code>string method = 1 [json_name = "method"];</code>
       * @param value The method to set.
       * @return This builder for chaining.
       */
      public Builder setMethod(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        method_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP request method, such as `GET`, `POST`.
       * </pre>
       *
       * <code>string method = 1 [json_name = "method"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMethod() {
        method_ = getDefaultInstance().getMethod();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP request method, such as `GET`, `POST`.
       * </pre>
       *
       * <code>string method = 1 [json_name = "method"];</code>
       * @param value The bytes for method to set.
       * @return This builder for chaining.
       */
      public Builder setMethodBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        method_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> headers_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetHeaders() {
        if (headers_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              HeadersDefaultEntryHolder.defaultEntry);
        }
        return headers_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
          internalGetMutableHeaders() {
        if (headers_ == null) {
          headers_ = com.google.protobuf.MapField.newMapField(
              HeadersDefaultEntryHolder.defaultEntry);
        }
        if (!headers_.isMutable()) {
          headers_ = headers_.copy();
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return headers_;
      }
      public int getHeadersCount() {
        return internalGetHeaders().getMap().size();
      }
      /**
       * <pre>
       * The HTTP request headers.
       * </pre>
       *
       * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
       */
      @java.lang.Override
      public boolean containsHeaders(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetHeaders().getMap().containsKey(key);
      }
      /**
       * Use {@link #getHeadersMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getHeaders() {
        return getHeadersMap();
      }
      /**
       * <pre>
       * The HTTP request headers.
       * </pre>
       *
       * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
       */
      @java.lang.Override
      public java.util.Map<java.lang.String, java.lang.String> getHeadersMap() {
        return internalGetHeaders().getMap();
      }
      /**
       * <pre>
       * The HTTP request headers.
       * </pre>
       *
       * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
       */
      @java.lang.Override
      public /* nullable */
java.lang.String getHeadersOrDefault(
          java.lang.String key,
          /* nullable */
java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetHeaders().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * The HTTP request headers.
       * </pre>
       *
       * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
       */
      @java.lang.Override
      public java.lang.String getHeadersOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetHeaders().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      public Builder clearHeaders() {
        bitField0_ = (bitField0_ & ~0x00000002);
        internalGetMutableHeaders().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * The HTTP request headers.
       * </pre>
       *
       * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
       */
      public Builder removeHeaders(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableHeaders().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
          getMutableHeaders() {
        bitField0_ |= 0x00000002;
        return internalGetMutableHeaders().getMutableMap();
      }
      /**
       * <pre>
       * The HTTP request headers.
       * </pre>
       *
       * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
       */
      public Builder putHeaders(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) { throw new NullPointerException("map value"); }
        internalGetMutableHeaders().getMutableMap()
            .put(key, value);
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * The HTTP request headers.
       * </pre>
       *
       * <code>map&lt;string, string&gt; headers = 2 [json_name = "headers"];</code>
       */
      public Builder putAllHeaders(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableHeaders().getMutableMap()
            .putAll(values);
        bitField0_ |= 0x00000002;
        return this;
      }

      private java.lang.Object path_ = "";
      /**
       * <pre>
       * The request target, as it appears in the first line of the HTTP request. This includes
       * the URL path and query-string. No decoding is performed.
       * </pre>
       *
       * <code>string path = 3 [json_name = "path"];</code>
       * @return The path.
       */
      public java.lang.String getPath() {
        java.lang.Object ref = path_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          path_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The request target, as it appears in the first line of the HTTP request. This includes
       * the URL path and query-string. No decoding is performed.
       * </pre>
       *
       * <code>string path = 3 [json_name = "path"];</code>
       * @return The bytes for path.
       */
      public com.google.protobuf.ByteString
          getPathBytes() {
        java.lang.Object ref = path_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          path_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The request target, as it appears in the first line of the HTTP request. This includes
       * the URL path and query-string. No decoding is performed.
       * </pre>
       *
       * <code>string path = 3 [json_name = "path"];</code>
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        path_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The request target, as it appears in the first line of the HTTP request. This includes
       * the URL path and query-string. No decoding is performed.
       * </pre>
       *
       * <code>string path = 3 [json_name = "path"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        path_ = getDefaultInstance().getPath();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The request target, as it appears in the first line of the HTTP request. This includes
       * the URL path and query-string. No decoding is performed.
       * </pre>
       *
       * <code>string path = 3 [json_name = "path"];</code>
       * @param value The bytes for path to set.
       * @return This builder for chaining.
       */
      public Builder setPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        path_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.lang.Object host_ = "";
      /**
       * <pre>
       * The HTTP request `Host` header value.
       * </pre>
       *
       * <code>string host = 4 [json_name = "host"];</code>
       * @return The host.
       */
      public java.lang.String getHost() {
        java.lang.Object ref = host_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          host_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The HTTP request `Host` header value.
       * </pre>
       *
       * <code>string host = 4 [json_name = "host"];</code>
       * @return The bytes for host.
       */
      public com.google.protobuf.ByteString
          getHostBytes() {
        java.lang.Object ref = host_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          host_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The HTTP request `Host` header value.
       * </pre>
       *
       * <code>string host = 4 [json_name = "host"];</code>
       * @param value The host to set.
       * @return This builder for chaining.
       */
      public Builder setHost(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        host_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP request `Host` header value.
       * </pre>
       *
       * <code>string host = 4 [json_name = "host"];</code>
       * @return This builder for chaining.
       */
      public Builder clearHost() {
        host_ = getDefaultInstance().getHost();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP request `Host` header value.
       * </pre>
       *
       * <code>string host = 4 [json_name = "host"];</code>
       * @param value The bytes for host to set.
       * @return This builder for chaining.
       */
      public Builder setHostBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        host_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private java.lang.Object scheme_ = "";
      /**
       * <pre>
       * The HTTP URL scheme, such as `http` and `https`.
       * </pre>
       *
       * <code>string scheme = 5 [json_name = "scheme"];</code>
       * @return The scheme.
       */
      public java.lang.String getScheme() {
        java.lang.Object ref = scheme_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          scheme_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The HTTP URL scheme, such as `http` and `https`.
       * </pre>
       *
       * <code>string scheme = 5 [json_name = "scheme"];</code>
       * @return The bytes for scheme.
       */
      public com.google.protobuf.ByteString
          getSchemeBytes() {
        java.lang.Object ref = scheme_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          scheme_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The HTTP URL scheme, such as `http` and `https`.
       * </pre>
       *
       * <code>string scheme = 5 [json_name = "scheme"];</code>
       * @param value The scheme to set.
       * @return This builder for chaining.
       */
      public Builder setScheme(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        scheme_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP URL scheme, such as `http` and `https`.
       * </pre>
       *
       * <code>string scheme = 5 [json_name = "scheme"];</code>
       * @return This builder for chaining.
       */
      public Builder clearScheme() {
        scheme_ = getDefaultInstance().getScheme();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP URL scheme, such as `http` and `https`.
       * </pre>
       *
       * <code>string scheme = 5 [json_name = "scheme"];</code>
       * @param value The bytes for scheme to set.
       * @return This builder for chaining.
       */
      public Builder setSchemeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        scheme_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }

      private long size_ ;
      /**
       * <pre>
       * The HTTP request size in bytes. If unknown, it must be -1.
       * </pre>
       *
       * <code>int64 size = 6 [json_name = "size"];</code>
       * @return The size.
       */
      @java.lang.Override
      public long getSize() {
        return size_;
      }
      /**
       * <pre>
       * The HTTP request size in bytes. If unknown, it must be -1.
       * </pre>
       *
       * <code>int64 size = 6 [json_name = "size"];</code>
       * @param value The size to set.
       * @return This builder for chaining.
       */
      public Builder setSize(long value) {

        size_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP request size in bytes. If unknown, it must be -1.
       * </pre>
       *
       * <code>int64 size = 6 [json_name = "size"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000020);
        size_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object protocol_ = "";
      /**
       * <pre>
       * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
       * </pre>
       *
       * <code>string protocol = 7 [json_name = "protocol"];</code>
       * @return The protocol.
       */
      public java.lang.String getProtocol() {
        java.lang.Object ref = protocol_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          protocol_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
       * </pre>
       *
       * <code>string protocol = 7 [json_name = "protocol"];</code>
       * @return The bytes for protocol.
       */
      public com.google.protobuf.ByteString
          getProtocolBytes() {
        java.lang.Object ref = protocol_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          protocol_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
       * </pre>
       *
       * <code>string protocol = 7 [json_name = "protocol"];</code>
       * @param value The protocol to set.
       * @return This builder for chaining.
       */
      public Builder setProtocol(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        protocol_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
       * </pre>
       *
       * <code>string protocol = 7 [json_name = "protocol"];</code>
       * @return This builder for chaining.
       */
      public Builder clearProtocol() {
        protocol_ = getDefaultInstance().getProtocol();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
       * </pre>
       *
       * <code>string protocol = 7 [json_name = "protocol"];</code>
       * @param value The bytes for protocol to set.
       * @return This builder for chaining.
       */
      public Builder setProtocolBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        protocol_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }

      private java.lang.Object body_ = "";
      /**
       * <pre>
       * The HTTP request body.
       * </pre>
       *
       * <code>string body = 8 [json_name = "body"];</code>
       * @return The body.
       */
      public java.lang.String getBody() {
        java.lang.Object ref = body_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          body_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The HTTP request body.
       * </pre>
       *
       * <code>string body = 8 [json_name = "body"];</code>
       * @return The bytes for body.
       */
      public com.google.protobuf.ByteString
          getBodyBytes() {
        java.lang.Object ref = body_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          body_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The HTTP request body.
       * </pre>
       *
       * <code>string body = 8 [json_name = "body"];</code>
       * @param value The body to set.
       * @return This builder for chaining.
       */
      public Builder setBody(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        body_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP request body.
       * </pre>
       *
       * <code>string body = 8 [json_name = "body"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBody() {
        body_ = getDefaultInstance().getBody();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The HTTP request body.
       * </pre>
       *
       * <code>string body = 8 [json_name = "body"];</code>
       * @param value The bytes for body to set.
       * @return This builder for chaining.
       */
      public Builder setBodyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        body_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest)
    }

    // @@protoc_insertion_point(class_scope:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest)
    private static final com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest();
    }

    public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HttpRequest>
        PARSER = new com.google.protobuf.AbstractParser<HttpRequest>() {
      @java.lang.Override
      public HttpRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<HttpRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HttpRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int SOURCE_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress source_;
  /**
   * <pre>
   * The source of a network activity, such as starting a TCP connection.
   * In a multi hop network activity, the source represents the sender of the
   * last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
   * @return Whether the source field is set.
   */
  @java.lang.Override
  public boolean hasSource() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The source of a network activity, such as starting a TCP connection.
   * In a multi hop network activity, the source represents the sender of the
   * last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
   * @return The source.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress getSource() {
    return source_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance() : source_;
  }
  /**
   * <pre>
   * The source of a network activity, such as starting a TCP connection.
   * In a multi hop network activity, the source represents the sender of the
   * last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder getSourceOrBuilder() {
    return source_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance() : source_;
  }

  public static final int DESTINATION_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress destination_;
  /**
   * <pre>
   * The destination of a network activity, such as accepting a TCP connection.
   * In a multi hop network activity, the destination represents the receiver of
   * the last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
   * @return Whether the destination field is set.
   */
  @java.lang.Override
  public boolean hasDestination() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * The destination of a network activity, such as accepting a TCP connection.
   * In a multi hop network activity, the destination represents the receiver of
   * the last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
   * @return The destination.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress getDestination() {
    return destination_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance() : destination_;
  }
  /**
   * <pre>
   * The destination of a network activity, such as accepting a TCP connection.
   * In a multi hop network activity, the destination represents the receiver of
   * the last hop.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder getDestinationOrBuilder() {
    return destination_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance() : destination_;
  }

  public static final int REQUEST_FIELD_NUMBER = 3;
  private com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request_;
  /**
   * <pre>
   * Represents a network request, such as an HTTP request.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
   * @return Whether the request field is set.
   */
  @java.lang.Override
  public boolean hasRequest() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * Represents a network request, such as an HTTP request.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
   * @return The request.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest getRequest() {
    return request_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.getDefaultInstance() : request_;
  }
  /**
   * <pre>
   * Represents a network request, such as an HTTP request.
   * </pre>
   *
   * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequestOrBuilder getRequestOrBuilder() {
    return request_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.getDefaultInstance() : request_;
  }

  public static final int CONTROL_POINT_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile java.lang.Object controlPoint_ = "";
  /**
   * <pre>
   * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
   * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
   * </pre>
   *
   * <code>string control_point = 4 [json_name = "controlPoint"];</code>
   * @return The controlPoint.
   */
  @java.lang.Override
  public java.lang.String getControlPoint() {
    java.lang.Object ref = controlPoint_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      controlPoint_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
   * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
   * </pre>
   *
   * <code>string control_point = 4 [json_name = "controlPoint"];</code>
   * @return The bytes for controlPoint.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getControlPointBytes() {
    java.lang.Object ref = controlPoint_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      controlPoint_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RAMP_MODE_FIELD_NUMBER = 5;
  private boolean rampMode_ = false;
  /**
   * <pre>
   * A flow with ramp_mode flag will only be accepted if at least one ramp component matches and accepts the flow.
   * </pre>
   *
   * <code>bool ramp_mode = 5 [json_name = "rampMode"];</code>
   * @return The rampMode.
   */
  @java.lang.Override
  public boolean getRampMode() {
    return rampMode_;
  }

  public static final int EXPECT_END_FIELD_NUMBER = 6;
  private boolean expectEnd_ = false;
  /**
   * <pre>
   * Expect End denotes whether to expect a FlowEnd call for this flow.
   * </pre>
   *
   * <code>bool expect_end = 6 [json_name = "expectEnd"];</code>
   * @return The expectEnd.
   */
  @java.lang.Override
  public boolean getExpectEnd() {
    return expectEnd_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getSource());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getDestination());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(3, getRequest());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(controlPoint_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, controlPoint_);
    }
    if (rampMode_ != false) {
      output.writeBool(5, rampMode_);
    }
    if (expectEnd_ != false) {
      output.writeBool(6, expectEnd_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getSource());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getDestination());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getRequest());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(controlPoint_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, controlPoint_);
    }
    if (rampMode_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, rampMode_);
    }
    if (expectEnd_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, expectEnd_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest other = (com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest) obj;

    if (hasSource() != other.hasSource()) return false;
    if (hasSource()) {
      if (!getSource()
          .equals(other.getSource())) return false;
    }
    if (hasDestination() != other.hasDestination()) return false;
    if (hasDestination()) {
      if (!getDestination()
          .equals(other.getDestination())) return false;
    }
    if (hasRequest() != other.hasRequest()) return false;
    if (hasRequest()) {
      if (!getRequest()
          .equals(other.getRequest())) return false;
    }
    if (!getControlPoint()
        .equals(other.getControlPoint())) return false;
    if (getRampMode()
        != other.getRampMode()) return false;
    if (getExpectEnd()
        != other.getExpectEnd()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSource()) {
      hash = (37 * hash) + SOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getSource().hashCode();
    }
    if (hasDestination()) {
      hash = (37 * hash) + DESTINATION_FIELD_NUMBER;
      hash = (53 * hash) + getDestination().hashCode();
    }
    if (hasRequest()) {
      hash = (37 * hash) + REQUEST_FIELD_NUMBER;
      hash = (53 * hash) + getRequest().hashCode();
    }
    hash = (37 * hash) + CONTROL_POINT_FIELD_NUMBER;
    hash = (53 * hash) + getControlPoint().hashCode();
    hash = (37 * hash) + RAMP_MODE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getRampMode());
    hash = (37 * hash) + EXPECT_END_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getExpectEnd());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest)
      com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.class, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSourceFieldBuilder();
        getDestinationFieldBuilder();
        getRequestFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      source_ = null;
      if (sourceBuilder_ != null) {
        sourceBuilder_.dispose();
        sourceBuilder_ = null;
      }
      destination_ = null;
      if (destinationBuilder_ != null) {
        destinationBuilder_.dispose();
        destinationBuilder_ = null;
      }
      request_ = null;
      if (requestBuilder_ != null) {
        requestBuilder_.dispose();
        requestBuilder_ = null;
      }
      controlPoint_ = "";
      rampMode_ = false;
      expectEnd_ = false;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckhttpProto.internal_static_aperture_flowcontrol_checkhttp_v1_CheckHTTPRequest_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest build() {
      com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest buildPartial() {
      com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest result = new com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.source_ = sourceBuilder_ == null
            ? source_
            : sourceBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.destination_ = destinationBuilder_ == null
            ? destination_
            : destinationBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.request_ = requestBuilder_ == null
            ? request_
            : requestBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.controlPoint_ = controlPoint_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.rampMode_ = rampMode_;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.expectEnd_ = expectEnd_;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest) {
        return mergeFrom((com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest other) {
      if (other == com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.getDefaultInstance()) return this;
      if (other.hasSource()) {
        mergeSource(other.getSource());
      }
      if (other.hasDestination()) {
        mergeDestination(other.getDestination());
      }
      if (other.hasRequest()) {
        mergeRequest(other.getRequest());
      }
      if (!other.getControlPoint().isEmpty()) {
        controlPoint_ = other.controlPoint_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      if (other.getRampMode() != false) {
        setRampMode(other.getRampMode());
      }
      if (other.getExpectEnd() != false) {
        setExpectEnd(other.getExpectEnd());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getSourceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getDestinationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getRequestFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              controlPoint_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 40: {
              rampMode_ = input.readBool();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 48: {
              expectEnd_ = input.readBool();
              bitField0_ |= 0x00000020;
              break;
            } // case 48
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress source_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder> sourceBuilder_;
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     * @return Whether the source field is set.
     */
    public boolean hasSource() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     * @return The source.
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress getSource() {
      if (sourceBuilder_ == null) {
        return source_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance() : source_;
      } else {
        return sourceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     */
    public Builder setSource(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress value) {
      if (sourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        source_ = value;
      } else {
        sourceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     */
    public Builder setSource(
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder builderForValue) {
      if (sourceBuilder_ == null) {
        source_ = builderForValue.build();
      } else {
        sourceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     */
    public Builder mergeSource(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress value) {
      if (sourceBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          source_ != null &&
          source_ != com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance()) {
          getSourceBuilder().mergeFrom(value);
        } else {
          source_ = value;
        }
      } else {
        sourceBuilder_.mergeFrom(value);
      }
      if (source_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     */
    public Builder clearSource() {
      bitField0_ = (bitField0_ & ~0x00000001);
      source_ = null;
      if (sourceBuilder_ != null) {
        sourceBuilder_.dispose();
        sourceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder getSourceBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getSourceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder getSourceOrBuilder() {
      if (sourceBuilder_ != null) {
        return sourceBuilder_.getMessageOrBuilder();
      } else {
        return source_ == null ?
            com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance() : source_;
      }
    }
    /**
     * <pre>
     * The source of a network activity, such as starting a TCP connection.
     * In a multi hop network activity, the source represents the sender of the
     * last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress source = 1 [json_name = "source"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder> 
        getSourceFieldBuilder() {
      if (sourceBuilder_ == null) {
        sourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder>(
                getSource(),
                getParentForChildren(),
                isClean());
        source_ = null;
      }
      return sourceBuilder_;
    }

    private com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress destination_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder> destinationBuilder_;
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     * @return Whether the destination field is set.
     */
    public boolean hasDestination() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     * @return The destination.
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress getDestination() {
      if (destinationBuilder_ == null) {
        return destination_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance() : destination_;
      } else {
        return destinationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     */
    public Builder setDestination(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress value) {
      if (destinationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        destination_ = value;
      } else {
        destinationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     */
    public Builder setDestination(
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder builderForValue) {
      if (destinationBuilder_ == null) {
        destination_ = builderForValue.build();
      } else {
        destinationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     */
    public Builder mergeDestination(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress value) {
      if (destinationBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          destination_ != null &&
          destination_ != com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance()) {
          getDestinationBuilder().mergeFrom(value);
        } else {
          destination_ = value;
        }
      } else {
        destinationBuilder_.mergeFrom(value);
      }
      if (destination_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     */
    public Builder clearDestination() {
      bitField0_ = (bitField0_ & ~0x00000002);
      destination_ = null;
      if (destinationBuilder_ != null) {
        destinationBuilder_.dispose();
        destinationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder getDestinationBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getDestinationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder getDestinationOrBuilder() {
      if (destinationBuilder_ != null) {
        return destinationBuilder_.getMessageOrBuilder();
      } else {
        return destination_ == null ?
            com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.getDefaultInstance() : destination_;
      }
    }
    /**
     * <pre>
     * The destination of a network activity, such as accepting a TCP connection.
     * In a multi hop network activity, the destination represents the receiver of
     * the last hop.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.SocketAddress destination = 2 [json_name = "destination"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder> 
        getDestinationFieldBuilder() {
      if (destinationBuilder_ == null) {
        destinationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddress.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.SocketAddressOrBuilder>(
                getDestination(),
                getParentForChildren(),
                isClean());
        destination_ = null;
      }
      return destinationBuilder_;
    }

    private com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequestOrBuilder> requestBuilder_;
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     * @return Whether the request field is set.
     */
    public boolean hasRequest() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     * @return The request.
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest getRequest() {
      if (requestBuilder_ == null) {
        return request_ == null ? com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.getDefaultInstance() : request_;
      } else {
        return requestBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     */
    public Builder setRequest(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest value) {
      if (requestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        request_ = value;
      } else {
        requestBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     */
    public Builder setRequest(
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.Builder builderForValue) {
      if (requestBuilder_ == null) {
        request_ = builderForValue.build();
      } else {
        requestBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     */
    public Builder mergeRequest(com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest value) {
      if (requestBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          request_ != null &&
          request_ != com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.getDefaultInstance()) {
          getRequestBuilder().mergeFrom(value);
        } else {
          request_ = value;
        }
      } else {
        requestBuilder_.mergeFrom(value);
      }
      if (request_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     */
    public Builder clearRequest() {
      bitField0_ = (bitField0_ & ~0x00000004);
      request_ = null;
      if (requestBuilder_ != null) {
        requestBuilder_.dispose();
        requestBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.Builder getRequestBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getRequestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequestOrBuilder getRequestOrBuilder() {
      if (requestBuilder_ != null) {
        return requestBuilder_.getMessageOrBuilder();
      } else {
        return request_ == null ?
            com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.getDefaultInstance() : request_;
      }
    }
    /**
     * <pre>
     * Represents a network request, such as an HTTP request.
     * </pre>
     *
     * <code>.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest request = 3 [json_name = "request"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequestOrBuilder> 
        getRequestFieldBuilder() {
      if (requestBuilder_ == null) {
        requestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest.Builder, com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequestOrBuilder>(
                getRequest(),
                getParentForChildren(),
                isClean());
        request_ = null;
      }
      return requestBuilder_;
    }

    private java.lang.Object controlPoint_ = "";
    /**
     * <pre>
     * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
     * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
     * </pre>
     *
     * <code>string control_point = 4 [json_name = "controlPoint"];</code>
     * @return The controlPoint.
     */
    public java.lang.String getControlPoint() {
      java.lang.Object ref = controlPoint_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        controlPoint_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
     * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
     * </pre>
     *
     * <code>string control_point = 4 [json_name = "controlPoint"];</code>
     * @return The bytes for controlPoint.
     */
    public com.google.protobuf.ByteString
        getControlPointBytes() {
      java.lang.Object ref = controlPoint_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        controlPoint_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
     * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
     * </pre>
     *
     * <code>string control_point = 4 [json_name = "controlPoint"];</code>
     * @param value The controlPoint to set.
     * @return This builder for chaining.
     */
    public Builder setControlPoint(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      controlPoint_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
     * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
     * </pre>
     *
     * <code>string control_point = 4 [json_name = "controlPoint"];</code>
     * @return This builder for chaining.
     */
    public Builder clearControlPoint() {
      controlPoint_ = getDefaultInstance().getControlPoint();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
     * In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
     * </pre>
     *
     * <code>string control_point = 4 [json_name = "controlPoint"];</code>
     * @param value The bytes for controlPoint to set.
     * @return This builder for chaining.
     */
    public Builder setControlPointBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      controlPoint_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }

    private boolean rampMode_ ;
    /**
     * <pre>
     * A flow with ramp_mode flag will only be accepted if at least one ramp component matches and accepts the flow.
     * </pre>
     *
     * <code>bool ramp_mode = 5 [json_name = "rampMode"];</code>
     * @return The rampMode.
     */
    @java.lang.Override
    public boolean getRampMode() {
      return rampMode_;
    }
    /**
     * <pre>
     * A flow with ramp_mode flag will only be accepted if at least one ramp component matches and accepts the flow.
     * </pre>
     *
     * <code>bool ramp_mode = 5 [json_name = "rampMode"];</code>
     * @param value The rampMode to set.
     * @return This builder for chaining.
     */
    public Builder setRampMode(boolean value) {

      rampMode_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A flow with ramp_mode flag will only be accepted if at least one ramp component matches and accepts the flow.
     * </pre>
     *
     * <code>bool ramp_mode = 5 [json_name = "rampMode"];</code>
     * @return This builder for chaining.
     */
    public Builder clearRampMode() {
      bitField0_ = (bitField0_ & ~0x00000010);
      rampMode_ = false;
      onChanged();
      return this;
    }

    private boolean expectEnd_ ;
    /**
     * <pre>
     * Expect End denotes whether to expect a FlowEnd call for this flow.
     * </pre>
     *
     * <code>bool expect_end = 6 [json_name = "expectEnd"];</code>
     * @return The expectEnd.
     */
    @java.lang.Override
    public boolean getExpectEnd() {
      return expectEnd_;
    }
    /**
     * <pre>
     * Expect End denotes whether to expect a FlowEnd call for this flow.
     * </pre>
     *
     * <code>bool expect_end = 6 [json_name = "expectEnd"];</code>
     * @param value The expectEnd to set.
     * @return This builder for chaining.
     */
    public Builder setExpectEnd(boolean value) {

      expectEnd_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Expect End denotes whether to expect a FlowEnd call for this flow.
     * </pre>
     *
     * <code>bool expect_end = 6 [json_name = "expectEnd"];</code>
     * @return This builder for chaining.
     */
    public Builder clearExpectEnd() {
      bitField0_ = (bitField0_ & ~0x00000020);
      expectEnd_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest)
  }

  // @@protoc_insertion_point(class_scope:aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest)
  private static final com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest();
  }

  public static com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CheckHTTPRequest>
      PARSER = new com.google.protobuf.AbstractParser<CheckHTTPRequest>() {
    @java.lang.Override
    public CheckHTTPRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CheckHTTPRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CheckHTTPRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

