syntax = "proto3";

package aperture.flowcontrol.check.v1;

import "google/protobuf/timestamp.proto";

// FlowControlService is used to perform Flow Control operations.
service FlowControlService {
  // Check wraps the given arbitrary resource and matches the given labels against Flow Control Limiters to makes a decision whether to allow/deny.
  rpc Check(CheckRequest) returns (CheckResponse) {}
}

// CheckRequest contains fields required to perform Check call.
message CheckRequest {
  string control_point = 1;
  map<string, string> labels = 2;
}

// CheckResponse contains fields that represent decision made by Check call.
message CheckResponse {
  // RejectReason contains fields that give further information about rejection.
  enum RejectReason {
    REJECT_REASON_NONE = 0;
    REJECT_REASON_RATE_LIMITED = 1;
    REJECT_REASON_NO_TOKENS = 2;
    REJECT_REASON_REGULATED = 3;
  }

  // DecisionType contains fields that represent decision made by Check call.
  enum DecisionType {
    DECISION_TYPE_ACCEPTED = 0;
    DECISION_TYPE_REJECTED = 1;
  }

  // start timestamp
  google.protobuf.Timestamp start = 1;
  // end timestamp
  google.protobuf.Timestamp end = 2;
  // services that matched
  repeated string services = 4;
  // control_point of request
  string control_point = 5;
  // flow label keys that were matched for this request.
  repeated string flow_label_keys = 6;
  // telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
  map<string, string> telemetry_flow_labels = 7;
  // decision_type contains what the decision was.
  DecisionType decision_type = 8;
  // reject_reason contains the reason for the rejection.
  RejectReason reject_reason = 9;
  // classifiers that were matched for this request.
  repeated ClassifierInfo classifier_infos = 10;
  // flux meters that were matched for this request.
  repeated FluxMeterInfo flux_meter_infos = 11;
  // limiter_decisions contains information about decision made by each limiter.
  repeated LimiterDecision limiter_decisions = 12;
}

// ClassifierInfo describes details for each ClassifierInfo.
message ClassifierInfo {
  // Error information.
  enum Error {
    ERROR_NONE = 0;
    ERROR_EVAL_FAILED = 1;
    ERROR_EMPTY_RESULTSET = 2;
    ERROR_AMBIGUOUS_RESULTSET = 3;
    ERROR_MULTI_EXPRESSION = 4;
    ERROR_EXPRESSION_NOT_MAP = 5;
  }

  string policy_name = 1;
  string policy_hash = 2;
  int64 classifier_index = 3;
  Error error = 5;
}

// LimiterDecision describes details for each limiter.
message LimiterDecision {
  message RateLimiterInfo {
    double remaining = 1;
    double current = 2;
    string label = 3;
    double tokens_consumed = 4;
  }

  message LoadSchedulerInfo {
    string workload_index = 1;
    uint64 tokens_consumed = 2;
  }

  message RegulatorInfo {
    string label = 1;
  }

  enum LimiterReason {
    LIMITER_REASON_UNSPECIFIED = 0;
    LIMITER_REASON_KEY_NOT_FOUND = 1;
  }

  string policy_name = 1;
  string policy_hash = 2;
  string component_id = 3;
  bool dropped = 4;
  LimiterReason reason = 5;
  oneof details {
    RateLimiterInfo rate_limiter_info = 6;
    LoadSchedulerInfo load_scheduler_info = 7;
    RegulatorInfo regulator_info = 8;
  }
}

// FluxMeterInfo describes detail for each FluxMeterInfo.
message FluxMeterInfo {
  string flux_meter_name = 1;
}
