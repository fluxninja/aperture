// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package checkv1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AWSGatewayFlowControlServiceClient is the client API for AWSGatewayFlowControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AWSGatewayFlowControlServiceClient interface {
	// AWSGatewayCheck .
	AWSGatewayCheck(ctx context.Context, in *AWSGatewayCheckRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type aWSGatewayFlowControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAWSGatewayFlowControlServiceClient(cc grpc.ClientConnInterface) AWSGatewayFlowControlServiceClient {
	return &aWSGatewayFlowControlServiceClient{cc}
}

func (c *aWSGatewayFlowControlServiceClient) AWSGatewayCheck(ctx context.Context, in *AWSGatewayCheckRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/aperture.flowcontrol.check.v1.AWSGatewayFlowControlService/AWSGatewayCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AWSGatewayFlowControlServiceServer is the server API for AWSGatewayFlowControlService service.
// All implementations should embed UnimplementedAWSGatewayFlowControlServiceServer
// for forward compatibility
type AWSGatewayFlowControlServiceServer interface {
	// AWSGatewayCheck .
	AWSGatewayCheck(context.Context, *AWSGatewayCheckRequest) (*httpbody.HttpBody, error)
}

// UnimplementedAWSGatewayFlowControlServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAWSGatewayFlowControlServiceServer struct {
}

func (UnimplementedAWSGatewayFlowControlServiceServer) AWSGatewayCheck(context.Context, *AWSGatewayCheckRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AWSGatewayCheck not implemented")
}

// UnsafeAWSGatewayFlowControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AWSGatewayFlowControlServiceServer will
// result in compilation errors.
type UnsafeAWSGatewayFlowControlServiceServer interface {
	mustEmbedUnimplementedAWSGatewayFlowControlServiceServer()
}

func RegisterAWSGatewayFlowControlServiceServer(s grpc.ServiceRegistrar, srv AWSGatewayFlowControlServiceServer) {
	s.RegisterService(&AWSGatewayFlowControlService_ServiceDesc, srv)
}

func _AWSGatewayFlowControlService_AWSGatewayCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AWSGatewayCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSGatewayFlowControlServiceServer).AWSGatewayCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aperture.flowcontrol.check.v1.AWSGatewayFlowControlService/AWSGatewayCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSGatewayFlowControlServiceServer).AWSGatewayCheck(ctx, req.(*AWSGatewayCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AWSGatewayFlowControlService_ServiceDesc is the grpc.ServiceDesc for AWSGatewayFlowControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AWSGatewayFlowControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aperture.flowcontrol.check.v1.AWSGatewayFlowControlService",
	HandlerType: (*AWSGatewayFlowControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AWSGatewayCheck",
			Handler:    _AWSGatewayFlowControlService_AWSGatewayCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aperture/flowcontrol/check/v1/check.proto",
}

// FlowControlServiceClient is the client API for FlowControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowControlServiceClient interface {
	// Check wraps the given arbitrary resource and matches the given labels against Flow Control Limiters to makes a decision whether to allow/deny.
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type flowControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowControlServiceClient(cc grpc.ClientConnInterface) FlowControlServiceClient {
	return &flowControlServiceClient{cc}
}

func (c *flowControlServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/aperture.flowcontrol.check.v1.FlowControlService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowControlServiceServer is the server API for FlowControlService service.
// All implementations should embed UnimplementedFlowControlServiceServer
// for forward compatibility
type FlowControlServiceServer interface {
	// Check wraps the given arbitrary resource and matches the given labels against Flow Control Limiters to makes a decision whether to allow/deny.
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
}

// UnimplementedFlowControlServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFlowControlServiceServer struct {
}

func (UnimplementedFlowControlServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}

// UnsafeFlowControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowControlServiceServer will
// result in compilation errors.
type UnsafeFlowControlServiceServer interface {
	mustEmbedUnimplementedFlowControlServiceServer()
}

func RegisterFlowControlServiceServer(s grpc.ServiceRegistrar, srv FlowControlServiceServer) {
	s.RegisterService(&FlowControlService_ServiceDesc, srv)
}

func _FlowControlService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowControlServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aperture.flowcontrol.check.v1.FlowControlService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowControlServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowControlService_ServiceDesc is the grpc.ServiceDesc for FlowControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aperture.flowcontrol.check.v1.FlowControlService",
	HandlerType: (*FlowControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _FlowControlService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aperture/flowcontrol/check/v1/check.proto",
}
