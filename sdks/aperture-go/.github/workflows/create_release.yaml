name: Release Aperture Go SDK

on:
  workflow_dispatch:
    inputs:
      version_type:
        type: choice
        description: 'Version Type'
        required: true
        options:
          - major
          - minor
          - patch
        default: minor

concurrency:
  cancel-in-progress: false
  group: ${{ github.repository }}-release-aperture-go

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git Name and Email
        run: |
          git config --global user.name "FluxNinja Ops"
          git config --global user.email ops@fluxninja.com
      
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install GitHub CLI
        run: |
          brew install gh

      - name: Check diff and Create Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag name
          latestTag=$(git describe --tags `git rev-list --tags --max-count=1`)

          # Get diff between latest tag and current commit
          diff=$(git log $latestTag..HEAD --oneline)

          # If there is no diff, exit
          if [ -z "$diff" ]; then
            echo "No changes since $latestTag."
            exit 0
          fi

          # Fetch the version from the latest tag name and increment it
          version=$(echo $latestTag | grep -oP '(?<=v)\d+\.\d+\.\d+')
          
          # Get the version type
          versionType="${{ github.event.inputs.version_type }}"
          if [ "$versionType" = "major" ]; then
            newVersion=$(echo $version | awk -F. '{$1 = $1 + 1; $2 = 0; $3 = 0} 1' | sed 's/ /./g')
          elif [ "$versionType" = "minor" ]; then
            newVersion=$(echo $version | awk -F. '{$2 = $2 + 1; $3 = 0} 1' | sed 's/ /./g')
          elif [ "$versionType" = "patch" ]; then
            newVersion=$(echo $version | awk -F. '{$3 = $3 + 1;} 1' | sed 's/ /./g')
          else
            echo "Invalid version type."
            exit 1
          fi

          # Create a new tag and push it to the remote repository
          git tag -a "v$newVersion" -m "Release v$newVersion"
          git push origin "v$newVersion"

          # Create a new release
          gh release create "v$newVersion" --title "Release v${newVersion}" --generate-notes --latest --verify-tag
