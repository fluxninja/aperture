// Code generated by "enumer -type=FlowStatus -output=flow-status-string.go"; DO NOT EDIT.

package aperture

import (
	"fmt"
	"strings"
)

const _FlowStatusName = "OKError"

var _FlowStatusIndex = [...]uint8{0, 2, 7}

const _FlowStatusLowerName = "okerror"

func (i FlowStatus) String() string {
	if i >= FlowStatus(len(_FlowStatusIndex)-1) {
		return fmt.Sprintf("FlowStatus(%d)", i)
	}
	return _FlowStatusName[_FlowStatusIndex[i]:_FlowStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FlowStatusNoOp() {
	var x [1]struct{}
	_ = x[OK-(0)]
	_ = x[Error-(1)]
}

var _FlowStatusValues = []FlowStatus{OK, Error}

var _FlowStatusNameToValueMap = map[string]FlowStatus{
	_FlowStatusName[0:2]:      OK,
	_FlowStatusLowerName[0:2]: OK,
	_FlowStatusName[2:7]:      Error,
	_FlowStatusLowerName[2:7]: Error,
}

var _FlowStatusNames = []string{
	_FlowStatusName[0:2],
	_FlowStatusName[2:7],
}

// FlowStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FlowStatusString(s string) (FlowStatus, error) {
	if val, ok := _FlowStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FlowStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FlowStatus values", s)
}

// FlowStatusValues returns all values of the enum
func FlowStatusValues() []FlowStatus {
	return _FlowStatusValues
}

// FlowStatusStrings returns a slice of all String values of the enum
func FlowStatusStrings() []string {
	strs := make([]string, len(_FlowStatusNames))
	copy(strs, _FlowStatusNames)
	return strs
}

// IsAFlowStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FlowStatus) IsAFlowStatus() bool {
	for _, v := range _FlowStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
