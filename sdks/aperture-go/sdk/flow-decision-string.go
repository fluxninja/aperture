// Code generated by "enumer -type=FlowDecision -output=flow-decision-string.go"; DO NOT EDIT.

package aperture

import (
	"fmt"
	"strings"
)

const _FlowDecisionName = "AcceptedRejectedUnreachable"

var _FlowDecisionIndex = [...]uint8{0, 8, 16, 27}

const _FlowDecisionLowerName = "acceptedrejectedunreachable"

func (i FlowDecision) String() string {
	if i >= FlowDecision(len(_FlowDecisionIndex)-1) {
		return fmt.Sprintf("FlowDecision(%d)", i)
	}
	return _FlowDecisionName[_FlowDecisionIndex[i]:_FlowDecisionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FlowDecisionNoOp() {
	var x [1]struct{}
	_ = x[Accepted-(0)]
	_ = x[Rejected-(1)]
	_ = x[Unreachable-(2)]
}

var _FlowDecisionValues = []FlowDecision{Accepted, Rejected, Unreachable}

var _FlowDecisionNameToValueMap = map[string]FlowDecision{
	_FlowDecisionName[0:8]:        Accepted,
	_FlowDecisionLowerName[0:8]:   Accepted,
	_FlowDecisionName[8:16]:       Rejected,
	_FlowDecisionLowerName[8:16]:  Rejected,
	_FlowDecisionName[16:27]:      Unreachable,
	_FlowDecisionLowerName[16:27]: Unreachable,
}

var _FlowDecisionNames = []string{
	_FlowDecisionName[0:8],
	_FlowDecisionName[8:16],
	_FlowDecisionName[16:27],
}

// FlowDecisionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FlowDecisionString(s string) (FlowDecision, error) {
	if val, ok := _FlowDecisionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FlowDecisionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FlowDecision values", s)
}

// FlowDecisionValues returns all values of the enum
func FlowDecisionValues() []FlowDecision {
	return _FlowDecisionValues
}

// FlowDecisionStrings returns a slice of all String values of the enum
func FlowDecisionStrings() []string {
	strs := make([]string, len(_FlowDecisionNames))
	copy(strs, _FlowDecisionNames)
	return strs
}

// IsAFlowDecision returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FlowDecision) IsAFlowDecision() bool {
	for _, v := range _FlowDecisionValues {
		if i == v {
			return true
		}
	}
	return false
}
