{{- if .Values.agent.namespaceScoped }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ template "common.names.namespace" . }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: aperture-agent
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" . $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations:
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" . $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.agent.replicaCount | default 1 }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        {{- if .Values.agent.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.agent.podAnnotations "context" . $ ) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: aperture-agent
        {{- if .Values.agent.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.agent.podLabels "context" . $ ) | nindent 8 }}
        {{- end }}
    spec:
      {{- include "common.images.pullSecrets" (dict "images" (list .Values.agent.image) "global" .Values.global) | nindent 6 }}
      {{- if .Values.agent.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.agent.nodeSelector "context" . $ ) | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.agent.affinity "context" . $ ) | nindent 8 }}
      {{- end }}
      {{- if .Values.agent.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.agent.tolerations "context" . $ ) | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.agent.serviceAccount.name | default (include "common.names.fullname" .) }}
      {{- if and .Values.agent.podSecurityContext.enabled (omit .Values.agent.podSecurityContext "enabled") }}
      securityContext:
        {{- if (omit .Values.agent.podSecurityContext "enabled" "fsGroup" )}}
        {{- omit .Values.agent.podSecurityContext "enabled" "fsGroup" | toYaml | nindent 8 }}
        {{- end }}
        {{- if .Values.agent.podSecurityContext.fsGroup }}
        fsGroup: {{ .Values.agent.podSecurityContext.fsGroup }}
        {{- end }}
      {{- end }}
      {{- if .Values.agent.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.agent.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.agent.initContainers }}
      initContainers:
        {{- if .Values.agent.initContainers }}
        {{ .Values.agent.initContainers | toYaml | nindent 4 }}
        {{- end }}
      {{- end }}
      containers:
        - name: aperture-agent
          image: {{ include "agent-operator.image" (dict "image" .Values.agent.image "context" $ ) }}
          {{- if .Values.agent.image.pullPolicy }}
          imagePullPolicy: {{ .Values.agent.image.pullPolicy }}
          {{- end }}
          {{- if and .Values.agent.containerSecurityContext.enabled (omit .Values.agent.containerSecurityContext "enabled") }}
          securityContext:
            {{- if (omit .Values.agent.containerSecurityContext "enabled" "runAsUser" "runAsNonRoot" "readOnlyRootFilesystem" )}}
            {{- omit .Values.agent.containerSecurityContext "enabled" "runAsUser" "runAsNonRoot" "readOnlyRootFilesystem" | toYaml | nindent 12 }}
            {{- end }}
            {{- if .Values.agent.containerSecurityContext.runAsUser }}
            runAsUser: {{ .Values.agent.containerSecurityContext.runAsUser }}
            {{- end }}
            {{- if .Values.agent.containerSecurityContext.runAsNonRoot }}
            runAsNonRoot: {{ .Values.agent.containerSecurityContext.runAsNonRoot }}
            {{- end }}
            {{- if .Values.agent.containerSecurityContext.readOnlyRootFilesystem }}
            readOnlyRootFilesystem: {{ .Values.agent.containerSecurityContext.readOnlyRootFilesystem }}
            {{- end }}
          {{- end }}
          {{- if .Values.agent.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.agent.command "context" . $ ) | nindent 12 }}
          {{- end }}
          {{- if .Values.agent.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.agent.args "context" . $ ) | nindent 12 }}
          {{- end }}
          {{- if .Values.agent.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.agent.lifecycleHooks "context" . $ ) | nindent 12 }}
          {{- end }}
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: APERTURE_AGENT_SERVICE_DISCOVERY_KUBERNETES_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: APERTURE_AGENT_SERVICE_DISCOVERY_KUBERNETES_ENABLED
              value: "false"
            {{- if or (and .Values.agent.secrets.fluxNinjaExtension .Values.agent.secrets.fluxNinjaExtension.create) (and .Values.agent.secrets.fluxNinjaExtension .Values.agent.secrets.fluxNinjaExtension.secretKeyRef .Values.agent.secrets.fluxNinjaExtension.secretKeyRef.name) }}
            - name: APERTURE_AGENT_FLUXNINJA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "agent.apiSecret.name" (dict "agent" .Values.agent "context" . $ ) }}
                  key: {{ include "agent.apiSecret.key" (dict "agent" .Values.agent $ ) }}
                  optional: false
            {{- end }}
            {{- if .Values.agent.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.agent.extraEnvVars "context" . $ ) | nindent 12 }}
            {{- end }}
          {{- if or .Values.agent.extraEnvVarsCM .Values.agent.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.agent.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.agent.extraEnvVarsCM "context" . $ ) }}
            {{- end }}
            {{- if .Values.agent.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.agent.extraEnvVarsSecret "context" . $ ) }}
            {{- end }}
          {{- end }}
          {{- if .Values.agent.resources }}
          resources: {{- toYaml .Values.agent.resources | nindent 12 }}
          {{- end }}
          ports:
            - containerPort: {{ include "agent.server.port" (dict "agent" .Values.agent $ ) }}
              name: server
              protocol: TCP
            - containerPort: {{ include "agent.otel.port" (dict "agent" .Values.agent "portName" "debug_port" "defaultPort" 8888 $ ) }}
              name: otel-debug
              protocol: TCP
            - containerPort: {{ include "agent.otel.port" (dict "agent" .Values.agent "portName" "health_check_port" "defaultPort" 13133 $ ) }}
              name: otel-health
              protocol: TCP
            - containerPort: {{ include "agent.otel.port" (dict "agent" .Values.agent "portName" "pprof_port" "defaultPort" 1777 $ ) }}
              name: otel-pprof
              protocol: TCP
            - containerPort: {{ include "agent.otel.port" (dict "agent" .Values.agent "portName" "zpages_port" "defaultPort" 55679 $ ) }}
              name: otel-zpages
              protocol: TCP
            - containerPort: {{ include "agent.dist_cache.port" (dict "agent" .Values.agent "portName" "bind_addr" "defaultPort" 3320 $ ) }}
              name: dist-cache
              protocol: TCP
            - containerPort: {{ include "agent.dist_cache.port" (dict "agent" .Values.agent "portName" "memberlist_bind_addr" "defaultPort" 3322 $ ) }}
              name: memberlist
              protocol: TCP
          {{- if .Values.agent.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /v1/status/system/liveness
              port: server
              scheme: HTTP
            initialDelaySeconds: {{ .Values.agent.livenessProbe.initialDelaySeconds | default 15 }}
            periodSeconds: {{ .Values.agent.livenessProbe.periodSeconds | default 15 }}
            timeoutSeconds: {{ .Values.agent.livenessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.agent.livenessProbe.failureThreshold | default 6 }}
            successThreshold: {{ .Values.agent.livenessProbe.successThreshold | default 1 }}
          {{- else if .Values.agent.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.agent.customLivenessProbe "context" . $ ) | nindent 12 }}
          {{- end }}
          {{- if .Values.agent.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /v1/status/system/readiness
              port: server
            initialDelaySeconds: {{ .Values.agent.readinessProbe.initialDelaySeconds | default 15 }}
            periodSeconds: {{ .Values.agent.readinessProbe.periodSeconds | default 15 }}
            timeoutSeconds: {{ .Values.agent.readinessProbe.timeoutSeconds | default 5 }}
            failureThreshold: {{ .Values.agent.readinessProbe.failureThreshold | default 6 }}
            successThreshold: {{ .Values.agent.readinessProbe.successThreshold | default 1 }}
          {{- else if .Values.agent.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.agent.customReadinessProbe "context" . $ ) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /etc/aperture/aperture-agent/config
              name: aperture-agent-config
            {{- if and .Values.agent.controllerCert .Values.agent.controllerCert.cmName }}
            - name: controller-cert
              mountPath: /etc/aperture/aperture-agent/certs
            {{- end }}
            {{- if .Values.agent.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.agent.extraVolumeMounts "context" . $ ) | nindent 12 }}
            {{- end }}
      volumes:
        - name: aperture-agent-config
          configMap:
            name: {{ template "common.names.fullname" . }}-config
        {{- if and .Values.agent.controllerCert .Values.agent.controllerCert.cmName }}
        - name: controller-cert
          configMap:
            name: {{ .Values.agent.controllerCert.cmName }}
        {{- end }}
        {{- if .Values.agent.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.agent.extraVolumes "context" . $ ) | nindent 8 }}
        {{- end }}
{{- end }}
