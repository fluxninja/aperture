consumes:
    - application/json
definitions:
    AIMDConcurrencyController:
        description: High level concurrency control component. Baselines a signal using exponential moving average and applies concurrency limits based on deviation of signal from the baseline. Internally implemented as a nested circuit.
        properties:
            alerter_parameters:
                $ref: '#/definitions/AlerterParameters'
                description: Configuration for embedded Alerter.
            default_config:
                $ref: '#/definitions/LoadActuatorDynamicConfig'
                description: Default configuration.
            dynamic_config_key:
                description: Dynamic configuration key for load actuation.
                type: string
            flow_selector:
                $ref: '#/definitions/FlowSelector'
                description: |+
                    Flow Selector decides the service and flows at which the concurrency limiter is applied.

                x-go-tag-validate: required
            gradient_parameters:
                $ref: '#/definitions/GradientControllerParameters'
                description: Gradient parameters for the controller.
            in_ports:
                $ref: '#/definitions/AIMDConcurrencyControllerIns'
                description: Input ports for the AIMDConcurrencyController component.
            load_multiplier_linear_increment:
                default: 0.0025
                description: |+
                    Linear increment to load multiplier in each execution tick when the system is not in overloaded state.

                format: double
                type: number
                x-go-tag-default: "0.0025"
            max_load_multiplier:
                default: 2
                description: |+
                    Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.

                format: double
                type: number
                x-go-tag-default: "2.0"
            out_ports:
                $ref: '#/definitions/AIMDConcurrencyControllerOuts'
                description: Output ports for the AIMDConcurrencyController component.
            scheduler_parameters:
                $ref: '#/definitions/SchedulerParameters'
                description: |+
                    Scheduler parameters.

                x-go-tag-validate: required
        type: object
    AIMDConcurrencyControllerIns:
        description: Inputs for the AIMDConcurrencyController component.
        properties:
            setpoint:
                $ref: '#/definitions/InPort'
                description: The setpoint to the controller.
            signal:
                $ref: '#/definitions/InPort'
                description: The signal to the controller.
        type: object
    AIMDConcurrencyControllerOuts:
        description: Outputs for the AIMDConcurrencyController component.
        properties:
            accepted_concurrency:
                $ref: '#/definitions/OutPort'
                description: Accepted concurrency is the number of concurrent requests that are accepted by the service.
            desired_load_multiplier:
                $ref: '#/definitions/OutPort'
                description: Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
            incoming_concurrency:
                $ref: '#/definitions/OutPort'
                description: IncomingConcurrency is the number of concurrent requests that are received by the service.
            is_overload:
                $ref: '#/definitions/OutPort'
                description: Is overload is a Boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
            observed_load_multiplier:
                $ref: '#/definitions/OutPort'
                description: Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
        type: object
    AddressExtractor:
        description: |-
            IP addresses in attribute context are defined as objects with separate IP and port fields.
            This is a helper to display an address as a single string.

            :::caution

            This might introduce high-cardinality flow label values.

            :::

            [ext-authz-address]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address

            Example:
            ```yaml
            from: "source.address # or destination.address"
            ```
        properties:
            from:
                description: |+
                    Attribute path pointing to some string - for example, `source.address`.

                type: string
                x-go-tag-validate: required
        required:
            - from
        title: Display an [Address][ext-authz-address] as a single string, for example, `<ip>:<port>`
        type: object
    Alerter:
        description: Alerter reacts to a signal and generates alert to send to alert manager.
        properties:
            in_ports:
                $ref: '#/definitions/AlerterIns'
                description: Input ports for the Alerter component.
            parameters:
                $ref: '#/definitions/AlerterParameters'
                title: Alerter configuration
                x-go-tag-validate: required
        type: object
    AlerterIns:
        description: Inputs for the Alerter component.
        properties:
            signal:
                $ref: '#/definitions/InPort'
                description: Signal which Alerter is monitoring. If the signal greater than 0, Alerter generates an alert.
        type: object
    AlerterParameters:
        description: Alerter Parameters configure parameters such as alert name, severity, resolve timeout, alert channels and labels.
        properties:
            alert_channels:
                description: A list of alert channel strings.
                items:
                    type: string
                type: array
            alert_name:
                description: |+
                    Name of the alert.

                type: string
                x-go-tag-validate: required
            labels:
                additionalProperties:
                    type: string
                description: Additional labels to add to alert.
                type: object
            resolve_timeout:
                default: 5s
                description: |+
                    Duration of alert resolver.

                type: string
                x-go-tag-default: 5s
            severity:
                default: info
                description: |+
                    Severity of the alert, one of 'info', 'warn' or 'crit'.

                enum:
                    - info
                    - warn
                    - crit
                type: string
                x-go-tag-default: info
                x-go-tag-validate: oneof=info warn crit
                x-oneof: info | warn | crit
        required:
            - alert_name
        type: object
    And:
        description: |-
            Logical AND.

            Signals are mapped to Boolean values as follows:
            * Zero is treated as false.
            * Any non-zero is treated as true.
            * Invalid inputs are considered unknown.

              :::note

              Treating invalid inputs as "unknowns" has a consequence that the result
              might end up being valid even when some inputs are invalid. For example, `unknown && false == false`,
              because the result would end up false no matter if
              first signal was true or false. Conversely, `unknown && true == unknown`.

              :::
        properties:
            in_ports:
                $ref: '#/definitions/AndIns'
                description: Input ports for the And component.
            out_ports:
                $ref: '#/definitions/AndOuts'
                description: Output ports for the And component.
        type: object
    AndIns:
        description: Inputs for the And component.
        properties:
            inputs:
                description: |+
                    Array of input signals.

                items:
                    $ref: '#/definitions/InPort'
                    type: object
                type: array
                x-go-tag-validate: dive
        type: object
    AndOuts:
        description: Output ports for the And component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: |-
                    Result of logical AND of all the input signals.

                    Will always be 0 (false), 1 (true) or invalid (unknown).
        type: object
    ArithmeticCombinator:
        properties:
            in_ports:
                $ref: '#/definitions/ArithmeticCombinatorIns'
                description: Input ports for the Arithmetic Combinator component.
            operator:
                description: |+
                    Operator of the arithmetic operation.

                    The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
                    In case of XOR and bit shifts, value of signals is cast to integers before performing the operation.

                enum:
                    - add
                    - sub
                    - mul
                    - div
                    - xor
                    - lshift
                    - rshift
                type: string
                x-go-tag-validate: oneof=add sub mul div xor lshift rshift
                x-oneof: add | sub | mul | div | xor | lshift | rshift
            out_ports:
                $ref: '#/definitions/ArithmeticCombinatorOuts'
                description: Output ports for the Arithmetic Combinator component.
        title: Type of Combinator that computes the arithmetic operation on the operand signals
        type: object
    ArithmeticCombinatorIns:
        description: Inputs for the Arithmetic Combinator component.
        properties:
            lhs:
                $ref: '#/definitions/InPort'
                description: Left hand side of the arithmetic operation.
            rhs:
                $ref: '#/definitions/InPort'
                description: Right hand side of the arithmetic operation.
        type: object
    ArithmeticCombinatorOuts:
        description: Outputs for the Arithmetic Combinator component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Result of arithmetic operation.
        type: object
    AutoScale:
        description: AutoScale components are used to scale a service.
        properties:
            auto_scaler:
                $ref: '#/definitions/AutoScaler'
                description: _AutoScaler_ provides auto-scaling functionality for any scalable resource.
            pod_auto_scaler:
                $ref: '#/definitions/PodAutoScaler'
                description: _PodAutoScaler_ provides auto-scaling functionality for scalable Kubernetes resource.
            pod_scaler:
                $ref: '#/definitions/PodScaler'
                description: PodScaler provides pod horizontal scaling functionality for scalable Kubernetes resources.
        type: object
    AutoScaleKubernetesControlPoint:
        properties:
            api_version:
                type: string
            kind:
                type: string
            name:
                type: string
            namespace:
                type: string
        type: object
    AutoScaleKubernetesControlPoints:
        properties:
            auto_scale_kubernetes_control_points:
                items:
                    $ref: '#/definitions/AutoScaleKubernetesControlPoint'
                    type: object
                type: array
        type: object
    AutoScaler:
        description: _AutoScaler_ provides auto-scaling functionality for any scalable resource. Multiple _Controllers_ can be defined on the _AutoScaler_ for performing scale-out or scale-in. The _AutoScaler_ can interface with infrastructure APIs such as Kubernetes to perform auto-scale.
        properties:
            cooldown_override_percentage:
                default: 50
                description: |+
                    Cooldown override percentage defines a threshold change in scale-out beyond which previous cooldown is overridden.
                    For example, if the cooldown is 5 minutes and the cooldown override percentage is 10%, then if the
                    scale-increases by 10% or more, the previous cooldown is cancelled. Defaults to 50%.

                format: double
                type: number
                x-go-tag-default: "50"
            max_scale:
                default: "9223372036854775807"
                description: |+
                    The maximum scale to which the _AutoScaler_ can scale-out. For example, in case of KubernetesReplicas Scaler, this is the maximum number of replicas.

                format: int64
                minLength: 1
                type: string
                x-go-tag-default: "9223372036854775807"
                x-go-tag-validate: gt=0
            max_scale_in_percentage:
                default: 1
                description: |+
                    The maximum decrease of scale (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 1% of current scale value.

                format: double
                type: number
                x-go-tag-default: "1"
            max_scale_out_percentage:
                default: 10
                description: |+
                    The maximum increase of scale (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 10% of current scale value.

                format: double
                type: number
                x-go-tag-default: "10"
            min_scale:
                default: "0"
                description: |+
                    The minimum scale to which the _AutoScaler_ can scale-in. For example, in case of KubernetesReplicas Scaler, this is the minimum number of replicas.

                format: int64
                minLength: 0
                type: string
                x-go-tag-default: "0"
                x-go-tag-validate: gte=0
            out_ports:
                $ref: '#/definitions/AutoScalerOuts'
                description: Output ports for the _AutoScaler_.
            scale_in_alerter_parameters:
                $ref: '#/definitions/AlerterParameters'
                description: Configuration for scale-in Alerter.
            scale_in_controllers:
                description: List of _Controllers_ for scaling in.
                items:
                    $ref: '#/definitions/ScaleInController'
                    type: object
                type: array
            scale_in_cooldown:
                default: 120s
                description: |+
                    The amount of time to wait after a scale-in operation for another scale-in operation.

                type: string
                x-go-tag-default: 120s
            scale_out_alerter_parameters:
                $ref: '#/definitions/AlerterParameters'
                description: Configuration for scale-out Alerter.
            scale_out_controllers:
                description: List of _Controllers_ for scaling out.
                items:
                    $ref: '#/definitions/ScaleOutController'
                    type: object
                type: array
            scale_out_cooldown:
                default: 30s
                description: |+
                    The amount of time to wait after a scale-out operation for another scale-out or scale-in operation.

                type: string
                x-go-tag-default: 30s
            scaler:
                $ref: '#/definitions/AutoScalerScaler'
                x-go-tag-validate: required
        type: object
    AutoScalerOuts:
        description: Outputs for _AutoScaler_.
        properties:
            actual_scale:
                $ref: '#/definitions/OutPort'
            configured_scale:
                $ref: '#/definitions/OutPort'
            desired_scale:
                $ref: '#/definitions/OutPort'
        type: object
    AutoScalerScaler:
        properties:
            kubernetes_replicas:
                $ref: '#/definitions/KubernetesReplicas'
        type: object
    CheckHTTPRequest:
        properties:
            control_point:
                description: |-
                    For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
                    In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
                type: string
            destination:
                $ref: '#/definitions/SocketAddress'
                description: |-
                    The destination of a network activity, such as accepting a TCP connection.
                    In a multi hop network activity, the destination represents the receiver of
                    the last hop.
            request:
                $ref: '#/definitions/CheckHTTPRequestHttpRequest'
                description: Represents a network request, such as an HTTP request.
            source:
                $ref: '#/definitions/SocketAddress'
                description: |-
                    The source of a network activity, such as starting a TCP connection.
                    In a multi hop network activity, the source represents the sender of the
                    last hop.
        type: object
    CheckHTTPRequestHttpRequest:
        description: |-
            This message defines attributes for an HTTP request.
            HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
        properties:
            body:
                description: The HTTP request body.
                type: string
            headers:
                additionalProperties:
                    type: string
                description: The HTTP request headers.
                type: object
            host:
                description: The HTTP request `Host` header value.
                type: string
            method:
                description: The HTTP request method, such as `GET`, `POST`.
                type: string
            path:
                description: |-
                    The request target, as it appears in the first line of the HTTP request. This includes
                    the URL path and query-string. No decoding is performed.
                type: string
            protocol:
                description: The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
                type: string
            scheme:
                description: The HTTP URL scheme, such as `http` and `https`.
                type: string
            size:
                description: The HTTP request size in bytes. If unknown, it must be -1.
                format: int64
                type: string
        type: object
    CheckHTTPResponse:
        properties:
            denied_response:
                $ref: '#/definitions/DeniedHttpResponse'
                description: Supplies http attributes for a denied response.
            dynamic_metadata:
                description: |-
                    Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
                    filter.
                type: object
            ok_response:
                $ref: '#/definitions/OkHttpResponse'
                description: Supplies http attributes for an ok response.
            status:
                $ref: '#/definitions/googlerpcStatus'
                title: Status `OK` allows the request. Any other status indicates the request should be denied
        type: object
    CheckResponse:
        description: CheckResponse contains fields that represent decision made by Check call.
        properties:
            classifier_infos:
                description: classifiers that were matched for this request.
                items:
                    $ref: '#/definitions/ClassifierInfo'
                    type: object
                type: array
            control_point:
                title: control_point of request
                type: string
            decision_type:
                $ref: '#/definitions/CheckResponseDecisionType'
                description: decision_type contains what the decision was.
            end:
                format: date-time
                title: end timestamp
                type: string
            flow_label_keys:
                description: flow label keys that were matched for this request.
                items:
                    type: string
                type: array
            flux_meter_infos:
                description: flux meters that were matched for this request.
                items:
                    $ref: '#/definitions/FluxMeterInfo'
                    type: object
                type: array
            limiter_decisions:
                description: limiter_decisions contains information about decision made by each limiter.
                items:
                    $ref: '#/definitions/LimiterDecision'
                    type: object
                type: array
            reject_reason:
                $ref: '#/definitions/CheckResponseRejectReason'
                description: reject_reason contains the reason for the rejection.
            services:
                items:
                    type: string
                title: services that matched
                type: array
            start:
                format: date-time
                title: start timestamp
                type: string
            telemetry_flow_labels:
                additionalProperties:
                    type: string
                description: telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
                type: object
        type: object
    CheckResponseDecisionType:
        default: DECISION_TYPE_ACCEPTED
        description: DecisionType contains fields that represent decision made by Check call.
        enum:
            - DECISION_TYPE_ACCEPTED
            - DECISION_TYPE_REJECTED
        type: string
    CheckResponseRejectReason:
        default: REJECT_REASON_NONE
        description: RejectReason contains fields that give further information about rejection.
        enum:
            - REJECT_REASON_NONE
            - REJECT_REASON_RATE_LIMITED
            - REJECT_REASON_CONCURRENCY_LIMITED
            - REJECT_REASON_FLOW_REGULATED
        type: string
    Circuit:
        description: |-
            Circuit is graph of inter-connected signal processing components.

            :::info

            See also [Circuit overview](/concepts/policy/circuit.md).

            :::

            Signals flow between components through ports.
            As signals traverse the circuit, they get processed, stored within components or get acted upon (for example, load-shed, rate-limit, auto-scale and so on).
            Circuit is evaluated periodically to respond to changes in signal readings.

            :::info Signals

            Signals are floating point values.

            A signal can also have a special **Invalid** value. It's usually used to
            communicate that signal does not have a meaningful value at the moment, for example,
            [PromQL](#prom-q-l) emits such a value if it cannot execute a query.
            Components know when their input signals are invalid and can act
            accordingly. They can either propagate the invalid signal, by making their
            output itself invalid (for example,
            [ArithmeticCombinator](#arithmetic-combinator)) or use some different
            logic, for example, [Extrapolator](#extrapolator). Refer to a component's
            docs on how exactly it handles invalid inputs.

            :::
        properties:
            components:
                description: |+
                    Defines a signal processing graph as a list of components.

                items:
                    $ref: '#/definitions/Component'
                    type: object
                type: array
                x-go-tag-validate: dive
            evaluation_interval:
                default: 0.5s
                description: |+
                    Evaluation interval (tick) is the time between consecutive runs of the policy circuit.
                    This interval is typically aligned with how often the corrective action (actuation) needs to be taken.

                type: string
                x-go-tag-default: 0.5s
        type: object
    Classifier:
        description: |-
            :::info

            See also [Classifier overview](/concepts/flow-control/resources/classifier.md).

            :::
            Example
            ```yaml
            flow_selector:
              service_selector:
                 agent_group: demoapp
                 service: service1-demo-app.demoapp.svc.cluster.local
              flow_matcher:
                 control_point: ingress
                 label_matcher:
                    match_labels:
                      user_tier: gold
                    match_expressions:
                      - key: user_type
                        operator: In
            rules:
              user:
               extractor:
                 from: request.http.headers.user-agent
              telemetry: false
            ```
        properties:
            flow_selector:
                $ref: '#/definitions/FlowSelector'
                description: |+
                    Defines where to apply the flow classification rule.

                x-go-tag-validate: required
            rego:
                $ref: '#/definitions/Rego'
                description: |-
                    Rego is a policy language used to express complex policies in a concise and declarative way.
                    It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
                    For simple cases, such as directly reading a value from header or a field from JSON body, declarative extractors are recommended.
                title: Rego based classification
            rules:
                additionalProperties:
                    $ref: '#/definitions/Rule'
                description: |+
                    A map of {key, value} pairs mapping from
                    [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
                    how to extract and propagate flow labels with that key.

                type: object
                x-go-tag-validate: dive,keys,required,endkeys,required
        title: Set of classification rules sharing a common selector
        type: object
    ClassifierInfo:
        description: ClassifierInfo describes details for each ClassifierInfo.
        properties:
            classifier_index:
                format: int64
                type: string
            error:
                $ref: '#/definitions/ClassifierInfoError'
            policy_hash:
                type: string
            policy_name:
                type: string
        type: object
    ClassifierInfoError:
        default: ERROR_NONE
        description: Error information.
        enum:
            - ERROR_NONE
            - ERROR_EVAL_FAILED
            - ERROR_EMPTY_RESULTSET
            - ERROR_AMBIGUOUS_RESULTSET
            - ERROR_MULTI_EXPRESSION
            - ERROR_EXPRESSION_NOT_MAP
        type: string
    ClientToServerHello:
        properties:
            name:
                type: string
            next_id:
                format: uint64
                type: string
        type: object
    CommonAttributes:
        properties:
            component_id:
                description: The id of Component within the circuit.
                type: string
            policy_hash:
                description: Hash of the entire Policy spec.
                type: string
            policy_name:
                description: Name of the Policy.
                type: string
        type: object
    Component:
        description: |-
            :::info

            See also [Components overview](/concepts/policy/circuit.md#components).

            :::

            Signals flow into the components from input ports and results are emitted on output ports.
            Components are wired to each other based on signal names forming an execution graph of the circuit.

            :::note

            Loops are broken by the runtime at the earliest component index that is part of the loop.
            The looped signals are saved in the tick they're generated and served in the subsequent tick.

            :::

            There are three categories of components:
            * "source" components: they take some sort of input from "the real world" and output
              a signal based on this input. Example: [PromQL](#prom-q-l). In the UI
              they're represented by green color.
            * signal processor components: processing components that do not interact with the external systems.
              Examples: [GradientController](#gradient-controller), [Max](#max).

              :::note

              Signal processor components' output can depend on their internal state, in addition to the inputs.
              Eg. see the [Exponential Moving Average filter](#e-m-a).

              :::

            * "sink" components: they affect the real world.
              [_Concurrency Limiter_](#concurrency-limiter) and [_Rate Limiter_](#rate-limiter).
              In the UI, represented by orange color.  Sink components usually come in pairs with a
              "sources" component which emits a feedback signal, like
              `accepted_concurrency` emitted by _Concurrency Limiter_.

            :::tip

            Sometimes you might want to use a constant value as one of component's inputs.
            You can create an input port containing the constant value instead of being connected to a signal.
            To do so, use the [InPort](#in_port)'s .withConstantSignal(constant_signal) method.
            You can also use it to provide special math values such as NaN and +- Inf.
            If You need to provide the same constant signal to multiple components,
            You can use the [Variable](#variable) component.

            :::

            See also [Policy](#policy) for a higher-level explanation of circuits.
        properties:
            alerter:
                $ref: '#/definitions/Alerter'
                description: Alerter reacts to a signal and generates alert to send to alert manager.
            and:
                $ref: '#/definitions/And'
                description: Logical AND.
            arithmetic_combinator:
                $ref: '#/definitions/ArithmeticCombinator'
                description: Applies the given operator on input operands (signals) and emits the result.
            auto_scale:
                $ref: '#/definitions/AutoScale'
                description: AutoScale components are used to scale the service.
            decider:
                $ref: '#/definitions/Decider'
                description: Decider emits the binary result of comparison operator on two operands.
            differentiator:
                $ref: '#/definitions/Differentiator'
                description: Differentiator calculates rate of change per tick.
            ema:
                $ref: '#/definitions/EMA'
                description: Exponential Moving Average filter.
            extrapolator:
                $ref: '#/definitions/Extrapolator'
                description: Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
            first_valid:
                $ref: '#/definitions/FirstValid'
                description: Picks the first valid input signal and emits it.
            flow_control:
                $ref: '#/definitions/FlowControl'
                description: FlowControl components are used to regulate requests flow.
            gradient_controller:
                $ref: '#/definitions/GradientController'
                description: |-
                    Gradient controller calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
                    This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
            holder:
                $ref: '#/definitions/Holder'
                description: Holds the last valid signal value for the specified duration then waits for next valid value to hold.
            integrator:
                $ref: '#/definitions/Integrator'
                description: Accumulates sum of signal every tick.
            inverter:
                $ref: '#/definitions/Inverter'
                description: Logical NOT.
            max:
                $ref: '#/definitions/Max'
                description: Emits the maximum of the input signals.
            min:
                $ref: '#/definitions/Min'
                description: Emits the minimum of the input signals.
            nested_circuit:
                $ref: '#/definitions/NestedCircuit'
                description: Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
            nested_signal_egress:
                $ref: '#/definitions/NestedSignalEgress'
                description: Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
            nested_signal_ingress:
                $ref: '#/definitions/NestedSignalIngress'
                description: Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
            or:
                $ref: '#/definitions/Or'
                description: Logical OR.
            pulse_generator:
                $ref: '#/definitions/PulseGenerator'
                description: Generates 0 and 1 in turns.
            query:
                $ref: '#/definitions/Query'
                description: Query components that are query databases such as Prometheus.
            signal_generator:
                $ref: '#/definitions/SignalGenerator'
                description: Generates the specified signal.
            switcher:
                $ref: '#/definitions/Switcher'
                description: Switcher acts as a switch that emits one of the two signals based on third signal.
            unary_operator:
                $ref: '#/definitions/UnaryOperator'
                description: Takes an input signal and emits the square root of the input signal.
            variable:
                $ref: '#/definitions/Variable'
                description: Emits a variable signal which can be set to invalid.
        title: Computational block that forms the circuit
        type: object
    ConcurrencyLimiter:
        description: |-
            :::info

            See also [_Concurrency Limiter_ overview](/concepts/flow-control/components/concurrency-limiter.md).

            :::

            It's based on the actuation strategy (for example, load actuator) and workload scheduling
            which is based on Weighted Fair Queuing principles.
            Concurrency is calculated in terms of total tokens per second, which can translate
            to (avg. latency \* in-flight requests) (Little's Law) in concurrency limiting use-case.

            ConcurrencyLimiter configuration is split into two parts: An actuation
            strategy and a scheduler. At this time, only `load_actuator` strategy is available.
        properties:
            flow_selector:
                $ref: '#/definitions/FlowSelector'
                description: |+
                    Flow Selector decides the service and flows at which the concurrency limiter is applied.

                x-go-tag-validate: required
            load_actuator:
                $ref: '#/definitions/LoadActuator'
                description: |-
                    Actuator based on limiting the accepted concurrency under incoming concurrency * load multiplier.

                    Actuation strategy defines the input signal that will drive the scheduler.
            scheduler:
                $ref: '#/definitions/Scheduler'
                description: |+
                    Configuration of Weighted Fair Queuing-based workload scheduler.

                    Contains configuration of per-agent scheduler, and also defines some
                    output signals.

                x-go-tag-validate: required
        title: _Concurrency Limiter_ is an actuator component that regulates flows to provide active service protection
        type: object
    ConstantSignal:
        description: Special constant input for ports and Variable component. Can provide either a constant value or special Nan/+-Inf value.
        properties:
            special_value:
                description: |+
                    A special value such as NaN, +Inf, -Inf.

                enum:
                    - NaN
                    - +Inf
                    - -Inf
                type: string
                x-go-tag-validate: oneof=NaN +Inf -Inf
                x-oneof: NaN | +Inf | -Inf
            value:
                description: A constant value.
                format: double
                type: number
        type: object
    ControllerInfo:
        properties:
            id:
                type: string
        type: object
    DMap:
        properties:
            length:
                format: int64
                type: string
            num_tables:
                format: int64
                type: string
            slab_info:
                $ref: '#/definitions/SlabInfo'
        type: object
    DMaps:
        properties:
            delete_hits:
                format: int64
                type: string
            delete_misses:
                format: int64
                type: string
            entries_total:
                format: int64
                type: string
            evicted_total:
                format: int64
                type: string
            get_hits:
                format: int64
                type: string
            get_misses:
                format: int64
                type: string
        type: object
    DTopics:
        properties:
            current_listeners:
                format: int64
                type: string
            listeners_total:
                format: int64
                type: string
            published_total:
                format: int64
                type: string
        type: object
    Decider:
        description: |-
            The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.

            This component also supports time-based response (the output)
            transitions between 1.0 or 0.0 signal if the decider condition is
            true or false for at least `true_for` or `false_for` duration. If
            `true_for` and `false_for` durations are zero then the transitions are
            instantaneous.
        properties:
            false_for:
                default: 0s
                description: |+
                    Duration of time to wait before changing to false state.
                    If the duration is zero, the change will happen instantaneously.

                type: string
                x-go-tag-default: 0s
            in_ports:
                $ref: '#/definitions/DeciderIns'
                description: Input ports for the Decider component.
            operator:
                description: |+
                    Comparison operator that computes operation on LHS and RHS input signals.

                enum:
                    - gt
                    - lt
                    - gte
                    - lte
                    - eq
                    - neq
                type: string
                x-go-tag-validate: oneof=gt lt gte lte eq neq
                x-oneof: gt | lt | gte | lte | eq | neq
            out_ports:
                $ref: '#/definitions/DeciderOuts'
                description: Output ports for the Decider component.
            true_for:
                default: 0s
                title: |-
                    Duration of time to wait before changing to true state.
                    If the duration is zero, the change will happen instantaneously.```
                type: string
                x-go-tag-default: 0s
        title: Type of Combinator that computes the comparison operation on LHS and RHS signals
        type: object
    DeciderIns:
        description: Inputs for the Decider component.
        properties:
            lhs:
                $ref: '#/definitions/InPort'
                description: Left hand side input signal for the comparison operation.
            rhs:
                $ref: '#/definitions/InPort'
                description: Right hand side input signal for the comparison operation.
        type: object
    DeciderOuts:
        description: Outputs for the Decider component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Selected signal (1.0 or 0.0).
        type: object
    DecreasingGradient:
        description: Decreasing Gradient defines a controller for scaling in based on Gradient Controller.
        properties:
            in_ports:
                $ref: '#/definitions/DecreasingGradientIns'
                description: Input ports for the Gradient.
            parameters:
                $ref: '#/definitions/DecreasingGradientParameters'
                title: |-
                    Gradient parameters for the controller. Defaults and constraints:
                    * `slope` = 1
                    * `min_gradient` = -Inf (must be less than 1)
                    * `max_gradient` = 1 (cannot be changed)
        type: object
    DecreasingGradientIns:
        description: Inputs for Gradient.
        properties:
            setpoint:
                $ref: '#/definitions/InPort'
                description: The setpoint to use for scale-in.
            signal:
                $ref: '#/definitions/InPort'
                description: The signal to use for scale-in.
        type: object
    DecreasingGradientParameters:
        description: This allows subset of parameters with constrained values compared to a regular gradient controller. For full documentation of these parameters, refer to the [GradientControllerParameters](#gradient-controller-parameters).
        properties:
            min_gradient:
                default: -1.7976931348623157e+308
                format: double
                type: number
                x-go-tag-default: "-1.79769313486231570814527423731704356798070e+308"
                x-go-tag-validate: lte=1.0
            slope:
                default: 1
                format: double
                type: number
                x-go-tag-default: "1.0"
        type: object
    DeniedHttpResponse:
        description: HTTP attributes for a denied response.
        properties:
            body:
                description: |-
                    This field allows the authorization service to send a response body data
                    to the downstream client.
                type: string
            headers:
                additionalProperties:
                    type: string
                description: |-
                    This field allows the authorization service to send HTTP response headers
                    to the downstream client.
                type: object
            status:
                description: |-
                    This field allows the authorization service to send an HTTP response status code to the
                    downstream client. If not set, Envoy sends `403 Forbidden` HTTP status code by default.
                format: int32
                type: integer
        type: object
    Differentiator:
        description: Differentiator calculates rate of change per tick.
        properties:
            in_ports:
                $ref: '#/definitions/DifferentiatorIns'
                description: Input ports for the Differentiator component.
            out_ports:
                $ref: '#/definitions/DifferentiatorOuts'
                description: Output ports for the Differentiator component.
            window:
                default: 5s
                description: |+
                    The window of time over which differentiator operates.

                type: string
                x-go-tag-default: 5s
        type: object
    DifferentiatorIns:
        description: Inputs for the Differentiator component.
        properties:
            input:
                $ref: '#/definitions/InPort'
        type: object
    DifferentiatorOuts:
        description: Outputs for the Differentiator component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
        type: object
    EMA:
        description: |-
            At any time EMA component operates in one of the following states:
            1. Warm up state: The first `warmup_window` samples are used to compute the initial EMA.
               If an invalid reading is received during the `warmup_window`, the last good average is emitted and the state gets reset back to beginning of warm up state.
            2. Normal state: The EMA is computed using following formula.

            The EMA for a series $Y$ is calculated recursively as:
            <!-- vale off -->
            $$
            \text{EMA} _t =
            \begin{cases}
              Y_0, &\text{for } t = 0 \\
              \alpha Y_t + (1 - \alpha) \text{EMA}_{t-1}, &\text{for }t > 0
            \end{cases}
            $$

            The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
            A higher $\alpha$ discounts older observations faster.
            The $\alpha$ is computed using ema\_window:

            $$
            \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
            $$
            <!-- vale on -->
        properties:
            in_ports:
                $ref: '#/definitions/EMAIns'
                description: Input ports for the EMA component.
            out_ports:
                $ref: '#/definitions/EMAOuts'
                description: Output ports for the EMA component.
            parameters:
                $ref: '#/definitions/EMAParameters'
                description: |+
                    Parameters for the EMA component.

                x-go-tag-validate: required
        title: Exponential Moving Average (EMA) is a type of moving average that applies exponentially more weight to recent signal readings
        type: object
    EMAIns:
        description: Inputs for the EMA component.
        properties:
            input:
                $ref: '#/definitions/InPort'
                description: Input signal to be used for the EMA computation.
            max_envelope:
                $ref: '#/definitions/InPort'
                description: |-
                    Upper bound of the moving average.

                    When the signal exceeds `max_envelope` it is multiplied by
                    `correction_factor_on_max_envelope_violation` **once per tick**.

                    :::note

                    If the signal deviates from `max_envelope` faster than the correction
                    faster, it might end up exceeding the envelope.

                    :::
            min_envelope:
                $ref: '#/definitions/InPort'
                description: |-
                    Lower bound of the moving average.

                    Behavior is similar to `max_envelope`.
        type: object
    EMAOuts:
        description: Outputs for the EMA component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Exponential moving average of the series of reading as an output signal.
        type: object
    EMAParameters:
        description: Parameters for the EMA component.
        properties:
            correction_factor_on_max_envelope_violation:
                default: 1
                description: |+
                    Correction factor to apply on the output value if its in violation of the max envelope.

                format: double
                minimum: 0
                type: number
                x-go-tag-default: "1.0"
                x-go-tag-validate: gte=0,lte=1.0
            correction_factor_on_min_envelope_violation:
                default: 1
                description: |+
                    Correction factor to apply on the output value if its in violation of the min envelope.

                format: double
                type: number
                x-go-tag-default: "1.0"
                x-go-tag-validate: gte=1.0
            ema_window:
                description: |+
                    Duration of EMA sampling window.

                type: string
                x-go-tag-validate: required
            valid_during_warmup:
                default: false
                description: |+
                    Whether the output is valid during the warm up stage.

                type: boolean
                x-go-tag-default: "false"
            warmup_window:
                description: |+
                    Duration of EMA warming up window.

                    The initial value of the EMA is the average of signal readings received during the warm up window.

                type: string
                x-go-tag-validate: required
        required:
            - ema_window
            - warmup_window
        type: object
    Entities:
        description: Entities contains both mappings of ip address to entity and entity name to entity.
        properties:
            entities_by_ip_address:
                $ref: '#/definitions/EntitiesEntities'
            entities_by_name:
                $ref: '#/definitions/EntitiesEntities'
        type: object
    EntitiesEntities:
        description: Entities defines mapping of entities.
        properties:
            entities:
                additionalProperties:
                    $ref: '#/definitions/Entity'
                type: object
        type: object
    Entity:
        description: Entity represents a pod, VM, and so on.
        properties:
            ip_address:
                description: |+
                    IP address of the entity.

                pattern: ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
                type: string
                x-go-tag-validate: required,ip
                x-pattern-rules: ip
            name:
                description: Name of the entity. For example, pod name.
                type: string
            namespace:
                description: Namespace of the entity. For example, pod namespace.
                type: string
            node_name:
                description: Node name of the entity. For example, hostname.
                type: string
            services:
                description: |+
                    Services of the entity.

                items:
                    type: string
                minItems: 1
                type: array
                x-go-tag-validate: gt=0
            uid:
                description: |+
                    Unique identifier of the entity.

                type: string
                x-go-tag-validate: required
        required:
            - ip_address
            - uid
        type: object
    EqualsMatchExpression:
        description: Label selector expression of the equal form `label == value`.
        properties:
            label:
                description: |+
                    Name of the label to equal match the value.

                type: string
                x-go-tag-validate: required
            value:
                description: Exact value that the label should be equal to.
                type: string
        required:
            - label
        type: object
    Extractor:
        description: There are multiple variants of extractor, specify exactly one.
        properties:
            address:
                $ref: '#/definitions/AddressExtractor'
                description: Display an address as a single string - `<ip>:<port>`.
            from:
                description: |-
                    Attribute path is a dot-separated path to attribute.

                    Should be either:
                    * one of the fields of [Attribute Context](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto), or
                    * a special `request.http.bearer` pseudo-attribute.
                    For example, `request.http.method` or `request.http.header.user-agent`

                    Note: The same attribute path syntax is shared by other extractor variants,
                    wherever attribute path is needed in their "from" syntax.

                    Example:
                    ```yaml
                    from: request.http.headers.user-agent
                    ```
                title: Use an attribute with no conversion
                type: string
            json:
                $ref: '#/definitions/JSONExtractor'
                description: Parse JSON, and extract one of the fields.
            jwt:
                $ref: '#/definitions/JWTExtractor'
                description: Parse the attribute as JWT and read the payload.
            path_templates:
                $ref: '#/definitions/PathTemplateMatcher'
                description: Match HTTP Path to given path templates.
        title: Defines a high-level way to specify how to extract a flow label value given HTTP request metadata, without a need to write Rego code
        type: object
    Extrapolator:
        description: It does so until `maximum_extrapolation_interval` is reached, beyond which it emits invalid signal unless input signal becomes valid again.
        properties:
            in_ports:
                $ref: '#/definitions/ExtrapolatorIns'
                description: Input ports for the Extrapolator component.
            out_ports:
                $ref: '#/definitions/ExtrapolatorOuts'
                description: Output ports for the Extrapolator component.
            parameters:
                $ref: '#/definitions/ExtrapolatorParameters'
                description: |+
                    Parameters for the Extrapolator component.

                x-go-tag-validate: required
        title: Extrapolates the input signal by repeating the last valid value during the period in which it is invalid
        type: object
    ExtrapolatorIns:
        description: Inputs for the Extrapolator component.
        properties:
            input:
                $ref: '#/definitions/InPort'
                description: Input signal for the Extrapolator component.
        type: object
    ExtrapolatorOuts:
        description: Outputs for the Extrapolator component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Extrapolated signal.
        type: object
    ExtrapolatorParameters:
        description: Parameters for the Extrapolator component.
        properties:
            max_extrapolation_interval:
                description: |+
                    Maximum time interval to repeat the last valid value of input signal.

                type: string
                x-go-tag-validate: required
        required:
            - max_extrapolation_interval
        type: object
    FirstValid:
        properties:
            in_ports:
                $ref: '#/definitions/FirstValidIns'
                description: Input ports for the FirstValid component.
            out_ports:
                $ref: '#/definitions/FirstValidOuts'
                description: Output ports for the FirstValid component.
        title: Picks the first valid input signal from the array of input signals and emits it as an output signal
        type: object
    FirstValidIns:
        description: Inputs for the FirstValid component.
        properties:
            inputs:
                description: |+
                    Array of input signals.

                items:
                    $ref: '#/definitions/InPort'
                    type: object
                type: array
                x-go-tag-validate: dive
        type: object
    FirstValidOuts:
        description: Outputs for the FirstValid component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: First valid input signal as an output signal.
        type: object
    FlowControl:
        description: FlowControl components are used to regulate requests flow.
        properties:
            aimd_concurrency_controller:
                $ref: '#/definitions/AIMDConcurrencyController'
                description: AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
            concurrency_limiter:
                $ref: '#/definitions/ConcurrencyLimiter'
                description: _Concurrency Limiter_ provides service protection by applying prioritized load shedding of flows using a network scheduler (for example, Weighted Fair Queuing).
            flow_regulator:
                $ref: '#/definitions/FlowRegulator'
                description: Flow Regulator is a component that regulates the flow of requests to the service by allowing only the specified percentage of requests or sticky sessions.
            load_shaper:
                $ref: '#/definitions/LoadShaper'
                description: LoadShaper is a component that shapes the load of the service.
            load_shaper_series:
                $ref: '#/definitions/LoadShaperSeries'
                description: LoadShaperSeries is a series of LoadShaper components that shape load one after another in series.
            rate_limiter:
                $ref: '#/definitions/RateLimiter'
                description: _Rate Limiter_ provides service protection by applying rate limiter.
        type: object
    FlowControlPoint:
        properties:
            control_point:
                type: string
            service:
                type: string
            type:
                type: string
        type: object
    FlowControlPoints:
        properties:
            flow_control_points:
                items:
                    $ref: '#/definitions/FlowControlPoint'
                    type: object
                type: array
        type: object
    FlowControlResources:
        properties:
            classifiers:
                description: |+
                    Classifiers are installed in the data-plane and are used to label the requests based on payload content.

                    The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.

                items:
                    $ref: '#/definitions/Classifier'
                    type: object
                type: array
                x-go-tag-validate: dive
            flux_meters:
                additionalProperties:
                    $ref: '#/definitions/FluxMeter'
                description: |+
                    Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.

                    Flux Meter created metrics can be consumed as input to the circuit through the PromQL component.

                type: object
                x-go-tag-validate: dive
        title: FlowControl Resources
        type: object
    FlowMatcher:
        description: |-
            :::info

            See also [FlowSelector overview](/concepts/flow-control/flow-selector.md).

            :::
            Example:
            ```yaml
            control_point: ingress
            label_matcher:
              match_labels:
                user_tier: gold
              match_expressions:
                - key: query
                  operator: In
                  values:
                    - insert
                    - delete
              expression:
                label_matches:
                    - label: user_agent
                      regex: ^(?!.*Chrome).*Safari
            ```
        properties:
            control_point:
                description: |+
                    [Control Point](/concepts/flow-control/flow-selector.md#control-point)
                    identifies the location of a Flow within a Service. For an SDK based insertion, a Control Point can represent a particular feature or execution
                    block within a Service. In case of Service Mesh or Middleware insertion, a Control Point can identify ingress or egress calls or distinct listeners
                    or filter chains.

                type: string
                x-go-tag-validate: required
            label_matcher:
                $ref: '#/definitions/LabelMatcher'
                description: |-
                    :::info

                    See also [Label Matcher overview](/concepts/flow-control/flow-selector.md#label-matcher).

                    :::

                    :::note

                    [Classifiers](#classifier) _can_ use flow labels created by some other
                    classifier, but only if they were created at some previous control point
                    (and propagated in baggage).

                    This limitation does not apply to selectors of other entities, like
                    Flux Meters or Actuators. It's valid to create a flow label on a control
                    point using classifier, and immediately use it for matching on the same
                    control point.

                    :::
                title: |-
                    Label matcher allows to add _additional_ condition on
                    [flow labels](/concepts/flow-control/flow-label.md)
                    must also be satisfied (in addition to service+control point matching)
        required:
            - control_point
        title: |-
            Describes which flows a [flow control
            component](/concepts/flow-control/flow-control.md#components) should apply
            to
        type: object
    FlowRegulator:
        description: _Flow Regulator_ is a component that regulates the flow of requests to the service by allowing only the specified percentage of requests or sticky sessions.
        properties:
            default_config:
                $ref: '#/definitions/FlowRegulatorDynamicConfig'
                description: Default configuration.
            dynamic_config_key:
                description: Configuration key for DynamicConfig.
                type: string
            in_ports:
                $ref: '#/definitions/FlowRegulatorIns'
                description: Input ports for the _Flow Regulator_.
            parameters:
                $ref: '#/definitions/FlowRegulatorParameters'
                description: Parameters for the _Flow Regulator_.
        type: object
    FlowRegulatorDynamicConfig:
        properties:
            enable_label_values:
                description: Specify certain label values to be accepted by this flow filter regardless of accept percentage.
                items:
                    type: string
                type: array
        title: Dynamic Configuration for _Flow Regulator_
        type: object
    FlowRegulatorIns:
        properties:
            accept_percentage:
                $ref: '#/definitions/InPort'
                description: The percentage of requests to accept.
        type: object
    FlowRegulatorParameters:
        properties:
            flow_selector:
                $ref: '#/definitions/FlowSelector'
                description: |+
                    _Flow Selector_ decides the service and flows at which the _Flow Regulator_ is applied.

                x-go-tag-validate: required
            label_key:
                description: |-
                    The flow label key for identifying sessions.
                    - When label key is specified, _Flow Regulator_ acts as a sticky filter.
                      The series of flows with the same value of label key get the same
                      decision provided that the `accept_percentage` is same or higher.
                    - When label key is not specified, _Flow Regulator_ acts as a stateless filter.
                      Percentage of flows are selected randomly for rejection.
                type: string
        type: object
    FlowSelector:
        description: |-
            :::info

            See also [FlowSelector overview](/concepts/flow-control/flow-selector.md).

            :::
        properties:
            flow_matcher:
                $ref: '#/definitions/FlowMatcher'
                title: Match control points and labels
                x-go-tag-validate: required
            service_selector:
                $ref: '#/definitions/ServiceSelector'
                title: Match agent group and service
                x-go-tag-validate: required
        title: |-
            Describes which flow in which service a [flow control
            component](/concepts/flow-control/flow-control.md#components) should apply
            to
        type: object
    FluxMeter:
        description: |-
            Flux Meter gathers metrics for the traffic that matches its selector.
            The histogram created by Flux Meter measures the workload latency by default.

            :::info

            See also [Flux Meter overview](/concepts/flow-control/resources/flux-meter.md).

            :::
            Example:
            ```yaml
            static_buckets:
               buckets: [5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]
            flow_selector:
              service_selector:
                 agent_group: demoapp
                 service: service1-demo-app.demoapp.svc.cluster.local
              flow_matcher:
                 control_point: ingress
            attribute_key: response_duration_ms
            ```
        properties:
            attribute_key:
                default: workload_duration_ms
                description: |+
                    Key of the attribute in access log or span from which the metric for this flux meter is read.

                    :::info

                    For list of available attributes in Envoy access logs, refer
                    [Envoy Filter](/get-started/integrations/flow-control/envoy/istio.md#envoy-filter)

                    :::

                type: string
                x-go-tag-default: workload_duration_ms
            exponential_buckets:
                $ref: '#/definitions/FluxMeterExponentialBuckets'
            exponential_buckets_range:
                $ref: '#/definitions/FluxMeterExponentialBucketsRange'
            flow_selector:
                $ref: '#/definitions/FlowSelector'
                description: The selection criteria for the traffic that will be measured.
            linear_buckets:
                $ref: '#/definitions/FluxMeterLinearBuckets'
            static_buckets:
                $ref: '#/definitions/FluxMeterStaticBuckets'
        type: object
    FluxMeterExponentialBuckets:
        description: |-
            ExponentialBuckets creates `count` number of buckets where the lowest bucket has an upper bound of `start`
            and each following bucket's upper bound is `factor` times the previous bucket's upper bound. The final +inf
            bucket is not counted.
        properties:
            count:
                description: |+
                    Number of buckets.

                exclusiveMinimum: true
                format: int32
                minimum: 0
                type: integer
                x-go-tag-validate: gt=0
            factor:
                description: |+
                    Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.

                format: double
                type: number
                x-go-tag-validate: gt=1.0
            start:
                description: |+
                    Upper bound of the lowest bucket.

                format: double
                type: number
                x-go-tag-validate: gt=0.0
        type: object
    FluxMeterExponentialBucketsRange:
        description: |-
            ExponentialBucketsRange creates `count` number of buckets where the lowest bucket is `min` and the highest
            bucket is `max`. The final +inf bucket is not counted.
        properties:
            count:
                description: |+
                    Number of buckets.

                exclusiveMinimum: true
                format: int32
                minimum: 0
                type: integer
                x-go-tag-validate: gt=0
            max:
                description: Highest bucket.
                format: double
                type: number
            min:
                description: |+
                    Lowest bucket.

                format: double
                type: number
                x-go-tag-validate: gt=0.0
        type: object
    FluxMeterInfo:
        description: FluxMeterInfo describes detail for each FluxMeterInfo.
        properties:
            flux_meter_name:
                type: string
        type: object
    FluxMeterLinearBuckets:
        description: |-
            LinearBuckets creates `count` number of buckets, each `width` wide, where the lowest bucket has an
            upper bound of `start`. The final +inf bucket is not counted.
        properties:
            count:
                description: |+
                    Number of buckets.

                exclusiveMinimum: true
                format: int32
                minimum: 0
                type: integer
                x-go-tag-validate: gt=0
            start:
                description: Upper bound of the lowest bucket.
                format: double
                type: number
            width:
                description: Width of each bucket.
                format: double
                type: number
        type: object
    FluxMeterStaticBuckets:
        description: StaticBuckets holds the static value of the buckets where latency histogram will be stored.
        properties:
            buckets:
                default:
                    - 5
                    - 10
                    - 25
                    - 50
                    - 100
                    - 250
                    - 500
                    - 1000
                    - 2500
                    - 5000
                    - 10000
                description: |+
                    The buckets in which latency histogram will be stored.

                items:
                    format: double
                    type: number
                type: array
                x-go-tag-default: '[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]'
        type: object
    GetPoliciesResponse:
        description: GetPoliciesResponse is a response containing all Policies.
        properties:
            policies:
                $ref: '#/definitions/Policies'
        type: object
    GetPolicyResponse:
        description: GetPolicyResponse is a response containing the requested Policy.
        properties:
            policy:
                $ref: '#/definitions/Policy'
        type: object
    GlobalAutoScaleControlPoint:
        properties:
            agent_group:
                type: string
            auto_scale_control_point:
                $ref: '#/definitions/AutoScaleKubernetesControlPoint'
        type: object
    GlobalFlowControlPoint:
        description: |-
            GlobalFlowControlPoint contains info about a control point on a given
            service with explicit Agent Group.
        properties:
            agent_group:
                type: string
            flow_control_point:
                $ref: '#/definitions/FlowControlPoint'
        type: object
    GlobalService:
        description: GlobalService is a service with explicit agent group.
        properties:
            agent_group:
                type: string
            name:
                type: string
        type: object
    GradientController:
        description: |-
            The `gradient` describes a corrective factor that should be applied to the
            control variable to get the signal closer to the setpoint. It's computed as follows:

            $$
            \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
            $$

            `gradient` is then clamped to `[min_gradient, max_gradient]` range.

            The output of gradient controller is computed as follows:
            $$
            \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
            $$

            Note the additional `optimize` signal, that can be used to "nudge" the
            controller into desired idle state.

            The output can be _optionally_ clamped to desired range using `max` and
            `min` input.
        properties:
            default_config:
                $ref: '#/definitions/GradientControllerDynamicConfig'
                description: Default configuration.
            dynamic_config_key:
                title: Configuration key for DynamicConfig
                type: string
            in_ports:
                $ref: '#/definitions/GradientControllerIns'
                description: Input ports of the Gradient Controller.
            out_ports:
                $ref: '#/definitions/GradientControllerOuts'
                description: Output ports of the Gradient Controller.
            parameters:
                $ref: '#/definitions/GradientControllerParameters'
                description: |+
                    Gradient Parameters.

                x-go-tag-validate: required
        title: |-
            Gradient controller is a type of controller which tries to adjust the
            control variable proportionally to the relative difference between setpoint
            and actual value of the signal
        type: object
    GradientControllerDynamicConfig:
        properties:
            manual_mode:
                default: false
                description: |+
                    Decides whether the controller runs in `manual_mode`.
                    In manual mode, the controller does not adjust the control variable It emits the same output as the control variable input.

                type: boolean
                x-go-tag-default: "false"
        title: Dynamic Configuration for a Controller
        type: object
    GradientControllerIns:
        description: Inputs for the Gradient Controller component.
        properties:
            control_variable:
                $ref: '#/definitions/InPort'
                description: |-
                    Actual current value of the control variable.

                    This signal is multiplied by the gradient to produce the output.
            max:
                $ref: '#/definitions/InPort'
                description: Maximum value to limit the output signal.
            min:
                $ref: '#/definitions/InPort'
                description: Minimum value to limit the output signal.
            optimize:
                $ref: '#/definitions/InPort'
                description: Optimize signal is added to the output of the gradient calculation.
            setpoint:
                $ref: '#/definitions/InPort'
                description: Setpoint to be used for the gradient computation.
            signal:
                $ref: '#/definitions/InPort'
                description: Signal to be used for the gradient computation.
        type: object
    GradientControllerOuts:
        description: Outputs for the Gradient Controller component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Computed desired value of the control variable.
        type: object
    GradientControllerParameters:
        description: Gradient Parameters.
        properties:
            max_gradient:
                default: 1.7976931348623157e+308
                description: |+
                    Maximum gradient which clamps the computed gradient value to the range, `[min_gradient, max_gradient]`.

                format: double
                type: number
                x-go-tag-default: "1.79769313486231570814527423731704356798070e+308"
            min_gradient:
                default: -1.7976931348623157e+308
                description: |+
                    Minimum gradient which clamps the computed gradient value to the range, `[min_gradient, max_gradient]`.

                format: double
                type: number
                x-go-tag-default: "-1.79769313486231570814527423731704356798070e+308"
            slope:
                description: |+
                    Slope controls the aggressiveness and direction of the Gradient Controller.

                    Slope is used as exponent on the signal to setpoint ratio in computation
                    of the gradient (see the [main description](#gradient-controller) for
                    exact equation). This parameter decides how aggressive the controller
                    responds to the deviation of signal from the setpoint.
                    for example:
                    * $\text{slope} = 1$: when signal is too high, increase control variable,
                    * $\text{slope} = -1$: when signal is too high, decrease control variable,
                    * $\text{slope} = -0.5$: when signal is too high, decrease control variable gradually.

                    The sign of slope depends on correlation between the signal and control variable:
                    * Use $\text{slope} < 0$ if there is a _positive_ correlation between the signal and
                    the control variable (for example, Per-pod CPU usage and total concurrency).
                    * Use $\text{slope} > 0$ if there is a _negative_ correlation between the signal and
                    the control variable (for example, Per-pod CPU usage and number of pods).

                    :::note

                    You need to set _negative_ slope for a _positive_ correlation, as you're
                    describing the _action_ which controller should make when the signal
                    increases.

                    :::

                    The magnitude of slope describes how aggressively should the controller
                    react to a deviation of signal.
                    With $|\text{slope}| = 1$, the controller will aim to bring the signal to
                    the setpoint in one tick (assuming linear correlation with signal and setpoint).
                    Smaller magnitudes of slope will make the controller adjust the control
                    variable gradually.

                    Setting $|\text{slope}| < 1$ (for example, $\pm0.8$) is recommended.
                    If you experience overshooting, consider lowering the magnitude even more.
                    Values of $|\text{slope}| > 1$ aren't recommended.

                    :::note

                    Remember that the gradient and output signal can be (optionally) clamped,
                    so the _slope_ might not fully describe aggressiveness of the controller.

                    :::

                format: double
                type: number
                x-go-tag-validate: required
        required:
            - slope
        type: object
    GroupStatus:
        description: |-
            Groups is nested structure that holds status information about the node and a
            pointer to the next node.
        properties:
            groups:
                additionalProperties:
                    $ref: '#/definitions/GroupStatus'
                type: object
            status:
                $ref: '#/definitions/Status'
        type: object
    Holder:
        description: |-
            Holds the last valid signal value for the specified duration then waits for next valid value to hold.
            If it is holding a value that means it ignores both valid and invalid new signals until the `hold_for` duration is finished.
        properties:
            hold_for:
                default: 5s
                description: |+
                    Holding the last valid signal value for the `hold_for` duration.

                type: string
                x-go-tag-default: 5s
            in_ports:
                $ref: '#/definitions/HolderIns'
                description: Input ports for the Holder component.
            out_ports:
                $ref: '#/definitions/HolderOuts'
                description: Output ports for the Holder component.
        type: object
    HolderIns:
        description: Inputs for the Holder component.
        properties:
            input:
                $ref: '#/definitions/InPort'
                description: The input signal.
            reset:
                $ref: '#/definitions/InPort'
                description: Resets the holder output to the current input signal when reset signal is valid and non-zero.
        type: object
    HolderOuts:
        description: Outputs for the Holder component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: The output signal.
        type: object
    HostInfo:
        properties:
            hostname:
                type: string
            local_ip:
                type: string
            uuid:
                type: string
        type: object
    InPort:
        properties:
            constant_signal:
                $ref: '#/definitions/ConstantSignal'
                description: Constant value to be used for this InPort instead of a signal.
            signal_name:
                description: Name of the incoming Signal on the InPort.
                type: string
        title: Components receive input from other components through InPorts
        type: object
    IncreasingGradient:
        description: Increasing Gradient defines a controller for scaling out based on Gradient Controller.
        properties:
            in_ports:
                $ref: '#/definitions/IncreasingGradientIns'
                description: Input ports for the Gradient.
            parameters:
                $ref: '#/definitions/IncreasingGradientParameters'
                title: |-
                    Gradient parameters for the controller. Defaults and constraints:
                    * `slope` = 1
                    * `min_gradient` = 1 (cannot be changed)
                    * `max_gradient` = +Inf (must be greater than 1)
        type: object
    IncreasingGradientIns:
        description: Inputs for Gradient.
        properties:
            setpoint:
                $ref: '#/definitions/InPort'
                description: The setpoint to use for scale-out.
            signal:
                $ref: '#/definitions/InPort'
                description: The signal to use for scale-out.
        type: object
    IncreasingGradientParameters:
        description: This allows subset of parameters with constrained values compared to a regular gradient controller. For full documentation of these parameters, refer to the [GradientControllerParameters](#gradient-controller-parameters).
        properties:
            max_gradient:
                default: 1.7976931348623157e+308
                format: double
                type: number
                x-go-tag-default: "1.79769313486231570814527423731704356798070e+308"
                x-go-tag-validate: gte=1.0
            slope:
                default: 1
                format: double
                type: number
                x-go-tag-default: "1.0"
        type: object
    Integrator:
        description: Accumulates sum of signal every tick.
        properties:
            in_ports:
                $ref: '#/definitions/IntegratorIns'
                description: Input ports for the Integrator component.
            out_ports:
                $ref: '#/definitions/IntegratorOuts'
                description: Output ports for the Integrator component.
        type: object
    IntegratorIns:
        description: Inputs for the Integrator component.
        properties:
            input:
                $ref: '#/definitions/InPort'
                description: The input signal.
            max:
                $ref: '#/definitions/InPort'
                description: The maximum output.
            min:
                $ref: '#/definitions/InPort'
                description: The minimum output.
            reset:
                $ref: '#/definitions/InPort'
                description: Resets the integrator output to zero when reset signal is valid and non-zero. Reset also resets the max and min constraints.
        type: object
    IntegratorOuts:
        description: Outputs for the Integrator component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
        type: object
    Inverter:
        description: |-
            Logical NOT.

            See [And component](#and) on how signals are mapped onto Boolean values.
        properties:
            in_ports:
                $ref: '#/definitions/InverterIns'
                description: Input ports for the Inverter component.
            out_ports:
                $ref: '#/definitions/InverterOuts'
                description: Output ports for the Inverter component.
        type: object
    InverterIns:
        description: Inputs for the Inverter component.
        properties:
            input:
                $ref: '#/definitions/InPort'
                description: |+
                    Signal to be negated.

                x-go-tag-validate: dive
        type: object
    InverterOuts:
        description: Output ports for the Inverter component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: |-
                    Logical negation of the input signal.

                    Will always be 0 (false), 1 (true) or invalid (unknown).
        type: object
    JSONExtractor:
        description: |-
            Example:
            ```yaml
            from: request.http.body
            pointer: /user/name
            ```
        properties:
            from:
                description: |+
                    Attribute path pointing to some strings - for example, `request.http.body`.

                type: string
                x-go-tag-validate: required
            pointer:
                description: |-
                    JSON pointer represents a parsed JSON pointer which allows to select a specified field from the payload.

                    Note: Uses [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
                    for example, `/foo/bar`. If the pointer points into an object, it'd be converted to a string.
                type: string
        required:
            - from
        title: Parse JSON, and extract one of the fields
        type: object
    JWTExtractor:
        description: |-
            Specify a field to be extracted from payload using `json_pointer`.

            Note: The signature is not verified against the secret (assuming there's some
            other part of the system that handles such verification).

            Example:
            ```yaml
            from: request.http.bearer
            json_pointer: /user/email
            ```
        properties:
            from:
                description: |+
                    JWT (JSON Web Token) can be extracted from any input attribute, but most likely you'd want to use `request.http.bearer`.

                type: string
                x-go-tag-validate: required
            json_pointer:
                description: |-
                    JSON pointer allowing to select a specified field from the payload.

                    Note: Uses [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
                    for example, `/foo/bar`. If the pointer points into an object, it'd be converted to a string.
                type: string
        required:
            - from
        title: Parse the attribute as JWT and read the payload
        type: object
    K8sLabelMatcherRequirement:
        description: Label selector requirement which is a selector that contains values, a key, and an operator that relates the key and values.
        properties:
            key:
                description: |+
                    Label key that the selector applies to.

                type: string
                x-go-tag-validate: required
            operator:
                description: |+
                    Logical operator which represents a key's relationship to a set of values.
                    Valid operators are In, NotIn, Exists and DoesNotExist.

                enum:
                    - In
                    - NotIn
                    - Exists
                    - DoesNotExists
                type: string
                x-go-tag-validate: oneof=In NotIn Exists DoesNotExists
                x-oneof: In | NotIn | Exists | DoesNotExists
            values:
                description: |-
                    An array of string values that relates to the key by an operator.
                    If the operator is In or NotIn, the values array must be non-empty.
                    If the operator is Exists or DoesNotExist, the values array must be empty.
                items:
                    type: string
                type: array
        required:
            - key
        type: object
    KubernetesObjectSelector:
        description: |-
            Describes which pods a control or observability
            component should apply to.
        properties:
            agent_group:
                default: default
                description: |+
                    Which [agent-group](/concepts/flow-control/flow-selector.md#agent-group) this
                    selector applies to.

                type: string
                x-go-tag-default: default
            api_version:
                title: API version of Kubernetes resource
                type: string
                x-go-tag-validate: required
            kind:
                description: |+
                    Kubernetes resource type.

                type: string
                x-go-tag-validate: required
            name:
                description: |+
                    Kubernetes resource name.

                type: string
                x-go-tag-validate: required
            namespace:
                description: |+
                    Kubernetes namespace that the resource belongs to.

                type: string
                x-go-tag-validate: required
        required:
            - api_version
            - kind
            - name
            - namespace
        type: object
    KubernetesReplicas:
        description: KubernetesReplicas defines a horizontal pod scaler for Kubernetes.
        properties:
            default_config:
                $ref: '#/definitions/PodScalerScaleActuatorDynamicConfig'
                description: Default configuration.
            dynamic_config_key:
                title: Configuration key for DynamicConfig
                type: string
            kubernetes_object_selector:
                $ref: '#/definitions/KubernetesObjectSelector'
                description: |+
                    The Kubernetes object on which horizontal scaling is applied.

                x-go-tag-validate: required
        type: object
    LabelMatcher:
        description: |-
            It provides three ways to define requirements:
            - match labels
            - match expressions
            - arbitrary expression

            If multiple requirements are set, they're all combined using the logical AND operator.
            An empty label matcher always matches.
        properties:
            expression:
                $ref: '#/definitions/MatchExpression'
                description: An arbitrary expression to be evaluated on the labels.
            match_expressions:
                description: |-
                    List of Kubernetes-style label matcher requirements.

                    Note: The requirements are combined using the logical AND operator.
                items:
                    $ref: '#/definitions/K8sLabelMatcherRequirement'
                    type: object
                type: array
            match_labels:
                additionalProperties:
                    type: string
                description: |-
                    A map of {key,value} pairs representing labels to be matched.
                    A single {key,value} in the `match_labels` requires that the label `key` is present and equal to `value`.

                    Note: The requirements are combined using the logical AND operator.
                type: object
        title: |-
            Allows to define rules whether a map of
            [labels](/concepts/flow-control/flow-label.md)
            should be considered a match or not
        type: object
    LimiterDecision:
        description: LimiterDecision describes details for each limiter.
        properties:
            component_id:
                type: string
            concurrency_limiter_info:
                $ref: '#/definitions/LimiterDecisionConcurrencyLimiterInfo'
            dropped:
                type: boolean
            flow_regulator_info:
                $ref: '#/definitions/LimiterDecisionFlowRegulatorInfo'
            policy_hash:
                type: string
            policy_name:
                type: string
            rate_limiter_info:
                $ref: '#/definitions/LimiterDecisionRateLimiterInfo'
            reason:
                $ref: '#/definitions/LimiterDecisionLimiterReason'
        type: object
    LimiterDecisionConcurrencyLimiterInfo:
        properties:
            tokens_consumed:
                format: uint64
                type: string
            workload_index:
                type: string
        type: object
    LimiterDecisionFlowRegulatorInfo:
        properties:
            label:
                type: string
        type: object
    LimiterDecisionLimiterReason:
        default: LIMITER_REASON_UNSPECIFIED
        enum:
            - LIMITER_REASON_UNSPECIFIED
            - LIMITER_REASON_KEY_NOT_FOUND
        type: string
    LimiterDecisionRateLimiterInfo:
        properties:
            current:
                format: int64
                type: string
            label:
                type: string
            remaining:
                format: int64
                type: string
            tokens_consumed:
                format: uint64
                type: string
        type: object
    ListAgentsResponse:
        properties:
            agents:
                items:
                    type: string
                type: array
        type: object
    ListAutoScaleControlPointsControllerResponse:
        properties:
            errors_count:
                format: int64
                type: integer
            global_auto_scale_control_points:
                items:
                    $ref: '#/definitions/GlobalAutoScaleControlPoint'
                    type: object
                type: array
        type: object
    ListDiscoveryEntitiesAgentResponse:
        properties:
            entities:
                additionalProperties:
                    $ref: '#/definitions/Entity'
                type: object
        type: object
    ListDiscoveryEntitiesControllerResponse:
        properties:
            entities:
                $ref: '#/definitions/ListDiscoveryEntitiesAgentResponse'
            errors_count:
                format: int64
                type: integer
        type: object
    ListDiscoveryEntityAgentResponse:
        properties:
            entity:
                $ref: '#/definitions/Entity'
        type: object
    ListFlowControlPointsControllerResponse:
        properties:
            errors_count:
                format: int64
                type: integer
            global_flow_control_points:
                items:
                    $ref: '#/definitions/GlobalFlowControlPoint'
                    type: object
                type: array
        type: object
    ListServicesControllerResponse:
        properties:
            errors_count:
                format: int64
                type: integer
            services:
                items:
                    $ref: '#/definitions/GlobalService'
                    type: object
                type: array
        type: object
    LoadActuator:
        properties:
            default_config:
                $ref: '#/definitions/LoadActuatorDynamicConfig'
                description: Default configuration.
            dynamic_config_key:
                description: Configuration key for DynamicConfig.
                type: string
            in_ports:
                $ref: '#/definitions/LoadActuatorIns'
                description: Input ports for the Load Actuator component.
        title: Takes the load multiplier input signal and publishes it to the schedulers in the data-plane
        type: object
    LoadActuatorDynamicConfig:
        properties:
            dry_run:
                description: |-
                    Decides whether to run the load actuator in dry-run mode. Dry run mode ensures that no traffic gets dropped by this load actuator.
                    Useful for observing the behavior of Load Actuator without disrupting any real traffic.
                type: boolean
        title: Dynamic Configuration for LoadActuator
        type: object
    LoadActuatorIns:
        description: Input for the Load Actuator component.
        properties:
            load_multiplier:
                $ref: '#/definitions/InPort'
                description: |-
                    Load multiplier is ratio of [incoming
                    concurrency](#scheduler-outs) that needs to be accepted.
        type: object
    LoadShaper:
        description: |-
            The _Load Shaper_ produces a smooth and continuous traffic load
            that changes progressively over time, based on the specified steps.

            Each step is defined by two parameters:
            - The `target_accept_percentage`.
            - The `duration` for the signal to change from the
              previous step's `target_accept_percentage` to the current step's
              `target_accept_percentage`.

            The percentage of requests accepted starts at the `target_accept_percentage`
            defined in the first step and gradually ramps up or down linearly from
            the previous step's `target_accept_percentage` to the next
            `target_accept_percentage`, over the `duration` specified for each step.
        properties:
            default_config:
                $ref: '#/definitions/FlowRegulatorDynamicConfig'
                description: Default configuration.
            dynamic_config_key:
                description: Dynamic configuration key for flow regulator.
                type: string
            in_ports:
                $ref: '#/definitions/LoadShaperIns'
            out_ports:
                $ref: '#/definitions/LoadShaperOuts'
            parameters:
                $ref: '#/definitions/LoadShaperParameters'
                x-go-tag-validate: required
        type: object
    LoadShaperIns:
        description: Inputs for the _Load Shaper_ component.
        properties:
            backward:
                $ref: '#/definitions/InPort'
                description: Whether to progress the _Load Shaper_ towards the previous step.
            forward:
                $ref: '#/definitions/InPort'
                description: Whether to progress the _Load Shaper_ towards the next step.
            reset:
                $ref: '#/definitions/InPort'
                description: Whether to reset the _Load Shaper_ to the first step.
        type: object
    LoadShaperOuts:
        description: Outputs for the _Load Shaper_ component.
        properties:
            accept_percentage:
                $ref: '#/definitions/OutPort'
                description: The percentage of flows being accepted by the _Load Shaper_.
            at_end:
                $ref: '#/definitions/OutPort'
                description: A Boolean signal indicating whether the _Load Shaper_ is at the end of signal generation.
            at_start:
                $ref: '#/definitions/OutPort'
                description: A Boolean signal indicating whether the _Load Shaper_ is at the start of signal generation.
        type: object
    LoadShaperParameters:
        description: Parameters for the _Load Shaper_ component.
        properties:
            flow_regulator_parameters:
                $ref: '#/definitions/FlowRegulatorParameters'
                description: |+
                    Parameters for the _Flow Regulator_.

                x-go-tag-validate: required
            steps:
                items:
                    $ref: '#/definitions/LoadShaperParametersStep'
                    type: object
                minItems: 1
                type: array
                x-go-tag-validate: required,gt=0,dive
        required:
            - steps
        type: object
    LoadShaperParametersStep:
        properties:
            duration:
                description: |+
                    Duration for which the step is active.

                type: string
                x-go-tag-validate: required
            target_accept_percentage:
                description: |+
                    The value of the step.

                format: double
                maximum: 100
                minimum: 0
                type: number
                x-go-tag-validate: gte=0,lte=100
        required:
            - duration
        type: object
    LoadShaperSeries:
        description: _LoadShaperSeries_ is a component that applies a series of _Load Shapers_ in order.
        properties:
            in_ports:
                $ref: '#/definitions/LoadShaperSeriesIns'
            parameters:
                $ref: '#/definitions/LoadShaperSeriesParameters'
                x-go-tag-validate: required
        type: object
    LoadShaperSeriesIns:
        description: Inputs for the _LoadShaperSeries_ component.
        properties:
            backward:
                $ref: '#/definitions/InPort'
                description: Whether to progress the load shaper series towards the previous step.
            forward:
                $ref: '#/definitions/InPort'
                description: Whether to progress the load shaper series towards the next step.
            reset:
                $ref: '#/definitions/InPort'
                description: Whether to reset the load shaper series to the first step.
        type: object
    LoadShaperSeriesLoadShaperInstance:
        properties:
            load_shaper:
                $ref: '#/definitions/LoadShaperParameters'
                description: |+
                    The load shaper.

                x-go-tag-validate: required
            out_ports:
                $ref: '#/definitions/LoadShaperOuts'
        type: object
    LoadShaperSeriesParameters:
        description: Parameters for the _LoadShaperSeries_ component.
        properties:
            load_shapers:
                description: |+
                    An ordered list of load shapers that get applied in order.

                items:
                    $ref: '#/definitions/LoadShaperSeriesLoadShaperInstance'
                    type: object
                type: array
                x-go-tag-validate: required,dive
        required:
            - load_shapers
        type: object
    MatchExpression:
        description: |-
            MatchExpression has multiple variants, exactly one should be set.

            Example:
            ```yaml
            all:
              of:
                - label_exists: foo
                - label_equals: { label = app, value = frobnicator }
            ```
        properties:
            all:
                $ref: '#/definitions/MatchExpressionList'
                description: The expression is true when all sub expressions are true.
            any:
                $ref: '#/definitions/MatchExpressionList'
                description: The expression is true when any sub expression is true.
            label_equals:
                $ref: '#/definitions/EqualsMatchExpression'
                description: The expression is true when label value equals given value.
            label_exists:
                description: |+
                    The expression is true when label with given name exists.

                type: string
                x-go-tag-validate: required
            label_matches:
                $ref: '#/definitions/MatchesMatchExpression'
                description: The expression is true when label matches given regular expression.
            not:
                $ref: '#/definitions/MatchExpression'
                description: The expression negates the result of sub expression.
        required:
            - label_exists
        title: Defines a `[map<string, string> → bool]` expression to be evaluated on labels
        type: object
    MatchExpressionList:
        description: 'for example, `{any: {of: [expr1, expr2]}}`.'
        properties:
            of:
                description: List of sub expressions of the match expression.
                items:
                    $ref: '#/definitions/MatchExpression'
                    type: object
                type: array
        title: List of MatchExpressions that is used for all or any matching
        type: object
    MatchesMatchExpression:
        description: Label selector expression of the form `label matches regex`.
        properties:
            label:
                description: |+
                    Name of the label to match the regular expression.

                type: string
                x-go-tag-validate: required
            regex:
                description: |+
                    Regular expression that should match the label value.
                    It uses [Go's regular expression syntax](https://github.com/google/re2/wiki/Syntax).

                type: string
                x-go-tag-validate: required
        required:
            - label
            - regex
        type: object
    Max:
        description: 'Max: output = max([]inputs).'
        properties:
            in_ports:
                $ref: '#/definitions/MaxIns'
                description: Input ports for the Max component.
            out_ports:
                $ref: '#/definitions/MaxOuts'
                description: Output ports for the Max component.
        title: Takes a list of input signals and emits the signal with the maximum value
        type: object
    MaxIns:
        description: Inputs for the Max component.
        properties:
            inputs:
                description: |+
                    Array of input signals.

                items:
                    $ref: '#/definitions/InPort'
                    type: object
                type: array
                x-go-tag-validate: dive
        type: object
    MaxOuts:
        description: Output for the Max component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Signal with maximum value as an output signal.
        type: object
    Member:
        properties:
            birthdate:
                format: int64
                type: string
            id:
                format: uint64
                type: string
            name:
                type: string
        type: object
    Min:
        description: |-
            Takes an array of input signals and emits the signal with the minimum value
            Min: output = min([]inputs).
        properties:
            in_ports:
                $ref: '#/definitions/MinIns'
                description: Input ports for the Min component.
            out_ports:
                $ref: '#/definitions/MinOuts'
                description: Output ports for the Min component.
        type: object
    MinIns:
        description: Inputs for the Min component.
        properties:
            inputs:
                description: |+
                    Array of input signals.

                items:
                    $ref: '#/definitions/InPort'
                    type: object
                type: array
                x-go-tag-validate: dive
        type: object
    MinOuts:
        description: Output ports for the Min component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Signal with minimum value as an output signal.
        type: object
    NestedCircuit:
        description: Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
        properties:
            components:
                description: |+
                    List of components in the nested circuit.

                items:
                    $ref: '#/definitions/Component'
                    type: object
                type: array
                x-go-tag-validate: dive
            in_ports_map:
                additionalProperties:
                    $ref: '#/definitions/InPort'
                description: Maps input port names to input ports.
                type: object
            name:
                description: Name of the nested circuit component. This name is displayed by graph visualization tools.
                type: string
            out_ports_map:
                additionalProperties:
                    $ref: '#/definitions/OutPort'
                description: Maps output port names to output ports.
                type: object
            short_description:
                description: Short description of the nested circuit component. This description is displayed by graph visualization tools.
                type: string
        type: object
    NestedSignalEgress:
        description: Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
        properties:
            in_ports:
                $ref: '#/definitions/NestedSignalEgressIns'
                description: Input ports for the NestedSignalEgress component.
            port_name:
                description: Name of the port.
                type: string
        type: object
    NestedSignalEgressIns:
        description: Inputs for the NestedSignalEgress component.
        properties:
            signal:
                $ref: '#/definitions/InPort'
                description: Egress signal.
        type: object
    NestedSignalIngress:
        description: Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
        properties:
            out_ports:
                $ref: '#/definitions/NestedSignalIngressOuts'
                description: Output ports for the NestedSignalIngress component.
            port_name:
                description: Name of the port.
                type: string
        type: object
    NestedSignalIngressOuts:
        description: Outputs for the NestedSignalIngress component.
        properties:
            signal:
                $ref: '#/definitions/OutPort'
                description: Ingress signal.
        type: object
    Network:
        properties:
            commands_total:
                format: int64
                type: string
            connections_total:
                format: int64
                type: string
            current_connections:
                format: int64
                type: string
            read_bytes_total:
                format: int64
                type: string
            written_bytes_total:
                format: int64
                type: string
        type: object
    OkHttpResponse:
        description: HTTP attributes for an OK response.
        properties:
            dynamic_metadata:
                type: object
            headers:
                additionalProperties:
                    type: string
                description: HTTP entity headers in addition to the original request headers.
                type: object
        type: object
    Or:
        description: |-
            Logical OR.

            See [And component](#and) on how signals are mapped onto Boolean values.
        properties:
            in_ports:
                $ref: '#/definitions/OrIns'
                description: Input ports for the Or component.
            out_ports:
                $ref: '#/definitions/OrOuts'
                description: Output ports for the Or component.
        type: object
    OrIns:
        description: Inputs for the Or component.
        properties:
            inputs:
                description: |+
                    Array of input signals.

                items:
                    $ref: '#/definitions/InPort'
                    type: object
                type: array
                x-go-tag-validate: dive
        type: object
    OrOuts:
        description: Output ports for the Or component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: |-
                    Result of logical OR of all the input signals.

                    Will always be 0 (false), 1 (true) or invalid (unknown).
        type: object
    OutPort:
        properties:
            signal_name:
                description: Name of the outgoing Signal on the OutPort.
                type: string
        title: Components produce output for other components through OutPorts
        type: object
    OverlappingService:
        description: OverlappingService contains info about a service that overlaps with another one.
        properties:
            entities_count:
                format: int32
                type: integer
            service1:
                type: string
            service2:
                type: string
        type: object
    Partition:
        properties:
            backups:
                items:
                    $ref: '#/definitions/Member'
                    type: object
                type: array
            d_maps:
                additionalProperties:
                    $ref: '#/definitions/DMap'
                type: object
            length:
                format: int64
                type: string
            previous_owners:
                items:
                    $ref: '#/definitions/Member'
                    type: object
                type: array
        type: object
    PathTemplateMatcher:
        description: |-
            HTTP path will be matched against given path templates.
            If a match occurs, the value associated with the path template will be treated as a result.
            In case of multiple path templates matching, the most specific one will be chosen.
        properties:
            template_values:
                additionalProperties:
                    type: string
                description: |+
                    Template value keys are OpenAPI-inspired path templates.

                    * Static path segment `/foo` matches a path segment exactly
                    * `/{param}` matches arbitrary path segment.
                      (The parameter name is ignored and can be omitted (`{}`))
                    * The parameter must cover whole segment.
                    * Additionally, path template can end with `/*` wildcard to match
                      arbitrary number of trailing segments (0 or more).
                    * Multiple consecutive `/` are ignored, as well as trailing `/`.
                    * Parametrized path segments must come after static segments.
                    * `*`, if present, must come last.
                    * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/*`).

                    See also <https://swagger.io/specification/#path-templating-matching>

                    Example:
                    ```yaml
                    /register: register
                    "/user/{userId}": user
                    /static/*: other
                    ```

                minProperties: 1
                type: object
                x-go-tag-validate: gt=0,dive,keys,required,endkeys,required
        title: Matches HTTP Path to given path templates
        type: object
    Peer:
        description: Peer holds peer info and services.
        properties:
            address:
                type: string
            hostname:
                type: string
            services:
                additionalProperties:
                    type: string
                type: object
        type: object
    Peers:
        description: Peers holds the peer info of this peer and a mapping of address to other peers.
        properties:
            peers:
                additionalProperties:
                    $ref: '#/definitions/Peer'
                type: object
            self_peer:
                $ref: '#/definitions/Peer'
        type: object
    PodAutoScaler:
        description: _PodAutoScaler_ provides auto-scaling functionality for scalable Kubernetes resource. Multiple _Controllers_ can be defined on the _PodAutoScaler_ for performing scale-out or scale-in. The _PodAutoScaler_ interfaces with Kubernetes infrastructure APIs to perform auto-scale.
        properties:
            cooldown_override_percentage:
                default: 50
                description: |+
                    Cooldown override percentage defines a threshold change in scale-out beyond which previous cooldown is overridden.
                    For example, if the cooldown is 5 minutes and the cooldown override percentage is 10%, then if the
                    scale-increases by 10% or more, the previous cooldown is cancelled. Defaults to 50%.

                format: double
                type: number
                x-go-tag-default: "50"
            max_replicas:
                default: "9223372036854775807"
                description: |+
                    The maximum scale to which the _PodAutoScaler_ can scale-out.

                format: int64
                minLength: 1
                type: string
                x-go-tag-default: "9223372036854775807"
                x-go-tag-validate: gt=0
            max_scale_in_percentage:
                default: 1
                description: |+
                    The maximum decrease of replicas (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 1% of current scale value.

                format: double
                type: number
                x-go-tag-default: "1"
            max_scale_out_percentage:
                default: 10
                description: |+
                    The maximum increase of replicas (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 10% of current scale value.

                format: double
                type: number
                x-go-tag-default: "10"
            min_replicas:
                default: "0"
                description: |+
                    The minimum replicas to which the _PodAutoScaler_ can scale-in.

                format: int64
                minLength: 0
                type: string
                x-go-tag-default: "0"
                x-go-tag-validate: gte=0
            out_ports:
                $ref: '#/definitions/PodAutoScalerOuts'
                description: Output ports for the _PodAutoScaler_.
            pod_scaler:
                $ref: '#/definitions/KubernetesReplicas'
                x-go-tag-validate: required
            scale_in_alerter_parameters:
                $ref: '#/definitions/AlerterParameters'
                description: Configuration for scale-in Alerter.
            scale_in_controllers:
                description: List of _Controllers_ for scaling in.
                items:
                    $ref: '#/definitions/ScaleInController'
                    type: object
                type: array
            scale_in_cooldown:
                default: 120s
                description: |+
                    The amount of time to wait after a scale-in operation for another scale-in operation.

                type: string
                x-go-tag-default: 120s
            scale_out_alerter_parameters:
                $ref: '#/definitions/AlerterParameters'
                description: Configuration for scale-out Alerter.
            scale_out_controllers:
                description: List of _Controllers_ for scaling out.
                items:
                    $ref: '#/definitions/ScaleOutController'
                    type: object
                type: array
            scale_out_cooldown:
                default: 30s
                description: |+
                    The amount of time to wait after a scale-out operation for another scale-out or scale-in operation.

                type: string
                x-go-tag-default: 30s
        type: object
    PodAutoScalerOuts:
        description: Outputs for _PodAutoScaler_.
        properties:
            actual_replicas:
                $ref: '#/definitions/OutPort'
            configured_replicas:
                $ref: '#/definitions/OutPort'
            desired_replicas:
                $ref: '#/definitions/OutPort'
        type: object
    PodScaler:
        description: Component for scaling pods based on a signal.
        properties:
            kubernetes_object_selector:
                $ref: '#/definitions/KubernetesObjectSelector'
                description: |+
                    The Kubernetes object on which horizontal scaling is applied.

                x-go-tag-validate: required
            scale_actuator:
                $ref: '#/definitions/PodScalerScaleActuator'
                description: Actuates scaling of pods based on a signal.
            scale_reporter:
                $ref: '#/definitions/PodScalerScaleReporter'
                description: Reports actual and configured number of replicas.
        type: object
    PodScalerScaleActuator:
        description: Actuates scaling of pods based on a signal.
        properties:
            default_config:
                $ref: '#/definitions/PodScalerScaleActuatorDynamicConfig'
                description: Default configuration.
            dynamic_config_key:
                title: Configuration key for DynamicConfig
                type: string
            in_ports:
                $ref: '#/definitions/PodScalerScaleActuatorIns'
                description: Input ports for the PodScaler component.
        type: object
    PodScalerScaleActuatorDynamicConfig:
        properties:
            dry_run:
                default: false
                description: |+
                    Decides whether to run the pod scaler in dry-run mode. Dry run mode ensures that no scaling is invoked by this pod scaler.
                    Useful for observing the behavior of Scaler without disrupting any real traffic.

                type: boolean
                x-go-tag-default: "false"
        title: Dynamic Configuration for ScaleActuator
        type: object
    PodScalerScaleActuatorIns:
        description: Inputs for the PodScaler component.
        properties:
            desired_replicas:
                $ref: '#/definitions/InPort'
        type: object
    PodScalerScaleReporter:
        description: Reports actual and configured number of replicas.
        properties:
            out_ports:
                $ref: '#/definitions/PodScalerScaleReporterOuts'
                description: Output ports for the PodScaler component.
        type: object
    PodScalerScaleReporterOuts:
        description: Outputs for the PodScaler component.
        properties:
            actual_replicas:
                $ref: '#/definitions/OutPort'
                description: The number of replicas that are currently running.
            configured_replicas:
                $ref: '#/definitions/OutPort'
                description: The number of replicas that are desired.
        type: object
    Policies:
        description: Policies is a collection of Policies.
        properties:
            policies:
                additionalProperties:
                    $ref: '#/definitions/Policy'
                type: object
        type: object
    Policy:
        description: |-
            Policy expresses observability-driven control logic.

            :::info

            See also [Policy overview](/concepts/policy/policy.md).

            :::

            Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
        properties:
            circuit:
                $ref: '#/definitions/Circuit'
                description: Defines the control-loop logic of the policy.
            resources:
                $ref: '#/definitions/Resources'
                description: Resources (such as Flux Meters, Classifiers) to setup.
        type: object
    PolicyWrapper:
        properties:
            common_attributes:
                $ref: '#/definitions/CommonAttributes'
                title: CommonAttributes
            policy:
                $ref: '#/definitions/Policy'
                title: Policy
        type: object
    PolicyWrappers:
        properties:
            policy_wrappers:
                additionalProperties:
                    $ref: '#/definitions/PolicyWrapper'
                type: object
        type: object
    PreviewFlowLabelsControllerResponse:
        properties:
            response:
                $ref: '#/definitions/PreviewFlowLabelsResponse'
        type: object
    PreviewFlowLabelsResponse:
        properties:
            samples:
                items:
                    $ref: '#/definitions/PreviewFlowLabelsResponseFlowLabels'
                    type: object
                type: array
        type: object
    PreviewFlowLabelsResponseFlowLabels:
        properties:
            labels:
                additionalProperties:
                    type: string
                type: object
        type: object
    PreviewHTTPRequestsControllerResponse:
        properties:
            response:
                $ref: '#/definitions/PreviewHTTPRequestsResponse'
        type: object
    PreviewHTTPRequestsResponse:
        properties:
            samples:
                items:
                    type: object
                type: array
        type: object
    PreviewRequest:
        properties:
            control_point:
                description: Control point to preview.
                type: string
            label_matcher:
                $ref: '#/definitions/LabelMatcher'
                description: Flow labels to match. Optional parameter for advanced filtering.
            samples:
                description: Number of samples to collect.
                format: int64
                type: string
            service:
                description: Service to preview.
                type: string
        type: object
    ProcessInfo:
        properties:
            extensions:
                items:
                    type: string
                type: array
            start_time:
                format: date-time
                type: string
            uptime:
                type: string
        type: object
    PromQL:
        properties:
            evaluation_interval:
                default: 10s
                description: |+
                    Describes the interval between successive evaluations of the Prometheus query.

                type: string
                x-go-tag-default: 10s
            out_ports:
                $ref: '#/definitions/PromQLOuts'
                description: Output ports for the PromQL component.
            query_string:
                description: |-
                    Describes the [PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/) query to be run.

                    :::note

                    The query must return a single value either as a scalar or as a vector with a single element.

                    :::

                    :::info Usage with Flux Meter

                    [Flux Meter](/concepts/flow-control/resources/flux-meter.md) metrics can be queries using PromQL. Flux Meter defines histogram type of metrics in Prometheus.
                    Therefore, one can refer to `flux_meter_sum`, `flux_meter_count` and `flux_meter_bucket`.
                    The particular Flux Meter can be identified with the `flux_meter_name` label.
                    There are additional labels available on a Flux Meter such as `valid`, `flow_status`, `http_status_code` and `decision_type`.

                    :::

                    :::info Usage with OpenTelemetry Metrics

                    Aperture supports OpenTelemetry metrics. See [reference](/get-started/integrations/metrics/metrics.md) for more details.

                    :::
                type: string
        title: Component that runs a Prometheus query periodically and returns the result as an output signal
        type: object
    PromQLOuts:
        description: Output for the PromQL component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: The result of the Prometheus query as an output signal.
        type: object
    PulseGenerator:
        description: Generates 0 and 1 in turns.
        properties:
            false_for:
                default: 5s
                description: |+
                    Emitting 0 for the `false_for` duration.

                type: string
                x-go-tag-default: 5s
            out_ports:
                $ref: '#/definitions/PulseGeneratorOuts'
                description: Output ports for the PulseGenerator component.
            true_for:
                default: 5s
                description: |+
                    Emitting 1 for the `true_for` duration.

                type: string
                x-go-tag-default: 5s
        type: object
    PulseGeneratorOuts:
        description: Outputs for the PulseGenerator component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
        type: object
    Query:
        description: Query components that are query databases such as Prometheus.
        properties:
            promql:
                $ref: '#/definitions/PromQL'
                description: Periodically runs a Prometheus query in the background and emits the result.
        type: object
    RateLimiter:
        description: |-
            :::info

            See also [_Rate Limiter_ overview](/concepts/flow-control/components/rate-limiter.md).

            :::

            RateLimiting is done on per-label-value basis. Use `label_key`
            to select which label should be used as key.
        properties:
            default_config:
                $ref: '#/definitions/RateLimiterDynamicConfig'
                title: Default configuration
            dynamic_config_key:
                title: Configuration key for DynamicConfig
                type: string
            flow_selector:
                $ref: '#/definitions/FlowSelector'
                description: |+
                    Which control point to apply this rate limiter to.

                x-go-tag-validate: required
            in_ports:
                $ref: '#/definitions/RateLimiterIns'
                title: Input ports for the RateLimiter component
                x-go-tag-validate: required
            parameters:
                $ref: '#/definitions/RateLimiterParameters'
                title: Parameters for the RateLimiter component
                x-go-tag-validate: required
        title: Limits the traffic on a control point to specified rate
        type: object
    RateLimiterDynamicConfig:
        properties:
            overrides:
                description: |+
                    Allows to specify different limits for particular label values.

                items:
                    $ref: '#/definitions/RateLimiterOverride'
                    type: object
                type: array
                x-go-tag-validate: dive
        title: Dynamic Configuration for the rate limiter
        type: object
    RateLimiterIns:
        properties:
            limit:
                $ref: '#/definitions/InPort'
                description: |+
                    Number of flows allowed per `limit_reset_interval` per each label.
                    Negative values disable the rate limiter.

                    :::tip

                    Negative limit can be useful to _conditionally_ enable the rate limiter
                    under certain circumstances. [Decider](#decider) might be helpful.

                    :::

                x-go-tag-validate: required
        title: Inputs for the RateLimiter component
        type: object
    RateLimiterOverride:
        properties:
            label_value:
                description: |+
                    Value of the label for which the override should be applied.

                type: string
                x-go-tag-validate: required
            limit_scale_factor:
                default: 1
                description: |+
                    Amount by which the `in_ports.limit` should be multiplied for
                    this label value.

                format: double
                type: number
                x-go-tag-default: "1.0"
        required:
            - label_value
        type: object
    RateLimiterParameters:
        properties:
            label_key:
                description: |+
                    Specifies which label the rate limiter should be keyed by.

                    Rate limiting is done independently for each value of the
                    [label](/concepts/flow-control/flow-label.md) with given key.
                    For example, to give each user a separate limit, assuming you
                    have a _user_ flow
                    label set up, set `label_key: "user"`.

                type: string
                x-go-tag-validate: required
            lazy_sync:
                $ref: '#/definitions/RateLimiterParametersLazySync'
                title: Configuration of lazy-syncing behaviour of rate limiter
            limit_reset_interval:
                default: 60s
                description: |+
                    Time after which the limit for a given label value will be reset.

                type: string
                x-go-tag-default: 60s
            tokens_label_key:
                default: tokens
                description: |+
                    Flow label key that will be used to override the number of tokens
                    for this request.
                    This is an optional parameter and takes highest precedence
                    when assigning tokens to a request.
                    The label value must be a valid uint64 number.

                type: string
                x-go-tag-default: tokens
        required:
            - label_key
        type: object
    RateLimiterParametersLazySync:
        properties:
            enabled:
                default: false
                title: Enables lazy sync
                type: boolean
                x-go-tag-default: "false"
            num_sync:
                default: 5
                description: |+
                    Number of times to lazy sync within the `limit_reset_interval`.

                exclusiveMinimum: true
                format: int64
                minimum: 0
                type: integer
                x-go-tag-default: "5"
                x-go-tag-validate: gt=0
        type: object
    Rego:
        description: |-
            Rego define a set of labels that are extracted after evaluating a Rego module.

            :::info

            You can use the [live-preview](/concepts/flow-control/resources/classifier.md#live-previewing-requests) feature to first preview the input to the classifier before writing the labeling logic.

            :::

            Example of Rego module which also disables telemetry visibility of label:
            ```yaml
            rego:
              labels:
                user:
                  telemetry: false
              module: |
                package user_from_cookie
                cookies := split(input.attributes.request.http.headers.cookie, "; ")
                user := user {
                    cookie := cookies[_]
                    startswith(cookie, "session=")
                    session := substring(cookie, count("session="), -1)
                    parts := split(session, ".")
                    object := json.unmarshal(base64url.decode(parts[0]))
                    user := object.user
                }
            ```
        properties:
            labels:
                additionalProperties:
                    $ref: '#/definitions/RegoLabelProperties'
                description: |+
                    A map of {key, value} pairs mapping from
                    [flow label](/concepts/flow-control/flow-label.md) keys to queries that define
                    how to extract and propagate flow labels with that key.
                    The name of the label maps to a variable in the Rego module. It maps to `data.<package>.<label>` variable.

                minProperties: 1
                type: object
                x-go-tag-validate: required,gt=0,dive,keys,required,endkeys,required
            module:
                description: |+
                    Source code of the Rego module.

                    :::Note

                    Must include a "package" declaration.

                    :::

                type: string
                x-go-tag-validate: required
        required:
            - labels
            - module
        type: object
    RegoLabelProperties:
        properties:
            telemetry:
                default: true
                description: |+
                    :::note

                    The flow label is always accessible in Aperture Policies regardless of this setting.

                    :::

                    :::caution

                    When using [FluxNinja ARC extension](arc/extension.md), telemetry enabled
                    labels are sent to FluxNinja ARC for observability. Telemetry should be disabled for
                    sensitive labels.

                    :::

                title: |-
                    Decides if the created flow label should be available as an attribute in OLAP telemetry and
                    propagated in [baggage](/concepts/flow-control/flow-label.md#baggage)
                type: boolean
                x-go-tag-default: "true"
        type: object
    ReportRequest:
        properties:
            agent_group:
                type: string
            all_statuses:
                $ref: '#/definitions/GroupStatus'
            auto_scale_kubernetes_control_points:
                $ref: '#/definitions/AutoScaleKubernetesControlPoints'
            controller_info:
                $ref: '#/definitions/ControllerInfo'
            flow_control_points:
                $ref: '#/definitions/FlowControlPoints'
            host_info:
                $ref: '#/definitions/HostInfo'
            installation_mode:
                type: string
            peers:
                $ref: '#/definitions/Peers'
            policies:
                $ref: '#/definitions/PolicyWrappers'
            process_info:
                $ref: '#/definitions/ProcessInfo'
            services_list:
                $ref: '#/definitions/ServicesList'
            version_info:
                $ref: '#/definitions/VersionInfo'
        type: object
    ReportResponse:
        description: ReportResponse is empty for now.
        type: object
    Request:
        properties:
            id:
                description: |-
                    Id of the request, this should be unique per client connection. First
                    request id on the connection should be equal to nextID from the Hello
                    message.
                format: uint64
                type: string
            payload:
                $ref: '#/definitions/googleprotobufAny'
                description: Request payload. The method on the callee will be dispatched by request's type.
            timeout:
                description: |-
                    Mandatory timeout for processing request. Timeout is handled on
                    caller-side. After it passes, caller is no longer interested in a response,
                    and callee can forget about the request.
                type: string
        type: object
    Resources:
        description: |-
            :::info

            See also [Resources overview](/concepts/policy/resources.md).

            :::
        properties:
            classifiers:
                description: |+
                    Classifiers are installed in the data-plane and are used to label the requests based on payload content.

                    The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.

                    Deprecated: v1.5.0. Use `flow_control.classifiers` instead.

                items:
                    $ref: '#/definitions/Classifier'
                    type: object
                type: array
                x-deprecated: true
                x-go-tag-validate: deprecated,dive
            flow_control:
                $ref: '#/definitions/FlowControlResources'
                description: FlowControlResources are resources that are provided by flow control integration.
            flux_meters:
                additionalProperties:
                    $ref: '#/definitions/FluxMeter'
                description: |+
                    Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.

                    Flux Meter created metrics can be consumed as input to the circuit through the PromQL component.

                    Deprecated: v1.5.0. Use `flow_control.flux_meters` instead.

                type: object
                x-deprecated: true
                x-go-tag-validate: deprecated,dive
        title: Resources that need to be setup for the policy to function
        type: object
    Response:
        properties:
            error:
                $ref: '#/definitions/googlerpcStatus'
            id:
                format: uint64
                type: string
            payload:
                description: Payload is a message of a type implied by request kind.
                format: byte
                type: string
        type: object
    Rule:
        description: |-
            Example of a JSON extractor:
            ```yaml
            extractor:
              json:
                from: request.http.body
                pointer: /user/name
            ```
        properties:
            extractor:
                $ref: '#/definitions/Extractor'
                description: High-level declarative extractor.
            rego:
                $ref: '#/definitions/RuleRego'
                description: |-
                    Rego module to extract a value from.

                    Deprecated: 1.5.0
            telemetry:
                default: true
                description: |+
                    :::note

                    The flow label is always accessible in Aperture Policies regardless of this setting.

                    :::

                    :::caution

                    When using [FluxNinja ARC extension](arc/extension.md), telemetry enabled
                    labels are sent to FluxNinja ARC for observability. Telemetry should be disabled for
                    sensitive labels.

                    :::

                title: |-
                    Decides if the created flow label should be available as an attribute in OLAP telemetry and
                    propagated in [baggage](/concepts/flow-control/flow-label.md#baggage)
                type: boolean
                x-go-tag-default: "true"
        title: Rule describes a single classification Rule
        type: object
    RuleRego:
        description: |-
            High-level extractor-based rules are compiled into a single Rego query.

            Deprecated: 1.5.0
        properties:
            query:
                description: |+
                    Query string to extract a value (for example, `data.<mymodulename>.<variablename>`).

                    Note: The module name must match the package name from the `source`.

                type: string
                x-deprecated: true
                x-go-tag-validate: deprecated,required
            source:
                description: |+
                    Source code of the Rego module.

                    Note: Must include a "package" declaration.

                type: string
                x-deprecated: true
                x-go-tag-validate: deprecated,required
        required:
            - query
            - source
        title: Raw Rego rules are compiled 1:1 to Rego queries
        type: object
    ScaleInController:
        properties:
            alerter_parameters:
                $ref: '#/definitions/AlerterParameters'
                description: Configuration for embedded Alerter.
            controller:
                $ref: '#/definitions/ScaleInControllerController'
                title: Controller
        type: object
    ScaleInControllerController:
        properties:
            gradient:
                $ref: '#/definitions/DecreasingGradient'
        type: object
    ScaleOutController:
        properties:
            alerter_parameters:
                $ref: '#/definitions/AlerterParameters'
                description: Configuration for embedded Alerter.
            controller:
                $ref: '#/definitions/ScaleOutControllerController'
                title: Controller
                x-go-tag-validate: required
        type: object
    ScaleOutControllerController:
        properties:
            gradient:
                $ref: '#/definitions/IncreasingGradient'
        type: object
    Scheduler:
        description: |-
            :::note

            Each Agent instantiates an independent copy of the scheduler, but output
            signals for accepted and incoming concurrency are aggregated across all agents.

            :::
        properties:
            out_ports:
                $ref: '#/definitions/SchedulerOuts'
                description: Output ports for the Scheduler component.
            parameters:
                $ref: '#/definitions/SchedulerParameters'
                description: |+
                    Scheduler parameters.

                x-go-tag-validate: required
        title: Weighted Fair Queuing-based workload scheduler
        type: object
    SchedulerOuts:
        description: Output for the Scheduler component.
        properties:
            accepted_concurrency:
                $ref: '#/definitions/OutPort'
                description: |-
                    Accepted concurrency is actual concurrency on a control point that this
                    scheduler is applied on.

                    :::info

                    Concurrency is a unit less number describing mean number of
                    [flows](/concepts/flow-control/flow-control.md#flow) being
                    concurrently processed by the system (system = control point).
                    Concurrency is calculated as tokens per second that is being
                    accepted by the scheduler.
                    If the tokens map to milliseconds of response latency (_work_),
                    then the concurrency is _work_ done per unit
                    of time (so work-seconds per world-seconds). Work-seconds are
                    computed based on token-weights of flows (which are either
                    estimated using the `auto_tokens` feature or specified by
                    `Workload.tokens` setting).
                    Conversely, if the tokens map to number of requests where
                    each request is 1 token, then the concurrency is simply
                    the number of requests per second.

                    :::

                    Value of this signal is aggregated from all the relevant schedulers.
            incoming_concurrency:
                $ref: '#/definitions/OutPort'
                description: |-
                    Incoming concurrency is concurrency that'd be needed to accept all the
                    flows entering the scheduler.

                    This is computed in the same way as `accepted_concurrency`,
                    by summing up tokens from all the flows entering scheduler,
                    including rejected ones.
        type: object
    SchedulerParameters:
        properties:
            auto_tokens:
                default: false
                description: |+
                    Automatically estimate the size of a request in each workload, based on
                    historical latency. Each workload's `tokens` will be set to average
                    latency of flows in that workload during last few seconds (exact duration
                    of this average can change).
                    This setting is useful in concurrent limiting use-case, where the
                    concurrency is calculated as (avg. latency \* in-flight requests).

                    The value of tokens estimated by `auto_tokens` takes lower precedence
                    than the value of `tokens` specified in the workload definition
                    and `tokens` explicitly specified in the request labels.

                type: boolean
                x-go-tag-default: "false"
            decision_deadline_margin:
                default: 0.01s
                description: |+
                    Decision deadline margin is the amount of time that the scheduler will
                    subtract from the request deadline to determine the deadline for the
                    decision. This is to ensure that the scheduler has enough time to
                    make a decision before the request deadline happens, accounting for
                    processing delays.
                    The request deadline is based on the
                    [gRPC deadline](https://grpc.io/blog/deadlines) or the
                    [`grpc-timeout` HTTP header](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests).

                    Fail-open logic is use for flow control APIs, so if the gRPC deadline
                    reaches, the flow will end up being unconditionally allowed while
                    it is still waiting on the scheduler.

                type: string
                x-go-tag-default: 0.01s
            default_workload_parameters:
                $ref: '#/definitions/SchedulerWorkloadParameters'
                description: Parameters to be used if none of workloads specified in `workloads` match.
            max_timeout:
                default: 0s
                description: |+
                    Deprecated: 1.5.0. Use `decision_deadline_margin` instead. This value is ignored.

                type: string
                x-go-tag-default: 0s
            timeout_factor:
                default: 0
                description: |+
                    Deprecated: 1.5.0. Use `decision_deadline_margin` instead. This value is ignored.

                format: double
                type: number
                x-go-tag-default: "0"
                x-go-tag-validate: gte=0.0
            tokens_label_key:
                default: tokens
                description: |+
                    Flow label key that will be used to override the number of tokens for this request.
                    The label value must be a valid uint64 number.
                    If this parameter is not provided then each request is assumed to consume 1 token.

                type: string
                x-go-tag-default: tokens
            workloads:
                description: |+
                    List of workloads to be used in scheduler.

                    Categorizing [flows](/concepts/flow-control/flow-control.md#flow) into workloads
                    allows for load-shedding to be "intelligent" compared to random rejections.
                    There are two aspects of this "intelligence":
                    * Scheduler can more precisely calculate concurrency if it understands
                      that flows belonging to different classes have different weights (for example, insert queries compared to select queries).
                    * Setting different priorities to different workloads lets the scheduler
                      avoid dropping important traffic during overload.

                    Each workload in this list specifies also a matcher that is used to
                    determine which flow will be categorized into which workload.
                    In case of multiple matching workloads, the first matching one will be used.
                    If none of workloads match, `default_workload` will be used.

                    :::info

                    See also [workload definition in the concepts
                    section](/concepts/flow-control/components/concurrency-limiter.md#workload).

                    :::

                items:
                    $ref: '#/definitions/SchedulerWorkload'
                    type: object
                type: array
                x-go-tag-validate: dive
        title: Scheduler parameters
        type: object
    SchedulerWorkload:
        description: Workload defines a class of requests that preferably have similar properties such as response latency or desired priority.
        properties:
            label_matcher:
                $ref: '#/definitions/LabelMatcher'
                description: |+
                    Label Matcher to select a Workload based on
                    [flow labels](/concepts/flow-control/flow-label.md).

                x-go-tag-validate: required
            parameters:
                $ref: '#/definitions/SchedulerWorkloadParameters'
                description: |+
                    Parameters associated with flows matching the label matcher.

                x-go-tag-validate: required
        type: object
    SchedulerWorkloadParameters:
        description: |-
            Parameters defines parameters such as priority, tokens and fairness key that
            are applicable to flows within a workload.
        properties:
            fairness_key:
                description: |-
                    Fairness key is a label key that can be used to provide fairness within a workload.
                    Any [flow label](/concepts/flow-control/flow-label.md) can be used here. For example, if
                    you have a classifier that sets `user` flow label, you might want to set
                    `fairness_key = "user"`.
                type: string
            priority:
                default: 0
                description: |+
                    $$
                    \text{virtual\_finish\_time} = \text{virtual\_time} + \left(\text{tokens} \cdot \left(\text{256} - \text{priority}\right)\right)
                    $$

                format: int64
                maximum: 255
                minimum: 0
                title: |-
                    Describes priority level of the requests within the workload.
                    Priority level ranges from 0 to 255.
                    Higher numbers means higher priority level.
                    Priority levels have non-linear effect on the workload scheduling. The following formula is used to determine the position of a request in the queue based on virtual finish time:
                type: integer
                x-go-tag-default: "0"
                x-go-tag-validate: gte=0,lte=255
            tokens:
                description: |-
                    Tokens determines the cost of admitting a single request the workload,
                    which is typically defined as milliseconds of response latency or
                    simply equal to 1 if the resource being accessed is constrained by the
                    number of requests (3rd party rate limiters).
                    This override is applicable only if tokens for the request aren't specified
                    in the request labels.
                format: uint64
                type: string
        type: object
    ServerToClient:
        properties:
            cancel_id:
                description: |-
                    Cancels in-flight request.

                    After cancellation, the response is not expected to be received, but
                    might happen that it will be received. If so, it should be ignored.
                format: uint64
                type: string
            request:
                $ref: '#/definitions/Request'
                description: |-
                    Make a request to client. Expect AgentToController message in the
                    future containing Response with the same id.
        type: object
    Service:
        description: |-
            Service contains information about single service discovered in agent group by a
            particular agent.
        properties:
            entities_count:
                format: int32
                type: integer
            name:
                type: string
        type: object
    ServiceSelector:
        description: |-
            :::info

            See also [FlowSelector overview](/concepts/flow-control/flow-selector.md).

            :::
        properties:
            agent_group:
                default: default
                description: |+
                    Which [agent-group](/concepts/flow-control/flow-selector.md#agent-group) this
                    selector applies to.

                    :::info

                    Agent Groups are used to scope policies to a subset of agents connected to the same controller.
                    This is especially useful in the Kubernetes sidecar installation because service discovery is switched off in that mode.
                    The agents within an agent group form a peer to peer cluster and constantly share state.

                    :::

                type: string
                x-go-tag-default: default
            service:
                default: any
                description: |+
                    The Fully Qualified Domain Name of the
                    [service](/concepts/flow-control/flow-selector.md) to select.

                    In Kubernetes, this is the FQDN of the Service object.

                    :::info

                    `any` matches all services.

                    :::

                    :::info

                    In the Kubernetes sidecar installation mode, service discovery is switched off by default.
                    To scope policies to services, the `service` should be set to `any` and instead, `agent_group` name should be used.

                    :::

                    :::info

                    An entity (for example, Kubernetes pod) might belong to multiple services.

                    :::

                type: string
                x-go-tag-default: any
        title: |-
            Describes which service a [flow control or observability
            component](/concepts/flow-control/flow-control.md#components) should apply
            to
        type: object
    ServicesList:
        properties:
            overlapping_services:
                items:
                    $ref: '#/definitions/OverlappingService'
                    type: object
                type: array
            services:
                items:
                    $ref: '#/definitions/Service'
                    type: object
                type: array
        type: object
    SignalGenerator:
        description: |-
            The _Signal Generator_ component generates a smooth and continuous signal
            by following a sequence of specified steps. Each step has two parameters:
            - `target_output`: The desired output value at the end of the step.
            - `duration`: The time it takes for the signal to change linearly from the
              previous step's `target_output` to the current step's `target_output`.

            The output signal starts at the `target_output` of the first step and
            changes linearly between steps based on their `duration`. The _Signal
            Generator_ can be controlled to move forwards, backwards, or reset to the
            beginning based on input signals.
        properties:
            in_ports:
                $ref: '#/definitions/SignalGeneratorIns'
            out_ports:
                $ref: '#/definitions/SignalGeneratorOuts'
            parameters:
                $ref: '#/definitions/SignalGeneratorParameters'
                description: |+
                    Parameters for the _Signal Generator_ component.

                x-go-tag-validate: required
        type: object
    SignalGeneratorIns:
        description: Inputs for the _Signal Generator_ component.
        properties:
            backward:
                $ref: '#/definitions/InPort'
                description: Whether to progress the _Signal Generator_ towards the previous step.
            forward:
                $ref: '#/definitions/InPort'
                description: Whether to progress the _Signal Generator_ towards the next step.
            reset:
                $ref: '#/definitions/InPort'
                description: Whether to reset the _Signal Generator_ to the first step.
        type: object
    SignalGeneratorOuts:
        description: Outputs for the _Signal Generator_ component.
        properties:
            at_end:
                $ref: '#/definitions/OutPort'
                description: A Boolean signal indicating whether the _Signal Generator_ is at the end of signal generation.
            at_start:
                $ref: '#/definitions/OutPort'
                description: A Boolean signal indicating whether the _Signal Generator_ is at the start of signal generation.
            output:
                $ref: '#/definitions/OutPort'
                description: The generated signal.
        type: object
    SignalGeneratorParameters:
        description: Parameters for the _Signal Generator_ component.
        properties:
            steps:
                items:
                    $ref: '#/definitions/SignalGeneratorParametersStep'
                    type: object
                minItems: 1
                type: array
                x-go-tag-validate: required,gt=0,dive
        required:
            - steps
        type: object
    SignalGeneratorParametersStep:
        properties:
            duration:
                description: |+
                    Duration for which the step is active.

                type: string
                x-go-tag-validate: required
            target_output:
                $ref: '#/definitions/ConstantSignal'
                description: The value of the step.
        required:
            - duration
        type: object
    SlabInfo:
        properties:
            allocated:
                format: int64
                type: string
            garbage:
                format: int64
                type: string
            inuse:
                format: int64
                type: string
        type: object
    SocketAddress:
        properties:
            address:
                description: The address for this socket.
                type: string
            port:
                description: The port for this socket.
                format: int64
                type: integer
            protocol:
                $ref: '#/definitions/SocketAddressProtocol'
        type: object
    SocketAddressProtocol:
        default: TCP
        enum:
            - TCP
            - UDP
        type: string
    Stats:
        properties:
            backups:
                additionalProperties:
                    $ref: '#/definitions/Partition'
                type: object
            cluster_coordinator:
                $ref: '#/definitions/Member'
            cluster_members:
                additionalProperties:
                    $ref: '#/definitions/Member'
                type: object
            cmdline:
                items:
                    type: string
                type: array
            d_maps:
                $ref: '#/definitions/DMaps'
            d_topics:
                $ref: '#/definitions/DTopics'
            member:
                $ref: '#/definitions/Member'
            network:
                $ref: '#/definitions/Network'
            partitions:
                additionalProperties:
                    $ref: '#/definitions/Partition'
                type: object
            release_version:
                type: string
            runtime:
                type: object
            uptime_seconds:
                format: int64
                type: string
        type: object
    Status:
        description: Status holds details about a status that can be reported to the registry.
        properties:
            error:
                $ref: '#/definitions/StatusError'
            message:
                $ref: '#/definitions/googleprotobufAny'
            timestamp:
                format: date-time
                type: string
        type: object
    StatusError:
        description: Error holds raw error message and its cause in a nested field.
        properties:
            message:
                type: string
        type: object
    Switcher:
        description: |-
            `on_signal` will be returned if switch input is valid and not equal to 0.0 ,
             otherwise `off_signal` will be returned.
        properties:
            in_ports:
                $ref: '#/definitions/SwitcherIns'
                description: Input ports for the Switcher component.
            out_ports:
                $ref: '#/definitions/SwitcherOuts'
                description: Output ports for the Switcher component.
        title: Type of Combinator that switches between `on_signal` and `off_signal` signals based on switch input
        type: object
    SwitcherIns:
        description: Inputs for the Switcher component.
        properties:
            off_signal:
                $ref: '#/definitions/InPort'
                description: Output signal when switch is invalid or 0.0.
            on_signal:
                $ref: '#/definitions/InPort'
                description: Output signal when switch is valid and not 0.0.
            switch:
                $ref: '#/definitions/InPort'
                description: Decides whether to return `on_signal` or `off_signal`.
        type: object
    SwitcherOuts:
        description: Outputs for the Switcher component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Selected signal (`on_signal` or `off_signal`).
        type: object
    UnaryOperator:
        description: |-
            $$
            \text{output} = \unary_operator{\text{input}}
            $$
        properties:
            in_ports:
                $ref: '#/definitions/UnaryOperatorIns'
                description: Input ports for the UnaryOperator component.
            operator:
                description: |+
                    Unary Operator to apply.

                    The unary operator can be one of the following:
                    * `abs`: Absolute value with the sign removed.
                    * `acos`: `arccosine`, in radians.
                    * `acosh`: Inverse hyperbolic cosine.
                    * `asin`: `arcsine`, in radians.
                    * `asinh`: Inverse hyperbolic sine.
                    * `atan`: `arctangent`, in radians.
                    * `atanh`: Inverse hyperbolic tangent.
                    * `cbrt`: Cube root.
                    * `ceil`: Least integer value greater than or equal to input signal.
                    * `cos`: `cosine`, in radians.
                    * `cosh`: Hyperbolic cosine.
                    * `erf`: Error function.
                    * `erfc`: Complementary error function.
                    * `erfcinv`: Inverse complementary error function.
                    * `erfinv`: Inverse error function.
                    * `exp`: The base-e exponential of input signal.
                    * `exp2`: The base-2 exponential of input signal.
                    * `expm1`: The base-e exponential of input signal minus 1.
                    * `floor`: Greatest integer value less than or equal to input signal.
                    * `gamma`: Gamma function.
                    * `j0`: Bessel function of the first kind of order 0.
                    * `j1`: Bessel function of the first kind of order 1.
                    * `lgamma`: Natural logarithm of the absolute value of the gamma function.
                    * `log`: Natural logarithm of input signal.
                    * `log10`: Base-10 logarithm of input signal.
                    * `log1p`: Natural logarithm of input signal plus 1.
                    * `log2`: Base-2 logarithm of input signal.
                    * `round`: Round to nearest integer.
                    * `roundtoeven`: Round to nearest integer, with ties going to the nearest even integer.
                    * `sin`: `sine`, in radians.
                    * `sinh`: Hyperbolic sine.
                    * `sqrt`: Square root.
                    * `tan`: `tangent`, in radians.
                    * `tanh`: Hyperbolic tangent.
                    * `trunc`: Truncate to integer.
                    * `y0`: Bessel function of the second kind of order 0.
                    * `y1`: Bessel function of the second kind of order 1.

                enum:
                    - abs
                    - acos
                    - acosh
                    - asin
                    - asinh
                    - atan
                    - atanh
                    - cbrt
                    - ceil
                    - cos
                    - cosh
                    - erf
                    - erfc
                    - erfcinv
                    - erfinv
                    - exp
                    - exp2
                    - expm1
                    - floor
                    - gamma
                    - j0
                    - j1
                    - lgamma
                    - log
                    - log10
                    - log1p
                    - log2
                    - round
                    - roundtoeven
                    - sin
                    - sinh
                    - sqrt
                    - tan
                    - tanh
                    - trunc
                    - y0
                    - y1
                type: string
                x-go-tag-validate: oneof=abs acos acosh asin asinh atan atanh cbrt ceil cos cosh erf erfc erfcinv erfinv exp exp2 expm1 floor gamma j0 j1 lgamma log log10 log1p log2 round roundtoeven sin sinh sqrt tan tanh trunc y0 y1
                x-oneof: abs | acos | acosh | asin | asinh | atan | atanh | cbrt | ceil | cos | cosh | erf | erfc | erfcinv | erfinv | exp | exp2 | expm1 | floor | gamma | j0 | j1 | lgamma | log | log10 | log1p | log2 | round | roundtoeven | sin | sinh | sqrt | tan | tanh | trunc | y0 | y1
            out_ports:
                $ref: '#/definitions/UnaryOperatorOuts'
                description: Output ports for the UnaryOperator component.
        title: Takes an input signal and emits the output after applying the specified unary operator
        type: object
    UnaryOperatorIns:
        description: Inputs for the UnaryOperator component.
        properties:
            input:
                $ref: '#/definitions/InPort'
                description: Input signal.
        type: object
    UnaryOperatorOuts:
        description: Outputs for the UnaryOperator component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: Output signal.
        type: object
    Variable:
        description: Component that emits a variable value as an output signal, can be defined in dynamic configuration.
        properties:
            default_config:
                $ref: '#/definitions/VariableDynamicConfig'
                description: |+
                    Default configuration.

                x-go-tag-validate: required
            dynamic_config_key:
                description: Configuration key for DynamicConfig.
                type: string
            out_ports:
                $ref: '#/definitions/VariableOuts'
                description: Output ports for the Variable component.
        type: object
    VariableDynamicConfig:
        properties:
            constant_signal:
                $ref: '#/definitions/ConstantSignal'
                x-go-tag-validate: required
        type: object
    VariableOuts:
        description: Outputs for the Variable component.
        properties:
            output:
                $ref: '#/definitions/OutPort'
                description: The value is emitted to the output port.
        type: object
    VersionInfo:
        properties:
            build_host:
                type: string
            build_os:
                type: string
            build_time:
                type: string
            git_branch:
                type: string
            git_commit_hash:
                type: string
            service:
                type: string
            version:
                type: string
        type: object
    googleprotobufAny:
        additionalProperties: {}
        description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }
                // or ...
                if (any.isSameTypeAs(Foo.getDefaultInstance())) {
                  foo = any.unpack(Foo.getDefaultInstance());
                }

            Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

            Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".

            JSON

            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        properties:
            '@type':
                description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                type: string
        type: object
    googleprotobufNullValue:
        default: NULL_VALUE
        description: |-
            `NullValue` is a singleton enumeration to represent the null value for the
            `Value` type union.

             The JSON representation for `NullValue` is JSON `null`.

             - NULL_VALUE: Null value.
        enum:
            - NULL_VALUE
        type: string
    googlerpcStatus:
        description: |-
            The `Status` type defines a logical error model that is suitable for
            different programming environments, including REST APIs and RPC APIs. It is
            used by [gRPC](https://github.com/grpc). Each `Status` message contains
            three pieces of data: error code, error message, and error details.

            You can find out more about this error model and how to work with it in the
            [API Design Guide](https://cloud.google.com/apis/design/errors).
        properties:
            code:
                description: |-
                    The status code, which should be an enum value of
                    [google.rpc.Code][google.rpc.Code].
                format: int32
                type: integer
            details:
                description: |-
                    A list of messages that carry the error details.  There is a common set of
                    message types for APIs to use.
                items:
                    $ref: '#/definitions/googleprotobufAny'
                    type: object
                type: array
            message:
                description: |-
                    A developer-facing error message, which should be in English. Any
                    user-facing error message should be localized and sent in the
                    [google.rpc.Status.details][google.rpc.Status.details] field, or localized
                    by the client.
                type: string
        type: object
info:
    title: Aperture API
    version: "1.0"
paths:
    /fluxninja/v1/controllerinfo:
        get:
            operationId: ControllerInfoService_GetControllerInfo
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/ControllerInfo'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - ControllerInfoService
    /fluxninja/v1/report:
        post:
            operationId: FluxNinjaService_Report
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/ReportRequest'
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/ReportResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            summary: Report accepts information about agents' health and applied configurations/policies.
            tags:
                - FluxNinjaService
    /v1/autoscale/kubernetes/controlpoints:
        get:
            operationId: AutoScaleKubernetesControlPointsService_GetControlPoints
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/AutoScaleKubernetesControlPoints'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/discovery/entities:
        get:
            operationId: EntitiesService_GetEntities
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/Entities'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/discovery/entities/ip-address/{ip_address}:
        get:
            operationId: EntitiesService_GetEntityByIPAddress
            parameters:
                - in: path
                  name: ip_address
                  required: true
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/Entity'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/discovery/entities/name/{name}:
        get:
            operationId: EntitiesService_GetEntityByName
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/Entity'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/distcache/stats:
        get:
            operationId: DistCacheService_GetStats
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/Stats'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/dynamic-configs/{policy_name}:
        post:
            operationId: PolicyService_PostDynamicConfig
            parameters:
                - in: path
                  name: policy_name
                  required: true
                  type: string
                  x-go-tag-validate: required
                - in: body
                  name: body
                  required: true
                  schema:
                    description: PostDynamicConfigRequest is a request to patch dynamic config for Policy.
                    properties:
                        dynamic_config:
                            type: object
                            x-go-tag-validate: required
                    type: object
            responses:
                "200":
                    description: A successful response.
                    schema:
                        properties: {}
                        type: object
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            summary: PostDynamicConfig creates/updates dynamic config based on the provided request.
            tags:
                - aperture-controller
    /v1/flowcontrol/checkhttp:
        post:
            operationId: FlowControlServiceHTTP_CheckHTTP
            parameters:
                - in: body
                  name: body
                  required: true
                  schema:
                    $ref: '#/definitions/CheckHTTPRequest'
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/CheckHTTPResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/flowcontrol/controlpoints:
        get:
            operationId: FlowControlPointsService_GetControlPoints
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/FlowControlPoints'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/flowcontrol/preview/http_requests/{control_point}:
        post:
            operationId: FlowPreviewService_PreviewHTTPRequests2
            parameters:
                - description: Control point to preview.
                  in: path
                  name: control_point
                  required: true
                  type: string
                - description: Flow labels to match. Optional parameter for advanced filtering.
                  in: body
                  name: label_matcher
                  required: true
                  schema:
                    $ref: '#/definitions/LabelMatcher'
                - description: Number of samples to collect.
                  format: int64
                  in: query
                  name: samples
                  required: false
                  type: string
                - description: Service to preview.
                  in: query
                  name: service
                  required: false
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/PreviewHTTPRequestsResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/flowcontrol/preview/http_requests/{service}/{control_point}:
        post:
            operationId: FlowPreviewService_PreviewHTTPRequests
            parameters:
                - description: Service to preview.
                  in: path
                  name: service
                  required: true
                  type: string
                - description: Control point to preview.
                  in: path
                  name: control_point
                  required: true
                  type: string
                - description: Flow labels to match. Optional parameter for advanced filtering.
                  in: body
                  name: label_matcher
                  required: true
                  schema:
                    $ref: '#/definitions/LabelMatcher'
                - description: Number of samples to collect.
                  format: int64
                  in: query
                  name: samples
                  required: false
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/PreviewHTTPRequestsResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/flowcontrol/preview/labels/{control_point}:
        post:
            operationId: FlowPreviewService_PreviewFlowLabels2
            parameters:
                - description: Control point to preview.
                  in: path
                  name: control_point
                  required: true
                  type: string
                - description: Flow labels to match. Optional parameter for advanced filtering.
                  in: body
                  name: label_matcher
                  required: true
                  schema:
                    $ref: '#/definitions/LabelMatcher'
                - description: Number of samples to collect.
                  format: int64
                  in: query
                  name: samples
                  required: false
                  type: string
                - description: Service to preview.
                  in: query
                  name: service
                  required: false
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/PreviewFlowLabelsResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/flowcontrol/preview/labels/{service}/{control_point}:
        post:
            operationId: FlowPreviewService_PreviewFlowLabels
            parameters:
                - description: Service to preview.
                  in: path
                  name: service
                  required: true
                  type: string
                - description: Control point to preview.
                  in: path
                  name: control_point
                  required: true
                  type: string
                - description: Flow labels to match. Optional parameter for advanced filtering.
                  in: body
                  name: label_matcher
                  required: true
                  schema:
                    $ref: '#/definitions/LabelMatcher'
                - description: Number of samples to collect.
                  format: int64
                  in: query
                  name: samples
                  required: false
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/PreviewFlowLabelsResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/info/host:
        get:
            operationId: InfoService_Host
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/HostInfo'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
                - aperture-controller
    /v1/info/process:
        get:
            operationId: InfoService_Process
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/ProcessInfo'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
                - aperture-controller
    /v1/info/version:
        get:
            operationId: InfoService_Version
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/VersionInfo'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
                - aperture-controller
    /v1/peers:
        get:
            operationId: PeerDiscoveryService_GetPeers
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/Peers'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/peers/address/{address}:
        get:
            operationId: PeerDiscoveryService_GetPeer
            parameters:
                - in: path
                  name: address
                  required: true
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/Peer'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
    /v1/policies:
        get:
            operationId: PolicyService_GetPolicies
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/GetPoliciesResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            summary: GetPolicies returns all policies.
            tags:
                - aperture-controller
    /v1/policies/{name}:
        delete:
            operationId: PolicyService_DeletePolicy
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        properties: {}
                        type: object
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            summary: DeletePolicy removes a policy with the specified name.
            tags:
                - aperture-controller
        get:
            operationId: PolicyService_GetPolicy
            parameters:
                - in: path
                  name: name
                  required: true
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/GetPolicyResponse'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            summary: GetPolicy returns a policy with the specified name.
            tags:
                - aperture-controller
    /v1/policies/{policy_name}:
        patch:
            operationId: PolicyService_UpsertPolicy2
            parameters:
                - in: path
                  name: policy_name
                  required: true
                  type: string
                  x-go-tag-validate: required
                - in: body
                  name: body
                  required: true
                  schema:
                    description: PostPolicyRequest is a request to create or update Policy.
                    properties:
                        policy:
                            $ref: '#/definitions/Policy'
                            x-go-tag-validate: required
                        update_mask:
                            description: The paths to update.
                            type: string
                    type: object
            responses:
                "200":
                    description: A successful response.
                    schema:
                        properties: {}
                        type: object
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            summary: UpsertPolicy creates/updates policy based on the provided request.
            tags:
                - aperture-controller
        post:
            operationId: PolicyService_UpsertPolicy
            parameters:
                - in: path
                  name: policy_name
                  required: true
                  type: string
                  x-go-tag-validate: required
                - in: body
                  name: body
                  required: true
                  schema:
                    description: PostPolicyRequest is a request to create or update Policy.
                    properties:
                        policy:
                            $ref: '#/definitions/Policy'
                            x-go-tag-validate: required
                        update_mask:
                            description: The paths to update.
                            type: string
                    type: object
            responses:
                "200":
                    description: A successful response.
                    schema:
                        properties: {}
                        type: object
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            summary: UpsertPolicy creates/updates policy based on the provided request.
            tags:
                - aperture-controller
    /v1/status/{path}:
        get:
            operationId: StatusService_GetGroupStatus
            parameters:
                - in: path
                  name: path
                  pattern: .+
                  required: true
                  type: string
            responses:
                "200":
                    description: A successful response.
                    schema:
                        $ref: '#/definitions/GroupStatus'
                default:
                    description: An unexpected error response.
                    schema:
                        $ref: '#/definitions/googlerpcStatus'
            tags:
                - aperture-agent
                - aperture-controller
produces:
    - application/json
swagger: "2.0"
tags:
    - name: AutoScaleKubernetesControlPointsService
    - name: EntitiesService
    - name: FlowControlPointsService
    - name: FlowPreviewService
    - name: PolicyService
    - name: Controller
    - name: DistCacheService
    - name: FlowControlService
    - name: FlowControlServiceHTTP
    - name: InfoService
    - name: PeerDiscoveryService
    - name: StatusService
    - name: FluxNinjaService
    - name: ControllerInfoService
    - name: Coordinator
