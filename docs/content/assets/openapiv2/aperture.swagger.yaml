swagger: "2.0"
info:
  title: Aperture API
  version: "1.0"
tags:
  - name: EntityCacheService
  - name: FlowControlService
  - name: InfoService
  - name: PeerDiscoveryService
  - name: PolicyService
  - name: StatusService
  - name: FluxNinjaService
  - name: ControllerInfoService
  - name: Authorization
consumes:
  - application/json
produces:
  - application/json
paths:
  /plugins/fluxninja/v1/controllerinfo:
    get:
      operationId: ControllerInfoService_GetControllerInfo
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ControllerInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      tags:
        - ControllerInfoService
  /plugins/fluxninja/v1/report:
    post:
      summary: Report accepts information about agents' health and applied configurations/policies.
      operationId: FluxNinjaService_Report
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ReportResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1ReportRequest'
      tags:
        - FluxNinjaService
  /v1/entities:
    get:
      operationId: EntityCacheService_GetEntityCache
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1EntityCache'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      tags:
        - aperture-agent
  /v1/entities/ip-address/{ip_address}:
    get:
      operationId: EntityCacheService_GetEntityByIPAddress
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1Entity'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: ip_address
          in: path
          required: true
          type: string
      tags:
        - aperture-agent
  /v1/entities/name/{name}:
    get:
      operationId: EntityCacheService_GetEntityByName
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1Entity'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: name
          in: path
          required: true
          type: string
      tags:
        - aperture-agent
  /v1/info/host:
    get:
      operationId: InfoService_Host
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1HostInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      tags:
        - aperture-agent
        - aperture-controller
  /v1/info/process:
    get:
      operationId: InfoService_Process
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ProcessInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      tags:
        - aperture-agent
        - aperture-controller
  /v1/info/version:
    get:
      operationId: InfoService_Version
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1VersionInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      tags:
        - aperture-agent
        - aperture-controller
  /v1/peers:
    get:
      operationId: PeerDiscoveryService_GetPeers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1Peers'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      tags:
        - aperture-agent
  /v1/peers/address/{address}:
    get:
      operationId: PeerDiscoveryService_GetPeer
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/peersv1Peer'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: address
          in: path
          required: true
          type: string
      tags:
        - aperture-agent
  /v1/policies:
    get:
      operationId: PolicyService_GetPolicies
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetPoliciesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      tags:
        - aperture-controller
  /v1/status/{path}:
    get:
      operationId: StatusService_GetGroupStatus
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GroupStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: path
          in: path
          required: true
          type: string
          pattern: .+
      tags:
        - aperture-agent
        - aperture-controller
definitions:
  AttributeContextHttpRequest:
    type: object
    properties:
      body:
        type: string
        description: The HTTP request body.
      fragment:
        type: string
        description: |-
          This field is always empty, and exists for compatibility reasons. The URL fragment is
          not submitted as part of HTTP requests; it is unknowable.
      headers:
        type: object
        additionalProperties:
          type: string
        description: |-
          The HTTP request headers. If multiple headers share the same key, they
          must be merged according to the HTTP spec. All header keys must be
          lower-cased, because HTTP header keys are case-insensitive.
      host:
        type: string
        description: The HTTP request ``Host`` or '`Authority`` header value.
      id:
        type: string
        description: |-
          The unique ID for a request, which can be propagated to downstream
          systems. The ID should have low probability of collision
          within a single day for a specific service.
          For HTTP requests, it should be X-Request-ID or equivalent.
      method:
        type: string
        description: The HTTP request method, such as ``GET``, ``POST``.
      path:
        type: string
        description: |-
          The request target, as it appears in the first line of the HTTP request. This includes
          the URL path and query-string. No decoding is performed.
      protocol:
        type: string
        description: |-
          The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".

          See :repo:`headers.h:ProtocolStrings <source/common/http/headers.h>` for a list of all
          possible values.
      query:
        type: string
        description: |-
          This field is always empty, and exists for compatibility reasons. The HTTP URL query is
          included in ``path`` field.
      raw_body:
        type: string
        format: byte
        description: |-
          The HTTP request body in bytes. This is used instead of
          :ref:`body <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.body>` when
          :ref:`pack_as_bytes <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.BufferSettings.pack_as_bytes>`
          is set to true.
      scheme:
        type: string
        description: The HTTP URL scheme, such as ``http`` and ``https``.
      size:
        type: string
        format: int64
        description: The HTTP request size in bytes. If unknown, it must be -1.
    title: |-
      This message defines attributes for an HTTP request.
      HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
      [#next-free-field: 13]
  AttributeContextRequest:
    type: object
    properties:
      http:
        $ref: '#/definitions/AttributeContextHttpRequest'
        description: Represents an HTTP request or an HTTP-like request.
      time:
        type: string
        format: date-time
        description: The timestamp when the proxy receives the first byte of the request.
    description: Represents a network request, such as an HTTP request.
  CheckResponseDecisionType:
    type: string
    enum:
      - DECISION_TYPE_ACCEPTED
      - DECISION_TYPE_REJECTED
    default: DECISION_TYPE_ACCEPTED
    description: DecisionType contains fields that represent decision made by Check call.
  CheckResponseRejectReason:
    type: string
    enum:
      - REJECT_REASON_NONE
      - REJECT_REASON_RATE_LIMITED
      - REJECT_REASON_CONCURRENCY_LIMITED
    default: REJECT_REASON_NONE
    description: RejectReason contains fields that give further information about rejection.
  EntityCacheEntities:
    type: object
    properties:
      entities:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1Entity'
    description: Entities defines mapping of entities.
  FluxMeterExponentialBuckets:
    type: object
    properties:
      count:
        type: integer
        format: int32
        description: Number of buckets.
        x-go-validate: gt=0
      factor:
        type: number
        format: double
        description: Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.
        x-go-validate: gt=1.0
      start:
        type: number
        format: double
        description: Upper bound of the lowest bucket.
        x-go-validate: gt=0
    description: |-
      ExponentialBuckets creates `count` number of buckets where the lowest bucket has an upper bound of `start`
      and each following bucket's upper bound is `factor` times the previous bucket's upper bound. The final +inf
      bucket is not counted.
  FluxMeterExponentialBucketsRange:
    type: object
    properties:
      count:
        type: integer
        format: int32
        description: Number of buckets.
        x-go-validate: gt=0
      max:
        type: number
        format: double
        description: Highest bucket.
      min:
        type: number
        format: double
        description: Lowest bucket.
        x-go-validate: gt=0
    description: |-
      ExponentialBucketsRange creates `count` number of buckets where the lowest bucket is `min` and the highest
      bucket is `max`. The final +inf bucket is not counted.
  FluxMeterLinearBuckets:
    type: object
    properties:
      count:
        type: integer
        format: int32
        description: Number of buckets.
        x-go-validate: gt=0
      start:
        type: number
        format: double
        description: Upper bound of the lowest bucket.
      width:
        type: number
        format: double
        description: Width of each bucket.
    description: |-
      LinearBuckets creates `count` number of buckets, each `width` wide, where the lowest bucket has an
      upper bound of `start`. The final +inf bucket is not counted.
  FluxMeterStaticBuckets:
    type: object
    properties:
      buckets:
        type: array
        items:
          type: number
          format: double
        x-go-default: '[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]'
    description: StaticBuckets holds the static value of the buckets where latency histogram will be stored.
  HeaderValueOptionHeaderAppendAction:
    type: string
    enum:
      - APPEND_IF_EXISTS_OR_ADD
      - ADD_IF_ABSENT
      - OVERWRITE_IF_EXISTS_OR_ADD
    default: APPEND_IF_EXISTS_OR_ADD
    description: |-
      Describes the supported actions types for header append action.

       - APPEND_IF_EXISTS_OR_ADD: This action will append the specified value to the existing values if the header
      already exists. If the header doesn't exist then this will add the header with
      specified key and value.
       - ADD_IF_ABSENT: This action will add the header if it doesn't already exist. If the header
      already exists then this will be a no-op.
       - OVERWRITE_IF_EXISTS_OR_ADD: This action will overwrite the specified value by discarding any existing values if
      the header already exists. If the header doesn't exist then this will add the header
      with specified key and value.
  LimiterDecisionConcurrencyLimiterInfo:
    type: object
    properties:
      workload_index:
        type: string
  LimiterDecisionLimiterReason:
    type: string
    enum:
      - LIMITER_REASON_UNSPECIFIED
      - LIMITER_REASON_KEY_NOT_FOUND
    default: LIMITER_REASON_UNSPECIFIED
  LimiterDecisionRateLimiterInfo:
    type: object
    properties:
      current:
        type: string
        format: int64
      label:
        type: string
      remaining:
        type: string
        format: int64
  MatchExpressionList:
    type: object
    properties:
      of:
        type: array
        items:
          $ref: '#/definitions/v1MatchExpression'
        description: List of subexpressions of the match expression.
    description: 'eg. {any: {of: [expr1, expr2]}}.'
    title: List of MatchExpressions that is used for all/any matching
  RateLimiterLazySync:
    type: object
    properties:
      enabled:
        type: boolean
        title: Enables lazy sync
        x-go-default: false
      num_sync:
        type: integer
        format: int64
        description: Number of times to lazy sync within the _limit\_reset\_interval_.
        x-go-default: 5
        x-go-validate: gt=0
  RateLimiterOverride:
    type: object
    properties:
      label_value:
        type: string
        description: Value of the label for which the override should be applied.
        x-go-validate: required
      limit_scale_factor:
        type: number
        format: double
        description: Amount by which the _in\_ports.limit_ should be multiplied for this label value.
        x-go-default: 1
  RuleRego:
    type: object
    properties:
      query:
        type: string
        description: |-
          Query string to extract a value (eg. `data.<mymodulename>.<variablename>`).

          Note: The module name must match the package name from the "source".
        x-go-validate: required
      source:
        type: string
        description: |-
          Source code of the rego module.

          Note: Must include a "package" declaration.
        x-go-validate: required
    description: High-level extractor-based rules are compiled into a single rego query.
    title: Raw rego rules are compiled 1:1 to rego queries
  SchedulerWorkload:
    type: object
    properties:
      label_matcher:
        $ref: '#/definitions/v1LabelMatcher'
        description: |-
          Label Matcher to select a Workload based on
          [flow labels](/concepts/flow-control/flow-label.md).
        x-go-validate: required
      workload_parameters:
        $ref: '#/definitions/SchedulerWorkloadParameters'
        description: WorkloadParameters associated with flows matching the label matcher.
        x-go-validate: required
    description: Workload defines a class of requests that preferably have similar properties such as response latency or desired priority.
  SchedulerWorkloadParameters:
    type: object
    properties:
      fairness_key:
        type: string
        description: |-
          Fairness key is a label key that can be used to provide fairness within a workload.
          Any [flow label](/concepts/flow-control/flow-label.md) can be used here. Eg. if
          you have a classifier that sets `user` flow label, you might want to set
          `fairness_key = "user"`.
      priority:
        type: integer
        format: int64
        description: |-
          Describes priority level of the requests within the workload.
          Priority level ranges from 0 to 255.
          Higher numbers means higher priority level.
        x-go-validate: gte=0,lte=255
      tokens:
        type: string
        format: uint64
        description: |-
          Tokens determines the cost of admitting a single request the workload, which is typically defined as milliseconds of response latency.
          This override is applicable only if `auto_tokens` is set to false.
        x-go-default: 1
    description: WorkloadParameters defines parameters such as priority, tokens and fairness key that are applicable to flows within a workload.
  SocketAddressProtocol:
    type: string
    enum:
      - TCP
      - UDP
    default: TCP
  authv3CheckResponse:
    type: object
    properties:
      denied_response:
        $ref: '#/definitions/v3DeniedHttpResponse'
        description: Supplies http attributes for a denied response.
      dynamic_metadata:
        type: object
        description: |-
          - :ref:`envoy.filters.http.ext_authz <config_http_filters_ext_authz_dynamic_metadata>` for HTTP filter.
          - :ref:`envoy.filters.network.ext_authz <config_network_filters_ext_authz_dynamic_metadata>` for network filter.
        title: |-
          Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
          filter. This metadata lives in a namespace specified by the canonical name of extension filter
          that requires it:
      ok_response:
        $ref: '#/definitions/v3OkHttpResponse'
        description: Supplies http attributes for an ok response.
      status:
        $ref: '#/definitions/googlerpcStatus'
        description: |-
          Status ``OK`` allows the request. Any other status indicates the request should be denied, and
          for HTTP filter, if not overridden by :ref:`denied HTTP response status <envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status>`
          Envoy sends ``403 Forbidden`` HTTP status code by default.
    description: Intended for gRPC and Network Authorization servers ``only``.
  flowcontrolv1CheckResponse:
    type: object
    properties:
      classifier_infos:
        type: array
        items:
          $ref: '#/definitions/v1ClassifierInfo'
        description: classifiers that were matched for this request.
      control_point_info:
        $ref: '#/definitions/v1ControlPointInfo'
        title: control_point of request
      decision_type:
        $ref: '#/definitions/CheckResponseDecisionType'
        description: decision_type contains what the decision was.
      end:
        type: string
        format: date-time
        title: end timestamp
      error:
        $ref: '#/definitions/v1CheckResponseError'
        description: error information.
      flow_label_keys:
        type: array
        items:
          type: string
        description: flow label keys that were matched for this request.
      flux_meter_infos:
        type: array
        items:
          $ref: '#/definitions/v1FluxMeterInfo'
        description: flux meters that were matched for this request.
      limiter_decisions:
        type: array
        items:
          $ref: '#/definitions/v1LimiterDecision'
        description: limiter_decisions contains information about decision made by each limiter.
      reject_reason:
        $ref: '#/definitions/CheckResponseRejectReason'
        description: reject_reason contains the reason for the rejection.
      services:
        type: array
        items:
          type: string
        title: services that matched
      start:
        type: string
        format: date-time
        title: start timestamp
      telemetry_flow_labels:
        type: object
        additionalProperties:
          type: string
        description: telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
    description: CheckResponse contains fields that represent decision made by Check call.
  googlerpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
  peersv1Peer:
    type: object
    properties:
      address:
        type: string
      hostname:
        type: string
      services:
        type: object
        additionalProperties:
          type: string
    description: Peer holds peer info and services.
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON

      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

       The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  statusv1Status:
    type: object
    properties:
      error:
        $ref: '#/definitions/v1ErrorDetails'
      message:
        $ref: '#/definitions/protobufAny'
      timestamp:
        type: string
        format: date-time
    description: |-
      Status holds details about a status that can be reported to the registry. The
      details can either be a message (Any) or error (ErrorDetails).
  v1AddressExtractor:
    type: object
    properties:
      from:
        type: string
        description: Attribute path pointing to some string - eg. "source.address".
        x-go-validate: required
    description: |-
      IP addresses in attribute context are defined as objects with separate ip and port fields.
      This is a helper to display an address as a single string.

      Note: Use with care, as it might accidentally introduce a high-cardinality flow label values.

      [ext-authz-address]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address

      Example:
      ```yaml
      from: "source.address # or destination.address"
      ```
    title: Display an [Address][ext-authz-address] as a single string, eg. `<ip>:<port>`
  v1ArithmeticCombinator:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/v1ArithmeticCombinatorIns'
        description: Input ports for the Arithmetic Combinator component.
      operator:
        type: string
        description: |-
          Operator of the arithmetic operation.

          The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
          In case of XOR and bitshifts, value of signals is cast to integers before performing the operation.
        x-go-validate: oneof=add sub mul div xor lshift rshift
      out_ports:
        $ref: '#/definitions/v1ArithmeticCombinatorOuts'
        description: Output ports for the Arithmetic Combinator component.
    title: Type of combinator that computes the arithmetic operation on the operand signals
  v1ArithmeticCombinatorIns:
    type: object
    properties:
      lhs:
        $ref: '#/definitions/v1InPort'
        description: Left hand side of the arithmetic operation.
      rhs:
        $ref: '#/definitions/v1InPort'
        description: Right hand side of the arithmetic operation.
    description: Inputs for the Arithmetic Combinator component.
  v1ArithmeticCombinatorOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Result of arithmetic operation.
    description: Outputs for the Arithmetic Combinator component.
  v1CheckResponseError:
    type: string
    enum:
      - ERROR_NONE
      - ERROR_MISSING_TRAFFIC_DIRECTION
      - ERROR_INVALID_TRAFFIC_DIRECTION
      - ERROR_CONVERT_TO_MAP_STRUCT
      - ERROR_CONVERT_TO_REGO_AST
      - ERROR_CLASSIFY
    default: ERROR_NONE
    description: Error information.
  v1Circuit:
    type: object
    properties:
      components:
        type: array
        items:
          $ref: '#/definitions/v1Component'
        description: Defines a signal processing graph as a list of components.
      evaluation_interval:
        type: string
        description: |-
          Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
          This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
        x-go-default: 0.5s
    description: |-
      :::info
      See also [Circuit overview](/concepts/policy/circuit.md).
      :::

      Signals flow between components via ports.
      As signals traverse the circuit, they get processed, stored within components or get acted upon (e.g. load-shed, rate-limit, auto-scale etc.).
      Circuit is evaluated periodically in order to respond to changes in signal readings.

      :::info
      **Signal**

      Signals are floating-point values.

      A signal can also have a special **Invalid** value. It's usually used to
      communicate that signal doesn't have a meaningful value at the moment, eg.
      [PromQL](#v1-prom-q-l) emits such a value if it cannot execute a query.
      Components know when their input signals are invalid and can act
      accordingly. They can either propagate the invalidness, by making their
      output itself invalid (like eg.
      [ArithmeticCombinator](#v1-arithmetic-combinator)) or use some different
      logic, like eg. [Extrapolator](#v1-extrapolator). Refer to a component's
      docs on how exactly it handles invalid inputs.
      :::
    title: Circuit is defined as a dataflow graph of inter-connected components
  v1Classifier:
    type: object
    properties:
      rules:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1Rule'
        description: |-
          A map of {key, value} pairs mapping from
          [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
          how to extract and propagate flow labels with that key.
        x-go-validate: required,gt=0,dive,keys,required,endkeys,required
      selector:
        $ref: '#/definitions/v1Selector'
        description: Defines where to apply the flow classification rule.
        x-go-validate: required
    description: |-
      :::info
      See also [Classifier overview](/concepts/flow-control/flow-classifier.md).
      :::

      Example:
      ```yaml
      selector:
        service_selector:
          service: service1.default.svc.cluster.local
        flow_selector:
          control_point:
            traffic: ingress
      rules:
        user:
          extractor:
            from: request.http.headers.user
      ```
    title: Set of classification rules sharing a common selector
  v1ClassifierInfo:
    type: object
    properties:
      classifier_index:
        type: string
        format: int64
      error:
        $ref: '#/definitions/v1ClassifierInfoError'
      label_key:
        type: string
      policy_hash:
        type: string
      policy_name:
        type: string
    description: ClassifierInfo describes details for each ClassifierInfo.
  v1ClassifierInfoError:
    type: string
    enum:
      - ERROR_NONE
      - ERROR_EVAL_FAILED
      - ERROR_EMPTY_RESULTSET
      - ERROR_AMBIGUOUS_RESULTSET
      - ERROR_MULTI_EXPRESSION
      - ERROR_EXPRESSION_NOT_MAP
    default: ERROR_NONE
    description: Error information.
  v1CommonAttributes:
    type: object
    properties:
      component_index:
        type: string
        format: int64
        description: The index of Component of within the circuit or classifier index.
      policy_hash:
        type: string
        description: Hash of the entire Policy spec.
      policy_name:
        type: string
        description: Name of the Policy.
  v1Component:
    type: object
    properties:
      arithmetic_combinator:
        $ref: '#/definitions/v1ArithmeticCombinator'
        description: Applies the given operator on input operands (signals) and emits the result.
      concurrency_limiter:
        $ref: '#/definitions/v1ConcurrencyLimiter'
        description: Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
      constant:
        $ref: '#/definitions/v1Constant'
        description: Emits a constant signal.
      decider:
        $ref: '#/definitions/v1Decider'
        description: Decider emits the binary result of comparison operator on two operands.
      ema:
        $ref: '#/definitions/v1EMA'
        description: Exponential Moving Average filter.
      extrapolator:
        $ref: '#/definitions/v1Extrapolator'
        description: Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
      first_valid:
        $ref: '#/definitions/v1FirstValid'
        description: Picks the first valid input signal and emits it.
      gradient_controller:
        $ref: '#/definitions/v1GradientController'
        description: |-
          Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
          This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
      max:
        $ref: '#/definitions/v1Max'
        description: Emits the maximum of the input signals.
      min:
        $ref: '#/definitions/v1Min'
        description: Emits the minimum of the input signals.
      promql:
        $ref: '#/definitions/v1PromQL'
        description: Periodically runs a Prometheus query in the background and emits the result.
      rate_limiter:
        $ref: '#/definitions/v1RateLimiter'
        description: Rate Limiter provides service protection by applying rate limiter.
      sink:
        $ref: '#/definitions/v1Sink'
        description: Sink is a sink component that does nothing.
      sqrt:
        $ref: '#/definitions/v1Sqrt'
        description: Takes an input signal and emits the square root of the input signal.
      switcher:
        $ref: '#/definitions/v1Switcher'
        description: Switcher acts as a switch that emits one of the two signals based on third signal.
    description: |-
      :::info
      See also [Components overview](/concepts/policy/circuit.md#components).
      :::

      Signals flow into the components via input ports and results are emitted on output ports.
      Components are wired to each other based on signal names forming an execution graph of the circuit.

      :::note
      Loops are broken by the runtime at the earliest component index that is part of the loop.
      The looped signals are saved in the tick they are generated and served in the subsequent tick.
      :::

      There are three categories of components:
      * "source" components – they take some sort of input from "the real world" and output
        a signal based on this input. Example: [PromQL](#v1-prom-q-l). In the UI
        they're represented by green color.
      * signal processor components – "pure" components that don't interact with the "real world".
        Examples: [GradientController](#v1-gradient-controller), [Max](#v1-max).
        :::note
        Signal processor components's output can depend on their internal state, in addition to the inputs.
        Eg. see the [Exponential Moving Average filter](#v1-e-m-a).
        :::
      * "sink" components – they affect the real world.
        [ConcurrencyLimiter.LoadActuator](#v1-concurrency-limiter) and [RateLimiter](#v1-rate-limiter).
        In the UI, represented by orange color.  Sink components usually come in pairs with a
        "sources" component which emits a feedback signal, like
        `accepted_concurrency` emitted by ConcurrencyLimiter.Scheduler.

      :::tip
      Sometimes you may want to use a constant value as one of component's inputs.
      You can create an input port containing the constant value instead of being connected to a signal.
      To do so, use the [InPort](#v1-in_port)'s .withConstantValue(constant_value) method.
      If You need to provide the same constant signal to multiple components,
      You can use the [Constant](#v1-constant) component.
      :::

      See also [Policy](#v1-policy) for a higher-level explanation of circuits.
    title: Computational block that form the circuit
  v1ConcurrencyLimiter:
    type: object
    properties:
      load_actuator:
        $ref: '#/definitions/v1LoadActuator'
        description: |-
          Actuator based on limiting the accepted concurrency under incoming concurrency * load multiplier.

          Actuation strategy defines the input signal that will drive the scheduler.
      scheduler:
        $ref: '#/definitions/v1Scheduler'
        description: |-
          Configuration of Weighted Fair Queuing-based workload scheduler.

          Contains configuration of per-agent scheduler, and also defines some
          output signals.
        x-go-validate: required
      selector:
        $ref: '#/definitions/v1Selector'
        description: Selector decides the service and flows at which the concurrency limiter is applied.
        x-go-validate: required
    description: |-
      :::info
      See also [Concurrency Limiter overview](/concepts/flow-control/concurrency-limiter.md).
      :::

      It is based on the actuation strategy (e.g. load actuator) and workload scheduling which is based on Weighted Fair Queuing principles.
      Concurrency is calculated in terms of total tokens which translate to (avg. latency \* in-flight requests), i.e. Little's Law.

      ConcurrencyLimiter configuration is split into two parts: An actuation
      strategy and a scheduler. Right now, only `load_actuator` strategy is available.
    title: Concurrency Limiter is an actuator component that regulates flows in order to provide active service protection
  v1Constant:
    type: object
    properties:
      out_ports:
        $ref: '#/definitions/v1ConstantOuts'
        description: Output ports for the Constant component.
      value:
        type: number
        format: double
        description: The constant value to be emitted.
    title: Component that emits a constant value as an output signal
  v1ConstantOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: The constant value is emitted to the output port.
    description: Outputs for the Constant component.
  v1ControlPoint:
    type: object
    properties:
      feature:
        type: string
        description: |-
          Name of Aperture SDK's feature.
          Feature corresponds to a block of code that can be "switched off" which usually is a "named opentelemetry's Span".

          Note: Flowcontrol only.
        x-go-validate: required
      traffic:
        type: string
        description: |-
          Type of traffic service, either "ingress" or "egress".
          Apply the policy to the whole incoming/outgoing traffic of a service.
          Usually powered by integration with a proxy (like envoy) or a web framework.

          * Flowcontrol: Blockable atom here is a single HTTP-transaction.
          * Classification: Apply the classification rules to every incoming/outgoing request and attach the resulting flow labels to baggage and telemetry.
        x-go-validate: required,oneof=ingress egress
    description: |-
      Identifies control point within a service that the rule or policy should apply to.
      Controlpoint is either a library feature name or one of ingress/egress traffic control point.
  v1ControlPointInfo:
    type: object
    properties:
      feature:
        type: string
      type:
        $ref: '#/definitions/v1ControlPointInfoType'
  v1ControlPointInfoType:
    type: string
    enum:
      - TYPE_UNKNOWN
      - TYPE_FEATURE
      - TYPE_INGRESS
      - TYPE_EGRESS
    default: TYPE_UNKNOWN
    description: Type contains fields that represent type of ControlPointInfo.
  v1ControllerDynamicConfig:
    type: object
    properties:
      manual_mode:
        type: boolean
        description: |-
          Decides whether the controller runs in "manual_mode".
          In manual mode, the controller does not adjust the control variable I.E. emits the same output as the control variable input.
        x-go-default: false
    title: Dynamic Configuration for a Controller
  v1ControllerInfo:
    type: object
    properties:
      id:
        type: string
  v1Decider:
    type: object
    properties:
      false_for:
        type: string
        description: |-
          Duration of time to wait before a transition to false state.
          If the duration is zero, the transition will happen instantaneously.
        x-go-default: 0s
      in_ports:
        $ref: '#/definitions/v1DeciderIns'
        description: Input ports for the Decider component.
      operator:
        type: string
        description: Comparison operator that computes operation on lhs and rhs input signals.
        x-go-validate: oneof=gt lt gte lte eq neq
      out_ports:
        $ref: '#/definitions/v1DeciderOuts'
        description: Output ports for the Decider component.
      true_for:
        type: string
        description: |-
          Duration of time to wait before a transition to true state.
          If the duration is zero, the transition will happen instantaneously.
        x-go-default: 0s
    description: |-
      The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.

      This component also supports time-based response, i.e. the output
      transitions between 1.0 or 0.0 signal if the decider condition is
      true or false for at least "true_for" or "false_for" duration. If
      `true_for` and `false_for` durations are zero then the transitions are
      instantaneous.
    title: Type of combinator that computes the comparison operation on lhs and rhs signals
  v1DeciderIns:
    type: object
    properties:
      lhs:
        $ref: '#/definitions/v1InPort'
        description: Left hand side input signal for the comparison operation.
      rhs:
        $ref: '#/definitions/v1InPort'
        description: Right hand side input signal for the comparison operation.
    description: Inputs for the Decider component.
  v1DeciderOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Selected signal (1.0 or 0.0).
    description: Outputs for the Decider component.
  v1EMA:
    type: object
    properties:
      correction_factor_on_max_envelope_violation:
        type: number
        format: double
        description: Correction factor to apply on the output value if its in violation of the max envelope.
        x-go-default: 1
        x-go-validate: gte=0,lte=1.0
      correction_factor_on_min_envelope_violation:
        type: number
        format: double
        description: Correction factor to apply on the output value if its in violation of the min envelope.
        x-go-default: 1
        x-go-validate: gte=1.0
      ema_window:
        type: string
        description: Duration of EMA sampling window.
        x-go-default: 5s
      in_ports:
        $ref: '#/definitions/v1EMAIns'
        description: Input ports for the EMA component.
      out_ports:
        $ref: '#/definitions/v1EMAOuts'
        description: Output ports for the EMA component.
      warm_up_window:
        type: string
        description: |-
          Duration of EMA warming up window.

          The initial value of the EMA is the average of signal readings received during the warm up window.
        x-go-default: 0s
    description: |-
      At any time EMA component operates in one of the following states:
      1. Warm up state: The first warm_up_window samples are used to compute the initial EMA.
         If an invalid reading is received during the warm_up_window, the last good average is emitted and the state gets reset back to beginning of Warm up state.
      2. Normal state: The EMA is computed using following formula.

      The EMA for a series $Y$ is calculated recursively as:

      $$
      \text{EMA} _t =
      \begin{cases}
        Y_0, &\text{for } t = 0 \\
        \alpha Y_t + (1 - \alpha) \text{EMA} _{t-1}, &\text{for }t > 0
      \end{cases}
      $$

      The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
      A higher $\alpha$ discounts older observations faster.
      The $\alpha$ is computed using ema\_window:

      $$
      \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
      $$

      The EMA filter also employs a min-max-envelope logic during warm up stage, explained [here](#v1-e-m-a-ins).
    title: Exponential Moving Average (EMA) is a type of moving average that applies exponentially more weight to recent signal readings
  v1EMAIns:
    type: object
    properties:
      input:
        $ref: '#/definitions/v1InPort'
        description: Input signal to be used for the EMA computation.
      max_envelope:
        $ref: '#/definitions/v1InPort'
        description: |-
          Upper bound of the moving average.

          Used during the warm-up stage: if the signal would exceed `max_envelope`
          it's multiplied by `correction_factor_on_max_envelope_violation` **once per tick**.

          :::note
          If the signal deviates from `max_envelope` faster than the correction
          faster, it might end up exceeding the envelope.
          :::

          :::note
          The envelope logic is **not** used outside the warm-up stage!
          :::
      min_envelope:
        $ref: '#/definitions/v1InPort'
        description: |-
          Lower bound of the moving average.

          Used during the warm-up stage analogously to `max_envelope`.
    description: Inputs for the EMA component.
  v1EMAOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Exponential moving average of the series of reading as an output signal.
    description: Outputs for the EMA component.
  v1Entity:
    type: object
    properties:
      ip_address:
        type: string
      name:
        type: string
      prefix:
        type: string
      services:
        type: array
        items:
          type: string
      uid:
        type: string
    description: Entity represents a pod, vm, etc.
  v1EntityCache:
    type: object
    properties:
      entities_by_ip_address:
        $ref: '#/definitions/EntityCacheEntities'
      entities_by_name:
        $ref: '#/definitions/EntityCacheEntities'
    description: EntityCache contains both mappings of ip address to entity and entity name to entity.
  v1EqualsMatchExpression:
    type: object
    properties:
      label:
        type: string
        description: Name of the label to equal match the value.
        x-go-validate: required
      value:
        type: string
        description: Exact value that the label should be equal to.
    description: Label selector expression of the equal form "label == value".
  v1ErrorDetails:
    type: object
    properties:
      message:
        type: string
    description: ErrorDetails holds raw error message and its cause in a nested field.
  v1Extractor:
    type: object
    properties:
      address:
        $ref: '#/definitions/v1AddressExtractor'
        description: Display an address as a single string - `<ip>:<port>`.
      from:
        type: string
        description: |-
          Attribute path is a dot-separated path to attribute.

          Should be either:
          * one of the fields of [Attribute Context][attribute-context], or
          * a special "request.http.bearer" pseudo-attribute.
          Eg. "request.http.method" or "request.http.header.user-agent"

          Note: The same attribute path syntax is shared by other extractor variants,
          wherever attribute path is needed in their "from" syntax.

          Example:
          ```yaml
          from: request.http.headers.user-agent
          ```
          [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
        title: Use an attribute with no conversion
      json:
        $ref: '#/definitions/v1JSONExtractor'
        description: Deserialize a json, and extract one of the fields.
      jwt:
        $ref: '#/definitions/v1JWTExtractor'
        description: Parse the attribute as JWT and read the payload.
      path_templates:
        $ref: '#/definitions/v1PathTemplateMatcher'
        description: Match HTTP Path to given path templates.
    description: There are multiple variants of extractor, specify exactly one.
    title: Defines a high-level way to specify how to extract a flow label value given http request metadata, without a need to write rego code
  v1Extrapolator:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/v1ExtrapolatorIns'
        description: Input ports for the Extrapolator component.
      max_extrapolation_interval:
        type: string
        description: Maximum time interval to repeat the last valid value of input signal.
        x-go-default: 10s
      out_ports:
        $ref: '#/definitions/v1ExtrapolatorOuts'
        description: Output ports for the Extrapolator component.
    description: It does so until `maximum_extrapolation_interval` is reached, beyond which it emits invalid signal unless input signal becomes valid again.
    title: Extrapolates the input signal by repeating the last valid value during the period in which it is invalid
  v1ExtrapolatorIns:
    type: object
    properties:
      input:
        $ref: '#/definitions/v1InPort'
        description: Input signal for the Extrapolator component.
    description: Inputs for the Extrapolator component.
  v1ExtrapolatorOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Extrapolated signal.
    description: Outputs for the Extrapolator component.
  v1FirstValid:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/v1FirstValidIns'
        description: Input ports for the FirstValid component.
      out_ports:
        $ref: '#/definitions/v1FirstValidOuts'
        description: Output ports for the FirstValid component.
    title: Picks the first valid input signal from the array of input signals and emits it as an output signal
  v1FirstValidIns:
    type: object
    properties:
      inputs:
        type: array
        items:
          $ref: '#/definitions/v1InPort'
        description: Array of input signals.
    description: Inputs for the FirstValid component.
  v1FirstValidOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: First valid input signal as an output signal.
    description: Outputs for the FirstValid component.
  v1FlowSelector:
    type: object
    properties:
      control_point:
        $ref: '#/definitions/v1ControlPoint'
        description: |-
          Describes
          [control point](/concepts/flow-control/flow-control.md#control-point)
          within the entity where the policy should apply to.
        x-go-validate: required
      label_matcher:
        $ref: '#/definitions/v1LabelMatcher'
        description: |-
          :::info
          See also [Label Matcher overview](/concepts/flow-control/selector.md#label-matcher).
          :::

          :::note
          [Classifiers](#v1-classifier) _can_ use flow labels created by some other
          classifier, but only if they were created at some previous control point
          (and propagated in baggage).

          This limitation doesn't apply to selectors of other entities, like
          Flux Meters or Actuators. It's valid to create a flow label on a control
          point using classifier, and immediately use it for matching on the same
          control point.
          :::
        title: |-
          Label matcher allows to add _additional_ condition on
          [flow labels](/concepts/flow-control/flow-label.md)
          must also be satisfied (in addition to service+control point matching)
    description: |-
      :::info
      See also [Selector overview](/concepts/flow-control/selector.md).
      :::

      Example:
      ```yaml
      control_point:
        traffic: ingress # Allowed values are `ingress` and `egress`.
      label_matcher:
        match_labels:
          user_tier: gold
        match_expressions:
          - key: query
            operator: In
            values:
              - insert
              - delete
          - label: user_agent
            regex: ^(?!.*Chrome).*Safari
      ```
    title: |-
      Describes which flows a [dataplane
      component](/concepts/flow-control/flow-control.md#components) should apply
      to
  v1FluxMeter:
    type: object
    properties:
      attribute_key:
        type: string
        description: |-
          Key of the attribute in access log or span from which the metric for this flux meter is read.

          :::info
          For list of available attributes in Envoy access logs, refer
          [Envoy Filter](/get-started/installation/agent/envoy/istio.md#envoy-filter)
          :::
        x-go-default: workload_duration_ms
      exponential_buckets:
        $ref: '#/definitions/FluxMeterExponentialBuckets'
      exponential_buckets_range:
        $ref: '#/definitions/FluxMeterExponentialBucketsRange'
      linear_buckets:
        $ref: '#/definitions/FluxMeterLinearBuckets'
      selector:
        $ref: '#/definitions/v1Selector'
        description: |-
          What latency should we measure in the histogram created by this Flux Meter.

          * For traffic control points, fluxmeter will measure the duration of the
            whole http transaction (including sending request and receiving
            response).
          * For feature control points, fluxmeter will measure execution of the span
            associated with particular feature. What contributes to the span's
            duration is entirely up to the user code that uses Aperture SDK.
      static_buckets:
        $ref: '#/definitions/FluxMeterStaticBuckets'
    description: |-
      :::info
      See also [Flux Meter overview](/concepts/flow-control/flux-meter.md).
      :::

      Example of a selector that creates a histogram metric for all HTTP requests
      to particular service:
      ```yaml
      selector:
        service_selector:
          service: myservice.mynamespace.svc.cluster.local
        flow_selector:
          control_point:
            traffic: ingress
      ```
    title: Flux Meter gathers metrics for the traffic that matches its selector
  v1FluxMeterInfo:
    type: object
    properties:
      flux_meter_name:
        type: string
    description: FluxMeterInfo describes detail for each FluxMeterInfo.
  v1GetPoliciesResponse:
    type: object
    properties:
      policies:
        $ref: '#/definitions/v1Policies'
  v1GradientController:
    type: object
    properties:
      default_config:
        $ref: '#/definitions/v1ControllerDynamicConfig'
        description: Default configuration.
      dynamic_config_key:
        type: string
        title: Configuration key for DynamicConfig
      in_ports:
        $ref: '#/definitions/v1GradientControllerIns'
        description: Input ports of the Gradient Controller.
      max_gradient:
        type: number
        format: double
        description: Maximum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].
        x-go-default: 1.7976931348623157e+308
      min_gradient:
        type: number
        format: double
        description: Minimum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].
        x-go-default: -1.7976931348623157e+308
      out_ports:
        $ref: '#/definitions/v1GradientControllerOuts'
        description: Output ports of the Gradient Controller.
      slope:
        type: number
        format: double
        description: |-
          Slope controls the aggressiveness and direction of the Gradient Controller.

          Slope is used as exponent on the signal to setpoint ratio in computation
          of the gradient (see the [main description](#v1-gradient-controller) for
          exact equation). Good intuition for this parameter is "What should the
          Gradient Controller do to the control variable when signal is too high",
          eg.:
          * $\text{slope} = 1$: when signal is too high, increase control variable,
          * $\text{slope} = -1$: when signal is too high, decrease control variable,
          * $\text{slope} = -0.5$: when signal is to high, decrease control variable more slowly.

          The sign of slope depends on correlation between the signal and control variable:
          * Use $\text{slope} < 0$ if signal and control variable are _positively_
          correlated (eg. Per-pod CPU usage and total concurrency).
          * Use $\text{slope} > 0$ if signal and control variable are _negatively_
          correlated (eg. Per-pod CPU usage and number of pods).

          :::note
          You need to set _negative_ slope for a _positive_ correlation, as you're
          describing the _action_ which controller should make when the signal
          increases.
          :::

          The magnitude of slope describes how aggressively should the controller
          react to a deviation of signal.
          With $|\text{slope}| = 1$, the controller will aim to bring the signal to
          the setpoint in one tick (assuming linear correlation with signal and setpoint).
          Smaller magnitudes of slope will make the controller adjust the control
          variable more slowly.

          We recommend setting $|\text{slope}| < 1$ (eg. $\pm0.8$).
          If you experience overshooting, consider lowering the magnitude even more.
          Values of $|\text{slope}| > 1$ are not recommended.

          :::note
          Remember that the gradient and output signal can be (optionally) clamped,
          so the _slope_ might not fully describe aggressiveness of the controller.
          :::
        x-go-validate: required
    description: |-
      The `gradient` describes a corrective factor that should be applied to the
      control variable to get the signal closer to the setpoint. It is computed as follows:

      $$
      \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
      $$

      `gradient` is then clamped to [min_gradient, max_gradient] range.

      The output of gradient controller is computed as follows:
      $$
      \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
      $$

      Note the additional `optimize` signal, that can be used to "nudge" the
      controller into desired idle state.

      The output can be _optionally_ clamped to desired range using `max` and
      `min` input.
    title: |-
      Gradient controller is a type of controller which tries to adjust the
      control variable proportionally to the relative difference between setpoint
      and actual value of the signal
  v1GradientControllerIns:
    type: object
    properties:
      control_variable:
        $ref: '#/definitions/v1InPort'
        description: |-
          Actual current value of the control variable.

          This signal is multiplied by the gradient to produce the output.
      max:
        $ref: '#/definitions/v1InPort'
        description: Maximum value to limit the output signal.
      min:
        $ref: '#/definitions/v1InPort'
        description: Minimum value to limit the output signal.
      optimize:
        $ref: '#/definitions/v1InPort'
        description: Optimize signal is added to the output of the gradient calculation.
      setpoint:
        $ref: '#/definitions/v1InPort'
        description: Setpoint to be used for the gradient computation.
      signal:
        $ref: '#/definitions/v1InPort'
        description: Signal to be used for the gradient computation.
    description: Inputs for the Gradient Controller component.
  v1GradientControllerOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Computed desired value of the control variable.
    description: Outputs for the Gradient Controller component.
  v1GroupStatus:
    type: object
    properties:
      groups:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1GroupStatus'
      status:
        $ref: '#/definitions/statusv1Status'
    description: |-
      Groups is nested structure that holds status information about the node and a
      pointer to the next node.
  v1HostInfo:
    type: object
    properties:
      hostname:
        type: string
      local_ip:
        type: string
      uuid:
        type: string
  v1InPort:
    type: object
    properties:
      constant_value:
        type: number
        format: double
        description: Constant value to be used for this InPort instead of a signal.
      signal_name:
        type: string
        description: Name of the incoming Signal on the InPort.
    title: Components receive input from other components via InPorts
  v1JSONExtractor:
    type: object
    properties:
      from:
        type: string
        description: Attribute path pointing to some strings - eg. "request.http.body".
        x-go-validate: required
      pointer:
        type: string
        description: |-
          Json pointer represents a parsed json pointer which allows to select a specified field from the json payload.

          Note: Uses [json pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
          eg. `/foo/bar`. If the pointer points into an object, it'd be stringified.
    description: |-
      Example:
      ```yaml
      from: request.http.body
      pointer: /user/name
      ```
    title: Deserialize a json, and extract one of the fields
  v1JWTExtractor:
    type: object
    properties:
      from:
        type: string
        description: Jwt token can be pulled from any input attribute, but most likely you'd want to use "request.http.bearer".
        x-go-validate: required
      json_pointer:
        type: string
        description: |-
          Json pointer allowing to select a specified field from the json payload.

          Note: Uses [json pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
          eg. `/foo/bar`. If the pointer points into an object, it'd be stringified.
    description: |-
      Specify a field to be extracted from payload using "json_pointer".

      Note: The signature is not verified against the secret (we're assuming there's some
      other parts of the system that handles such verification).

      Example:
      ```yaml
      from: request.http.bearer
      json_pointer: /user/email
      ```
    title: Parse the attribute as JWT and read the payload
  v1K8sLabelMatcherRequirement:
    type: object
    properties:
      key:
        type: string
        description: Label key that the selector applies to.
        x-go-validate: required
      operator:
        type: string
        description: |-
          Logical operator which represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.
        x-go-validate: oneof=In NotIn Exists DoesNotExists
      values:
        type: array
        items:
          type: string
        description: |-
          An array of string values that relates to the key by an operator.
          If the operator is In or NotIn, the values array must be non-empty.
          If the operator is Exists or DoesNotExist, the values array must be empty.
    description: Label selector requirement which is a selector that contains values, a key, and an operator that relates the key and values.
  v1LabelMatcher:
    type: object
    properties:
      expression:
        $ref: '#/definitions/v1MatchExpression'
        description: An arbitrary expression to be evaluated on the labels.
      match_expressions:
        type: array
        items:
          $ref: '#/definitions/v1K8sLabelMatcherRequirement'
        description: |-
          List of k8s-style label matcher requirements.

          Note: The requirements are ANDed.
      match_labels:
        type: object
        additionalProperties:
          type: string
        description: |-
          A map of {key,value} pairs representing labels to be matched.
          A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".

          Note: The requirements are ANDed.
    description: |-
      It provides three ways to define requirements:
      - matchLabels
      - matchExpressions
      - arbitrary expression

      If multiple requirements are set, they are all ANDed.
      An empty label matcher always matches.
    title: |-
      Allows to define rules whether a map of
      [labels](/concepts/flow-control/flow-label.md)
      should be considered a match or not
  v1LimiterDecision:
    type: object
    properties:
      component_index:
        type: string
        format: int64
      concurrency_limiter_info:
        $ref: '#/definitions/LimiterDecisionConcurrencyLimiterInfo'
      dropped:
        type: boolean
      policy_hash:
        type: string
      policy_name:
        type: string
      rate_limiter_info:
        $ref: '#/definitions/LimiterDecisionRateLimiterInfo'
      reason:
        $ref: '#/definitions/LimiterDecisionLimiterReason'
    description: LimiterDecision describes details for each limiter.
  v1LoadActuator:
    type: object
    properties:
      default_config:
        $ref: '#/definitions/v1LoadActuatorDynamicConfig'
        description: Default configuration.
      dynamic_config_key:
        type: string
        description: Configuration key for DynamicConfig.
      in_ports:
        $ref: '#/definitions/v1LoadActuatorIns'
        description: Input ports for the Load Actuator component.
    title: Takes the load multiplier input signal and publishes it to the schedulers in the data-plane
  v1LoadActuatorDynamicConfig:
    type: object
    properties:
      dry_run:
        type: boolean
        description: |-
          Decides whether to run the load actuator in dry-run mode. Dry run mode ensures that no traffic gets dropped by this load actuator.
          Useful for observing the behavior of Load Actuator without disrupting any real traffic.
    title: Dynamic Configuration for LoadActuator
  v1LoadActuatorIns:
    type: object
    properties:
      load_multiplier:
        $ref: '#/definitions/v1InPort'
        description: |-
          Load multiplier is ratio of [incoming
          concurrency](#v1-scheduler-outs) that needs to be accepted.
    description: Input for the Load Actuator component.
  v1MatchExpression:
    type: object
    properties:
      all:
        $ref: '#/definitions/MatchExpressionList'
        description: The expression is true when all subexpressions are true.
      any:
        $ref: '#/definitions/MatchExpressionList'
        description: The expression is true when any subexpression is true.
      label_equals:
        $ref: '#/definitions/v1EqualsMatchExpression'
        description: The expression is true when label value equals given value.
      label_exists:
        type: string
        description: The expression is true when label with given name exists.
        x-go-validate: required
      label_matches:
        $ref: '#/definitions/v1MatchesMatchExpression'
        description: The expression is true when label matches given regex.
      not:
        $ref: '#/definitions/v1MatchExpression'
        description: The expression negates the result of subexpression.
    description: |-
      MatchExpression has multiple variants, exactly one should be set.

      Example:
      ```yaml
      all:
        of:
          - label_exists: foo
          - label_equals: { label = app, value = frobnicator }
      ```
    title: Defines a [map<string, string> → bool] expression to be evaluated on labels
  v1MatchesMatchExpression:
    type: object
    properties:
      label:
        type: string
        description: Name of the label to match the regular expression.
        x-go-validate: required
      regex:
        type: string
        description: |-
          Regular expression that should match the label value.
          It uses [golang's regular expression syntax](https://github.com/google/re2/wiki/Syntax).
        x-go-validate: required
    description: Label selector expression of the matches form "label matches regex".
  v1Max:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/v1MaxIns'
        description: Input ports for the Max component.
      out_ports:
        $ref: '#/definitions/v1MaxOuts'
        description: Output ports for the Max component.
    description: 'Max: output = max([]inputs).'
    title: Takes a list of input signals and emits the signal with the maximum value
  v1MaxIns:
    type: object
    properties:
      inputs:
        type: array
        items:
          $ref: '#/definitions/v1InPort'
        description: Array of input signals.
    description: Inputs for the Max component.
  v1MaxOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Signal with maximum value as an output signal.
    description: Output for the Max component.
  v1Min:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/v1MinIns'
        description: Input ports for the Min component.
      out_ports:
        $ref: '#/definitions/v1MinOuts'
        description: Output ports for the Min component.
    description: |-
      Takes an array of input signals and emits the signal with the minimum value
      Min: output = min([]inputs).
  v1MinIns:
    type: object
    properties:
      inputs:
        type: array
        items:
          $ref: '#/definitions/v1InPort'
        description: Array of input signals.
    description: Inputs for the Min component.
  v1MinOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Signal with minimum value as an output signal.
    description: Output ports for the Min component.
  v1OutPort:
    type: object
    properties:
      signal_name:
        type: string
        description: Name of the outgoing Signal on the OutPort.
    title: Components produce output for other components via OutPorts
  v1OverlappingService:
    type: object
    properties:
      entities_count:
        type: integer
        format: int32
      service1:
        type: string
      service2:
        type: string
    description: OverlappingService contains info about a service that overlaps with another one.
  v1PathTemplateMatcher:
    type: object
    properties:
      template_values:
        type: object
        additionalProperties:
          type: string
        description: |-
          Template value keys are OpenAPI-inspired path templates.

          * Static path segment `/foo` matches a path segment exactly
          * `/{param}` matches arbitrary path segment.
            (The param name is ignored and can be omitted (`{}`))
          * The parameter must cover whole segment.
          * Additionally, path template can end with `/*` wildcard to match
            arbitrary number of trailing segments (0 or more).
          * Multiple consecutive `/` are ignored, as well as trailing `/`.
          * Parametrized path segments must come after static segments.
          * `*`, if present, must come last.
          * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/*`).

          See also <https://swagger.io/specification/#path-templating-matching>

          Example:
          ```yaml
          /register: register
          "/user/{userId}": user
          /static/*: other
          ```
        x-go-validate: required
    description: |-
      HTTP path will be matched against given path templates.
      If a match occurs, the value associated with the path template will be treated as a result.
      In case of multiple path templates matching, the most specific one will be chosen.
    title: Matches HTTP Path to given path templates
  v1Peers:
    type: object
    properties:
      peers:
        type: object
        additionalProperties:
          $ref: '#/definitions/peersv1Peer'
      self_peer:
        $ref: '#/definitions/peersv1Peer'
    description: Peers holds the peer info of this peer and a mapping of address to other peers.
  v1Policies:
    type: object
    properties:
      policies:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1Policy'
  v1Policy:
    type: object
    properties:
      circuit:
        $ref: '#/definitions/v1Circuit'
        description: Defines the control-loop logic of the policy.
      resources:
        $ref: '#/definitions/v1Resources'
        description: Resources (Flux Meters, Classifiers etc.) to setup.
    description: |-
      :::info
      See also [Policy overview](/concepts/policy/policy.md).
      :::

      Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
    title: Policy expresses reliability automation workflow that automatically protects services
  v1PolicyWrapper:
    type: object
    properties:
      common_attributes:
        $ref: '#/definitions/v1CommonAttributes'
        title: CommonAttributes
      policy:
        $ref: '#/definitions/v1Policy'
        title: Policy
  v1PolicyWrappers:
    type: object
    properties:
      policy_wrappers:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1PolicyWrapper'
  v1ProcessInfo:
    type: object
    properties:
      start_time:
        type: string
        format: date-time
      uptime:
        type: string
  v1PromQL:
    type: object
    properties:
      evaluation_interval:
        type: string
        description: Describes the interval between successive evaluations of the Prometheus query.
        x-go-default: 10s
      out_ports:
        $ref: '#/definitions/v1PromQLOuts'
        description: Output ports for the PromQL component.
      query_string:
        type: string
        description: |-
          Describes the Prometheus query to be run.

          :::caution
          TODO we should describe how to construct the query, eg. how to employ the
          fluxmeters here or link to appropriate place in docs.
          :::
    title: Component that runs a Prometheus query periodically and returns the result as an output signal
  v1PromQLOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: The result of the Prometheus query as an output signal.
    description: Output for the PromQL component.
  v1RateLimiter:
    type: object
    properties:
      default_config:
        $ref: '#/definitions/v1RateLimiterDynamicConfig'
        title: Default configuration
      dynamic_config_key:
        type: string
        title: Configuration key for DynamicConfig
      in_ports:
        $ref: '#/definitions/v1RateLimiterIns'
        x-go-validate: required
      label_key:
        type: string
        description: |-
          Specifies which label the ratelimiter should be keyed by.

          Rate limiting is done independently for each value of the
          [label](/concepts/flow-control/flow-label.md) with given key.
          Eg., to give each user a separate limit, assuming you have a _user_ flow
          label set up, set `label_key: "user"`.
        x-go-validate: required
      lazy_sync:
        $ref: '#/definitions/RateLimiterLazySync'
        title: Configuration of lazy-syncing behaviour of ratelimiter
      limit_reset_interval:
        type: string
        description: Time after which the limit for a given label value will be reset.
        x-go-default: 60s
      selector:
        $ref: '#/definitions/v1Selector'
        description: Which control point to apply this ratelimiter to.
        x-go-validate: required
    description: |-
      :::info
      See also [Rate Limiter overview](/concepts/flow-control/rate-limiter.md).
      :::

      Ratelimiting is done separately on per-label-value basis. Use _label\_key_
      to select which label should be used as key.
    title: Limits the traffic on a control point to specified rate
  v1RateLimiterDynamicConfig:
    type: object
    properties:
      overrides:
        type: array
        items:
          $ref: '#/definitions/RateLimiterOverride'
        description: Allows to specify different limits for particular label values.
    title: Dynamic Configuration for the rate limiter
  v1RateLimiterIns:
    type: object
    properties:
      limit:
        $ref: '#/definitions/v1InPort'
        description: |-
          Number of flows allowed per _limit\_reset\_interval_ per each label.
          Negative values disable the ratelimiter.

          :::tip
          Negative limit can be useful to _conditionally_ enable the ratelimiter
          under certain circumstances. [Decider](#v1-decider) might be helpful.
          :::
        x-go-validate: required
    title: Inputs for the RateLimiter component
  v1ReportRequest:
    type: object
    properties:
      agent_group:
        type: string
      all_statuses:
        $ref: '#/definitions/v1GroupStatus'
      controller_info:
        $ref: '#/definitions/v1ControllerInfo'
      host_info:
        $ref: '#/definitions/v1HostInfo'
      peers:
        $ref: '#/definitions/v1Peers'
      policies:
        $ref: '#/definitions/v1PolicyWrappers'
      process_info:
        $ref: '#/definitions/v1ProcessInfo'
      services_list:
        $ref: '#/definitions/v1ServicesList'
      version_info:
        $ref: '#/definitions/v1VersionInfo'
  v1ReportResponse:
    type: object
    description: ReportResponse is empty for now.
  v1Resources:
    type: object
    properties:
      classifiers:
        type: array
        items:
          $ref: '#/definitions/v1Classifier'
        description: |-
          Classifiers are installed in the data-plane and are used to label the requests based on payload content.

          The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
      flux_meters:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1FluxMeter'
        description: |-
          Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.

          Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
    description: |-
      :::info
      See also [Resources overview](/concepts/policy/resources.md).
      :::

      Resources are typically Flux Meters, Classifiers, etc. that can be used to create on-demand metrics or label the flows.
    title: Resources that need to be setup for the policy to function
  v1Rule:
    type: object
    properties:
      extractor:
        $ref: '#/definitions/v1Extractor'
        description: High-level declarative extractor.
      rego:
        $ref: '#/definitions/RuleRego'
        description: Rego module to extract a value from the rego module.
      telemetry:
        type: boolean
        description: |-
          :::note
          The flow label is always accessible in Aperture Policies regardless of this setting.
          :::

          :::caution
          When using [FluxNinja Cloud plugin](cloud/plugin.md), telemetry enabled
          labels are sent to FluxNinha Cloud for observability. Telemetry should be disabled for
          sensitive labels.
          :::
        title: |-
          Decides if the created flow label should be available as an attribute in OLAP telemetry and
          propagated in [baggage](/concepts/flow-control/flow-label.md#baggage))
        x-go-validate: required
    description: |-
      Flow classification rule extracts a value from request metadata.
      More specifically, from `input`, which has the same spec as [Envoy's External Authorization Attribute Context][attribute-context].
      See <https://play.openpolicyagent.org/p/gU7vcLkc70> for an example input.
      There are two ways to define a flow classification rule:
      * Using a declarative extractor – suitable from simple cases, such as directly reading a value from header or a field from json body.
      * Rego expression.

      Performance note: It's recommended to use declarative extractors where possible, as they may be slightly performant than Rego expressions.
      [attribute-context](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto)

      Example of Declarative JSON extractor:
      ```yaml
      extractor:
        json:
          from: request.http.body
          pointer: /user/name
      ```

      Example of Rego module which also disables propagation of a label:
      ```yaml
      rego:
        query: data.user_from_cookie.user
        source: |
          package: user_from_cookie
          cookies: split(input.attributes.request.http.headers.cookie, ';')
          cookie: cookies[_]
          cookie.startswith: ('session=')
          session: substring(cookie, count('session='), -1)
          parts: split(session, '.')
          object: json.unmarshal(base64url.decode(parts[0]))
          user: object.user
      propagate: false
      ```
    title: Rule describes a single Flow Classification Rule
  v1Scheduler:
    type: object
    properties:
      auto_tokens:
        type: boolean
        description: |-
          Automatically estimate the size of a request in each workload, based on
          historical latency. Each workload's `tokens` will be set to average
          latency of flows in that workload during last few seconds (exact duration
          of this average can change).
        x-go-default: "true"
      default_workload_parameters:
        $ref: '#/definitions/SchedulerWorkloadParameters'
        description: WorkloadParameters to be used if none of workloads specified in `workloads` match.
        x-go-validate: required
      max_timeout:
        type: string
        description: |-
          :::caution
          This timeout needs to be strictly less than the timeout set on the
          client for the whole GRPC call:
          * in case of envoy, timeout set on `grpc_service` used in `ext_authz` filter,
          * in case of libraries, timeout configured... TODO.

          We're using fail-open logic in integrations, so if the GRPC timeout
          fires first, the flow will end up being unconditionally allowed while
          it're still waiting on the scheduler.

          To avoid such cases, the end-to-end GRPC timeout should also contain
          some headroom for constant overhead like serialization, etc. Default
          value for GRPC timeouts is 500ms, giving 50ms of headeroom, so when
          tweaking this timeout, make sure to adjust the GRPC timeout accordingly.
          :::
        title: Max Timeout is the value with which the flow timeout calculated by `timeout_factor` is capped
        x-go-default: 0.49s
      out_ports:
        $ref: '#/definitions/v1SchedulerOuts'
        description: Output ports for the Scheduler component.
      timeout_factor:
        type: number
        format: double
        description: |-
          If a flow is not able to get tokens within `timeout_factor` * `tokens` of duration,
          it will be rejected.

          This value impacts the prioritization and fairness because the larger the timeout the higher the chance a request has to get scheduled.
        title: Timeout as a factor of tokens for a flow in a workload
        x-go-default: 0.5
        x-go-validate: gte=0.0
      workloads:
        type: array
        items:
          $ref: '#/definitions/SchedulerWorkload'
        description: |-
          List of workloads to be used in scheduler.

          Categorizing [flows](/concepts/flow-control/flow-control.md#flow) into workloads
          allows for load-shedding to be "smarter" than just "randomly deny 50% of
          requests". There are two aspects of this "smartness":
          * Scheduler can more precisely calculate concurrency if it understands
            that flows belonging to different classes have different weights (eg.
            inserts vs lookups).
          * Setting different priorities to different workloads lets the scheduler
            avoid dropping important traffic during overload.

          Each workload in this list specifies also a matcher that's used to
          determine which flow will be categorized into which workload.
          In case of multiple matching workloads, the first matching one will be used.
          If none of workloads match, `default_workload` will be used.

          :::info
          See also [workload definition in the concepts
          section](/concepts/flow-control/concurrency-limiter.md#workload).
          :::
    description: |-
      :::note
      Each Agent instantiates an independent copy of the scheduler, but output
      signals for accepted and incoming concurrency are aggregated across all agents.
      :::

      See [ConcurrencyLimiter](#v1-concurrency-limiter) for more context.
    title: Weighted Fair Queuing-based workload scheduler
  v1SchedulerOuts:
    type: object
    properties:
      accepted_concurrency:
        $ref: '#/definitions/v1OutPort'
        description: |-
          Accepted concurrency is the number of accepted tokens per second.

          :::info
          **Accepted tokens** are tokens associated with
          [flows](/concepts/flow-control/flow-control.md#flow) that were accepted by
          this scheduler. Number of tokens for a flow is determined by a
          [workload parameters](#scheduler-workload-parameters) that the flow was assigned to (either
          via `auto_tokens` or explicitly by `Workload.tokens`).
          :::

          Value of this signal is the sum across all the relevant schedulers.
      incoming_concurrency:
        $ref: '#/definitions/v1OutPort'
        description: |-
          Incoming concurrency is the number of incoming tokens/sec.
          This is the same as `accepted_concurrency`, but across all the flows
          entering scheduler, including rejected ones.
    description: Output for the Scheduler component.
  v1Selector:
    type: object
    properties:
      flow_selector:
        $ref: '#/definitions/v1FlowSelector'
        x-go-validate: required
      service_selector:
        $ref: '#/definitions/v1ServiceSelector'
        x-go-validate: required
    description: |-
      :::info
      See also [Selector overview](/concepts/flow-control/selector.md).
      :::
    title: |-
      Describes which flow in which service a [dataplane
      component](/concepts/flow-control/flow-control.md#components) should apply
      to
  v1Service:
    type: object
    properties:
      entities_count:
        type: integer
        format: int32
      name:
        type: string
    description: |-
      Service contains information about single service discovered in agent group by a
      particular agent.
  v1ServiceSelector:
    type: object
    properties:
      agent_group:
        type: string
        description: |-
          Which [agent-group](/concepts/service.md#agent-group) this
          selector applies to.
        x-go-default: default
      service:
        type: string
        description: |-
          The Fully Qualified Domain Name of the
          [service](/concepts/service.md) to select.

          In kubernetes, this is the FQDN of the Service object.

          Empty string means all services within an agent group (catch-all).

          :::note
          One entity may belong to multiple services.
          :::
    description: |-
      :::info
      See also [Selector overview](/concepts/flow-control/selector.md).
      :::
    title: |-
      Describes which service a [dataplane
      component](/concepts/flow-control/flow-control.md#components) should apply
      to
  v1ServicesList:
    type: object
    properties:
      overlapping_services:
        type: array
        items:
          $ref: '#/definitions/v1OverlappingService'
      services:
        type: array
        items:
          $ref: '#/definitions/v1Service'
  v1Sink:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/v1SinkIns'
        description: Input ports for the Sink component.
    title: Sink is a component that consumes input signals and does nothing with them
  v1SinkIns:
    type: object
    properties:
      inputs:
        type: array
        items:
          $ref: '#/definitions/v1InPort'
        description: Array of input signals.
    description: Inputs for the Sink component.
  v1Sqrt:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/v1SqrtIns'
        description: Input ports for the Sqrt component.
      out_ports:
        $ref: '#/definitions/v1SqrtOuts'
        description: Output ports for the Sqrt component.
      scale:
        type: number
        format: double
        description: Scaling factor to be multiplied with the square root of the input signal.
        x-go-default: 1
    description: |-
      $$
      \text{output} = \text{scale} \sqrt{\text{input}}
      $$
    title: Takes an input signal and emits the square root of it multiplied by scale as an output
  v1SqrtIns:
    type: object
    properties:
      input:
        $ref: '#/definitions/v1InPort'
        description: Input signal.
    description: Inputs for the Sqrt component.
  v1SqrtOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Output signal.
    description: Outputs for the Sqrt component.
  v1Switcher:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/v1SwitcherIns'
        description: Input ports for the Switcher component.
      out_ports:
        $ref: '#/definitions/v1SwitcherOuts'
        description: Output ports for the Switcher component.
    description: |-
      `on_true` will be returned if switch input is valid and not equal to 0.0 ,
       otherwise `on_false` will be returned.
    title: Type of combinator that switches between `on_true` and `on_false` signals based on switch input
  v1SwitcherIns:
    type: object
    properties:
      on_false:
        $ref: '#/definitions/v1InPort'
        description: Output signal when switch is invalid or 0.0.
      on_true:
        $ref: '#/definitions/v1InPort'
        description: Output signal when switch is valid and not 0.0.
      switch:
        $ref: '#/definitions/v1InPort'
        description: Decides whether to return on_true or on_false.
    description: Inputs for the Switcher component.
  v1SwitcherOuts:
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
        description: Selected signal (on_true or on_false).
    description: Outputs for the Switcher component.
  v1VersionInfo:
    type: object
    properties:
      build_host:
        type: string
      build_os:
        type: string
      build_time:
        type: string
      git_branch:
        type: string
      git_commit_hash:
        type: string
      service:
        type: string
      version:
        type: string
  v3Address:
    type: object
    properties:
      envoy_internal_address:
        $ref: '#/definitions/v3EnvoyInternalAddress'
        description: |-
          Specifies a user-space address handled by :ref:`internal listeners
          <envoy_v3_api_field_config.listener.v3.Listener.internal_listener>`.
      pipe:
        $ref: '#/definitions/v3Pipe'
      socket_address:
        $ref: '#/definitions/v3SocketAddress'
    description: |-
      Addresses specify either a logical or physical address and port, which are
      used to tell Envoy where to bind/listen, connect to upstream and find
      management servers.
  v3AttributeContext:
    type: object
    properties:
      context_extensions:
        type: object
        additionalProperties:
          type: string
        description: |-
          This is analogous to http_request.headers, however these contents will not be sent to the
          upstream server. Context_extensions provide an extension mechanism for sending additional
          information to the auth server without modifying the proto definition. It maps to the
          internal opaque context in the filter chain.
      destination:
        $ref: '#/definitions/v3AttributeContextPeer'
        description: |-
          The destination of a network activity, such as accepting a TCP connection.
          In a multi hop network activity, the destination represents the receiver of
          the last hop.
      metadata_context:
        $ref: '#/definitions/v3ConfigCoreMetadata'
        description: Dynamic metadata associated with the request.
      request:
        $ref: '#/definitions/AttributeContextRequest'
        description: Represents a network request, such as an HTTP request.
      source:
        $ref: '#/definitions/v3AttributeContextPeer'
        description: |-
          The source of a network activity, such as starting a TCP connection.
          In a multi hop network activity, the source represents the sender of the
          last hop.
    description: |-
      An attribute is a piece of metadata that describes an activity on a network.
      For example, the size of an HTTP request, or the status code of an HTTP response.

      Each attribute has a type and a name, which is logically defined as a proto message field
      of the ``AttributeContext``. The ``AttributeContext`` is a collection of individual attributes
      supported by Envoy authorization system.
      [#comment: The following items are left out of this proto
      Request.Auth field for jwt tokens
      Request.Api for api management
      Origin peer that originated the request
      Caching Protocol
      request_context return values to inject back into the filter chain
      peer.claims -- from X.509 extensions
      Configuration
      - field mask to send
      - which return values from request_context are copied back
      - which return values are copied into request_headers]
      [#next-free-field: 12]
  v3AttributeContextPeer:
    type: object
    properties:
      address:
        $ref: '#/definitions/v3Address'
        description: |-
          The address of the peer, this is typically the IP address.
          It can also be UDS path, or others.
      certificate:
        type: string
        description: |-
          The X.509 certificate used to authenticate the identify of this peer.
          When present, the certificate contents are encoded in URL and PEM format.
      labels:
        type: object
        additionalProperties:
          type: string
        description: |-
          The labels associated with the peer.
          These could be pod labels for Kubernetes or tags for VMs.
          The source of the labels could be an X.509 certificate or other configuration.
      principal:
        type: string
        description: |-
          The authenticated identity of this peer.
          For example, the identity associated with the workload such as a service account.
          If an X.509 certificate is used to assert the identity this field should be sourced from
          ``URI Subject Alternative Names``, ``DNS Subject Alternate Names`` or ``Subject`` in that order.
          The primary identity should be the principal. The principal format is issuer specific.

          Example:
          *    SPIFFE format is ``spiffe://trust-domain/path``
          *    Google account format is ``https://accounts.google.com/{userid}``
      service:
        type: string
        description: |-
          The canonical service name of the peer.
          It should be set to :ref:`the HTTP x-envoy-downstream-service-cluster
          <config_http_conn_man_headers_downstream-service-cluster>`
          If a more trusted source of the service name is available through mTLS/secure naming, it
          should be used.
    title: |-
      This message defines attributes for a node that handles a network request.
      The node can be either a service or an application that sends, forwards,
      or receives the request. Service peers should fill in the ``service``,
      ``principal``, and ``labels`` as appropriate.
      [#next-free-field: 6]
  v3ConfigCoreMetadata:
    type: object
    properties:
      filter_metadata:
        type: object
        additionalProperties:
          type: object
        description: |-
          Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``
          namespace is reserved for Envoy's built-in filters.
          If both ``filter_metadata`` and
          :ref:`typed_filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata>`
          fields are present in the metadata with same keys,
          only ``typed_filter_metadata`` field will be parsed.
      typed_filter_metadata:
        type: object
        additionalProperties:
          $ref: '#/definitions/protobufAny'
        description: |-
          Key is the reverse DNS filter name, e.g. com.acme.widget. The ``envoy.*``
          namespace is reserved for Envoy's built-in filters.
          The value is encoded as google.protobuf.Any.
          If both :ref:`filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.filter_metadata>`
          and ``typed_filter_metadata`` fields are present in the metadata with same keys,
          only ``typed_filter_metadata`` field will be parsed.
    description: |-
      Metadata provides additional inputs to filters based on matched listeners,
      filter chains, routes and endpoints. It is structured as a map, usually from
      filter name (in reverse DNS format) to metadata specific to the filter. Metadata
      key-values for a filter are merged as connection and request handling occurs,
      with later values for the same key overriding earlier values.

      An example use of metadata is providing additional values to
      http_connection_manager in the envoy.http_connection_manager.access_log
      namespace.

      Another example use of metadata is to per service config info in cluster metadata, which may get
      consumed by multiple filters.

      For load balancing, Metadata provides a means to subset cluster endpoints.
      Endpoints have a Metadata object associated and routes contain a Metadata
      object to match against. There are some well defined metadata used today for
      this purpose:

      * ``{"envoy.lb": {"canary": <bool> }}`` This indicates the canary status of an
        endpoint and is also used during header processing
        (x-envoy-upstream-canary) and for stats purposes.
      [#next-major-version: move to type/metadata/v2]
  v3DeniedHttpResponse:
    type: object
    properties:
      body:
        type: string
        description: |-
          This field allows the authorization service to send a response body data
          to the downstream client.
      headers:
        type: array
        items:
          $ref: '#/definitions/v3HeaderValueOption'
        description: |-
          This field allows the authorization service to send HTTP response headers
          to the downstream client. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
          false when used in this message.
      status:
        $ref: '#/definitions/v3HttpStatus'
        description: |-
          This field allows the authorization service to send an HTTP response status code to the
          downstream client. If not set, Envoy sends ``403 Forbidden`` HTTP status code by default.
    description: HTTP attributes for a denied response.
  v3EnvoyInternalAddress:
    type: object
    properties:
      endpoint_id:
        type: string
        description: |-
          Specifies an endpoint identifier to distinguish between multiple endpoints for the same internal listener in a
          single upstream pool. Only used in the upstream addresses for tracking changes to individual endpoints. This, for
          example, may be set to the final destination IP for the target internal listener.
      server_listener_name:
        type: string
        description: |-
          Specifies the :ref:`name <envoy_v3_api_field_config.listener.v3.Listener.name>` of the
          internal listener.
    title: |-
      The address represents an envoy internal listener.
      [#comment: TODO(asraa): When address available, remove workaround from test/server/server_fuzz_test.cc:30.]
  v3HeaderValue:
    type: object
    properties:
      key:
        type: string
        description: Header name.
      value:
        type: string
        description: |-
          Header value.

          The same :ref:`format specifier <config_access_log_format>` as used for
          :ref:`HTTP access logging <config_access_log>` applies here, however
          unknown header values are replaced with the empty string instead of ``-``.
    description: Header name/value pair.
  v3HeaderValueOption:
    type: object
    properties:
      append:
        type: boolean
        description: |-
          Should the value be appended? If true (default), the value is appended to
          existing values. Otherwise it replaces any existing values.
          This field is deprecated and please use
          :ref:`append_action <envoy_v3_api_field_config.core.v3.HeaderValueOption.append_action>` as replacement.

          .. note::
            The :ref:`external authorization service <envoy_v3_api_msg_service.auth.v3.CheckResponse>` and
            :ref:`external processor service <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>` have
            default value (``false``) for this field.
      append_action:
        $ref: '#/definitions/HeaderValueOptionHeaderAppendAction'
        description: |-
          Describes the action taken to append/overwrite the given value for an existing header
          or to only add this header if it's absent.
          Value defaults to :ref:`APPEND_IF_EXISTS_OR_ADD
          <envoy_v3_api_enum_value_config.core.v3.HeaderValueOption.HeaderAppendAction.APPEND_IF_EXISTS_OR_ADD>`.
      header:
        $ref: '#/definitions/v3HeaderValue'
        description: Header name/value pair that this option applies to.
      keep_empty_value:
        type: boolean
        description: |-
          Is the header value allowed to be empty? If false (default), custom headers with empty values are dropped,
          otherwise they are added.
    description: Header name/value pair plus option to control append behavior.
  v3HttpStatus:
    type: object
    properties:
      code:
        $ref: '#/definitions/v3StatusCode'
        description: Supplies HTTP response code.
    description: HTTP status.
  v3OkHttpResponse:
    type: object
    properties:
      dynamic_metadata:
        type: object
        description: |-
          This field has been deprecated in favor of :ref:`CheckResponse.dynamic_metadata
          <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`. Until it is removed,
          setting this field overrides :ref:`CheckResponse.dynamic_metadata
          <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`.
      headers:
        type: array
        items:
          $ref: '#/definitions/v3HeaderValueOption'
        description: |-
          HTTP entity headers in addition to the original request headers. This allows the authorization
          service to append, to add or to override headers from the original request before
          dispatching it to the upstream. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
          false when used in this message. By setting the ``append`` field to ``true``,
          the filter will append the correspondent header value to the matched request header.
          By leaving ``append`` as false, the filter will either add a new header, or override an existing
          one if there is a match.
      headers_to_remove:
        type: array
        items:
          type: string
        description: |-
          HTTP entity headers to remove from the original request before dispatching
          it to the upstream. This allows the authorization service to act on auth
          related headers (like ``Authorization``), process them, and consume them.
          Under this model, the upstream will either receive the request (if it's
          authorized) or not receive it (if it's not), but will not see headers
          containing authorization credentials.

          Pseudo headers (such as ``:authority``, ``:method``, ``:path`` etc), as well as
          the header ``Host``, may not be removed as that would make the request
          malformed. If mentioned in ``headers_to_remove`` these special headers will
          be ignored.

          When using the HTTP service this must instead be set by the HTTP
          authorization service as a comma separated list like so:
          ``x-envoy-auth-headers-to-remove: one-auth-header, another-auth-header``.
      query_parameters_to_remove:
        type: array
        items:
          type: string
        description: |-
          This field allows the authorization service to specify which query parameters
          should be removed from the original request before it is sent upstream. Each
          element in this list is a case-sensitive query parameter name to be removed.
      query_parameters_to_set:
        type: array
        items:
          $ref: '#/definitions/v3QueryParameter'
        description: |-
          This field allows the authorization service to set (and overwrite) query
          string parameters on the original request before it is sent upstream.
      response_headers_to_add:
        type: array
        items:
          $ref: '#/definitions/v3HeaderValueOption'
        description: |-
          This field allows the authorization service to send HTTP response headers
          to the downstream client on success. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>`
          defaults to false when used in this message.
    title: |-
      HTTP attributes for an OK response.
      [#next-free-field: 9]
  v3Pipe:
    type: object
    properties:
      mode:
        type: integer
        format: int64
        description: The mode for the Pipe. Not applicable for abstract sockets.
      path:
        type: string
        description: |-
          Unix Domain Socket path. On Linux, paths starting with '@' will use the
          abstract namespace. The starting '@' is replaced by a null byte by Envoy.
          Paths starting with '@' will result in an error in environments other than
          Linux.
  v3QueryParameter:
    type: object
    properties:
      key:
        type: string
        description: The key of the query parameter. Case sensitive.
      value:
        type: string
        description: The value of the query parameter.
    description: Query parameter name/value pair.
  v3SocketAddress:
    type: object
    properties:
      address:
        type: string
        description: |-
          The address for this socket. :ref:`Listeners <config_listeners>` will bind
          to the address. An empty address is not allowed. Specify ``0.0.0.0`` or ``::``
          to bind to any address. [#comment:TODO(zuercher) reinstate when implemented:
          It is possible to distinguish a Listener address via the prefix/suffix matching
          in :ref:`FilterChainMatch <envoy_v3_api_msg_config.listener.v3.FilterChainMatch>`.] When used
          within an upstream :ref:`BindConfig <envoy_v3_api_msg_config.core.v3.BindConfig>`, the address
          controls the source address of outbound connections. For :ref:`clusters
          <envoy_v3_api_msg_config.cluster.v3.Cluster>`, the cluster type determines whether the
          address must be an IP (``STATIC`` or ``EDS`` clusters) or a hostname resolved by DNS
          (``STRICT_DNS`` or ``LOGICAL_DNS`` clusters). Address resolution can be customized
          via :ref:`resolver_name <envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name>`.
      ipv4_compat:
        type: boolean
        description: |-
          When binding to an IPv6 address above, this enables `IPv4 compatibility
          <https://tools.ietf.org/html/rfc3493#page-11>`_. Binding to ``::`` will
          allow both IPv4 and IPv6 connections, with peer IPv4 addresses mapped into
          IPv6 space as ``::FFFF:<IPv4-address>``.
      named_port:
        type: string
        description: |-
          This is only valid if :ref:`resolver_name
          <envoy_v3_api_field_config.core.v3.SocketAddress.resolver_name>` is specified below and the
          named resolver is capable of named port resolution.
      port_value:
        type: integer
        format: int64
      protocol:
        $ref: '#/definitions/SocketAddressProtocol'
      resolver_name:
        type: string
        description: |-
          The name of the custom resolver. This must have been registered with Envoy. If
          this is empty, a context dependent default applies. If the address is a concrete
          IP address, no resolution will occur. If address is a hostname this
          should be set for resolution other than DNS. Specifying a custom resolver with
          ``STRICT_DNS`` or ``LOGICAL_DNS`` will generate an error at runtime.
    title: '[#next-free-field: 7]'
  v3StatusCode:
    type: string
    enum:
      - Empty
      - Continue
      - OK
      - Created
      - Accepted
      - NonAuthoritativeInformation
      - NoContent
      - ResetContent
      - PartialContent
      - MultiStatus
      - AlreadyReported
      - IMUsed
      - MultipleChoices
      - MovedPermanently
      - Found
      - SeeOther
      - NotModified
      - UseProxy
      - TemporaryRedirect
      - PermanentRedirect
      - BadRequest
      - Unauthorized
      - PaymentRequired
      - Forbidden
      - NotFound
      - MethodNotAllowed
      - NotAcceptable
      - ProxyAuthenticationRequired
      - RequestTimeout
      - Conflict
      - Gone
      - LengthRequired
      - PreconditionFailed
      - PayloadTooLarge
      - URITooLong
      - UnsupportedMediaType
      - RangeNotSatisfiable
      - ExpectationFailed
      - MisdirectedRequest
      - UnprocessableEntity
      - Locked
      - FailedDependency
      - UpgradeRequired
      - PreconditionRequired
      - TooManyRequests
      - RequestHeaderFieldsTooLarge
      - InternalServerError
      - NotImplemented
      - BadGateway
      - ServiceUnavailable
      - GatewayTimeout
      - HTTPVersionNotSupported
      - VariantAlsoNegotiates
      - InsufficientStorage
      - LoopDetected
      - NotExtended
      - NetworkAuthenticationRequired
    default: Empty
    description: |-
      - Empty: Empty - This code not part of the HTTP status code specification, but it is needed for proto
      `enum` type.
    title: |-
      HTTP response codes supported in Envoy.
      For more details: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
