consumes:
- application/json
produces:
- application/json
schemes:
- https
swagger: "2.0"
info:
  title: Aperture API
  version: "1.0"
host: aperture-controller
paths:
  /v1/info/host:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Host
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1HostInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/info/process:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Process
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ProcessInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/info/version:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Version
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1VersionInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/policies:
    get:
      tags:
      - aperture-controller
      operationId: PolicyService_GetPolicies
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GetPoliciesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/status/{path}:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: StatusService_GetGroupStatus
      parameters:
      - pattern: .+
        type: string
        name: path
        in: path
        required: true
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GroupStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
definitions:
  FluxMeterExponentialBuckets:
    description: |-
      ExponentialBuckets creates `count` number of buckets where the lowest bucket has an upper bound of `start`
      and each following bucket's upper bound is `factor` times the previous bucket's upper bound. The final +inf
      bucket is not counted.
    type: object
    properties:
      count:
        description: |-
          Number of buckets.

          @gotags: validate:"gt=0"
        type: integer
        format: int32
        x-go-validate: gt=0
      factor:
        description: |-
          Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.

          @gotags: validate:"gt=1.0"
        type: number
        format: double
        x-go-validate: gt=1.0
      start:
        description: |-
          Upper bound of the lowest bucket.

          @gotags: validate:"gt=0.0"
        type: number
        format: double
        x-go-validate: gt=0
  FluxMeterExponentialBucketsRange:
    description: |-
      ExponentialBucketsRange creates `count` number of buckets where the lowest bucket is `min` and the highest
      bucket is `max`. The final +inf bucket is not counted.
    type: object
    properties:
      count:
        description: |-
          Number of buckets.

          @gotags: validate:"gt=0"
        type: integer
        format: int32
        x-go-validate: gt=0
      max:
        description: Highest bucket.
        type: number
        format: double
      min:
        description: |-
          Lowest bucket.

          @gotags: validate:"gt=0.0"
        type: number
        format: double
        x-go-validate: gt=0
  FluxMeterLinearBuckets:
    description: |-
      LinearBuckets creates `count` number of buckets, each `width` wide, where the lowest bucket has an
      upper bound of `start`. The final +inf bucket is not counted.
    type: object
    properties:
      count:
        description: |-
          Number of buckets.

          @gotags: validate:"gt=0"
        type: integer
        format: int32
        x-go-validate: gt=0
      start:
        description: Upper bound of the lowest bucket.
        type: number
        format: double
      width:
        description: Width of each bucket.
        type: number
        format: double
  FluxMeterStaticBuckets:
    description: StaticBuckets holds the static value of the buckets where latency
      histogram will be stored.
    type: object
    properties:
      buckets:
        type: array
        title: '@gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"'
        items:
          type: number
          format: double
        x-go-default: '[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]'
  HorizontalPodScalerScaleActuator:
    type: object
    properties:
      default_config:
        description: Default configuration.
        $ref: '#/definitions/HorizontalPodScalerScaleActuatorDynamicConfig'
      dynamic_config_key:
        type: string
        title: Configuration key for DynamicConfig
      in_ports:
        $ref: '#/definitions/HorizontalPodScalerScaleActuatorIns'
  HorizontalPodScalerScaleActuatorDynamicConfig:
    type: object
    title: Dynamic Configuration for ScaleActuator
    properties:
      dry_run:
        description: |-
          Decides whether to run the pod scaler in dry-run mode. Dry run mode ensures that no scaling is invoked by this pod scaler.
          Useful for observing the behavior of Scaler without disrupting any real traffic.

          @gotags: default:"false"
        type: boolean
        x-go-default: false
  HorizontalPodScalerScaleActuatorIns:
    description: Inputs for the HorizontalPodScaler component.
    type: object
    properties:
      desired_replicas:
        $ref: '#/definitions/v1InPort'
  HorizontalPodScalerScaleReporter:
    type: object
    properties:
      out_ports:
        $ref: '#/definitions/HorizontalPodScalerScaleReporterOuts'
  HorizontalPodScalerScaleReporterOuts:
    description: Outputs for the HorizontalPodScaler component.
    type: object
    properties:
      actual_replicas:
        $ref: '#/definitions/v1OutPort'
      configured_replicas:
        $ref: '#/definitions/v1OutPort'
  MatchExpressionList:
    description: 'eg. {any: {of: [expr1, expr2]}}.'
    type: object
    title: List of MatchExpressions that is used for all/any matching
    properties:
      of:
        description: List of subexpressions of the match expression.
        type: array
        items:
          $ref: '#/definitions/v1MatchExpression'
  ParametersLazySync:
    type: object
    properties:
      enabled:
        description: '@gotags: default:"false"'
        type: boolean
        title: Enables lazy sync
        x-go-default: false
      num_sync:
        description: |-
          Number of times to lazy sync within the _limit\_reset\_interval_.

          @gotags: default:"5" validate:"gt=0"
        type: integer
        format: int64
        x-go-default: 5
        x-go-validate: gt=0
  RateLimiterOverride:
    type: object
    properties:
      label_value:
        description: |-
          Value of the label for which the override should be applied.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      limit_scale_factor:
        description: |-
          Amount by which the _in\_ports.limit_ should be multiplied for this label value.

          @gotags: default:"1.0"
        type: number
        format: double
        x-go-default: 1
  RuleRego:
    description: High-level extractor-based rules are compiled into a single rego
      query.
    type: object
    title: Raw rego rules are compiled 1:1 to rego queries
    properties:
      query:
        description: |-
          Query string to extract a value (eg. `data.<mymodulename>.<variablename>`).

          Note: The module name must match the package name from the "source".

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      source:
        description: |-
          Source code of the rego module.

          Note: Must include a "package" declaration.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
  SchedulerWorkload:
    description: Workload defines a class of requests that preferably have similar
      properties such as response latency or desired priority.
    type: object
    properties:
      label_matcher:
        description: |-
          Label Matcher to select a Workload based on
          [flow labels](/concepts/integrations/flow-control/flow-label.md).

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1LabelMatcher'
      parameters:
        description: |-
          Parameters associated with flows matching the label matcher.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/SchedulerWorkloadParameters'
  SchedulerWorkloadParameters:
    description: Parameters defines parameters such as priority, tokens and fairness
      key that are applicable to flows within a workload.
    type: object
    properties:
      fairness_key:
        description: |-
          Fairness key is a label key that can be used to provide fairness within a workload.
          Any [flow label](/concepts/integrations/flow-control/flow-label.md) can be used here. Eg. if
          you have a classifier that sets `user` flow label, you might want to set
          `fairness_key = "user"`.
        type: string
      priority:
        description: |-
          Describes priority level of the requests within the workload.
          Priority level ranges from 0 to 255.
          Higher numbers means higher priority level.

          @gotags: validate:"gte=0,lte=255"
        type: integer
        format: int64
        x-go-validate: gte=0,lte=255
      tokens:
        description: |-
          Tokens determines the cost of admitting a single request the workload, which is typically defined as milliseconds of response latency.
          This override is applicable only if `auto_tokens` is set to false.

          @gotags: default:"1"
        type: string
        format: uint64
        x-go-default: 1
  googlerpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
      message:
        type: string
  protobufAny:
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON

      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
    type: object
    properties:
      '@type':
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
        type: string
    additionalProperties: false
  statusv1Status:
    description: Status holds details about a status that can be reported to the registry.
    type: object
    properties:
      error:
        $ref: '#/definitions/v1StatusError'
      message:
        $ref: '#/definitions/protobufAny'
      timestamp:
        type: string
        format: date-time
  v1AIMDConcurrencyController:
    description: High level concurrency control component. Baselines a signal via
      exponential moving average and applies concurrency limits based on deviation
      of signal from the baseline. Internally implemented as a nested circuit.
    type: object
    properties:
      alerter_parameters:
        description: Configuration for embedded alerter.
        $ref: '#/definitions/v1AlerterParameters'
      concurrency_limit_multiplier:
        description: |-
          Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.

          @gotags: default:"2.0"
        type: number
        format: double
        x-go-default: 2
      concurrency_linear_increment:
        description: |-
          Linear increment to concurrency in each execution tick when the system is not in overloaded state.

          @gotags: default:"5.0"
        type: number
        format: double
        x-go-default: 5
      concurrency_sqrt_increment_multiplier:
        description: |-
          Scale factor to multiply square root of current accepted concurrrency. This, along with concurrencyLinearIncrement helps calculate overall concurrency increment in each tick. Concurrency is rapidly ramped up in each execution cycle during normal (non-overload) state (integral effect).

          @gotags: default:"1.0"
        type: number
        format: double
        x-go-default: 1
      dry_run_dynamic_config_key:
        description: Configuration key for load actuation dry run.
        type: string
      flow_selector:
        description: |-
          Flow Selector decides the service and flows at which the concurrency limiter is applied.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1FlowSelector'
      gradient_parameters:
        title: |-
          Gradient parameters for the controller. Defaults to:
          * slope = -1
          * min_gradient = 0.1
          * max_gradient = 1
        $ref: '#/definitions/v1GradientControllerParameters'
      in_ports:
        description: Input ports for the AIMDConcurrencyController component.
        $ref: '#/definitions/v1AIMDConcurrencyControllerIns'
      out_ports:
        description: Output ports for the AIMDConcurrencyController component.
        $ref: '#/definitions/v1AIMDConcurrencyControllerOuts'
      scheduler_parameters:
        description: |-
          Scheduler parameters.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1SchedulerParameters'
  v1AIMDConcurrencyControllerIns:
    description: Inputs for the AIMDConcurrencyController component.
    type: object
    properties:
      setpoint:
        description: The setpoint to the controller.
        $ref: '#/definitions/v1InPort'
      signal:
        description: The signal to the controller.
        $ref: '#/definitions/v1InPort'
  v1AIMDConcurrencyControllerOuts:
    description: Outputs for the AIMDConcurrencyController component.
    type: object
    properties:
      is_overload:
        description: Is overload is a boolean signal that indicates whether the service
          is overloaded based on the deviation of the signal from the setpoint taking
          into account some tolerance.
        $ref: '#/definitions/v1OutPort'
      load_multiplier:
        description: Load multiplier is the ratio of desired concurrency to the incoming
          concurrency.
        $ref: '#/definitions/v1OutPort'
  v1AddressExtractor:
    description: |-
      IP addresses in attribute context are defined as objects with separate ip and port fields.
      This is a helper to display an address as a single string.

      Note: Use with care, as it might accidentally introduce a high-cardinality flow label values.

      [ext-authz-address]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address

      Example:
      ```yaml
      from: "source.address # or destination.address"
      ```
    type: object
    title: Display an [Address][ext-authz-address] as a single string, eg. `<ip>:<port>`
    properties:
      from:
        description: |-
          Attribute path pointing to some string - eg. "source.address".

          @gotags: validate:"required"
        type: string
        x-go-validate: required
  v1Alerter:
    description: Alerter reacts to a signal and generates alert to send to alert manager.
    type: object
    properties:
      in_ports:
        description: Input ports for the Alerter component.
        $ref: '#/definitions/v1AlerterIns'
      parameters:
        description: '@gotags: validate:"required"'
        title: Alerter configuration
        x-go-validate: required
        $ref: '#/definitions/v1AlerterParameters'
  v1AlerterIns:
    description: Inputs for the Alerter component.
    type: object
    properties:
      signal:
        description: Signal which Alerter is monitoring. If the signal greater than
          0, Alerter generates an alert.
        $ref: '#/definitions/v1InPort'
  v1AlerterParameters:
    description: Alerter Parameters is a common config for separate alerter components
      and alerters embedded in other components.
    type: object
    properties:
      alert_channels:
        description: A list of alert channel strings.
        type: array
        items:
          type: string
      alert_name:
        description: |-
          Name of the alert.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      resolve_timeout:
        description: |-
          Duration of alert resolver.

          @gotags: default:"300s"
        type: string
        x-go-default: 300s
      severity:
        description: |-
          Severity of the alert, one of 'info', 'warn' or 'crit'.

          @gotags: default:"info" validate:"oneof=info warn crit"
        type: string
        x-go-default: info
        x-go-validate: oneof=info warn crit
  v1And:
    description: |-
      Logical AND.

      Signals are mapped to boolean values as follows:
      * Zero is treated as false.
      * Any non-zero is treated as true.
      * Invalid inputs are considered unknown.

        :::note
        Treating invalid inputs as "unknowns" has a consequence that the result
        might end up being valid even when some inputs are invalid. Eg. `unknown && false == false`,
        because the result would end up false no matter if
        first signal was true or false. On the other hand, `unknown && true == unknown`.
        :::
    type: object
    properties:
      in_ports:
        description: Input ports for the And component.
        $ref: '#/definitions/v1AndIns'
      out_ports:
        description: Output ports for the And component.
        $ref: '#/definitions/v1AndOuts'
  v1AndIns:
    description: Inputs for the And component.
    type: object
    properties:
      inputs:
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/v1InPort'
  v1AndOuts:
    description: Output ports for the And component.
    type: object
    properties:
      output:
        description: |-
          Result of logical AND of all the input signals.

          Will always be 0 (false), 1 (true) or invalid (unknown).
        $ref: '#/definitions/v1OutPort'
  v1ArithmeticCombinator:
    type: object
    title: Type of combinator that computes the arithmetic operation on the operand
      signals
    properties:
      in_ports:
        description: Input ports for the Arithmetic Combinator component.
        $ref: '#/definitions/v1ArithmeticCombinatorIns'
      operator:
        description: |-
          Operator of the arithmetic operation.

          The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
          In case of XOR and bitshifts, value of signals is cast to integers before performing the operation.

          @gotags: validate:"oneof=add sub mul div xor lshift rshift"
        type: string
        x-go-validate: oneof=add sub mul div xor lshift rshift
      out_ports:
        description: Output ports for the Arithmetic Combinator component.
        $ref: '#/definitions/v1ArithmeticCombinatorOuts'
  v1ArithmeticCombinatorIns:
    description: Inputs for the Arithmetic Combinator component.
    type: object
    properties:
      lhs:
        description: Left hand side of the arithmetic operation.
        $ref: '#/definitions/v1InPort'
      rhs:
        description: Right hand side of the arithmetic operation.
        $ref: '#/definitions/v1InPort'
  v1ArithmeticCombinatorOuts:
    description: Outputs for the Arithmetic Combinator component.
    type: object
    properties:
      output:
        description: Result of arithmetic operation.
        $ref: '#/definitions/v1OutPort'
  v1AutoScale:
    description: AutoScale components are used to scale a service.
    type: object
    properties:
      horizontal_pod_scaler:
        description: HorizontalPodScaler provides pod horizontal scaling functionality
          for scalable Kubernetes resources.
        $ref: '#/definitions/v1HorizontalPodScaler'
  v1Circuit:
    description: |-
      :::info
      See also [Circuit overview](/concepts/policy/circuit.md).
      :::

      Signals flow between components via ports.
      As signals traverse the circuit, they get processed, stored within components or get acted upon (e.g. load-shed, rate-limit, auto-scale etc.).
      Circuit is evaluated periodically in order to respond to changes in signal readings.

      :::info
      **Signal**

      Signals are floating-point values.

      A signal can also have a special **Invalid** value. It's usually used to
      communicate that signal doesn't have a meaningful value at the moment, eg.
      [PromQL](#v1-prom-q-l) emits such a value if it cannot execute a query.
      Components know when their input signals are invalid and can act
      accordingly. They can either propagate the invalidness, by making their
      output itself invalid (like eg.
      [ArithmeticCombinator](#v1-arithmetic-combinator)) or use some different
      logic, like eg. [Extrapolator](#v1-extrapolator). Refer to a component's
      docs on how exactly it handles invalid inputs.
      :::
    type: object
    title: Circuit is defined as a dataflow graph of inter-connected components
    properties:
      components:
        description: |-
          Defines a signal processing graph as a list of components.

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/v1Component'
      evaluation_interval:
        description: |-
          Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
          This interval is typically aligned with how often the corrective action (actuation) needs to be taken.

          @gotags: default:"0.5s"
        type: string
        x-go-default: 0.5s
  v1Classifier:
    description: |-
      :::info
      See also [Classifier overview](/concepts/integrations/flow-control/flow-classifier.md).
      :::

      Example:
      ```yaml
      selector:
        service_selector:
          service: service1.default.svc.cluster.local
        flow_selector:
          control_point:
            traffic: ingress
      rules:
        user:
          extractor:
            from: request.http.headers.user
      ```
    type: object
    title: Set of classification rules sharing a common selector
    properties:
      flow_selector:
        description: |-
          Defines where to apply the flow classification rule.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1FlowSelector'
      rules:
        description: |-
          A map of {key, value} pairs mapping from
          [flow label](/concepts/integrations/flow-control/flow-label.md) keys to rules that define
          how to extract and propagate flow labels with that key.

          @gotags: validate:"required,gt=0,dive,keys,required,endkeys,required"
        type: object
        additionalProperties:
          $ref: '#/definitions/v1Rule'
        x-go-validate: required,gt=0,dive,keys,required,endkeys,required
  v1Component:
    description: |-
      :::info
      See also [Components overview](/concepts/policy/circuit.md#components).
      :::

      Signals flow into the components via input ports and results are emitted on output ports.
      Components are wired to each other based on signal names forming an execution graph of the circuit.

      :::note
      Loops are broken by the runtime at the earliest component index that is part of the loop.
      The looped signals are saved in the tick they are generated and served in the subsequent tick.
      :::

      There are three categories of components:
      * "source" components – they take some sort of input from "the real world" and output
        a signal based on this input. Example: [PromQL](#v1-prom-q-l). In the UI
        they're represented by green color.
      * signal processor components – "pure" components that don't interact with the "real world".
        Examples: [GradientController](#v1-gradient-controller), [Max](#v1-max).
        :::note
        Signal processor components's output can depend on their internal state, in addition to the inputs.
        Eg. see the [Exponential Moving Average filter](#v1-e-m-a).
        :::
      * "sink" components – they affect the real world.
        [ConcurrencyLimiter.LoadActuator](#v1-concurrency-limiter) and [RateLimiter](#v1-rate-limiter).
        In the UI, represented by orange color.  Sink components usually come in pairs with a
        "sources" component which emits a feedback signal, like
        `accepted_concurrency` emitted by ConcurrencyLimiter.Scheduler.

      :::tip
      Sometimes you may want to use a constant value as one of component's inputs.
      You can create an input port containing the constant value instead of being connected to a signal.
      To do so, use the [InPort](#v1-in_port)'s .withConstantSignal(constant_signal) method.
      You can also use it to provide special math values such as NaN and +- Inf.
      If You need to provide the same constant signal to multiple components,
      You can use the [Variable](#v1-variable) component.
      :::

      See also [Policy](#v1-policy) for a higher-level explanation of circuits.
    type: object
    title: Computational block that form the circuit
    properties:
      alerter:
        description: Alerter reacts to a signal and generates alert to send to alert
          manager.
        $ref: '#/definitions/v1Alerter'
      and:
        description: Logical AND.
        $ref: '#/definitions/v1And'
      arithmetic_combinator:
        description: Applies the given operator on input operands (signals) and emits
          the result.
        $ref: '#/definitions/v1ArithmeticCombinator'
      auto_scale:
        description: AutoScale components are used to scale the service.
        $ref: '#/definitions/v1AutoScale'
      decider:
        description: Decider emits the binary result of comparison operator on two
          operands.
        $ref: '#/definitions/v1Decider'
      differentiator:
        description: Differentiator calculates rate of change per tick.
        $ref: '#/definitions/v1Differentiator'
      ema:
        description: Exponential Moving Average filter.
        $ref: '#/definitions/v1EMA'
      extrapolator:
        description: Takes an input signal and emits the extrapolated value; either
          mirroring the input value or repeating the last known value up to the maximum
          extrapolation interval.
        $ref: '#/definitions/v1Extrapolator'
      first_valid:
        description: Picks the first valid input signal and emits it.
        $ref: '#/definitions/v1FirstValid'
      flow_control:
        description: FlowControl components are used to regulate requests flow.
        $ref: '#/definitions/v1FlowControl'
      gradient_controller:
        description: |-
          Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
          This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
        $ref: '#/definitions/v1GradientController'
      holder:
        description: Holds the last valid signal value for the specified duration
          then waits for next valid value to hold.
        $ref: '#/definitions/v1Holder'
      integrator:
        description: Accumulates sum of signal every tick.
        $ref: '#/definitions/v1Integrator'
      inverter:
        description: Logical NOT.
        $ref: '#/definitions/v1Inverter'
      max:
        description: Emits the maximum of the input signals.
        $ref: '#/definitions/v1Max'
      min:
        description: Emits the minimum of the input signals.
        $ref: '#/definitions/v1Min'
      nested_circuit:
        description: Nested circuit defines a sub-circuit as a high-level component.
          It consists of a list of components and a map of input and output ports.
        $ref: '#/definitions/v1NestedCircuit'
      nested_signal_egress:
        description: Nested signal egress is a special type of component that allows
          to extract a signal from a nested circuit.
        $ref: '#/definitions/v1NestedSignalEgress'
      nested_signal_ingress:
        description: Nested signal ingress is a special type of component that allows
          to inject a signal into a nested circuit.
        $ref: '#/definitions/v1NestedSignalIngress'
      or:
        description: Logical OR.
        $ref: '#/definitions/v1Or'
      pulse_generator:
        description: Generates 0 and 1 in turns.
        $ref: '#/definitions/v1PulseGenerator'
      query:
        description: Query components that are query databases such as Prometheus.
        $ref: '#/definitions/v1Query'
      sqrt:
        description: Takes an input signal and emits the square root of the input
          signal.
        $ref: '#/definitions/v1Sqrt'
      switcher:
        description: Switcher acts as a switch that emits one of the two signals based
          on third signal.
        $ref: '#/definitions/v1Switcher'
      variable:
        description: Emits a variable signal which can be set to invalid.
        $ref: '#/definitions/v1Variable'
  v1ConcurrencyLimiter:
    description: |-
      :::info
      See also [Concurrency Limiter overview](/concepts/integrations/flow-control/components/concurrency-limiter.md).
      :::

      It is based on the actuation strategy (e.g. load actuator) and workload scheduling which is based on Weighted Fair Queuing principles.
      Concurrency is calculated in terms of total tokens which translate to (avg. latency \* in-flight requests), i.e. Little's Law.

      ConcurrencyLimiter configuration is split into two parts: An actuation
      strategy and a scheduler. Right now, only `load_actuator` strategy is available.
    type: object
    title: Concurrency Limiter is an actuator component that regulates flows in order
      to provide active service protection
    properties:
      flow_selector:
        description: |-
          Flow Selector decides the service and flows at which the concurrency limiter is applied.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1FlowSelector'
      load_actuator:
        description: |-
          Actuator based on limiting the accepted concurrency under incoming concurrency * load multiplier.

          Actuation strategy defines the input signal that will drive the scheduler.
        $ref: '#/definitions/v1LoadActuator'
      scheduler:
        description: |-
          Configuration of Weighted Fair Queuing-based workload scheduler.

          Contains configuration of per-agent scheduler, and also defines some
          output signals.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1Scheduler'
  v1ConstantSignal:
    description: Special constant input for ports and Variable component. Can provide
      either a constant value or special Nan/+-Inf value.
    type: object
    properties:
      special_value:
        type: string
        title: '@gotags: validate:"oneof=NaN +Inf -Inf"'
        x-go-validate: oneof=NaN +Inf -Inf
      value:
        type: number
        format: double
  v1Decider:
    description: |-
      The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.

      This component also supports time-based response, i.e. the output
      transitions between 1.0 or 0.0 signal if the decider condition is
      true or false for at least "true_for" or "false_for" duration. If
      `true_for` and `false_for` durations are zero then the transitions are
      instantaneous.
    type: object
    title: Type of combinator that computes the comparison operation on lhs and rhs
      signals
    properties:
      false_for:
        description: |-
          Duration of time to wait before a transition to false state.
          If the duration is zero, the transition will happen instantaneously.

          @gotags: default:"0s"
        type: string
        x-go-default: 0s
      in_ports:
        description: Input ports for the Decider component.
        $ref: '#/definitions/v1DeciderIns'
      operator:
        description: |-
          Comparison operator that computes operation on lhs and rhs input signals.

          @gotags: validate:"oneof=gt lt gte lte eq neq"
        type: string
        x-go-validate: oneof=gt lt gte lte eq neq
      out_ports:
        description: Output ports for the Decider component.
        $ref: '#/definitions/v1DeciderOuts'
      true_for:
        description: |-
          Duration of time to wait before a transition to true state.
          If the duration is zero, the transition will happen instantaneously.

          @gotags: default:"0s"
        type: string
        x-go-default: 0s
  v1DeciderIns:
    description: Inputs for the Decider component.
    type: object
    properties:
      lhs:
        description: Left hand side input signal for the comparison operation.
        $ref: '#/definitions/v1InPort'
      rhs:
        description: Right hand side input signal for the comparison operation.
        $ref: '#/definitions/v1InPort'
  v1DeciderOuts:
    description: Outputs for the Decider component.
    type: object
    properties:
      output:
        description: Selected signal (1.0 or 0.0).
        $ref: '#/definitions/v1OutPort'
  v1Differentiator:
    description: Differentiator calculates rate of change per tick.
    type: object
    properties:
      in_ports:
        description: Input ports for the Differentiator component.
        $ref: '#/definitions/v1DifferentiatorIns'
      out_ports:
        description: Output ports for the Differentiator component.
        $ref: '#/definitions/v1DifferentiatorOuts'
      window:
        description: |-
          The window of time over which differentiator operates.

          @gotags: default:"5s"
        type: string
        x-go-default: 5s
  v1DifferentiatorIns:
    description: Inputs for the Differentiator component.
    type: object
    properties:
      input:
        $ref: '#/definitions/v1InPort'
  v1DifferentiatorOuts:
    description: Outputs for the Differentiator component.
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
  v1EMA:
    description: |-
      At any time EMA component operates in one of the following states:
      1. Warm up state: The first warmup_window samples are used to compute the initial EMA.
         If an invalid reading is received during the warmup_window, the last good average is emitted and the state gets reset back to beginning of Warm up state.
      2. Normal state: The EMA is computed using following formula.

      The EMA for a series $Y$ is calculated recursively as:

      $$
      \text{EMA} _t =
      \begin{cases}
        Y_0, &\text{for } t = 0 \\
        \alpha Y_t + (1 - \alpha) \text{EMA} _{t-1}, &\text{for }t > 0
      \end{cases}
      $$

      The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
      A higher $\alpha$ discounts older observations faster.
      The $\alpha$ is computed using ema\_window:

      $$
      \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
      $$

      The EMA filter also employs a min-max-envelope logic during warm up stage, explained [here](#v1-e-m-a-ins).
    type: object
    title: Exponential Moving Average (EMA) is a type of moving average that applies
      exponentially more weight to recent signal readings
    properties:
      in_ports:
        description: Input ports for the EMA component.
        $ref: '#/definitions/v1EMAIns'
      out_ports:
        description: Output ports for the EMA component.
        $ref: '#/definitions/v1EMAOuts'
      parameters:
        description: |-
          Parameters for the EMA component.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1EMAParameters'
  v1EMAIns:
    description: Inputs for the EMA component.
    type: object
    properties:
      input:
        description: Input signal to be used for the EMA computation.
        $ref: '#/definitions/v1InPort'
      max_envelope:
        description: |-
          Upper bound of the moving average.

          Used during the warm-up stage: if the signal would exceed `max_envelope`
          it's multiplied by `correction_factor_on_max_envelope_violation` **once per tick**.

          :::note
          If the signal deviates from `max_envelope` faster than the correction
          faster, it might end up exceeding the envelope.
          :::

          :::note
          The envelope logic is **not** used outside the warm-up stage!
          :::
        $ref: '#/definitions/v1InPort'
      min_envelope:
        description: |-
          Lower bound of the moving average.

          Used during the warm-up stage analogously to `max_envelope`.
        $ref: '#/definitions/v1InPort'
  v1EMAOuts:
    description: Outputs for the EMA component.
    type: object
    properties:
      output:
        description: Exponential moving average of the series of reading as an output
          signal.
        $ref: '#/definitions/v1OutPort'
  v1EMAParameters:
    description: Parameters for the EMA component.
    type: object
    properties:
      correction_factor_on_max_envelope_violation:
        description: |-
          Correction factor to apply on the output value if its in violation of the max envelope.

          @gotags: validate:"gte=0,lte=1.0" default:"1.0"
        type: number
        format: double
        x-go-default: 1
        x-go-validate: gte=0,lte=1.0
      correction_factor_on_min_envelope_violation:
        description: |-
          Correction factor to apply on the output value if its in violation of the min envelope.

          @gotags: validate:"gte=1.0" default:"1.0"
        type: number
        format: double
        x-go-default: 1
        x-go-validate: gte=1.0
      ema_window:
        description: |-
          Duration of EMA sampling window.

          @gotags: default:"5s"
        type: string
        x-go-default: 5s
      valid_during_warmup:
        description: |-
          Whether the output is valid during the warm-up stage.

          @gotags: default:"false"
        type: boolean
        x-go-default: false
      warmup_window:
        description: |-
          Duration of EMA warming up window.

          The initial value of the EMA is the average of signal readings received during the warm-up window.

          @gotags: default:"0s"
        type: string
        x-go-default: 0s
  v1EqualsMatchExpression:
    description: Label selector expression of the equal form "label == value".
    type: object
    properties:
      label:
        description: |-
          Name of the label to equal match the value.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      value:
        description: Exact value that the label should be equal to.
        type: string
  v1Extractor:
    description: There are multiple variants of extractor, specify exactly one.
    type: object
    title: Defines a high-level way to specify how to extract a flow label value given
      http request metadata, without a need to write rego code
    properties:
      address:
        description: Display an address as a single string - `<ip>:<port>`.
        $ref: '#/definitions/v1AddressExtractor'
      from:
        description: |-
          Attribute path is a dot-separated path to attribute.

          Should be either:
          * one of the fields of [Attribute Context][attribute-context], or
          * a special "request.http.bearer" pseudo-attribute.
          Eg. "request.http.method" or "request.http.header.user-agent"

          Note: The same attribute path syntax is shared by other extractor variants,
          wherever attribute path is needed in their "from" syntax.

          Example:
          ```yaml
          from: request.http.headers.user-agent
          ```
          [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto
        type: string
        title: Use an attribute with no conversion
      json:
        description: Deserialize a json, and extract one of the fields.
        $ref: '#/definitions/v1JSONExtractor'
      jwt:
        description: Parse the attribute as JWT and read the payload.
        $ref: '#/definitions/v1JWTExtractor'
      path_templates:
        description: Match HTTP Path to given path templates.
        $ref: '#/definitions/v1PathTemplateMatcher'
  v1Extrapolator:
    description: It does so until `maximum_extrapolation_interval` is reached, beyond
      which it emits invalid signal unless input signal becomes valid again.
    type: object
    title: Extrapolates the input signal by repeating the last valid value during
      the period in which it is invalid
    properties:
      in_ports:
        description: Input ports for the Extrapolator component.
        $ref: '#/definitions/v1ExtrapolatorIns'
      out_ports:
        description: Output ports for the Extrapolator component.
        $ref: '#/definitions/v1ExtrapolatorOuts'
      parameters:
        description: |-
          Parameters for the Extrapolator component.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1ExtrapolatorParameters'
  v1ExtrapolatorIns:
    description: Inputs for the Extrapolator component.
    type: object
    properties:
      input:
        description: Input signal for the Extrapolator component.
        $ref: '#/definitions/v1InPort'
  v1ExtrapolatorOuts:
    description: Outputs for the Extrapolator component.
    type: object
    properties:
      output:
        description: Extrapolated signal.
        $ref: '#/definitions/v1OutPort'
  v1ExtrapolatorParameters:
    description: Parameters for the Extrapolator component.
    type: object
    properties:
      max_extrapolation_interval:
        description: |-
          Maximum time interval to repeat the last valid value of input signal.

          @gotags: default:"10s"
        type: string
        x-go-default: 10s
  v1FirstValid:
    type: object
    title: Picks the first valid input signal from the array of input signals and
      emits it as an output signal
    properties:
      in_ports:
        description: Input ports for the FirstValid component.
        $ref: '#/definitions/v1FirstValidIns'
      out_ports:
        description: Output ports for the FirstValid component.
        $ref: '#/definitions/v1FirstValidOuts'
  v1FirstValidIns:
    description: Inputs for the FirstValid component.
    type: object
    properties:
      inputs:
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/v1InPort'
  v1FirstValidOuts:
    description: Outputs for the FirstValid component.
    type: object
    properties:
      output:
        description: First valid input signal as an output signal.
        $ref: '#/definitions/v1OutPort'
  v1FlowControl:
    description: FlowControl components are used to regulate requests flow.
    type: object
    properties:
      aimd_concurrency_controller:
        description: AIMD Concurrency control component is based on Additive Increase
          and Multiplicative Decrease of Concurrency. It takes a signal and setpoint
          as inputs and reduces concurrency limits proportionally (or any arbitrary
          power) based on deviation of the signal from setpoint. Internally implemented
          as a nested circuit.
        $ref: '#/definitions/v1AIMDConcurrencyController'
      concurrency_limiter:
        description: Concurrency Limiter provides service protection by applying prioritized
          load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
        $ref: '#/definitions/v1ConcurrencyLimiter'
      rate_limiter:
        description: Rate Limiter provides service protection by applying rate limiter.
        $ref: '#/definitions/v1RateLimiter'
  v1FlowMatcher:
    description: |-
      :::info
      See also [FlowSelector overview](/concepts/integrations/flow-control/flow-selector.md).
      :::

      Example:
      ```yaml
      control_point: ingress
      label_matcher:
        match_labels:
          user_tier: gold
        match_expressions:
          - key: query
            operator: In
            values:
              - insert
              - delete
          - label: user_agent
            regex: ^(?!.*Chrome).*Safari
      ```
    type: object
    title: |-
      Describes which flows a [flow control
      component](/concepts/integrations/flow-control/flow-control.md#components) should apply
      to
    properties:
      control_point:
        description: |-
          [Control Point](/concepts/integrations/flow-control/flow-control.md#control-point)
          identifies the location of a Flow within a Service. For an SDK based insertion, a Control Point can represent a particular feature or execution
          block within a Service. In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners
          or filter chains.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      label_matcher:
        description: |-
          :::info
          See also [Label Matcher overview](/concepts/integrations/flow-control/flow-selector.md#label-matcher).
          :::

          :::note
          [Classifiers](#v1-classifier) _can_ use flow labels created by some other
          classifier, but only if they were created at some previous control point
          (and propagated in baggage).

          This limitation doesn't apply to selectors of other entities, like
          Flux Meters or Actuators. It's valid to create a flow label on a control
          point using classifier, and immediately use it for matching on the same
          control point.
          :::
        title: |-
          Label matcher allows to add _additional_ condition on
          [flow labels](/concepts/integrations/flow-control/flow-label.md)
          must also be satisfied (in addition to service+control point matching)
        $ref: '#/definitions/v1LabelMatcher'
  v1FlowSelector:
    description: |-
      :::info
      See also [FlowSelector overview](/concepts/integrations/flow-control/flow-selector.md).
      :::
    type: object
    title: |-
      Describes which flow in which service a [flow control
      component](/concepts/integrations/flow-control/flow-control.md#components) should apply
      to
    properties:
      flow_matcher:
        title: '@gotags: validate:"required"'
        x-go-validate: required
        $ref: '#/definitions/v1FlowMatcher'
      service_selector:
        title: '@gotags: validate:"required"'
        x-go-validate: required
        $ref: '#/definitions/v1ServiceSelector'
  v1FluxMeter:
    description: |-
      Flux Meter gathers metrics for the traffic that matches its selector.
      The histogram created by Flux Meter measures the workload latency by default.

      :::info
      See also [Flux Meter overview](/concepts/integrations/flow-control/flux-meter.md).
      :::

      Example of a selector that creates a histogram metric for all HTTP requests
      to particular service:
      ```yaml
      selector:
        service_selector:
          service: myservice.mynamespace.svc.cluster.local
        flow_selector:
          control_point: ingress
      ```
    type: object
    properties:
      attribute_key:
        description: |-
          Key of the attribute in access log or span from which the metric for this flux meter is read.

          :::info
          For list of available attributes in Envoy access logs, refer
          [Envoy Filter](/get-started/integrations/flow-control/envoy/istio.md#envoy-filter)
          :::

          @gotags: default:"workload_duration_ms"
        type: string
        x-go-default: workload_duration_ms
      exponential_buckets:
        $ref: '#/definitions/FluxMeterExponentialBuckets'
      exponential_buckets_range:
        $ref: '#/definitions/FluxMeterExponentialBucketsRange'
      flow_selector:
        description: The selection criteria for the traffic that will be measured.
        $ref: '#/definitions/v1FlowSelector'
      linear_buckets:
        $ref: '#/definitions/FluxMeterLinearBuckets'
      static_buckets:
        $ref: '#/definitions/FluxMeterStaticBuckets'
  v1GetPoliciesResponse:
    type: object
    properties:
      policies:
        $ref: '#/definitions/v1Policies'
  v1GradientController:
    description: |-
      The `gradient` describes a corrective factor that should be applied to the
      control variable to get the signal closer to the setpoint. It is computed as follows:

      $$
      \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
      $$

      `gradient` is then clamped to [min_gradient, max_gradient] range.

      The output of gradient controller is computed as follows:
      $$
      \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
      $$

      Note the additional `optimize` signal, that can be used to "nudge" the
      controller into desired idle state.

      The output can be _optionally_ clamped to desired range using `max` and
      `min` input.
    type: object
    title: |-
      Gradient controller is a type of controller which tries to adjust the
      control variable proportionally to the relative difference between setpoint
      and actual value of the signal
    properties:
      default_config:
        description: Default configuration.
        $ref: '#/definitions/v1GradientControllerDynamicConfig'
      dynamic_config_key:
        type: string
        title: Configuration key for DynamicConfig
      in_ports:
        description: Input ports of the Gradient Controller.
        $ref: '#/definitions/v1GradientControllerIns'
      out_ports:
        description: Output ports of the Gradient Controller.
        $ref: '#/definitions/v1GradientControllerOuts'
      parameters:
        description: |-
          Gradient Parameters.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1GradientControllerParameters'
  v1GradientControllerDynamicConfig:
    type: object
    title: Dynamic Configuration for a Controller
    properties:
      manual_mode:
        description: |-
          Decides whether the controller runs in "manual_mode".
          In manual mode, the controller does not adjust the control variable I.E. emits the same output as the control variable input.

          @gotags: default:"false"
        type: boolean
        x-go-default: false
  v1GradientControllerIns:
    description: Inputs for the Gradient Controller component.
    type: object
    properties:
      control_variable:
        description: |-
          Actual current value of the control variable.

          This signal is multiplied by the gradient to produce the output.
        $ref: '#/definitions/v1InPort'
      max:
        description: Maximum value to limit the output signal.
        $ref: '#/definitions/v1InPort'
      min:
        description: Minimum value to limit the output signal.
        $ref: '#/definitions/v1InPort'
      optimize:
        description: Optimize signal is added to the output of the gradient calculation.
        $ref: '#/definitions/v1InPort'
      setpoint:
        description: Setpoint to be used for the gradient computation.
        $ref: '#/definitions/v1InPort'
      signal:
        description: Signal to be used for the gradient computation.
        $ref: '#/definitions/v1InPort'
  v1GradientControllerOuts:
    description: Outputs for the Gradient Controller component.
    type: object
    properties:
      output:
        description: Computed desired value of the control variable.
        $ref: '#/definitions/v1OutPort'
  v1GradientControllerParameters:
    description: Gradient Parameters.
    type: object
    properties:
      max_gradient:
        description: |-
          Maximum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].

          @gotags: default:"1.79769313486231570814527423731704356798070e+308"
        type: number
        format: double
        x-go-default: 1.7976931348623157e+308
      min_gradient:
        description: |-
          Minimum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].

          @gotags: default:"-1.79769313486231570814527423731704356798070e+308"
        type: number
        format: double
        x-go-default: -1.7976931348623157e+308
      slope:
        description: |-
          Slope controls the aggressiveness and direction of the Gradient Controller.

          Slope is used as exponent on the signal to setpoint ratio in computation
          of the gradient (see the [main description](#v1-gradient-controller) for
          exact equation). Good intuition for this parameter is "What should the
          Gradient Controller do to the control variable when signal is too high",
          eg.:
          * $\text{slope} = 1$: when signal is too high, increase control variable,
          * $\text{slope} = -1$: when signal is too high, decrease control variable,
          * $\text{slope} = -0.5$: when signal is to high, decrease control variable more slowly.

          The sign of slope depends on correlation between the signal and control variable:
          * Use $\text{slope} < 0$ if signal and control variable are _positively_
          correlated (eg. Per-pod CPU usage and total concurrency).
          * Use $\text{slope} > 0$ if signal and control variable are _negatively_
          correlated (eg. Per-pod CPU usage and number of pods).

          :::note
          You need to set _negative_ slope for a _positive_ correlation, as you're
          describing the _action_ which controller should make when the signal
          increases.
          :::

          The magnitude of slope describes how aggressively should the controller
          react to a deviation of signal.
          With $|\text{slope}| = 1$, the controller will aim to bring the signal to
          the setpoint in one tick (assuming linear correlation with signal and setpoint).
          Smaller magnitudes of slope will make the controller adjust the control
          variable more slowly.

          We recommend setting $|\text{slope}| < 1$ (eg. $\pm0.8$).
          If you experience overshooting, consider lowering the magnitude even more.
          Values of $|\text{slope}| > 1$ are not recommended.

          :::note
          Remember that the gradient and output signal can be (optionally) clamped,
          so the _slope_ might not fully describe aggressiveness of the controller.
          :::

          @gotags: validate:"required"
        type: number
        format: double
        x-go-validate: required
  v1GroupStatus:
    description: |-
      Groups is nested structure that holds status information about the node and a
      pointer to the next node.
    type: object
    properties:
      groups:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1GroupStatus'
      status:
        $ref: '#/definitions/statusv1Status'
  v1Holder:
    description: |-
      Holds the last valid signal value for the specified duration then waits for next valid value to hold.
      If it's holding a value that means it ignores both valid and invalid new signals until the hold_for duration is finished.
    type: object
    properties:
      hold_for:
        description: |-
          Holding the last valid signal value for the hold_for duration.

          @gotags: default:"5s"
        type: string
        x-go-default: 5s
      in_ports:
        $ref: '#/definitions/v1HolderIns'
      out_ports:
        $ref: '#/definitions/v1HolderOuts'
  v1HolderIns:
    description: Inputs for the Holder component.
    type: object
    properties:
      input:
        $ref: '#/definitions/v1InPort'
  v1HolderOuts:
    description: Outputs for the Holder component.
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
  v1HorizontalPodScaler:
    type: object
    properties:
      kubernetes_object_selector:
        description: |-
          The Kubernetes object on which horizontal scaling is applied.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1KubernetesObjectSelector'
      scale_actuator:
        $ref: '#/definitions/HorizontalPodScalerScaleActuator'
      scale_reporter:
        $ref: '#/definitions/HorizontalPodScalerScaleReporter'
  v1HostInfo:
    type: object
    properties:
      hostname:
        type: string
      local_ip:
        type: string
      uuid:
        type: string
  v1InPort:
    type: object
    title: Components receive input from other components via InPorts
    properties:
      constant_signal:
        description: Constant value to be used for this InPort instead of a signal.
        $ref: '#/definitions/v1ConstantSignal'
      signal_name:
        description: Name of the incoming Signal on the InPort.
        type: string
  v1Integrator:
    description: Accumulates sum of signal every tick.
    type: object
    properties:
      in_ports:
        description: Input ports for the Integrator component.
        $ref: '#/definitions/v1IntegratorIns'
      out_ports:
        description: Output ports for the Integrator component.
        $ref: '#/definitions/v1IntegratorOuts'
  v1IntegratorIns:
    description: Inputs for the Integrator component.
    type: object
    properties:
      input:
        description: The input signal.
        $ref: '#/definitions/v1InPort'
      max:
        description: The maximum output when reset is not set.
        $ref: '#/definitions/v1InPort'
      min:
        description: The minimum output when reset is not set.
        $ref: '#/definitions/v1InPort'
      reset:
        description: Resets the integrator output to zero when reset signal is valid
          and non-zero.
        $ref: '#/definitions/v1InPort'
  v1IntegratorOuts:
    description: Outputs for the Integrator component.
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
  v1Inverter:
    description: |-
      Logical NOT.

      See [And component](#v1-and) on how signals are mapped onto boolean values.
    type: object
    properties:
      in_ports:
        description: Input ports for the Inverter component.
        $ref: '#/definitions/v1InverterIns'
      out_ports:
        description: Output ports for the Inverter component.
        $ref: '#/definitions/v1InverterOuts'
  v1InverterIns:
    description: Inputs for the Inverter component.
    type: object
    properties:
      input:
        description: |-
          Signal to be negated.

          @gotags: validate:"dive"
        $ref: '#/definitions/v1InPort'
  v1InverterOuts:
    description: Output ports for the Inverter component.
    type: object
    properties:
      output:
        description: |-
          Logical negation of the input signal.

          Will always be 0 (false), 1 (true) or invalid (unknown).
        $ref: '#/definitions/v1OutPort'
  v1JSONExtractor:
    description: |-
      Example:
      ```yaml
      from: request.http.body
      pointer: /user/name
      ```
    type: object
    title: Deserialize a json, and extract one of the fields
    properties:
      from:
        description: |-
          Attribute path pointing to some strings - eg. "request.http.body".

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      pointer:
        description: |-
          Json pointer represents a parsed json pointer which allows to select a specified field from the json payload.

          Note: Uses [json pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
          eg. `/foo/bar`. If the pointer points into an object, it'd be stringified.
        type: string
  v1JWTExtractor:
    description: |-
      Specify a field to be extracted from payload using "json_pointer".

      Note: The signature is not verified against the secret (we're assuming there's some
      other parts of the system that handles such verification).

      Example:
      ```yaml
      from: request.http.bearer
      json_pointer: /user/email
      ```
    type: object
    title: Parse the attribute as JWT and read the payload
    properties:
      from:
        description: |-
          Jwt token can be pulled from any input attribute, but most likely you'd want to use "request.http.bearer".

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      json_pointer:
        description: |-
          Json pointer allowing to select a specified field from the json payload.

          Note: Uses [json pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
          eg. `/foo/bar`. If the pointer points into an object, it'd be stringified.
        type: string
  v1K8sLabelMatcherRequirement:
    description: Label selector requirement which is a selector that contains values,
      a key, and an operator that relates the key and values.
    type: object
    properties:
      key:
        description: |-
          Label key that the selector applies to.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      operator:
        description: |-
          Logical operator which represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.

          @gotags: validate:"oneof=In NotIn Exists DoesNotExists"
        type: string
        x-go-validate: oneof=In NotIn Exists DoesNotExists
      values:
        description: |-
          An array of string values that relates to the key by an operator.
          If the operator is In or NotIn, the values array must be non-empty.
          If the operator is Exists or DoesNotExist, the values array must be empty.
        type: array
        items:
          type: string
  v1KubernetesObjectSelector:
    description: |-
      Describes which pods a control or observability
      component should apply to.
    type: object
    properties:
      agent_group:
        description: |-
          Which [agent-group](/concepts/integrations/flow-control/service.md#agent-group) this
          selector applies to.

          @gotags: default:"default"
        type: string
        x-go-default: default
      api_version:
        description: '@gotags: validate:"required"'
        type: string
        title: API version of Kubernetes resource
        x-go-validate: required
      kind:
        description: |-
          Kubernetes resource type.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      name:
        description: |-
          Kubernetes resource name.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      namespace:
        description: |-
          Kubernetes namespace that the resource belongs to.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
  v1LabelMatcher:
    description: |-
      It provides three ways to define requirements:
      - matchLabels
      - matchExpressions
      - arbitrary expression

      If multiple requirements are set, they are all ANDed.
      An empty label matcher always matches.
    type: object
    title: |-
      Allows to define rules whether a map of
      [labels](/concepts/integrations/flow-control/flow-label.md)
      should be considered a match or not
    properties:
      expression:
        description: An arbitrary expression to be evaluated on the labels.
        $ref: '#/definitions/v1MatchExpression'
      match_expressions:
        description: |-
          List of k8s-style label matcher requirements.

          Note: The requirements are ANDed.
        type: array
        items:
          $ref: '#/definitions/v1K8sLabelMatcherRequirement'
      match_labels:
        description: |-
          A map of {key,value} pairs representing labels to be matched.
          A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".

          Note: The requirements are ANDed.
        type: object
        additionalProperties:
          type: string
  v1LoadActuator:
    type: object
    title: Takes the load multiplier input signal and publishes it to the schedulers
      in the data-plane
    properties:
      alerter_parameters:
        description: Configuration for embedded alerter.
        $ref: '#/definitions/v1AlerterParameters'
      default_config:
        description: Default configuration.
        $ref: '#/definitions/v1LoadActuatorDynamicConfig'
      dynamic_config_key:
        description: Configuration key for DynamicConfig.
        type: string
      in_ports:
        description: Input ports for the Load Actuator component.
        $ref: '#/definitions/v1LoadActuatorIns'
  v1LoadActuatorDynamicConfig:
    type: object
    title: Dynamic Configuration for LoadActuator
    properties:
      dry_run:
        description: |-
          Decides whether to run the load actuator in dry-run mode. Dry run mode ensures that no traffic gets dropped by this load actuator.
          Useful for observing the behavior of Load Actuator without disrupting any real traffic.
        type: boolean
  v1LoadActuatorIns:
    description: Input for the Load Actuator component.
    type: object
    properties:
      load_multiplier:
        description: |-
          Load multiplier is ratio of [incoming
          concurrency](#v1-scheduler-outs) that needs to be accepted.
        $ref: '#/definitions/v1InPort'
  v1MatchExpression:
    description: |-
      MatchExpression has multiple variants, exactly one should be set.

      Example:
      ```yaml
      all:
        of:
          - label_exists: foo
          - label_equals: { label = app, value = frobnicator }
      ```
    type: object
    title: Defines a [map<string, string> → bool] expression to be evaluated on labels
    properties:
      all:
        description: The expression is true when all subexpressions are true.
        $ref: '#/definitions/MatchExpressionList'
      any:
        description: The expression is true when any subexpression is true.
        $ref: '#/definitions/MatchExpressionList'
      label_equals:
        description: The expression is true when label value equals given value.
        $ref: '#/definitions/v1EqualsMatchExpression'
      label_exists:
        description: |-
          The expression is true when label with given name exists.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      label_matches:
        description: The expression is true when label matches given regex.
        $ref: '#/definitions/v1MatchesMatchExpression'
      not:
        description: The expression negates the result of subexpression.
        $ref: '#/definitions/v1MatchExpression'
  v1MatchesMatchExpression:
    description: Label selector expression of the matches form "label matches regex".
    type: object
    properties:
      label:
        description: |-
          Name of the label to match the regular expression.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      regex:
        description: |-
          Regular expression that should match the label value.
          It uses [golang's regular expression syntax](https://github.com/google/re2/wiki/Syntax).

          @gotags: validate:"required"
        type: string
        x-go-validate: required
  v1Max:
    description: 'Max: output = max([]inputs).'
    type: object
    title: Takes a list of input signals and emits the signal with the maximum value
    properties:
      in_ports:
        description: Input ports for the Max component.
        $ref: '#/definitions/v1MaxIns'
      out_ports:
        description: Output ports for the Max component.
        $ref: '#/definitions/v1MaxOuts'
  v1MaxIns:
    description: Inputs for the Max component.
    type: object
    properties:
      inputs:
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/v1InPort'
  v1MaxOuts:
    description: Output for the Max component.
    type: object
    properties:
      output:
        description: Signal with maximum value as an output signal.
        $ref: '#/definitions/v1OutPort'
  v1Min:
    description: |-
      Takes an array of input signals and emits the signal with the minimum value
      Min: output = min([]inputs).
    type: object
    properties:
      in_ports:
        description: Input ports for the Min component.
        $ref: '#/definitions/v1MinIns'
      out_ports:
        description: Output ports for the Min component.
        $ref: '#/definitions/v1MinOuts'
  v1MinIns:
    description: Inputs for the Min component.
    type: object
    properties:
      inputs:
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/v1InPort'
  v1MinOuts:
    description: Output ports for the Min component.
    type: object
    properties:
      output:
        description: Signal with minimum value as an output signal.
        $ref: '#/definitions/v1OutPort'
  v1NestedCircuit:
    description: Nested circuit defines a sub-circuit as a high-level component. It
      consists of a list of components and a map of input and output ports.
    type: object
    properties:
      components:
        type: array
        title: '@gotags: validate:"dive"'
        items:
          $ref: '#/definitions/v1Component'
      in_ports_map:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1InPort'
      name:
        description: Name of the nested circuit component. This name is displayed
          by graph visualization tools.
        type: string
      out_ports_map:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1OutPort'
      short_description:
        description: Short description of the nested circuit component. This description
          is displayed by graph visualization tools.
        type: string
  v1NestedSignalEgress:
    description: Nested signal egress is a special type of component that allows to
      extract a signal from a nested circuit.
    type: object
    properties:
      in_ports:
        description: Input ports for the NestedSignalEgress component.
        $ref: '#/definitions/v1NestedSignalEgressIns'
      port_name:
        type: string
  v1NestedSignalEgressIns:
    description: Inputs for the NestedSignalEgress component.
    type: object
    properties:
      signal:
        description: The signal to be egressed.
        $ref: '#/definitions/v1InPort'
  v1NestedSignalIngress:
    description: Nested signal ingress is a special type of component that allows
      to inject a signal into a nested circuit.
    type: object
    properties:
      out_ports:
        description: Output ports for the NestedSignalIngress component.
        $ref: '#/definitions/v1NestedSignalIngressOuts'
      port_name:
        type: string
  v1NestedSignalIngressOuts:
    description: Outputs for the NestedSignalIngress component.
    type: object
    properties:
      signal:
        description: The signal to be ingressed.
        $ref: '#/definitions/v1OutPort'
  v1Or:
    description: |-
      Logical OR.

      See [And component](#v1-and) on how signals are mapped onto boolean values.
    type: object
    properties:
      in_ports:
        description: Input ports for the Or component.
        $ref: '#/definitions/v1OrIns'
      out_ports:
        description: Output ports for the Or component.
        $ref: '#/definitions/v1OrOuts'
  v1OrIns:
    description: Inputs for the Or component.
    type: object
    properties:
      inputs:
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/v1InPort'
  v1OrOuts:
    description: Output ports for the Or component.
    type: object
    properties:
      output:
        description: |-
          Result of logical OR of all the input signals.

          Will always be 0 (false), 1 (true) or invalid (unknown).
        $ref: '#/definitions/v1OutPort'
  v1OutPort:
    type: object
    title: Components produce output for other components via OutPorts
    properties:
      signal_name:
        description: Name of the outgoing Signal on the OutPort.
        type: string
  v1PathTemplateMatcher:
    description: |-
      HTTP path will be matched against given path templates.
      If a match occurs, the value associated with the path template will be treated as a result.
      In case of multiple path templates matching, the most specific one will be chosen.
    type: object
    title: Matches HTTP Path to given path templates
    properties:
      template_values:
        description: |-
          Template value keys are OpenAPI-inspired path templates.

          * Static path segment `/foo` matches a path segment exactly
          * `/{param}` matches arbitrary path segment.
            (The param name is ignored and can be omitted (`{}`))
          * The parameter must cover whole segment.
          * Additionally, path template can end with `/*` wildcard to match
            arbitrary number of trailing segments (0 or more).
          * Multiple consecutive `/` are ignored, as well as trailing `/`.
          * Parametrized path segments must come after static segments.
          * `*`, if present, must come last.
          * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/*`).

          See also <https://swagger.io/specification/#path-templating-matching>

          Example:
          ```yaml
          /register: register
          "/user/{userId}": user
          /static/*: other
          ```

          @gotags: validate:"gt=0,dive,keys,required,endkeys,required"
        type: object
        additionalProperties:
          type: string
        x-go-validate: required
  v1Policies:
    type: object
    properties:
      policies:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1Policy'
  v1Policy:
    description: |-
      :::info
      See also [Policy overview](/concepts/policy/policy.md).
      :::

      Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
    type: object
    title: Policy expresses reliability automation workflow that automatically protects
      services
    properties:
      circuit:
        description: Defines the control-loop logic of the policy.
        $ref: '#/definitions/v1Circuit'
      resources:
        description: Resources (Flux Meters, Classifiers etc.) to setup.
        $ref: '#/definitions/v1Resources'
  v1ProcessInfo:
    type: object
    properties:
      start_time:
        type: string
        format: date-time
      uptime:
        type: string
  v1PromQL:
    type: object
    title: Component that runs a Prometheus query periodically and returns the result
      as an output signal
    properties:
      evaluation_interval:
        description: |-
          Describes the interval between successive evaluations of the Prometheus query.

          @gotags: default:"10s"
        type: string
        x-go-default: 10s
      out_ports:
        description: Output ports for the PromQL component.
        $ref: '#/definitions/v1PromQLOuts'
      query_string:
        description: |-
          Describes the Prometheus query to be run.

          :::caution
          TODO we should describe how to construct the query, eg. how to employ the
          fluxmeters here or link to appropriate place in docs.
          :::
        type: string
  v1PromQLOuts:
    description: Output for the PromQL component.
    type: object
    properties:
      output:
        description: The result of the Prometheus query as an output signal.
        $ref: '#/definitions/v1OutPort'
  v1PulseGenerator:
    description: Generates 0 and 1 in turns.
    type: object
    properties:
      false_for:
        description: |-
          Emitting 0 for the false_for duration.

          @gotags: default:"5s"
        type: string
        x-go-default: 5s
      out_ports:
        $ref: '#/definitions/v1PulseGeneratorOuts'
      true_for:
        description: |-
          Emitting 1 for the true_for duration.

          @gotags: default:"5s"
        type: string
        x-go-default: 5s
  v1PulseGeneratorOuts:
    description: Outputs for the PulseGenerator component.
    type: object
    properties:
      output:
        $ref: '#/definitions/v1OutPort'
  v1Query:
    description: Query components that are query databases such as Prometheus.
    type: object
    properties:
      promql:
        description: Periodically runs a Prometheus query in the background and emits
          the result.
        $ref: '#/definitions/v1PromQL'
  v1RateLimiter:
    description: |-
      :::info
      See also [Rate Limiter overview](/concepts/integrations/flow-control/components/rate-limiter.md).
      :::

      Ratelimiting is done separately on per-label-value basis. Use _label\_key_
      to select which label should be used as key.
    type: object
    title: Limits the traffic on a control point to specified rate
    properties:
      default_config:
        title: Default configuration
        $ref: '#/definitions/v1RateLimiterDynamicConfig'
      dynamic_config_key:
        type: string
        title: Configuration key for DynamicConfig
      flow_selector:
        description: |-
          Which control point to apply this ratelimiter to.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1FlowSelector'
      in_ports:
        title: '@gotags: validate:"required"'
        x-go-validate: required
        $ref: '#/definitions/v1RateLimiterIns'
      parameters:
        description: '@gotags: validate:"required"'
        title: Parameters for the RateLimiter component
        x-go-validate: required
        $ref: '#/definitions/v1RateLimiterParameters'
  v1RateLimiterDynamicConfig:
    type: object
    title: Dynamic Configuration for the rate limiter
    properties:
      overrides:
        description: |-
          Allows to specify different limits for particular label values.

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/RateLimiterOverride'
  v1RateLimiterIns:
    type: object
    title: Inputs for the RateLimiter component
    properties:
      limit:
        description: |-
          Number of flows allowed per _limit\_reset\_interval_ per each label.
          Negative values disable the ratelimiter.

          :::tip
          Negative limit can be useful to _conditionally_ enable the ratelimiter
          under certain circumstances. [Decider](#v1-decider) might be helpful.
          :::

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1InPort'
  v1RateLimiterParameters:
    type: object
    properties:
      label_key:
        description: |-
          Specifies which label the ratelimiter should be keyed by.

          Rate limiting is done independently for each value of the
          [label](/concepts/integrations/flow-control/flow-label.md) with given key.
          Eg., to give each user a separate limit, assuming you have a _user_ flow
          label set up, set `label_key: "user"`.

          @gotags: validate:"required"
        type: string
        x-go-validate: required
      lazy_sync:
        title: Configuration of lazy-syncing behaviour of ratelimiter
        $ref: '#/definitions/ParametersLazySync'
      limit_reset_interval:
        description: |-
          Time after which the limit for a given label value will be reset.

          @gotags: default:"60s"
        type: string
        x-go-default: 60s
  v1Resources:
    description: |-
      :::info
      See also [Resources overview](/concepts/policy/resources.md).
      :::

      Resources are typically Flux Meters, Classifiers, etc. that can be used to create on-demand metrics or label the flows.
    type: object
    title: Resources that need to be setup for the policy to function
    properties:
      classifiers:
        description: |-
          Classifiers are installed in the data-plane and are used to label the requests based on payload content.

          The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/v1Classifier'
      flux_meters:
        description: |-
          Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.

          Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.

          @gotags: validate:"dive"
        type: object
        additionalProperties:
          $ref: '#/definitions/v1FluxMeter'
  v1Rule:
    description: |-
      Flow classification rule extracts a value from request metadata.
      More specifically, from `input`, which has the same spec as [Envoy's External Authorization Attribute Context][attribute-context].
      See https://play.openpolicyagent.org/p/gU7vcLkc70 for an example input.
      There are two ways to define a flow classification rule:
      * Using a declarative extractor – suitable from simple cases, such as directly reading a value from header or a field from json body.
      * Rego expression.

      Performance note: It's recommended to use declarative extractors where possible, as they may be slightly performant than Rego expressions.

      Example of Declarative JSON extractor:
      ```yaml
      extractor:
        json:
          from: request.http.body
          pointer: /user/name
      ```

      Example of Rego module which also disables telemetry visibility of label:
      ```yaml
      rego:
        query: data.user_from_cookie.user
        source: |
          package user_from_cookie
          cookies := split(input.attributes.request.http.headers.cookie, "; ")
          user := user {
              cookie := cookies[_]
              startswith(cookie, "session=")
              session := substring(cookie, count("session="), -1)
              parts := split(session, ".")
              object := json.unmarshal(base64url.decode(parts[0]))
              user := object.user
          }
      telemetry: false
      ```
      [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto
    type: object
    title: Rule describes a single Flow Classification Rule
    properties:
      extractor:
        description: High-level declarative extractor.
        $ref: '#/definitions/v1Extractor'
      rego:
        description: Rego module to extract a value from.
        $ref: '#/definitions/RuleRego'
      telemetry:
        description: |-
          :::note
          The flow label is always accessible in Aperture Policies regardless of this setting.
          :::

          :::caution
          When using [FluxNinja ARC plugin](arc/plugin.md), telemetry enabled
          labels are sent to FluxNinja ARC for observability. Telemetry should be disabled for
          sensitive labels.
          :::

          @gotags: default:"true"
        type: boolean
        title: |-
          Decides if the created flow label should be available as an attribute in OLAP telemetry and
          propagated in [baggage](/concepts/integrations/flow-control/flow-label.md#baggage)
        x-go-validate: required
  v1Scheduler:
    description: |-
      :::note
      Each Agent instantiates an independent copy of the scheduler, but output
      signals for accepted and incoming concurrency are aggregated across all agents.
      :::

      See [ConcurrencyLimiter](#v1-concurrency-limiter) for more context.
    type: object
    title: Weighted Fair Queuing-based workload scheduler
    properties:
      out_ports:
        description: Output ports for the Scheduler component.
        $ref: '#/definitions/v1SchedulerOuts'
      parameters:
        description: |-
          Scheduler parameters.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/v1SchedulerParameters'
  v1SchedulerOuts:
    description: Output for the Scheduler component.
    type: object
    properties:
      accepted_concurrency:
        description: |-
          Accepted concurrency is the number of accepted tokens per second.

          :::info
          **Accepted tokens** are tokens associated with
          [flows](/concepts/integrations/flow-control/flow-control.md#flow) that were accepted by
          this scheduler. Number of tokens for a flow is determined by a
          [workload parameters](#scheduler-workload-parameters) that the flow was assigned to (either
          via `auto_tokens` or explicitly by `Workload.tokens`).
          :::

          Value of this signal is the sum across all the relevant schedulers.
        $ref: '#/definitions/v1OutPort'
      incoming_concurrency:
        description: |-
          Incoming concurrency is the number of incoming tokens/sec.
          This is the same as `accepted_concurrency`, but across all the flows
          entering scheduler, including rejected ones.
        $ref: '#/definitions/v1OutPort'
  v1SchedulerParameters:
    type: object
    title: Scheduler parameters
    properties:
      auto_tokens:
        description: |-
          Automatically estimate the size of a request in each workload, based on
          historical latency. Each workload's `tokens` will be set to average
          latency of flows in that workload during last few seconds (exact duration
          of this average can change).

          @gotags: default:"true"
        type: boolean
        x-go-default: "true"
      default_workload_parameters:
        description: |-
          Parameters to be used if none of workloads specified in `workloads` match.

          @gotags: validate:"required"
        x-go-validate: required
        $ref: '#/definitions/SchedulerWorkloadParameters'
      max_timeout:
        description: |-
          :::caution
          This timeout needs to be strictly less than the timeout set on the
          client for the whole GRPC call:
          * in case of envoy, timeout set on `grpc_service` used in `ext_authz` filter,
          * in case of libraries, timeout configured... TODO.

          We're using fail-open logic in integrations, so if the GRPC timeout
          fires first, the flow will end up being unconditionally allowed while
          it're still waiting on the scheduler.

          To avoid such cases, the end-to-end GRPC timeout should also contain
          some headroom for constant overhead like serialization, etc. Default
          value for GRPC timeouts is 500ms, giving 50ms of headeroom, so when
          tweaking this timeout, make sure to adjust the GRPC timeout accordingly.
          :::

          @gotags: default:"0.49s"
        type: string
        title: Max Timeout is the value with which the flow timeout calculated by
          `timeout_factor` is capped
        x-go-default: 0.49s
      timeout_factor:
        description: |-
          If a flow is not able to get tokens within `timeout_factor` * `tokens` of duration,
          it will be rejected.

          This value impacts the prioritization and fairness because the larger the timeout the higher the chance a request has to get scheduled.

          @gotags: validate:"gte=0.0" default:"0.5"
        type: number
        format: double
        title: Timeout as a factor of tokens for a flow in a workload
        x-go-default: 0.5
        x-go-validate: gte=0.0
      workloads:
        description: |-
          List of workloads to be used in scheduler.

          Categorizing [flows](/concepts/integrations/flow-control/flow-control.md#flow) into workloads
          allows for load-shedding to be "smarter" than just "randomly deny 50% of
          requests". There are two aspects of this "smartness":
          * Scheduler can more precisely calculate concurrency if it understands
            that flows belonging to different classes have different weights (eg.
            inserts vs lookups).
          * Setting different priorities to different workloads lets the scheduler
            avoid dropping important traffic during overload.

          Each workload in this list specifies also a matcher that's used to
          determine which flow will be categorized into which workload.
          In case of multiple matching workloads, the first matching one will be used.
          If none of workloads match, `default_workload` will be used.

          :::info
          See also [workload definition in the concepts
          section](/concepts/integrations/flow-control/components/concurrency-limiter.md#workload).
          :::

          @gotags: validate:"dive"
        type: array
        items:
          $ref: '#/definitions/SchedulerWorkload'
  v1ServiceSelector:
    description: |-
      :::info
      See also [FlowSelector overview](/concepts/integrations/flow-control/flow-selector.md).
      :::
    type: object
    title: |-
      Describes which service a [flow control or observability
      component](/concepts/integrations/flow-control/flow-control.md#components) should apply
      to
    properties:
      agent_group:
        description: |-
          Which [agent-group](/concepts/integrations/flow-control/service.md#agent-group) this
          selector applies to.

          @gotags: default:"default"
        type: string
        x-go-default: default
      service:
        description: |-
          The Fully Qualified Domain Name of the
          [service](/concepts/integrations/flow-control/service.md) to select.

          In kubernetes, this is the FQDN of the Service object.

          Empty string means all services within an agent group (catch-all).

          :::note
          One entity may belong to multiple services.
          :::
        type: string
  v1Sqrt:
    description: |-
      $$
      \text{output} = \text{scale} \sqrt{\text{input}}
      $$
    type: object
    title: Takes an input signal and emits the square root of it multiplied by scale
      as an output
    properties:
      in_ports:
        description: Input ports for the Sqrt component.
        $ref: '#/definitions/v1SqrtIns'
      out_ports:
        description: Output ports for the Sqrt component.
        $ref: '#/definitions/v1SqrtOuts'
      scale:
        description: |-
          Scaling factor to be multiplied with the square root of the input signal.

          @gotags default:"1.0"
        type: number
        format: double
        x-go-default: 1
  v1SqrtIns:
    description: Inputs for the Sqrt component.
    type: object
    properties:
      input:
        description: Input signal.
        $ref: '#/definitions/v1InPort'
  v1SqrtOuts:
    description: Outputs for the Sqrt component.
    type: object
    properties:
      output:
        description: Output signal.
        $ref: '#/definitions/v1OutPort'
  v1StatusError:
    description: Error holds raw error message and its cause in a nested field.
    type: object
    properties:
      message:
        type: string
  v1Switcher:
    description: |-
      `on_true` will be returned if switch input is valid and not equal to 0.0 ,
       otherwise `on_false` will be returned.
    type: object
    title: Type of combinator that switches between `on_true` and `on_false` signals
      based on switch input
    properties:
      in_ports:
        description: Input ports for the Switcher component.
        $ref: '#/definitions/v1SwitcherIns'
      out_ports:
        description: Output ports for the Switcher component.
        $ref: '#/definitions/v1SwitcherOuts'
  v1SwitcherIns:
    description: Inputs for the Switcher component.
    type: object
    properties:
      on_false:
        description: Output signal when switch is invalid or 0.0.
        $ref: '#/definitions/v1InPort'
      on_true:
        description: Output signal when switch is valid and not 0.0.
        $ref: '#/definitions/v1InPort'
      switch:
        description: Decides whether to return on_true or on_false.
        $ref: '#/definitions/v1InPort'
  v1SwitcherOuts:
    description: Outputs for the Switcher component.
    type: object
    properties:
      output:
        description: Selected signal (on_true or on_false).
        $ref: '#/definitions/v1OutPort'
  v1Variable:
    description: Component that emits a variable value as an output signal, can be
      defined in dynamic configuration.
    type: object
    properties:
      default_config:
        description: Default configuration.
        $ref: '#/definitions/v1VariableDynamicConfig'
      dynamic_config_key:
        description: Configuration key for DynamicConfig.
        type: string
      out_ports:
        description: Output ports for the Variable component.
        $ref: '#/definitions/v1VariableOuts'
  v1VariableDynamicConfig:
    type: object
    properties:
      constant_signal:
        $ref: '#/definitions/v1ConstantSignal'
  v1VariableOuts:
    description: Outputs for the Variable component.
    type: object
    properties:
      output:
        description: The value is emitted to the output port.
        $ref: '#/definitions/v1OutPort'
  v1VersionInfo:
    type: object
    properties:
      build_host:
        type: string
      build_os:
        type: string
      build_time:
        type: string
      git_branch:
        type: string
      git_commit_hash:
        type: string
      service:
        type: string
      version:
        type: string
