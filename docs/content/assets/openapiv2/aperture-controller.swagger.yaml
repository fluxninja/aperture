consumes:
- application/json
produces:
- application/json
schemes:
- https
swagger: "2.0"
info:
  title: Aperture API
  version: "1.0"
host: aperture-controller
paths:
  /v1/dynamic-configs/{policy_name}:
    post:
      tags:
      - aperture-controller
      summary: PostDynamicConfig creates/updates dynamic config based on the provided
        request.
      operationId: PolicyService_PostDynamicConfig
      parameters:
      - type: string
        x-go-tag-validate: required
        name: policy_name
        in: path
        required: true
      - name: body
        in: body
        required: true
        schema:
          description: PostDynamicConfigRequest is a request to patch dynamic config
            for Policy.
          type: object
          properties:
            dynamic_config:
              type: object
              x-go-tag-validate: required
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/info/host:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Host
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/HostInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/info/process:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Process
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ProcessInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/info/version:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Version
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/VersionInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/policies:
    get:
      tags:
      - aperture-controller
      summary: GetPolicies returns all policies.
      operationId: PolicyService_GetPolicies
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetPoliciesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/policies/{name}:
    get:
      tags:
      - aperture-controller
      summary: GetPolicy returns a policy with the specified name.
      operationId: PolicyService_GetPolicy
      parameters:
      - type: string
        name: name
        in: path
        required: true
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetPolicyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
    delete:
      tags:
      - aperture-controller
      summary: DeletePolicy removes a policy with the specified name.
      operationId: PolicyService_DeletePolicy
      parameters:
      - type: string
        name: name
        in: path
        required: true
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/policies/{policy_name}:
    post:
      tags:
      - aperture-controller
      summary: UpsertPolicy creates/updates policy based on the provided request.
      operationId: PolicyService_UpsertPolicy
      parameters:
      - type: string
        x-go-tag-validate: required
        name: policy_name
        in: path
        required: true
      - name: body
        in: body
        required: true
        schema:
          description: PostPolicyRequest is a request to create or update Policy.
          type: object
          properties:
            policy:
              x-go-tag-validate: required
              $ref: '#/definitions/Policy'
            update_mask:
              description: The paths to update.
              type: string
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
    patch:
      tags:
      - aperture-controller
      summary: UpsertPolicy creates/updates policy based on the provided request.
      operationId: PolicyService_UpsertPolicy2
      parameters:
      - type: string
        x-go-tag-validate: required
        name: policy_name
        in: path
        required: true
      - name: body
        in: body
        required: true
        schema:
          description: PostPolicyRequest is a request to create or update Policy.
          type: object
          properties:
            policy:
              x-go-tag-validate: required
              $ref: '#/definitions/Policy'
            update_mask:
              description: The paths to update.
              type: string
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/status/{path}:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: StatusService_GetGroupStatus
      parameters:
      - pattern: .+
        type: string
        name: path
        in: path
        required: true
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GroupStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
definitions:
  AdaptiveLoadScheduler:
    description: The _Adaptive Load Scheduler_ adjusts the accepted token rate based
      on the deviation of the input signal from the setpoint.
    type: object
    properties:
      default_config:
        description: Default dynamic configuration for load actuation.
        $ref: '#/definitions/LoadSchedulerDynamicConfig'
      dynamic_config_key:
        description: Dynamic configuration key for load actuation.
        type: string
      in_ports:
        description: |+
          Collection of input ports for the _Adaptive Load Scheduler_ component.

        x-go-tag-validate: required
        $ref: '#/definitions/AdaptiveLoadSchedulerIns'
      out_ports:
        description: Collection of output ports for the _Adaptive Load Scheduler_
          component.
        $ref: '#/definitions/AdaptiveLoadSchedulerOuts'
      parameters:
        description: |+
          Parameters for the _Adaptive Load Scheduler_ component.

        x-go-tag-validate: required
        $ref: '#/definitions/AdaptiveLoadSchedulerParameters'
  AdaptiveLoadSchedulerIns:
    description: Input ports for the _Adaptive Load Scheduler_ component.
    type: object
    properties:
      overload_confirmation:
        description: |-
          The `overload_confirmation` port provides additional criteria to determine overload state which
          results in _Flow_ throttling at the service.
        $ref: '#/definitions/InPort'
      setpoint:
        description: |+
          The setpoint input to the controller.

        x-go-tag-validate: required
        $ref: '#/definitions/InPort'
      signal:
        description: |+
          The input signal to the controller.

        x-go-tag-validate: required
        $ref: '#/definitions/InPort'
  AdaptiveLoadSchedulerOuts:
    description: Output ports for the _Adaptive Load Scheduler_ component.
    type: object
    properties:
      desired_load_multiplier:
        description: Desired Load multiplier is the ratio of desired token rate to
          the incoming token rate.
        $ref: '#/definitions/OutPort'
      is_overload:
        description: A Boolean signal that indicates whether the service is in overload
          state.
        $ref: '#/definitions/OutPort'
      observed_load_multiplier:
        description: Observed Load multiplier is the ratio of accepted token rate
          to the incoming token rate.
        $ref: '#/definitions/OutPort'
  AdaptiveLoadSchedulerParameters:
    description: Parameters for the _Adaptive Load Scheduler_ component.
    type: object
    properties:
      alerter:
        description: |+
          Configuration parameters for the embedded Alerter.

        x-go-tag-validate: required
        $ref: '#/definitions/AlerterParameters'
      gradient:
        description: |+
          Parameters for the _Gradient Controller_.

        x-go-tag-validate: required
        $ref: '#/definitions/GradientControllerParameters'
      load_multiplier_linear_increment:
        description: |+
          Linear increment to load multiplier in each execution tick when the system is
          not in the overloaded state, up until the `max_load_multiplier` is reached.

        type: number
        format: double
        default: 0.0025
        x-go-tag-default: "0.0025"
      load_scheduler:
        description: |+
          Parameters for the _Load Scheduler_.

        x-go-tag-validate: required
        $ref: '#/definitions/LoadSchedulerParameters'
      max_load_multiplier:
        description: |+
          The maximum load multiplier that can be reached during recovery from an overload state.
          - Helps protect the service from request bursts while the system is still recovering.
          - Once this value is reached, the scheduler enters the pass-through mode, allowing requests to bypass the scheduler and be sent directly to the service.
          - Any future overload state is detected by the control policy, and the load multiplier increment cycle is restarted.

        type: number
        format: double
        default: 2
        x-go-tag-default: "2.0"
  AddressExtractor:
    description: |-
      IP addresses in attribute context are defined as objects with separate IP and port fields.
      This is a helper to display an address as a single string.

      :::caution

      This might introduce high-cardinality flow label values.

      :::

      [ext-authz-address]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address

      Example:
      ```yaml
      from: "source.address # or destination.address"
      ```
    type: object
    title: Display an [Address][ext-authz-address] as a single string, for example,
      `<ip>:<port>`
    required:
    - from
    properties:
      from:
        description: |+
          Attribute path pointing to some string - for example, `source.address`.

        type: string
        x-go-tag-validate: required
  Alerter:
    description: Alerter reacts to a signal and generates alert to send to alert manager.
    type: object
    properties:
      in_ports:
        description: Input ports for the Alerter component.
        $ref: '#/definitions/AlerterIns'
      parameters:
        title: Alerter configuration
        x-go-tag-validate: required
        $ref: '#/definitions/AlerterParameters'
  AlerterIns:
    description: Inputs for the Alerter component.
    type: object
    properties:
      signal:
        description: Signal which Alerter is monitoring. If the signal greater than
          0, Alerter generates an alert.
        $ref: '#/definitions/InPort'
  AlerterParameters:
    description: Alerter Parameters configure parameters such as alert name, severity,
      resolve timeout, alert channels and labels.
    type: object
    required:
    - alert_name
    properties:
      alert_channels:
        description: A list of alert channel strings.
        type: array
        items:
          type: string
      alert_name:
        description: |+
          Name of the alert.

        type: string
        x-go-tag-validate: required
      labels:
        description: Additional labels to add to alert.
        type: object
        additionalProperties:
          type: string
      resolve_timeout:
        description: |+
          Duration of alert resolver.

        type: string
        default: 5s
        x-go-tag-default: 5s
      severity:
        description: |+
          Severity of the alert, one of 'info', 'warn' or 'crit'.

        type: string
        default: info
        enum:
        - info
        - warn
        - crit
        x-go-tag-default: info
        x-go-tag-validate: oneof=info warn crit
        x-oneof: info | warn | crit
  And:
    description: |-
      Logical AND.

      Signals are mapped to Boolean values as follows:
      * Zero is treated as false.
      * Any non-zero is treated as true.
      * Invalid inputs are considered unknown.

        :::note

        Treating invalid inputs as "unknowns" has a consequence that the result
        might end up being valid even when some inputs are invalid. For example, `unknown && false == false`,
        because the result would end up false no matter if
        first signal was true or false. Conversely, `unknown && true == unknown`.

        :::
    type: object
    properties:
      in_ports:
        description: Input ports for the And component.
        $ref: '#/definitions/AndIns'
      out_ports:
        description: Output ports for the And component.
        $ref: '#/definitions/AndOuts'
  AndIns:
    description: Inputs for the And component.
    type: object
    properties:
      inputs:
        description: |+
          Array of input signals.

        type: array
        items:
          type: object
          $ref: '#/definitions/InPort'
        x-go-tag-validate: dive
  AndOuts:
    description: Output ports for the And component.
    type: object
    properties:
      output:
        description: |-
          Result of logical AND of all the input signals.

          Will always be 0 (false), 1 (true) or invalid (unknown).
        $ref: '#/definitions/OutPort'
  ArithmeticCombinator:
    type: object
    title: Type of Combinator that computes the arithmetic operation on the operand
      signals
    properties:
      in_ports:
        description: Input ports for the Arithmetic Combinator component.
        $ref: '#/definitions/ArithmeticCombinatorIns'
      operator:
        description: |+
          Operator of the arithmetic operation.

          The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
          In case of XOR and bit shifts, value of signals is cast to integers before performing the operation.

        type: string
        enum:
        - add
        - sub
        - mul
        - div
        - xor
        - lshift
        - rshift
        x-go-tag-validate: oneof=add sub mul div xor lshift rshift
        x-oneof: add | sub | mul | div | xor | lshift | rshift
      out_ports:
        description: Output ports for the Arithmetic Combinator component.
        $ref: '#/definitions/ArithmeticCombinatorOuts'
  ArithmeticCombinatorIns:
    description: Inputs for the Arithmetic Combinator component.
    type: object
    properties:
      lhs:
        description: Left hand side of the arithmetic operation.
        $ref: '#/definitions/InPort'
      rhs:
        description: Right hand side of the arithmetic operation.
        $ref: '#/definitions/InPort'
  ArithmeticCombinatorOuts:
    description: Outputs for the Arithmetic Combinator component.
    type: object
    properties:
      output:
        description: Result of arithmetic operation.
        $ref: '#/definitions/OutPort'
  AutoScale:
    description: AutoScale components are used to scale a service.
    type: object
    properties:
      auto_scaler:
        description: _AutoScaler_ provides auto-scaling functionality for any scalable
          resource.
        $ref: '#/definitions/AutoScaler'
      pod_scaler:
        description: PodScaler provides pod horizontal scaling functionality for scalable
          Kubernetes resources.
        $ref: '#/definitions/PodScaler'
  AutoScaler:
    description: _AutoScaler_ provides auto-scaling functionality for any scalable
      resource. Multiple _Controllers_ can be defined on the _AutoScaler_ for performing
      scale-out or scale-in. The _AutoScaler_ can interface with infrastructure APIs
      such as Kubernetes to perform auto-scale.
    type: object
    properties:
      dry_run:
        description: |-
          Dry run mode ensures that no scaling is invoked by this auto scaler.
          This is Useful for observing the behavior of auto scaler without disrupting any real traffic.
          This parameter sets the default value of dry run setting which can be overridden at runtime using dynamic configuration.
        type: boolean
      dry_run_config_key:
        description: Configuration key for overriding dry run setting through dynamic
          configuration.
        type: string
      scale_in_controllers:
        description: |+
          List of _Controllers_ for scaling in.

        type: array
        items:
          type: object
          $ref: '#/definitions/ScaleInController'
        x-go-tag-validate: dive
      scale_out_controllers:
        description: |+
          List of _Controllers_ for scaling out.

        type: array
        items:
          type: object
          $ref: '#/definitions/ScaleOutController'
        x-go-tag-validate: dive
      scaling_backend:
        x-go-tag-validate: required
        $ref: '#/definitions/AutoScalerScalingBackend'
      scaling_parameters:
        description: |+
          Parameters that define the scaling behavior.

        x-go-tag-validate: required
        $ref: '#/definitions/AutoScalerScalingParameters'
  AutoScalerScalingBackend:
    type: object
    properties:
      kubernetes_replicas:
        $ref: '#/definitions/AutoScalerScalingBackendKubernetesReplicas'
  AutoScalerScalingBackendKubernetesReplicas:
    description: KubernetesReplicas defines a horizontal pod scaler for Kubernetes.
    type: object
    properties:
      kubernetes_object_selector:
        description: |+
          The Kubernetes object on which horizontal scaling is applied.

        x-go-tag-validate: required
        $ref: '#/definitions/KubernetesObjectSelector'
      max_replicas:
        description: |+
          The maximum replicas to which the _AutoScaler_ can scale-out.

        type: string
        format: int64
        default: "9223372036854775807"
        minLength: 1
        x-go-tag-default: "9223372036854775807"
        x-go-tag-validate: gt=0
      min_replicas:
        description: |+
          The minimum replicas to which the _AutoScaler_ can scale-in.

        type: string
        format: int64
        default: "0"
        minLength: 0
        x-go-tag-default: "0"
        x-go-tag-validate: gte=0
      out_ports:
        description: Output ports for _Kubernetes Replicas_.
        $ref: '#/definitions/AutoScalerScalingBackendKubernetesReplicasOuts'
  AutoScalerScalingBackendKubernetesReplicasOuts:
    type: object
    title: Outputs
    properties:
      actual_replicas:
        $ref: '#/definitions/OutPort'
      configured_replicas:
        $ref: '#/definitions/OutPort'
      desired_replicas:
        $ref: '#/definitions/OutPort'
  AutoScalerScalingParameters:
    type: object
    properties:
      cooldown_override_percentage:
        description: |+
          Cooldown override percentage defines a threshold change in scale-out beyond which previous cooldown is overridden.
          For example, if the cooldown is 5 minutes and the cooldown override percentage is 10%, then if the
          scale-increases by 10% or more, the previous cooldown is cancelled. Defaults to 50%.

        type: number
        format: double
        default: 50
        x-go-tag-default: "50"
      max_scale_in_percentage:
        description: |+
          The maximum decrease of scale (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 1% of current scale value.

        type: number
        format: double
        default: 1
        x-go-tag-default: "1"
      max_scale_out_percentage:
        description: |+
          The maximum increase of scale (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 10% of current scale value.

        type: number
        format: double
        default: 10
        x-go-tag-default: "10"
      scale_in_alerter:
        description: |+
          Configuration for scale-in Alerter.

        x-go-tag-validate: required
        $ref: '#/definitions/AlerterParameters'
      scale_in_cooldown:
        description: |+
          The amount of time to wait after a scale-in operation for another scale-in operation.

        type: string
        default: 120s
        x-go-tag-default: 120s
      scale_out_alerter:
        description: |+
          Configuration for scale-out Alerter.

        x-go-tag-validate: required
        $ref: '#/definitions/AlerterParameters'
      scale_out_cooldown:
        description: |+
          The amount of time to wait after a scale-out operation for another scale-out or scale-in operation.

        type: string
        default: 30s
        x-go-tag-default: 30s
  Circuit:
    description: |-
      Circuit is graph of inter-connected signal processing components.

      :::info

      See also [Circuit overview](/concepts/policy/circuit.md).

      :::

      Signals flow between components through ports.
      As signals traverse the circuit, they get processed, stored within components or get acted upon (for example, load-shed, rate-limit, auto-scale and so on).
      Circuit is evaluated periodically to respond to changes in signal readings.

      :::info Signals

      Signals are floating point values.

      A signal can also have a special **Invalid** value. It's usually used to
      communicate that signal does not have a meaningful value at the moment, for example,
      [PromQL](#prom-q-l) emits such a value if it cannot execute a query.
      Components know when their input signals are invalid and can act
      accordingly. They can either propagate the invalid signal, by making their
      output itself invalid (for example,
      [ArithmeticCombinator](#arithmetic-combinator)) or use some different
      logic, for example, [Extrapolator](#extrapolator). Refer to a component's
      docs on how exactly it handles invalid inputs.

      :::
    type: object
    properties:
      components:
        description: |+
          Defines a signal processing graph as a list of components.

        type: array
        items:
          type: object
          $ref: '#/definitions/Component'
        x-go-tag-validate: dive
      evaluation_interval:
        description: |+
          Evaluation interval (tick) is the time between consecutive runs of the policy circuit.
          This interval is typically aligned with how often the corrective action (actuation) needs to be taken.

        type: string
        default: 0.5s
        x-go-tag-default: 0.5s
  Classifier:
    description: |-
      :::info

      See also [Classifier overview](/concepts/flow-control/resources/classifier.md).

      :::
      Example
      ```yaml
      selectors:
         - agent_group: demoapp
           service: service1-demo-app.demoapp.svc.cluster.local
           control_point: ingress
           label_matcher:
              match_labels:
                user_tier: gold
              match_expressions:
                - key: user_type
                  operator: In
      rules:
        user:
         extractor:
           from: request.http.headers.user-agent
        telemetry: false
      ```
    type: object
    title: Set of classification rules sharing a common selector
    required:
    - selectors
    properties:
      rego:
        description: |-
          Rego is a policy language used to express complex policies in a concise and declarative way.
          It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
          For simple cases, such as directly reading a value from header or a field from JSON body, declarative extractors are recommended.
        title: Rego based classification
        $ref: '#/definitions/Rego'
      rules:
        description: |+
          A map of {key, value} pairs mapping from
          [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
          how to extract and propagate flow labels with that key.

        type: object
        additionalProperties:
          $ref: '#/definitions/Rule'
        x-go-tag-validate: dive,keys,required,endkeys,required
      selectors:
        description: |+
          Selectors for flows that will be classified by this _Classifier_.

        type: array
        minItems: 1
        items:
          type: object
          $ref: '#/definitions/Selector'
        x-go-tag-validate: required,gt=0,dive
  Component:
    description: |-
      :::info

      See also [Components overview](/concepts/policy/circuit.md#components).

      :::

      Signals flow into the components from input ports and results are emitted on output ports.
      Components are wired to each other based on signal names forming an execution graph of the circuit.

      :::note

      Loops are broken by the runtime at the earliest component index that is part of the loop.
      The looped signals are saved in the tick they're generated and served in the subsequent tick.

      :::

      See also [Policy](#policy) for a higher-level explanation of circuits.
    type: object
    title: Computational block that forms the circuit
    properties:
      alerter:
        description: Alerter reacts to a signal and generates alert to send to alert
          manager.
        $ref: '#/definitions/Alerter'
      and:
        description: Logical AND.
        $ref: '#/definitions/And'
      arithmetic_combinator:
        description: Applies the given operator on input operands (signals) and emits
          the result.
        $ref: '#/definitions/ArithmeticCombinator'
      auto_scale:
        description: AutoScale components are used to scale the service.
        $ref: '#/definitions/AutoScale'
      decider:
        description: Decider emits the binary result of comparison operator on two
          operands.
        $ref: '#/definitions/Decider'
      differentiator:
        description: Differentiator calculates rate of change per tick.
        $ref: '#/definitions/Differentiator'
      ema:
        description: Exponential Moving Average filter.
        $ref: '#/definitions/EMA'
      extrapolator:
        description: Takes an input signal and emits the extrapolated value; either
          mirroring the input value or repeating the last known value up to the maximum
          extrapolation interval.
        $ref: '#/definitions/Extrapolator'
      first_valid:
        description: Picks the first valid input signal and emits it.
        $ref: '#/definitions/FirstValid'
      flow_control:
        description: FlowControl components are used to regulate requests flow.
        $ref: '#/definitions/FlowControl'
      gradient_controller:
        description: |-
          Gradient controller calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
          This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
        $ref: '#/definitions/GradientController'
      holder:
        description: Holds the last valid signal value for the specified duration
          then waits for next valid value to hold.
        $ref: '#/definitions/Holder'
      integrator:
        description: Accumulates sum of signal every tick.
        $ref: '#/definitions/Integrator'
      inverter:
        description: Logical NOT.
        $ref: '#/definitions/Inverter'
      max:
        description: Emits the maximum of the input signals.
        $ref: '#/definitions/Max'
      min:
        description: Emits the minimum of the input signals.
        $ref: '#/definitions/Min'
      nested_circuit:
        description: Nested circuit defines a sub-circuit as a high-level component.
          It consists of a list of components and a map of input and output ports.
        $ref: '#/definitions/NestedCircuit'
      nested_signal_egress:
        description: Nested signal egress is a special type of component that allows
          to extract a signal from a nested circuit.
        $ref: '#/definitions/NestedSignalEgress'
      nested_signal_ingress:
        description: Nested signal ingress is a special type of component that allows
          to inject a signal into a nested circuit.
        $ref: '#/definitions/NestedSignalIngress'
      or:
        description: Logical OR.
        $ref: '#/definitions/Or'
      pulse_generator:
        description: Generates 0 and 1 in turns.
        $ref: '#/definitions/PulseGenerator'
      query:
        description: Query components that are query databases such as Prometheus.
        $ref: '#/definitions/Query'
      signal_generator:
        description: Generates the specified signal.
        $ref: '#/definitions/SignalGenerator'
      sma:
        description: Simple Moving Average filter.
        $ref: '#/definitions/SMA'
      switcher:
        description: Switcher acts as a switch that emits one of the two signals based
          on third signal.
        $ref: '#/definitions/Switcher'
      unary_operator:
        description: Takes an input signal and emits the square root of the input
          signal.
        $ref: '#/definitions/UnaryOperator'
      variable:
        description: Emits a variable signal which can be set to invalid.
        $ref: '#/definitions/Variable'
  ConstantSignal:
    description: Special constant input for ports and Variable component. Can provide
      either a constant value or special Nan/+-Inf value.
    type: object
    properties:
      special_value:
        description: |+
          A special value such as NaN, +Inf, -Inf.

        type: string
        enum:
        - NaN
        - +Inf
        - -Inf
        x-go-tag-validate: oneof=NaN +Inf -Inf
        x-oneof: NaN | +Inf | -Inf
      value:
        description: A constant value.
        type: number
        format: double
  Decider:
    description: |-
      The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.

      This component also supports time-based response (the output)
      transitions between 1.0 or 0.0 signal if the decider condition is
      true or false for at least `true_for` or `false_for` duration. If
      `true_for` and `false_for` durations are zero then the transitions are
      instantaneous.
    type: object
    title: Type of Combinator that computes the comparison operation on LHS and RHS
      signals
    properties:
      false_for:
        description: |+
          Duration of time to wait before changing to false state.
          If the duration is zero, the change will happen instantaneously.

        type: string
        default: 0s
        x-go-tag-default: 0s
      in_ports:
        description: Input ports for the Decider component.
        $ref: '#/definitions/DeciderIns'
      operator:
        description: |+
          Comparison operator that computes operation on LHS and RHS input signals.

        type: string
        enum:
        - gt
        - lt
        - gte
        - lte
        - eq
        - neq
        x-go-tag-validate: oneof=gt lt gte lte eq neq
        x-oneof: gt | lt | gte | lte | eq | neq
      out_ports:
        description: Output ports for the Decider component.
        $ref: '#/definitions/DeciderOuts'
      true_for:
        type: string
        title: |-
          Duration of time to wait before changing to true state.
          If the duration is zero, the change will happen instantaneously.```
        default: 0s
        x-go-tag-default: 0s
  DeciderIns:
    description: Inputs for the Decider component.
    type: object
    properties:
      lhs:
        description: Left hand side input signal for the comparison operation.
        $ref: '#/definitions/InPort'
      rhs:
        description: Right hand side input signal for the comparison operation.
        $ref: '#/definitions/InPort'
  DeciderOuts:
    description: Outputs for the Decider component.
    type: object
    properties:
      output:
        description: Selected signal (1.0 or 0.0).
        $ref: '#/definitions/OutPort'
  DecreasingGradient:
    description: Decreasing Gradient defines a controller for scaling in based on
      Gradient Controller.
    type: object
    properties:
      in_ports:
        description: Input ports for the Gradient.
        $ref: '#/definitions/DecreasingGradientIns'
      parameters:
        title: |-
          Gradient parameters for the controller. Defaults and constraints:
          * `slope` = 1
          * `min_gradient` = -Inf (must be less than 1)
          * `max_gradient` = 1 (cannot be changed)
        $ref: '#/definitions/DecreasingGradientParameters'
  DecreasingGradientIns:
    description: Inputs for Gradient.
    type: object
    properties:
      setpoint:
        description: The setpoint to use for scale-in.
        $ref: '#/definitions/InPort'
      signal:
        description: The signal to use for scale-in.
        $ref: '#/definitions/InPort'
  DecreasingGradientParameters:
    description: This allows subset of parameters with constrained values compared
      to a regular gradient controller. For full documentation of these parameters,
      refer to the [GradientControllerParameters](#gradient-controller-parameters).
    type: object
    properties:
      min_gradient:
        type: number
        format: double
        default: -1.7976931348623157e+308
        x-go-tag-default: "-1.79769313486231570814527423731704356798070e+308"
        x-go-tag-validate: lte=1.0
      slope:
        type: number
        format: double
        default: 1
        x-go-tag-default: "1.0"
  Differentiator:
    description: Differentiator calculates rate of change per tick.
    type: object
    properties:
      in_ports:
        description: Input ports for the Differentiator component.
        $ref: '#/definitions/DifferentiatorIns'
      out_ports:
        description: Output ports for the Differentiator component.
        $ref: '#/definitions/DifferentiatorOuts'
      window:
        description: |+
          The window of time over which differentiator operates.

        type: string
        default: 5s
        x-go-tag-default: 5s
  DifferentiatorIns:
    description: Inputs for the Differentiator component.
    type: object
    properties:
      input:
        $ref: '#/definitions/InPort'
  DifferentiatorOuts:
    description: Outputs for the Differentiator component.
    type: object
    properties:
      output:
        $ref: '#/definitions/OutPort'
  EMA:
    description: |-
      At any time EMA component operates in one of the following states:
      1. Warm up state: The first `warmup_window` samples are used to compute the initial EMA.
         If an invalid reading is received during the `warmup_window`, the last good average is emitted and the state gets reset back to beginning of warm up state.
      2. Normal state: The EMA is computed using following formula.

      The EMA for a series $Y$ is calculated recursively as:
      <!-- vale off -->
      $$
      \text{EMA} _t =
      \begin{cases}
        Y_0, &\text{for } t = 0 \\
        \alpha Y_t + (1 - \alpha) \text{EMA}_{t-1}, &\text{for }t > 0
      \end{cases}
      $$

      The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
      A higher $\alpha$ discounts older observations faster.
      The $\alpha$ is computed using ema\_window:

      $$
      \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
      $$
      <!-- vale on -->
    type: object
    title: Exponential Moving Average (EMA) is a type of moving average that applies
      exponentially more weight to recent signal readings
    properties:
      in_ports:
        description: Input ports for the EMA component.
        $ref: '#/definitions/EMAIns'
      out_ports:
        description: Output ports for the EMA component.
        $ref: '#/definitions/EMAOuts'
      parameters:
        description: |+
          Parameters for the EMA component.

        x-go-tag-validate: required
        $ref: '#/definitions/EMAParameters'
  EMAIns:
    description: Inputs for the EMA component.
    type: object
    properties:
      input:
        description: Input signal to be used for the EMA computation.
        $ref: '#/definitions/InPort'
      max_envelope:
        description: |-
          Upper bound of the moving average.

          When the signal exceeds `max_envelope` it is multiplied by
          `correction_factor_on_max_envelope_violation` **once per tick**.

          :::note

          If the signal deviates from `max_envelope` faster than the correction
          faster, it might end up exceeding the envelope.

          :::
        $ref: '#/definitions/InPort'
      min_envelope:
        description: |-
          Lower bound of the moving average.

          Behavior is similar to `max_envelope`.
        $ref: '#/definitions/InPort'
  EMAOuts:
    description: Outputs for the EMA component.
    type: object
    properties:
      output:
        description: Exponential moving average of the series of reading as an output
          signal.
        $ref: '#/definitions/OutPort'
  EMAParameters:
    description: Parameters for the EMA component.
    type: object
    required:
    - ema_window
    - warmup_window
    properties:
      correction_factor_on_max_envelope_violation:
        description: |+
          Correction factor to apply on the output value if its in violation of the max envelope.

        type: number
        format: double
        default: 1
        minimum: 0
        x-go-tag-default: "1.0"
        x-go-tag-validate: gte=0,lte=1.0
      correction_factor_on_min_envelope_violation:
        description: |+
          Correction factor to apply on the output value if its in violation of the min envelope.

        type: number
        format: double
        default: 1
        x-go-tag-default: "1.0"
        x-go-tag-validate: gte=1.0
      ema_window:
        description: |+
          Duration of EMA sampling window.

        type: string
        x-go-tag-validate: required
      valid_during_warmup:
        description: |+
          Whether the output is valid during the warm-up stage.

        type: boolean
        default: false
        x-go-tag-default: "false"
      warmup_window:
        description: |+
          Duration of EMA warming up window.

          The initial value of the EMA is the average of signal readings received during the warm up window.

        type: string
        x-go-tag-validate: required
  EqualsMatchExpression:
    description: Label selector expression of the equal form `label == value`.
    type: object
    required:
    - label
    properties:
      label:
        description: |+
          Name of the label to equal match the value.

        type: string
        x-go-tag-validate: required
      value:
        description: Exact value that the label should be equal to.
        type: string
  Extractor:
    description: There are multiple variants of extractor, specify exactly one.
    type: object
    title: Defines a high-level way to specify how to extract a flow label value given
      HTTP request metadata, without a need to write Rego code
    properties:
      address:
        description: Display an address as a single string - `<ip>:<port>`.
        $ref: '#/definitions/AddressExtractor'
      from:
        description: |-
          Attribute path is a dot-separated path to attribute.

          Should be either:
          * one of the fields of [Attribute Context](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto), or
          * a special `request.http.bearer` pseudo-attribute.
          For example, `request.http.method` or `request.http.header.user-agent`

          Note: The same attribute path syntax is shared by other extractor variants,
          wherever attribute path is needed in their "from" syntax.

          Example:
          ```yaml
          from: request.http.headers.user-agent
          ```
        type: string
        title: Use an attribute with no conversion
      json:
        description: Parse JSON, and extract one of the fields.
        $ref: '#/definitions/JSONExtractor'
      jwt:
        description: Parse the attribute as JWT and read the payload.
        $ref: '#/definitions/JWTExtractor'
      path_templates:
        description: Match HTTP Path to given path templates.
        $ref: '#/definitions/PathTemplateMatcher'
  Extrapolator:
    description: It does so until `maximum_extrapolation_interval` is reached, beyond
      which it emits invalid signal unless input signal becomes valid again.
    type: object
    title: Extrapolates the input signal by repeating the last valid value during
      the period in which it is invalid
    properties:
      in_ports:
        description: Input ports for the Extrapolator component.
        $ref: '#/definitions/ExtrapolatorIns'
      out_ports:
        description: Output ports for the Extrapolator component.
        $ref: '#/definitions/ExtrapolatorOuts'
      parameters:
        description: |+
          Parameters for the Extrapolator component.

        x-go-tag-validate: required
        $ref: '#/definitions/ExtrapolatorParameters'
  ExtrapolatorIns:
    description: Inputs for the Extrapolator component.
    type: object
    properties:
      input:
        description: Input signal for the Extrapolator component.
        $ref: '#/definitions/InPort'
  ExtrapolatorOuts:
    description: Outputs for the Extrapolator component.
    type: object
    properties:
      output:
        description: Extrapolated signal.
        $ref: '#/definitions/OutPort'
  ExtrapolatorParameters:
    description: Parameters for the Extrapolator component.
    type: object
    required:
    - max_extrapolation_interval
    properties:
      max_extrapolation_interval:
        description: |+
          Maximum time interval to repeat the last valid value of input signal.

        type: string
        x-go-tag-validate: required
  FirstValid:
    type: object
    title: Picks the first valid input signal from the array of input signals and
      emits it as an output signal
    properties:
      in_ports:
        description: Input ports for the FirstValid component.
        $ref: '#/definitions/FirstValidIns'
      out_ports:
        description: Output ports for the FirstValid component.
        $ref: '#/definitions/FirstValidOuts'
  FirstValidIns:
    description: Inputs for the FirstValid component.
    type: object
    properties:
      inputs:
        description: |+
          Array of input signals.

        type: array
        items:
          type: object
          $ref: '#/definitions/InPort'
        x-go-tag-validate: dive
  FirstValidOuts:
    description: Outputs for the FirstValid component.
    type: object
    properties:
      output:
        description: First valid input signal as an output signal.
        $ref: '#/definitions/OutPort'
  FlowControl:
    description: _Flow Control_ encompasses components that manage the flow of requests
      or access to features within a service.
    type: object
    properties:
      adaptive_load_scheduler:
        description: _Adaptive Load Scheduler_ component is based on additive increase
          and multiplicative decrease of token rate. It takes a signal and setpoint
          as inputs and reduces token rate proportionally (or any arbitrary power)
          based on deviation of the signal from setpoint.
        $ref: '#/definitions/AdaptiveLoadScheduler'
      load_ramp:
        description: _Load Ramp_ smoothly regulates the flow of requests over specified
          steps.
        $ref: '#/definitions/LoadRamp'
      load_ramp_series:
        description: _Load Ramp Series_ is a series of _Load Ramp_ components that
          can shape load one after another at same or different _Control Points_.
        $ref: '#/definitions/LoadRampSeries'
      load_scheduler:
        description: _Load Scheduler_ provides service protection by creating a prioritized
          workload queue in front of the service using Weighted Fair Queuing.
        $ref: '#/definitions/LoadScheduler'
      rate_limiter:
        description: _Rate Limiter_ provides service protection by applying rate limits.
        $ref: '#/definitions/RateLimiter'
      regulator:
        description: Regulator is a component that regulates the flow of requests
          to the service by allowing only the specified percentage of requests or
          sticky sessions.
        $ref: '#/definitions/Regulator'
  FlowControlResources:
    type: object
    title: FlowControl Resources
    properties:
      classifiers:
        description: |+
          Classifiers are installed in the data-plane and are used to label the requests based on payload content.

          The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.

        type: array
        items:
          type: object
          $ref: '#/definitions/Classifier'
        x-go-tag-validate: dive
      flux_meters:
        description: |+
          Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.

          Flux Meter created metrics can be consumed as input to the circuit through the PromQL component.

        type: object
        additionalProperties:
          $ref: '#/definitions/FluxMeter'
        x-go-tag-validate: dive
  FluxMeter:
    description: |-
      Flux Meter gathers metrics for the traffic that matches its selector.
      The histogram created by Flux Meter measures the workload latency by default.

      :::info

      See also [Flux Meter overview](/concepts/flow-control/resources/flux-meter.md).

      :::
      Example:
      ```yaml
      static_buckets:
         buckets: [5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]
      selectors:
         - agent_group: demoapp
           service: service1-demo-app.demoapp.svc.cluster.local
           control_point: ingress
      attribute_key: response_duration_ms
      ```
    type: object
    required:
    - selectors
    properties:
      attribute_key:
        description: |+
          Key of the attribute in access log or span from which the metric for this flux meter is read.

          :::info

          For list of available attributes in Envoy access logs, refer
          [Envoy Filter](/get-started/integrations/flow-control/envoy/istio.md#envoy-filter)

          :::

        type: string
        default: workload_duration_ms
        x-go-tag-default: workload_duration_ms
      exponential_buckets:
        $ref: '#/definitions/FluxMeterExponentialBuckets'
      exponential_buckets_range:
        $ref: '#/definitions/FluxMeterExponentialBucketsRange'
      linear_buckets:
        $ref: '#/definitions/FluxMeterLinearBuckets'
      selectors:
        description: |+
          Selectors for the component.

        type: array
        minItems: 1
        items:
          type: object
          $ref: '#/definitions/Selector'
        x-go-tag-validate: required,gt=0,dive
      static_buckets:
        $ref: '#/definitions/FluxMeterStaticBuckets'
  FluxMeterExponentialBuckets:
    description: |-
      ExponentialBuckets creates `count` number of buckets where the lowest bucket has an upper bound of `start`
      and each following bucket's upper bound is `factor` times the previous bucket's upper bound. The final +inf
      bucket is not counted.
    type: object
    properties:
      count:
        description: |+
          Number of buckets.

        type: integer
        format: int32
        minimum: 0
        exclusiveMinimum: true
        x-go-tag-validate: gt=0
      factor:
        description: |+
          Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.

        type: number
        format: double
        x-go-tag-validate: gt=1.0
      start:
        description: |+
          Upper bound of the lowest bucket.

        type: number
        format: double
        x-go-tag-validate: gt=0.0
  FluxMeterExponentialBucketsRange:
    description: |-
      ExponentialBucketsRange creates `count` number of buckets where the lowest bucket is `min` and the highest
      bucket is `max`. The final +inf bucket is not counted.
    type: object
    properties:
      count:
        description: |+
          Number of buckets.

        type: integer
        format: int32
        minimum: 0
        exclusiveMinimum: true
        x-go-tag-validate: gt=0
      max:
        description: Highest bucket.
        type: number
        format: double
      min:
        description: |+
          Lowest bucket.

        type: number
        format: double
        x-go-tag-validate: gt=0.0
  FluxMeterLinearBuckets:
    description: |-
      LinearBuckets creates `count` number of buckets, each `width` wide, where the lowest bucket has an
      upper bound of `start`. The final +inf bucket is not counted.
    type: object
    properties:
      count:
        description: |+
          Number of buckets.

        type: integer
        format: int32
        minimum: 0
        exclusiveMinimum: true
        x-go-tag-validate: gt=0
      start:
        description: Upper bound of the lowest bucket.
        type: number
        format: double
      width:
        description: Width of each bucket.
        type: number
        format: double
  FluxMeterStaticBuckets:
    description: StaticBuckets holds the static value of the buckets where latency
      histogram will be stored.
    type: object
    properties:
      buckets:
        description: |+
          The buckets in which latency histogram will be stored.

        type: array
        default:
        - 5
        - 10
        - 25
        - 50
        - 100
        - 250
        - 500
        - 1000
        - 2500
        - 5000
        - 10000
        items:
          type: number
          format: double
        x-go-tag-default: '[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]'
  GetPoliciesResponse:
    description: GetPoliciesResponse is a response containing all Policies.
    type: object
    properties:
      policies:
        $ref: '#/definitions/Policies'
  GetPolicyResponse:
    description: GetPolicyResponse is a response containing the requested Policy.
    type: object
    properties:
      policy:
        $ref: '#/definitions/Policy'
  GradientController:
    description: |-
      The `gradient` describes a corrective factor that should be applied to the
      control variable to get the signal closer to the setpoint. It's computed as follows:

      $$
      \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
      $$

      `gradient` is then clamped to `[min_gradient, max_gradient]` range.

      The output of gradient controller is computed as follows:
      $$
      \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
      $$

      Note the additional `optimize` signal, that can be used to "nudge" the
      controller into desired idle state.

      The output can be _optionally_ clamped to desired range using `max` and
      `min` input.
    type: object
    title: |-
      Gradient controller is a type of controller which tries to adjust the
      control variable proportionally to the relative difference between setpoint
      and actual value of the signal
    properties:
      default_config:
        description: Default configuration.
        $ref: '#/definitions/GradientControllerDynamicConfig'
      dynamic_config_key:
        type: string
        title: Configuration key for DynamicConfig
      in_ports:
        description: Input ports of the Gradient Controller.
        $ref: '#/definitions/GradientControllerIns'
      out_ports:
        description: Output ports of the Gradient Controller.
        $ref: '#/definitions/GradientControllerOuts'
      parameters:
        description: |+
          Gradient Parameters.

        x-go-tag-validate: required
        $ref: '#/definitions/GradientControllerParameters'
  GradientControllerDynamicConfig:
    type: object
    title: Dynamic Configuration for a Controller
    properties:
      manual_mode:
        description: |+
          Decides whether the controller runs in `manual_mode`.
          In manual mode, the controller does not adjust the control variable It emits the same output as the control variable input.

        type: boolean
        default: false
        x-go-tag-default: "false"
  GradientControllerIns:
    description: Inputs for the Gradient Controller component.
    type: object
    properties:
      control_variable:
        description: |-
          Actual current value of the control variable.

          This signal is multiplied by the gradient to produce the output.
        $ref: '#/definitions/InPort'
      max:
        description: Maximum value to limit the output signal.
        $ref: '#/definitions/InPort'
      min:
        description: Minimum value to limit the output signal.
        $ref: '#/definitions/InPort'
      optimize:
        description: Optimize signal is added to the output of the gradient calculation.
        $ref: '#/definitions/InPort'
      setpoint:
        description: Setpoint to be used for the gradient computation.
        $ref: '#/definitions/InPort'
      signal:
        description: Signal to be used for the gradient computation.
        $ref: '#/definitions/InPort'
  GradientControllerOuts:
    description: Outputs for the Gradient Controller component.
    type: object
    properties:
      output:
        description: Computed desired value of the control variable.
        $ref: '#/definitions/OutPort'
  GradientControllerParameters:
    description: Gradient Parameters.
    type: object
    required:
    - slope
    properties:
      max_gradient:
        description: |+
          Maximum gradient which clamps the computed gradient value to the range, `[min_gradient, max_gradient]`.

        type: number
        format: double
        default: 1.7976931348623157e+308
        x-go-tag-default: "1.79769313486231570814527423731704356798070e+308"
      min_gradient:
        description: |+
          Minimum gradient which clamps the computed gradient value to the range, `[min_gradient, max_gradient]`.

        type: number
        format: double
        default: -1.7976931348623157e+308
        x-go-tag-default: "-1.79769313486231570814527423731704356798070e+308"
      slope:
        description: |+
          Slope controls the aggressiveness and direction of the Gradient Controller.

          Slope is used as exponent on the signal to setpoint ratio in computation
          of the gradient (see the [main description](#gradient-controller) for
          exact equation). This parameter decides how aggressive the controller
          responds to the deviation of signal from the setpoint.
          for example:
          * $\text{slope} = 1$: when signal is too high, increase control variable,
          * $\text{slope} = -1$: when signal is too high, decrease control variable,
          * $\text{slope} = -0.5$: when signal is too high, decrease control variable gradually.

          The sign of slope depends on correlation between the signal and control variable:
          * Use $\text{slope} < 0$ if there is a _positive_ correlation between the signal and
          the control variable (for example, Per-pod CPU usage and total concurrency).
          * Use $\text{slope} > 0$ if there is a _negative_ correlation between the signal and
          the control variable (for example, Per-pod CPU usage and number of pods).

          :::note

          You need to set _negative_ slope for a _positive_ correlation, as you're
          describing the _action_ which controller should make when the signal
          increases.

          :::

          The magnitude of slope describes how aggressively should the controller
          react to a deviation of signal.
          With $|\text{slope}| = 1$, the controller will aim to bring the signal to
          the setpoint in one tick (assuming linear correlation with signal and setpoint).
          Smaller magnitudes of slope will make the controller adjust the control
          variable gradually.

          Setting $|\text{slope}| < 1$ (for example, $\pm0.8$) is recommended.
          If you experience overshooting, consider lowering the magnitude even more.
          Values of $|\text{slope}| > 1$ aren't recommended.

          :::note

          Remember that the gradient and output signal can be (optionally) clamped,
          so the _slope_ might not fully describe aggressiveness of the controller.

          :::

        type: number
        format: double
        x-go-tag-validate: required
  GroupStatus:
    description: |-
      Groups is nested structure that holds status information about the node and a
      pointer to the next node.
    type: object
    properties:
      groups:
        type: object
        additionalProperties:
          $ref: '#/definitions/GroupStatus'
      status:
        $ref: '#/definitions/Status'
  Holder:
    description: |-
      Holds the last valid signal value for the specified duration then waits for next valid value to hold.
      If it is holding a value that means it ignores both valid and invalid new signals until the `hold_for` duration is finished.
    type: object
    properties:
      hold_for:
        description: |+
          Holding the last valid signal value for the `hold_for` duration.

        type: string
        default: 5s
        x-go-tag-default: 5s
      in_ports:
        description: Input ports for the Holder component.
        $ref: '#/definitions/HolderIns'
      out_ports:
        description: Output ports for the Holder component.
        $ref: '#/definitions/HolderOuts'
  HolderIns:
    description: Inputs for the Holder component.
    type: object
    properties:
      input:
        description: The input signal.
        $ref: '#/definitions/InPort'
      reset:
        description: Resets the holder output to the current input signal when reset
          signal is valid and non-zero.
        $ref: '#/definitions/InPort'
  HolderOuts:
    description: Outputs for the Holder component.
    type: object
    properties:
      output:
        description: The output signal.
        $ref: '#/definitions/OutPort'
  HostInfo:
    type: object
    properties:
      hostname:
        type: string
      local_ip:
        type: string
      uuid:
        type: string
  InPort:
    type: object
    title: Components receive input from other components through InPorts
    properties:
      constant_signal:
        description: Constant value to be used for this InPort instead of a signal.
        $ref: '#/definitions/ConstantSignal'
      signal_name:
        description: Name of the incoming Signal on the InPort.
        type: string
  IncreasingGradient:
    description: Increasing Gradient defines a controller for scaling out based on
      _Gradient Controller_.
    type: object
    properties:
      in_ports:
        description: Input ports for the Gradient.
        $ref: '#/definitions/IncreasingGradientIns'
      parameters:
        title: |-
          Gradient parameters for the controller. Defaults and constraints:
          * `slope` = 1
          * `min_gradient` = 1 (cannot be changed)
          * `max_gradient` = +Inf (must be greater than 1)
        $ref: '#/definitions/IncreasingGradientParameters'
  IncreasingGradientIns:
    description: Inputs for Gradient.
    type: object
    properties:
      setpoint:
        description: The setpoint to use for scale-out.
        $ref: '#/definitions/InPort'
      signal:
        description: The signal to use for scale-out.
        $ref: '#/definitions/InPort'
  IncreasingGradientParameters:
    description: This allows subset of parameters with constrained values compared
      to a regular gradient controller. For full documentation of these parameters,
      refer to the [GradientControllerParameters](#gradient-controller-parameters).
    type: object
    properties:
      max_gradient:
        type: number
        format: double
        default: 1.7976931348623157e+308
        x-go-tag-default: "1.79769313486231570814527423731704356798070e+308"
        x-go-tag-validate: gte=1.0
      slope:
        type: number
        format: double
        default: 1
        x-go-tag-default: "1.0"
  InfraMeter:
    description: |-
      InfraMeter is a resource that sets up OpenTelemetry pipelines.
      It defines receivers, processors, and a single metrics pipeline
      which will be exported to the configured Prometheus instance.
      Environment variables can be used in the configuration using format `${ENV_VAR_NAME}`.

      :::info

      See also [Get Started / Setup Integrations / Metrics](/get-started/integrations/metrics/metrics.md).

      :::
    type: object
    properties:
      per_agent_group:
        description: |+
          PerAgentGroup marks the pipeline to be instantiated only once per agent
          group. This is helpful for receivers that scrape for example, some cluster-wide
          metrics. When not set, pipeline will be instantiated on every Agent.

        type: boolean
        default: false
        x-go-tag-default: "false"
      pipeline:
        description: |+
          Pipeline is an OTel metrics pipeline definition, which **only** uses receivers
          and processors defined above. Exporter would be added automatically.

          If there are no processors defined or only one processor is defined, the
          pipeline definition can be omitted. In such cases, the pipeline will
          automatically use all given receivers and the defined processor (if
          any).  However, if there are more than one processor, the pipeline must
          be defined explicitly.

        x-go-tag-validate: required
        $ref: '#/definitions/InfraMeterMetricsPipeline'
      processors:
        description: |-
          Processors define processors to be used in custom metrics pipelines. This should
          be in [OTel format](https://opentelemetry.io/docs/collector/configuration/#processors).
        type: object
        additionalProperties:
          type: object
      receivers:
        description: |-
          Receivers define receivers to be used in custom metrics pipelines. This should
          be in [OTel format](https://opentelemetry.io/docs/collector/configuration/#receivers).
        type: object
        additionalProperties:
          type: object
  InfraMeterMetricsPipeline:
    description: MetricsPipelineConfig defines a custom metrics pipeline.
    type: object
    properties:
      processors:
        type: array
        items:
          type: string
      receivers:
        type: array
        items:
          type: string
  Integrator:
    description: Accumulates sum of signal every tick.
    type: object
    properties:
      in_ports:
        description: Input ports for the Integrator component.
        $ref: '#/definitions/IntegratorIns'
      initial_value:
        description: |+
          Initial value of the integrator.

        type: number
        format: double
        default: 0
        x-go-tag-default: "0"
      out_ports:
        description: Output ports for the Integrator component.
        $ref: '#/definitions/IntegratorOuts'
  IntegratorIns:
    description: Inputs for the Integrator component.
    type: object
    properties:
      input:
        description: The input signal.
        $ref: '#/definitions/InPort'
      max:
        description: The maximum output.
        $ref: '#/definitions/InPort'
      min:
        description: The minimum output.
        $ref: '#/definitions/InPort'
      reset:
        description: Resets the integrator output to zero when reset signal is valid
          and non-zero. Reset also resets the max and min constraints.
        $ref: '#/definitions/InPort'
  IntegratorOuts:
    description: Outputs for the Integrator component.
    type: object
    properties:
      output:
        $ref: '#/definitions/OutPort'
  Inverter:
    description: |-
      Logical NOT.

      See [And component](#and) on how signals are mapped onto Boolean values.
    type: object
    properties:
      in_ports:
        description: Input ports for the Inverter component.
        $ref: '#/definitions/InverterIns'
      out_ports:
        description: Output ports for the Inverter component.
        $ref: '#/definitions/InverterOuts'
  InverterIns:
    description: Inputs for the Inverter component.
    type: object
    properties:
      input:
        description: |+
          Signal to be negated.

        x-go-tag-validate: dive
        $ref: '#/definitions/InPort'
  InverterOuts:
    description: Output ports for the Inverter component.
    type: object
    properties:
      output:
        description: |-
          Logical negation of the input signal.

          Will always be 0 (false), 1 (true) or invalid (unknown).
        $ref: '#/definitions/OutPort'
  JSONExtractor:
    description: |-
      Example:
      ```yaml
      from: request.http.body
      pointer: /user/name
      ```
    type: object
    title: Parse JSON, and extract one of the fields
    required:
    - from
    properties:
      from:
        description: |+
          Attribute path pointing to some strings - for example, `request.http.body`.

        type: string
        x-go-tag-validate: required
      pointer:
        description: |-
          JSON pointer represents a parsed JSON pointer which allows to select a specified field from the payload.

          Note: Uses [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
          for example, `/foo/bar`. If the pointer points into an object, it'd be converted to a string.
        type: string
  JWTExtractor:
    description: |-
      Specify a field to be extracted from payload using `json_pointer`.

      Note: The signature is not verified against the secret (assuming there's some
      other part of the system that handles such verification).

      Example:
      ```yaml
      from: request.http.bearer
      json_pointer: /user/email
      ```
    type: object
    title: Parse the attribute as JWT and read the payload
    required:
    - from
    properties:
      from:
        description: |+
          JWT (JSON Web Token) can be extracted from any input attribute, but most likely you'd want to use `request.http.bearer`.

        type: string
        x-go-tag-validate: required
      json_pointer:
        description: |-
          JSON pointer allowing to select a specified field from the payload.

          Note: Uses [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
          for example, `/foo/bar`. If the pointer points into an object, it'd be converted to a string.
        type: string
  K8sLabelMatcherRequirement:
    description: Label selector requirement which is a selector that contains values,
      a key, and an operator that relates the key and values.
    type: object
    required:
    - key
    properties:
      key:
        description: |+
          Label key that the selector applies to.

        type: string
        x-go-tag-validate: required
      operator:
        description: |+
          Logical operator which represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.

        type: string
        enum:
        - In
        - NotIn
        - Exists
        - DoesNotExists
        x-go-tag-validate: oneof=In NotIn Exists DoesNotExists
        x-oneof: In | NotIn | Exists | DoesNotExists
      values:
        description: |-
          An array of string values that relates to the key by an operator.
          If the operator is In or NotIn, the values array must be non-empty.
          If the operator is Exists or DoesNotExist, the values array must be empty.
        type: array
        items:
          type: string
  KubernetesObjectSelector:
    description: |-
      Describes which pods a control or observability
      component should apply to.
    type: object
    required:
    - api_version
    - kind
    - name
    - namespace
    properties:
      agent_group:
        description: |+
          Which [agent-group](/concepts/flow-control/selector.md#agent-group) this
          selector applies to.

        type: string
        default: default
        x-go-tag-default: default
      api_version:
        type: string
        title: API version of Kubernetes resource
        x-go-tag-validate: required
      kind:
        description: |+
          Kubernetes resource type.

        type: string
        x-go-tag-validate: required
      name:
        description: |+
          Kubernetes resource name.

        type: string
        x-go-tag-validate: required
      namespace:
        description: |+
          Kubernetes namespace that the resource belongs to.

        type: string
        x-go-tag-validate: required
  LabelMatcher:
    description: |-
      It provides three ways to define requirements:
      - match labels
      - match expressions
      - arbitrary expression

      If multiple requirements are set, they're all combined using the logical AND operator.
      An empty label matcher always matches.
    type: object
    title: |-
      Allows to define rules whether a map of
      [labels](/concepts/flow-control/flow-label.md)
      should be considered a match or not
    properties:
      expression:
        description: An arbitrary expression to be evaluated on the labels.
        $ref: '#/definitions/MatchExpression'
      match_expressions:
        description: |-
          List of Kubernetes-style label matcher requirements.

          Note: The requirements are combined using the logical AND operator.
        type: array
        items:
          type: object
          $ref: '#/definitions/K8sLabelMatcherRequirement'
      match_labels:
        description: |-
          A map of {key,value} pairs representing labels to be matched.
          A single {key,value} in the `match_labels` requires that the label `key` is present and equal to `value`.

          Note: The requirements are combined using the logical AND operator.
        type: object
        additionalProperties:
          type: string
  LoadRamp:
    description: |-
      The _Load Ramp_ produces a smooth and continuous traffic load
      that changes progressively over time, based on the specified steps.

      Each step is defined by two parameters:
      - The `target_accept_percentage`.
      - The `duration` for the signal to change from the
        previous step's `target_accept_percentage` to the current step's
        `target_accept_percentage`.

      The percentage of requests accepted starts at the `target_accept_percentage`
      defined in the first step and gradually ramps up or down linearly from
      the previous step's `target_accept_percentage` to the next
      `target_accept_percentage`, over the `duration` specified for each step.
    type: object
    properties:
      default_config:
        description: Default configuration.
        $ref: '#/definitions/RegulatorDynamicConfig'
      dynamic_config_key:
        description: Dynamic configuration key for flow regulator.
        type: string
      in_ports:
        $ref: '#/definitions/LoadRampIns'
      out_ports:
        $ref: '#/definitions/LoadRampOuts'
      parameters:
        x-go-tag-validate: required
        $ref: '#/definitions/LoadRampParameters'
  LoadRampIns:
    description: Inputs for the _Load Ramp_ component.
    type: object
    properties:
      backward:
        description: Whether to progress the _Load Ramp_ towards the previous step.
        $ref: '#/definitions/InPort'
      forward:
        description: Whether to progress the _Load Ramp_ towards the next step.
        $ref: '#/definitions/InPort'
      reset:
        description: Whether to reset the _Load Ramp_ to the first step.
        $ref: '#/definitions/InPort'
  LoadRampOuts:
    description: Outputs for the _Load Ramp_ component.
    type: object
    properties:
      accept_percentage:
        description: The percentage of flows being accepted by the _Load Ramp_.
        $ref: '#/definitions/OutPort'
      at_end:
        description: A Boolean signal indicating whether the _Load Ramp_ is at the
          end of signal generation.
        $ref: '#/definitions/OutPort'
      at_start:
        description: A Boolean signal indicating whether the _Load Ramp_ is at the
          start of signal generation.
        $ref: '#/definitions/OutPort'
  LoadRampParameters:
    description: Parameters for the _Load Ramp_ component.
    type: object
    required:
    - steps
    properties:
      regulator:
        description: Parameters for the _Regulator_.
        $ref: '#/definitions/RegulatorParameters'
      steps:
        type: array
        minItems: 1
        items:
          type: object
          $ref: '#/definitions/LoadRampParametersStep'
        x-go-tag-validate: required,gt=0,dive
  LoadRampParametersStep:
    type: object
    required:
    - duration
    properties:
      duration:
        description: |+
          Duration for which the step is active.

        type: string
        x-go-tag-validate: required
      target_accept_percentage:
        description: |+
          The value of the step.

        type: number
        format: double
        maximum: 100
        minimum: 0
        x-go-tag-validate: gte=0,lte=100
  LoadRampSeries:
    description: _LoadRampSeries_ is a component that applies a series of _Load Ramps_
      in order.
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/LoadRampSeriesIns'
      parameters:
        x-go-tag-validate: required
        $ref: '#/definitions/LoadRampSeriesParameters'
  LoadRampSeriesIns:
    description: Inputs for the _LoadRampSeries_ component.
    type: object
    properties:
      backward:
        description: Whether to progress the load ramp series towards the previous
          step.
        $ref: '#/definitions/InPort'
      forward:
        description: Whether to progress the load ramp series towards the next step.
        $ref: '#/definitions/InPort'
      reset:
        description: Whether to reset the load ramp series to the first step.
        $ref: '#/definitions/InPort'
  LoadRampSeriesLoadRampInstance:
    type: object
    properties:
      load_ramp:
        description: |+
          The load ramp.

        x-go-tag-validate: required
        $ref: '#/definitions/LoadRampParameters'
      out_ports:
        $ref: '#/definitions/LoadRampOuts'
  LoadRampSeriesParameters:
    description: Parameters for the _LoadRampSeries_ component.
    type: object
    required:
    - load_ramps
    properties:
      load_ramps:
        description: |+
          An ordered list of load ramps that get applied in order.

        type: array
        items:
          type: object
          $ref: '#/definitions/LoadRampSeriesLoadRampInstance'
        x-go-tag-validate: required,dive
  LoadScheduler:
    description: |-
      :::info

      See also [_Load Scheduler_ overview](/concepts/flow-control/components/load-scheduler.md).

      :::

      It's based on the actuation strategy (for example, load actuator) and workload scheduling
      which is based on Weighted Fair Queuing principles.
      It measures and controls the incoming tokens per second, which can translate
      to (avg. latency \* in-flight requests) (Little's Law) in concurrency limiting use-case.

      LoadScheduler configuration is split into two parts: An actuation
      strategy and a scheduler. At this time, only `load_actuator` strategy is available.
    type: object
    title: _Load Scheduler_ is an actuator component that regulates flows to provide
      active service protection
    properties:
      default_config:
        description: Default configuration.
        $ref: '#/definitions/LoadSchedulerDynamicConfig'
      dynamic_config_key:
        description: Configuration key for DynamicConfig.
        type: string
      in_ports:
        description: |+
          Input ports for the LoadScheduler component.

        x-go-tag-validate: required
        $ref: '#/definitions/LoadSchedulerIns'
      out_ports:
        description: Output ports for the LoadScheduler component.
        $ref: '#/definitions/LoadSchedulerOuts'
      parameters:
        x-go-tag-validate: required
        $ref: '#/definitions/LoadSchedulerParameters'
  LoadSchedulerDynamicConfig:
    description: Dynamic Configuration for the LoadScheduler component.
    type: object
    properties:
      dry_run:
        description: |-
          Decides whether to run the actuator in dry-run mode. Dry run mode ensures that no traffic gets dropped by this actuator.
          Useful for observing the behavior of actuator without disrupting any real traffic.
        type: boolean
  LoadSchedulerIns:
    description: Input for the LoadScheduler component.
    type: object
    properties:
      load_multiplier:
        description: |-
          Load multiplier is proportion of incoming
          token rate that needs to be accepted.
        $ref: '#/definitions/InPort'
      pass_through:
        description: When true, pass through the requests skipping the scheduler.
        $ref: '#/definitions/InPort'
  LoadSchedulerOuts:
    description: Output for the LoadScheduler component.
    type: object
    properties:
      observed_load_multiplier:
        description: Observed load multiplier is the proportion of incoming token
          rate that is being accepted.
        $ref: '#/definitions/OutPort'
  LoadSchedulerParameters:
    type: object
    title: Parameters for _Load Scheduler_ component
    required:
    - selectors
    properties:
      scheduler:
        description: |-
          Configuration of Weighted Fair Queuing-based workload scheduler.

          Contains configuration of per-agent scheduler
        $ref: '#/definitions/Scheduler'
      selectors:
        description: |+
          Selectors for the component.

        type: array
        minItems: 1
        items:
          type: object
          $ref: '#/definitions/Selector'
        x-go-tag-validate: required,gt=0,dive
      workload_latency_based_tokens:
        description: |+
          Automatically estimate the size flows within each workload, based on
          historical latency. Each workload's `tokens` will be set to average
          latency of flows in that workload during the last few seconds (exact duration
          of this average can change).
          This setting is useful in concurrency limiting use-case, where the
          concurrency is calculated as ``(avg. latency \* in-flight flows)`.

          The value of tokens estimated takes a lower precedence
          than the value of `tokens` specified in the workload definition
          and `tokens` explicitly specified in the flow labels.

        type: boolean
        default: true
        x-go-tag-default: "true"
  MatchExpression:
    description: |-
      MatchExpression has multiple variants, exactly one should be set.

      Example:
      ```yaml
      all:
        of:
          - label_exists: foo
          - label_equals:
              label: app
              value: frobnicator
      ```
    type: object
    title: Defines a `[map<string, string> → bool]` expression to be evaluated on
      labels
    properties:
      all:
        description: The expression is true when all sub expressions are true.
        $ref: '#/definitions/MatchExpressionList'
      any:
        description: The expression is true when any sub expression is true.
        $ref: '#/definitions/MatchExpressionList'
      label_equals:
        description: The expression is true when label value equals given value.
        $ref: '#/definitions/EqualsMatchExpression'
      label_exists:
        description: The expression is true when label with given name exists.
        type: string
      label_matches:
        description: The expression is true when label matches given regular expression.
        $ref: '#/definitions/MatchesMatchExpression'
      not:
        description: The expression negates the result of sub expression.
        $ref: '#/definitions/MatchExpression'
  MatchExpressionList:
    description: 'for example, `{any: {of: [expr1, expr2]}}`.'
    type: object
    title: List of MatchExpressions that is used for all or any matching
    properties:
      of:
        description: List of sub expressions of the match expression.
        type: array
        items:
          type: object
          $ref: '#/definitions/MatchExpression'
  MatchesMatchExpression:
    description: Label selector expression of the form `label matches regex`.
    type: object
    required:
    - label
    - regex
    properties:
      label:
        description: |+
          Name of the label to match the regular expression.

        type: string
        x-go-tag-validate: required
      regex:
        description: |+
          Regular expression that should match the label value.
          It uses [Go's regular expression syntax](https://github.com/google/re2/wiki/Syntax).

        type: string
        x-go-tag-validate: required
  Max:
    description: 'Max: output = max([]inputs).'
    type: object
    title: Takes a list of input signals and emits the signal with the maximum value
    properties:
      in_ports:
        description: Input ports for the Max component.
        $ref: '#/definitions/MaxIns'
      out_ports:
        description: Output ports for the Max component.
        $ref: '#/definitions/MaxOuts'
  MaxIns:
    description: Inputs for the Max component.
    type: object
    properties:
      inputs:
        description: |+
          Array of input signals.

        type: array
        items:
          type: object
          $ref: '#/definitions/InPort'
        x-go-tag-validate: dive
  MaxOuts:
    description: Output for the Max component.
    type: object
    properties:
      output:
        description: Signal with maximum value as an output signal.
        $ref: '#/definitions/OutPort'
  Min:
    description: |-
      Takes an array of input signals and emits the signal with the minimum value
      Min: output = min([]inputs).
    type: object
    properties:
      in_ports:
        description: Input ports for the Min component.
        $ref: '#/definitions/MinIns'
      out_ports:
        description: Output ports for the Min component.
        $ref: '#/definitions/MinOuts'
  MinIns:
    description: Inputs for the Min component.
    type: object
    properties:
      inputs:
        description: |+
          Array of input signals.

        type: array
        items:
          type: object
          $ref: '#/definitions/InPort'
        x-go-tag-validate: dive
  MinOuts:
    description: Output ports for the Min component.
    type: object
    properties:
      output:
        description: Signal with minimum value as an output signal.
        $ref: '#/definitions/OutPort'
  NestedCircuit:
    description: Nested circuit defines a sub-circuit as a high-level component. It
      consists of a list of components and a map of input and output ports.
    type: object
    properties:
      components:
        description: |+
          List of components in the nested circuit.

        type: array
        items:
          type: object
          $ref: '#/definitions/Component'
        x-go-tag-validate: dive
      in_ports_map:
        description: Maps input port names to input ports.
        type: object
        additionalProperties:
          $ref: '#/definitions/InPort'
      name:
        description: Name of the nested circuit component. This name is displayed
          by graph visualization tools.
        type: string
      out_ports_map:
        description: Maps output port names to output ports.
        type: object
        additionalProperties:
          $ref: '#/definitions/OutPort'
      short_description:
        description: Short description of the nested circuit component. This description
          is displayed by graph visualization tools.
        type: string
  NestedSignalEgress:
    description: Nested signal egress is a special type of component that allows to
      extract a signal from a nested circuit.
    type: object
    properties:
      in_ports:
        description: Input ports for the NestedSignalEgress component.
        $ref: '#/definitions/NestedSignalEgressIns'
      port_name:
        description: Name of the port.
        type: string
  NestedSignalEgressIns:
    description: Inputs for the NestedSignalEgress component.
    type: object
    properties:
      signal:
        description: Egress signal.
        $ref: '#/definitions/InPort'
  NestedSignalIngress:
    description: Nested signal ingress is a special type of component that allows
      to inject a signal into a nested circuit.
    type: object
    properties:
      out_ports:
        description: Output ports for the NestedSignalIngress component.
        $ref: '#/definitions/NestedSignalIngressOuts'
      port_name:
        description: Name of the port.
        type: string
  NestedSignalIngressOuts:
    description: Outputs for the NestedSignalIngress component.
    type: object
    properties:
      signal:
        description: Ingress signal.
        $ref: '#/definitions/OutPort'
  Or:
    description: |-
      Logical OR.

      See [And component](#and) on how signals are mapped onto Boolean values.
    type: object
    properties:
      in_ports:
        description: Input ports for the Or component.
        $ref: '#/definitions/OrIns'
      out_ports:
        description: Output ports for the Or component.
        $ref: '#/definitions/OrOuts'
  OrIns:
    description: Inputs for the Or component.
    type: object
    properties:
      inputs:
        description: |+
          Array of input signals.

        type: array
        items:
          type: object
          $ref: '#/definitions/InPort'
        x-go-tag-validate: dive
  OrOuts:
    description: Output ports for the Or component.
    type: object
    properties:
      output:
        description: |-
          Result of logical OR of all the input signals.

          Will always be 0 (false), 1 (true) or invalid (unknown).
        $ref: '#/definitions/OutPort'
  OutPort:
    type: object
    title: Components produce output for other components through OutPorts
    properties:
      signal_name:
        description: Name of the outgoing Signal on the OutPort.
        type: string
  PathTemplateMatcher:
    description: |-
      HTTP path will be matched against given path templates.
      If a match occurs, the value associated with the path template will be treated as a result.
      In case of multiple path templates matching, the most specific one will be chosen.
    type: object
    title: Matches HTTP Path to given path templates
    properties:
      template_values:
        description: |+
          Template value keys are OpenAPI-inspired path templates.

          * Static path segment `/foo` matches a path segment exactly
          * `/{param}` matches arbitrary path segment.
            (The parameter name is ignored and can be omitted (`{}`))
          * The parameter must cover whole segment.
          * Additionally, path template can end with `/*` wildcard to match
            arbitrary number of trailing segments (0 or more).
          * Multiple consecutive `/` are ignored, as well as trailing `/`.
          * Parametrized path segments must come after static segments.
          * `*`, if present, must come last.
          * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/*`).

          See also <https://swagger.io/specification/#path-templating-matching>

          Example:
          ```yaml
          /register: register
          "/user/{userId}": user
          /static/*: other
          ```

        type: object
        minProperties: 1
        additionalProperties:
          type: string
        x-go-tag-validate: gt=0,dive,keys,required,endkeys,required
  PeriodicDecrease:
    description: PeriodicDecrease defines a controller for scaling in based on a periodic
      timer.
    type: object
    required:
    - period
    - scale_in_percentage
    properties:
      period:
        description: |+
          The period of the timer.

        type: string
        x-go-tag-validate: required
      scale_in_percentage:
        description: |+
          The percentage of scale to reduce.

        type: number
        format: double
        maximum: 100
        minimum: 0
        x-go-tag-validate: required,gte=0,lte=100
  PodScaler:
    description: Component for scaling pods based on a signal.
    type: object
    properties:
      dry_run:
        description: |-
          Dry run mode ensures that no scaling is invoked by this pod scaler.
          This is Useful for observing the behavior of pod scaler without disrupting any real traffic.
          This parameter sets the default value of dry run setting which can be overridden at runtime using dynamic configuration.
        type: boolean
      dry_run_config_key:
        description: Configuration key for overriding dry run setting through dynamic
          configuration.
        type: string
      in_ports:
        description: Input ports for the PodScaler component.
        $ref: '#/definitions/PodScalerIns'
      kubernetes_object_selector:
        description: |+
          The Kubernetes object to which this pod scaler applies.

        x-go-tag-validate: required
        $ref: '#/definitions/KubernetesObjectSelector'
      out_ports:
        description: Output ports for the PodScaler component.
        $ref: '#/definitions/PodScalerOuts'
  PodScalerIns:
    description: Inputs for the PodScaler component.
    type: object
    properties:
      replicas:
        title: The number of replicas to configure for the Kubernetes resource
        $ref: '#/definitions/InPort'
  PodScalerOuts:
    description: Outputs for the PodScaler component.
    type: object
    properties:
      actual_replicas:
        description: The number of replicas that are currently running.
        $ref: '#/definitions/OutPort'
      configured_replicas:
        description: The number of replicas that are desired.
        $ref: '#/definitions/OutPort'
  Policies:
    description: Policies is a collection of Policies.
    type: object
    properties:
      policies:
        type: object
        additionalProperties:
          $ref: '#/definitions/Policy'
  Policy:
    description: |-
      Policy expresses observability-driven control logic.

      :::info

      See also [Policy overview](/concepts/policy/policy.md).

      :::

      Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
    type: object
    properties:
      circuit:
        description: Defines the control-loop logic of the policy.
        $ref: '#/definitions/Circuit'
      resources:
        description: Resources (such as Flux Meters, Classifiers) to setup.
        $ref: '#/definitions/Resources'
  ProcessInfo:
    type: object
    properties:
      extensions:
        type: array
        items:
          type: string
      start_time:
        type: string
        format: date-time
      uptime:
        type: string
  PromQL:
    type: object
    title: Component that runs a Prometheus query periodically and returns the result
      as an output signal
    properties:
      evaluation_interval:
        description: |+
          Describes the interval between successive evaluations of the Prometheus query.

        type: string
        default: 10s
        x-go-tag-default: 10s
      out_ports:
        description: Output ports for the PromQL component.
        $ref: '#/definitions/PromQLOuts'
      query_string:
        description: |-
          Describes the [PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/) query to be run.

          :::note

          The query must return a single value either as a scalar or as a vector with a single element.

          :::

          :::info Usage with Flux Meter

          [Flux Meter](/concepts/flow-control/resources/flux-meter.md) metrics can be queries using PromQL. Flux Meter defines histogram type of metrics in Prometheus.
          Therefore, one can refer to `flux_meter_sum`, `flux_meter_count` and `flux_meter_bucket`.
          The particular Flux Meter can be identified with the `flux_meter_name` label.
          There are additional labels available on a Flux Meter such as `valid`, `flow_status`, `http_status_code` and `decision_type`.

          :::

          :::info Usage with OpenTelemetry Metrics

          Aperture supports OpenTelemetry metrics. See [reference](/get-started/integrations/metrics/metrics.md) for more details.

          :::
        type: string
  PromQLOuts:
    description: Output for the PromQL component.
    type: object
    properties:
      output:
        description: The result of the Prometheus query as an output signal.
        $ref: '#/definitions/OutPort'
  PulseGenerator:
    description: Generates 0 and 1 in turns.
    type: object
    properties:
      false_for:
        description: |+
          Emitting 0 for the `false_for` duration.

        type: string
        default: 5s
        x-go-tag-default: 5s
      out_ports:
        description: Output ports for the PulseGenerator component.
        $ref: '#/definitions/PulseGeneratorOuts'
      true_for:
        description: |+
          Emitting 1 for the `true_for` duration.

        type: string
        default: 5s
        x-go-tag-default: 5s
  PulseGeneratorOuts:
    description: Outputs for the PulseGenerator component.
    type: object
    properties:
      output:
        $ref: '#/definitions/OutPort'
  Query:
    description: Query components that are query databases such as Prometheus.
    type: object
    properties:
      promql:
        description: Periodically runs a Prometheus query in the background and emits
          the result.
        $ref: '#/definitions/PromQL'
  RateLimiter:
    description: |-
      :::info

      See also [_Rate Limiter_ overview](/concepts/flow-control/components/rate-limiter.md).

      :::

      RateLimiting is done on per-label-value basis. Use `label_key`
      to select which label should be used as key.
    type: object
    title: Limits the traffic on a control point to specified rate
    required:
    - selectors
    properties:
      default_config:
        title: Default configuration
        $ref: '#/definitions/RateLimiterDynamicConfig'
      dynamic_config_key:
        type: string
        title: Configuration key for DynamicConfig
      in_ports:
        title: Input ports for the RateLimiter component
        x-go-tag-validate: required
        $ref: '#/definitions/RateLimiterIns'
      parameters:
        title: Parameters for the RateLimiter component
        x-go-tag-validate: required
        $ref: '#/definitions/RateLimiterParameters'
      selectors:
        description: |+
          Selectors for the component.

        type: array
        minItems: 1
        items:
          type: object
          $ref: '#/definitions/Selector'
        x-go-tag-validate: required,gt=0,dive
  RateLimiterDynamicConfig:
    type: object
    title: Dynamic Configuration for the rate limiter
    properties:
      overrides:
        description: |+
          Allows to specify different limits for particular label values.

        type: array
        items:
          type: object
          $ref: '#/definitions/RateLimiterOverride'
        x-go-tag-validate: dive
  RateLimiterIns:
    type: object
    title: Inputs for the RateLimiter component
    properties:
      limit:
        description: |+
          Number of flows allowed per `limit_reset_interval` per each label.
          Negative values disable the rate limiter.

          :::tip

          Negative limit can be useful to _conditionally_ enable the rate limiter
          under certain circumstances. [Decider](#decider) might be helpful.

          :::

        x-go-tag-validate: required
        $ref: '#/definitions/InPort'
  RateLimiterOverride:
    type: object
    required:
    - label_value
    properties:
      label_value:
        description: |+
          Value of the label for which the override should be applied.

        type: string
        x-go-tag-validate: required
      limit_scale_factor:
        description: |+
          Amount by which the `in_ports.limit` should be multiplied for
          this label value.

        type: number
        format: double
        default: 1
        x-go-tag-default: "1.0"
  RateLimiterParameters:
    type: object
    required:
    - label_key
    properties:
      label_key:
        description: |+
          Specifies which label the rate limiter should be keyed by.

          Rate limiting is done independently for each value of the
          [label](/concepts/flow-control/flow-label.md) with given key.
          For example, to give each user a separate limit, assuming you
          have a _user_ flow
          label set up, set `label_key: "user"`.

        type: string
        x-go-tag-validate: required
      lazy_sync:
        title: Configuration of lazy-syncing behavior of rate limiter
        $ref: '#/definitions/RateLimiterParametersLazySync'
      limit_reset_interval:
        description: |+
          Time after which the limit for a given label value will be reset.

        type: string
        default: 60s
        x-go-tag-default: 60s
      tokens_label_key:
        description: |+
          Flow label key that will be used to override the number of tokens
          for this request.
          This is an optional parameter and takes highest precedence
          when assigning tokens to a request.
          The label value must be a valid uint64 number.

        type: string
        default: tokens
        x-go-tag-default: tokens
  RateLimiterParametersLazySync:
    type: object
    properties:
      enabled:
        type: boolean
        title: Enables lazy sync
        default: false
        x-go-tag-default: "false"
      num_sync:
        description: |+
          Number of times to lazy sync within the `limit_reset_interval`.

        type: integer
        format: int64
        default: 5
        minimum: 0
        exclusiveMinimum: true
        x-go-tag-default: "5"
        x-go-tag-validate: gt=0
  Rego:
    description: |-
      Rego define a set of labels that are extracted after evaluating a Rego module.

      :::info

      You can use the [live-preview](/concepts/flow-control/resources/classifier.md#live-previewing-requests) feature to first preview the input to the classifier before writing the labeling logic.

      :::

      Example of Rego module which also disables telemetry visibility of label:
      ```yaml
      rego:
        labels:
          user:
            telemetry: false
        module: |
          package user_from_cookie
          cookies := split(input.attributes.request.http.headers.cookie, "; ")
          user := user {
              cookie := cookies[_]
              startswith(cookie, "session=")
              session := substring(cookie, count("session="), -1)
              parts := split(session, ".")
              object := json.unmarshal(base64url.decode(parts[0]))
              user := object.user
          }
      ```
    type: object
    required:
    - labels
    - module
    properties:
      labels:
        description: |+
          A map of {key, value} pairs mapping from
          [flow label](/concepts/flow-control/flow-label.md) keys to queries that define
          how to extract and propagate flow labels with that key.
          The name of the label maps to a variable in the Rego module. It maps to `data.<package>.<label>` variable.

        type: object
        minProperties: 1
        additionalProperties:
          $ref: '#/definitions/RegoLabelProperties'
        x-go-tag-validate: required,gt=0,dive,keys,required,endkeys,required
      module:
        description: |+
          Source code of the Rego module.

          :::note

          Must include a "package" declaration.

          :::

        type: string
        x-go-tag-validate: required
  RegoLabelProperties:
    type: object
    properties:
      telemetry:
        description: |+
          :::note

          The flow label is always accessible in Aperture Policies regardless of this setting.

          :::

          :::caution

          When using [FluxNinja ARC extension](/arc/extension.md), telemetry enabled
          labels are sent to FluxNinja ARC for observability. Telemetry should be disabled for
          sensitive labels.

          :::

        type: boolean
        title: |-
          Decides if the created flow label should be available as an attribute in OLAP telemetry and
          propagated in [baggage](/concepts/flow-control/flow-label.md#baggage)
        default: true
        x-go-tag-default: "true"
  Regulator:
    description: |-
      _Regulator_ is a component that regulates the load at a
      [_Control Point_](/concepts/flow-control/selector.md/#control-point) by allowing only a specified percentage of
      flows at random or by sticky sessions.

      :::info

      See also [_Load Regulator overview](/concepts/flow-control/components/regulator.md).

      :::
    type: object
    properties:
      default_config:
        description: Default configuration.
        $ref: '#/definitions/RegulatorDynamicConfig'
      dynamic_config_key:
        description: Configuration key for DynamicConfig.
        type: string
      in_ports:
        description: Input ports for the _Regulator_.
        $ref: '#/definitions/RegulatorIns'
      parameters:
        description: Parameters for the _Regulator_.
        $ref: '#/definitions/RegulatorParameters'
  RegulatorDynamicConfig:
    type: object
    title: Dynamic Configuration for _Regulator_
    properties:
      enable_label_values:
        description: Specify certain label values to be accepted by this flow filter
          regardless of accept percentage.
        type: array
        items:
          type: string
  RegulatorIns:
    type: object
    properties:
      accept_percentage:
        description: The percentage of requests to accept.
        $ref: '#/definitions/InPort'
  RegulatorParameters:
    type: object
    required:
    - selectors
    properties:
      label_key:
        description: |-
          The flow label key for identifying sessions.
          - When label key is specified, _Regulator_ acts as a sticky filter.
            The series of flows with the same value of label key get the same
            decision provided that the `accept_percentage` is same or higher.
          - When label key is not specified, _Regulator_ acts as a stateless filter.
            Percentage of flows are selected randomly for rejection.
        type: string
      selectors:
        description: |+
          Selectors for the component.

        type: array
        minItems: 1
        items:
          type: object
          $ref: '#/definitions/Selector'
        x-go-tag-validate: required,gt=0,dive
  Resources:
    description: |-
      :::info

      See also [Resources overview](/concepts/policy/resources.md).

      :::
    type: object
    title: Resources that need to be setup for the policy to function
    properties:
      flow_control:
        description: FlowControlResources are resources that are provided by flow
          control integration.
        $ref: '#/definitions/FlowControlResources'
      telemetry_collectors:
        description: TelemetryCollector configures OpenTelemetry collector integration.
        type: array
        items:
          type: object
          $ref: '#/definitions/TelemetryCollector'
  Rule:
    description: |-
      Example of a JSON extractor:
      ```yaml
      extractor:
        json:
          from: request.http.body
          pointer: /user/name
      ```
    type: object
    title: Rule describes a single classification Rule
    properties:
      extractor:
        description: High-level declarative extractor.
        $ref: '#/definitions/Extractor'
      telemetry:
        description: |+
          :::note

          The flow label is always accessible in Aperture Policies regardless of this setting.

          :::

          :::caution

          When using [FluxNinja ARC extension](/arc/extension.md), telemetry enabled
          labels are sent to FluxNinja ARC for observability. Telemetry should be disabled for
          sensitive labels.

          :::

        type: boolean
        title: |-
          Decides if the created flow label should be available as an attribute in OLAP telemetry and
          propagated in [baggage](/concepts/flow-control/flow-label.md#baggage)
        default: true
        x-go-tag-default: "true"
  SMA:
    description: Simple Moving Average (SMA) is a type of moving average that computes
      the average of a fixed number of signal readings.
    type: object
    properties:
      in_ports:
        description: Input ports for the SMA component.
        $ref: '#/definitions/SMAIns'
      out_ports:
        description: Output ports for the SMA component.
        $ref: '#/definitions/SMAOuts'
      parameters:
        description: |+
          Parameters for the SMA component.

        x-go-tag-validate: required
        $ref: '#/definitions/SMAParameters'
  SMAIns:
    type: object
    properties:
      input:
        description: Signal to be used for the moving average computation.
        $ref: '#/definitions/InPort'
  SMAOuts:
    type: object
    properties:
      output:
        description: Computed moving average.
        $ref: '#/definitions/OutPort'
  SMAParameters:
    type: object
    required:
    - sma_window
    properties:
      sma_window:
        description: |+
          Window of time over which the moving average is computed.

        type: string
        x-go-tag-validate: required
      valid_during_warmup:
        description: |+
          Whether the output is valid during the warm-up stage.

        type: boolean
        default: false
        x-go-tag-default: "false"
  ScaleInController:
    type: object
    properties:
      alerter:
        description: Configuration for embedded Alerter.
        $ref: '#/definitions/AlerterParameters'
      controller:
        title: Controller
        x-go-tag-validate: required
        $ref: '#/definitions/ScaleInControllerController'
  ScaleInControllerController:
    type: object
    properties:
      gradient:
        $ref: '#/definitions/DecreasingGradient'
      periodic:
        $ref: '#/definitions/PeriodicDecrease'
  ScaleOutController:
    type: object
    properties:
      alerter:
        description: Configuration for embedded Alerter.
        $ref: '#/definitions/AlerterParameters'
      controller:
        title: Controller
        x-go-tag-validate: required
        $ref: '#/definitions/ScaleOutControllerController'
  ScaleOutControllerController:
    type: object
    properties:
      gradient:
        $ref: '#/definitions/IncreasingGradient'
  Scheduler:
    description: |-
      :::note

      Each Agent instantiates an independent copy of the scheduler, but output
      signals for accepted and incoming token rate are aggregated across all agents.

      :::
    type: object
    title: Weighted Fair Queuing-based workload scheduler
    properties:
      decision_deadline_margin:
        description: |+
          Decision deadline margin is the amount of time that the scheduler will
          subtract from the request deadline to determine the deadline for the
          decision. This is to ensure that the scheduler has enough time to
          make a decision before the request deadline happens, accounting for
          processing delays.
          The request deadline is based on the
          [gRPC deadline](https://grpc.io/blog/deadlines) or the
          [`grpc-timeout` HTTP header](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests).

          Fail-open logic is use for flow control APIs, so if the gRPC deadline
          reaches, the flow will end up being unconditionally allowed while
          it is still waiting on the scheduler.

        type: string
        default: 0.01s
        x-go-tag-default: 0.01s
      default_workload_parameters:
        description: Parameters to be used if none of workloads specified in `workloads`
          match.
        $ref: '#/definitions/SchedulerWorkloadParameters'
      tokens_label_key:
        description: |+
          * Key for a flow label that can be used to override the default number of tokens for this flow.
          * The value associated with this key must be a valid uint64 number.
          * If this parameter is not provided, the number of tokens for the flow will be determined by the matched workload's token count.

        type: string
        default: tokens
        x-go-tag-default: tokens
      workloads:
        description: |+
          List of workloads to be used in scheduler.

          Categorizing [flows](/concepts/flow-control/flow-control.md#flow) into workloads
          allows for load throttling to be "intelligent" instead of queueing flows in an arbitrary order.
          There are two aspects of this "intelligence":
          * Scheduler can more precisely calculate concurrency if it understands
            that flows belonging to different classes have different weights (for example, insert queries compared to select queries).
          * Setting different priorities to different workloads lets the scheduler
            avoid dropping important traffic during overload.

          Each workload in this list specifies also a matcher that is used to
          determine which flow will be categorized into which workload.
          In case of multiple matching workloads, the first matching one will be used.
          If none of workloads match, `default_workload` will be used.

          :::info

          See also [workload definition in the concepts
          section](/concepts/flow-control/components/load-scheduler.md#workload).

          :::

        type: array
        items:
          type: object
          $ref: '#/definitions/SchedulerWorkload'
        x-go-tag-validate: dive
  SchedulerWorkload:
    description: Workload defines a class of flows that preferably have similar properties
      such as response latency and desired priority.
    type: object
    properties:
      label_matcher:
        description: |+
          Label Matcher to select a Workload based on
          [flow labels](/concepts/flow-control/flow-label.md).

        x-go-tag-validate: required
        $ref: '#/definitions/LabelMatcher'
      parameters:
        description: |+
          Parameters associated with flows matching the label matcher.

        x-go-tag-validate: required
        $ref: '#/definitions/SchedulerWorkloadParameters'
  SchedulerWorkloadParameters:
    description: |-
      Parameters such as priority, tokens and fairness key that
      are applicable to flows within a workload.
    type: object
    properties:
      fairness_key:
        description: |-
          Fairness key is a label key that can be used to provide fairness within a workload.
          Any [flow label](/concepts/flow-control/flow-label.md) can be used here. For example, if
          you have a classifier that sets `user` flow label, you might want to set
          `fairness_key = "user"`.
        type: string
      priority:
        description: |+
          $$
          \text{virtual\_finish\_time} = \text{virtual\_time} + \left(\text{tokens} \cdot \left(\text{256} - \text{priority}\right)\right)
          $$

        type: integer
        format: int64
        title: |-
          Describes priority level of the flows within the workload.
          Priority level ranges from 0 to 255.
          Higher numbers means higher priority level.
          Priority levels have non-linear effect on the workload scheduling. The following formula is used to determine the position of a flow in the queue based on virtual finish time:
        default: 0
        maximum: 255
        minimum: 0
        x-go-tag-default: "0"
        x-go-tag-validate: gte=0,lte=255
      tokens:
        description: |-
          Tokens determines the cost of admitting a single flow in the workload,
          which is typically defined as milliseconds of flow latency (time to response or duration of a feature) or
          simply equal to 1 if the resource being accessed is constrained by the
          number of flows (3rd party rate limiters).
          This override is applicable only if tokens for the flow aren't specified
          in the flow labels.
        type: string
        format: uint64
  Selector:
    description: |-
      Selects flows based on control point, flow labels, agent group and the service
      that the [flow control component](/concepts/flow-control/flow-control.md#components)
      will operate on.

      :::info

      See also [Selector overview](/concepts/flow-control/selector.md).

      :::

      Example:
      ```yaml
      control_point: ingress
      label_matcher:
        match_labels:
          user_tier: gold
        match_expressions:
          - key: query
            operator: In
            values:
              - insert
              - delete
        expression:
          label_matches:
              - label: user_agent
                regex: ^(?!.*Chrome).*Safari
      ```
    type: object
    required:
    - control_point
    properties:
      agent_group:
        description: |+
          [_Agent Group_](/concepts/flow-control/selector.md#agent-group) this
          selector applies to.

          :::info

          Agent Groups are used to scope policies to a subset of agents connected to the same controller.
          The agents within an agent group receive exact same policy configuration and
          form a peer to peer cluster to constantly share state.

          :::

        type: string
        default: default
        x-go-tag-default: default
      control_point:
        description: |+
          [Control Point](/concepts/flow-control/selector.md#control-point)
          identifies location within services where policies can act on flows.
          For an SDK based insertion,
          a _Control Point_ can represent a particular feature or execution
          block within a service. In case of service mesh or middleware insertion, a
          _Control Point_ can identify ingress or egress calls or distinct listeners
          or filter chains.

        type: string
        x-go-tag-validate: required
      label_matcher:
        description: |-
          [Label Matcher](/concepts/flow-control/selector.md#label-matcher)
          can be used to match flows based on flow labels.
        $ref: '#/definitions/LabelMatcher'
      service:
        description: |+
          The Fully Qualified Domain Name of the
          [service](/concepts/flow-control/selector.md) to select.

          In Kubernetes, this is the FQDN of the Service object.

          :::info

          `any` matches all services.

          :::

          :::info

          An entity (for example, Kubernetes pod) might belong to multiple services.

          :::

        type: string
        default: any
        x-go-tag-default: any
  SignalGenerator:
    description: |-
      The _Signal Generator_ component generates a smooth and continuous signal
      by following a sequence of specified steps. Each step has two parameters:
      - `target_output`: The desired output value at the end of the step.
      - `duration`: The time it takes for the signal to change linearly from the
        previous step's `target_output` to the current step's `target_output`.

      The output signal starts at the `target_output` of the first step and
      changes linearly between steps based on their `duration`. The _Signal
      Generator_ can be controlled to move forwards, backwards, or reset to the
      beginning based on input signals.
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/SignalGeneratorIns'
      out_ports:
        $ref: '#/definitions/SignalGeneratorOuts'
      parameters:
        description: |+
          Parameters for the _Signal Generator_ component.

        x-go-tag-validate: required
        $ref: '#/definitions/SignalGeneratorParameters'
  SignalGeneratorIns:
    description: Inputs for the _Signal Generator_ component.
    type: object
    properties:
      backward:
        description: Whether to progress the _Signal Generator_ towards the previous
          step.
        $ref: '#/definitions/InPort'
      forward:
        description: Whether to progress the _Signal Generator_ towards the next step.
        $ref: '#/definitions/InPort'
      reset:
        description: Whether to reset the _Signal Generator_ to the first step.
        $ref: '#/definitions/InPort'
  SignalGeneratorOuts:
    description: Outputs for the _Signal Generator_ component.
    type: object
    properties:
      at_end:
        description: A Boolean signal indicating whether the _Signal Generator_ is
          at the end of signal generation.
        $ref: '#/definitions/OutPort'
      at_start:
        description: A Boolean signal indicating whether the _Signal Generator_ is
          at the start of signal generation.
        $ref: '#/definitions/OutPort'
      output:
        description: The generated signal.
        $ref: '#/definitions/OutPort'
  SignalGeneratorParameters:
    description: Parameters for the _Signal Generator_ component.
    type: object
    required:
    - steps
    properties:
      steps:
        type: array
        minItems: 1
        items:
          type: object
          $ref: '#/definitions/SignalGeneratorParametersStep'
        x-go-tag-validate: required,gt=0,dive
  SignalGeneratorParametersStep:
    type: object
    required:
    - duration
    properties:
      duration:
        description: |+
          Duration for which the step is active.

        type: string
        x-go-tag-validate: required
      target_output:
        description: The value of the step.
        $ref: '#/definitions/ConstantSignal'
  Status:
    description: Status holds details about a status that can be reported to the registry.
    type: object
    properties:
      error:
        $ref: '#/definitions/StatusError'
      message:
        $ref: '#/definitions/googleprotobufAny'
      timestamp:
        type: string
        format: date-time
  StatusError:
    description: Error holds raw error message and its cause in a nested field.
    type: object
    properties:
      message:
        type: string
  Switcher:
    description: |-
      `on_signal` will be returned if switch input is valid and not equal to 0.0 ,
       otherwise `off_signal` will be returned.
    type: object
    title: Type of Combinator that switches between `on_signal` and `off_signal` signals
      based on switch input
    properties:
      in_ports:
        description: Input ports for the Switcher component.
        $ref: '#/definitions/SwitcherIns'
      out_ports:
        description: Output ports for the Switcher component.
        $ref: '#/definitions/SwitcherOuts'
  SwitcherIns:
    description: Inputs for the Switcher component.
    type: object
    properties:
      off_signal:
        description: Output signal when switch is invalid or 0.0.
        $ref: '#/definitions/InPort'
      on_signal:
        description: Output signal when switch is valid and not 0.0.
        $ref: '#/definitions/InPort'
      switch:
        description: Decides whether to return `on_signal` or `off_signal`.
        $ref: '#/definitions/InPort'
  SwitcherOuts:
    description: Outputs for the Switcher component.
    type: object
    properties:
      output:
        description: Selected signal (`on_signal` or `off_signal`).
        $ref: '#/definitions/OutPort'
  TelemetryCollector:
    type: object
    title: |-
      TelemetryCollector defines the telemetry configuration to be synced with the agents.
      It consists of two parts:
      - Agent Group: Agent group to sync telemetry configuration with
      - Infra Meters: OTel compatible metrics pipelines
    properties:
      agent_group:
        type: string
        default: default
        x-go-tag-default: default
      infra_meters:
        description: "_Infra Meters_ configure custom metrics OpenTelemetry collector
          pipelines, which will\nreceive and process telemetry at the agents and send
          metrics to the configured Prometheus.\nKey in this map refers to OTel pipeline
          name. Prefixing pipeline name with `metrics/`\nis optional, as all the components
          and pipeline names would be normalized.\n\nExample:\n\n```yaml\n telemetry_collectors:\n
          \  - agent_group: default\n     infra_meters:\n\t      rabbitmq:\n\t        processors:\n\t
          \         batch:\n\t            send_batch_size: 10\n\t            timeout:
          10s\n\t        receivers:\n\t          rabbitmq:\n\t            collection_interval:
          10s\n\t            endpoint: http://<rabbitmq-svc-fqdn>:15672\n\t            password:
          secretpassword\n\t            username: admin\n\t        per_agent_group:
          true\n\n```\n\n:::caution\n\nValidate the OTel configuration before applying
          it to the\nproduction cluster.\nIncorrect configuration will get rejected
          at the agents and might cause\nshutdown of the agent(s).\n\n:::"
        type: object
        additionalProperties:
          $ref: '#/definitions/InfraMeter'
  UnaryOperator:
    description: |-
      $$
      \text{output} = \unary_operator{\text{input}}
      $$
    type: object
    title: Takes an input signal and emits the output after applying the specified
      unary operator
    properties:
      in_ports:
        description: Input ports for the UnaryOperator component.
        $ref: '#/definitions/UnaryOperatorIns'
      operator:
        description: |+
          Unary Operator to apply.

          The unary operator can be one of the following:
          * `abs`: Absolute value with the sign removed.
          * `acos`: `arccosine`, in radians.
          * `acosh`: Inverse hyperbolic cosine.
          * `asin`: `arcsine`, in radians.
          * `asinh`: Inverse hyperbolic sine.
          * `atan`: `arctangent`, in radians.
          * `atanh`: Inverse hyperbolic tangent.
          * `cbrt`: Cube root.
          * `ceil`: Least integer value greater than or equal to input signal.
          * `cos`: `cosine`, in radians.
          * `cosh`: Hyperbolic cosine.
          * `erf`: Error function.
          * `erfc`: Complementary error function.
          * `erfcinv`: Inverse complementary error function.
          * `erfinv`: Inverse error function.
          * `exp`: The base-e exponential of input signal.
          * `exp2`: The base-2 exponential of input signal.
          * `expm1`: The base-e exponential of input signal minus 1.
          * `floor`: Greatest integer value less than or equal to input signal.
          * `gamma`: Gamma function.
          * `j0`: Bessel function of the first kind of order 0.
          * `j1`: Bessel function of the first kind of order 1.
          * `lgamma`: Natural logarithm of the absolute value of the gamma function.
          * `log`: Natural logarithm of input signal.
          * `log10`: Base-10 logarithm of input signal.
          * `log1p`: Natural logarithm of input signal plus 1.
          * `log2`: Base-2 logarithm of input signal.
          * `round`: Round to nearest integer.
          * `roundtoeven`: Round to nearest integer, with ties going to the nearest even integer.
          * `sin`: `sine`, in radians.
          * `sinh`: Hyperbolic sine.
          * `sqrt`: Square root.
          * `tan`: `tangent`, in radians.
          * `tanh`: Hyperbolic tangent.
          * `trunc`: Truncate to integer.
          * `y0`: Bessel function of the second kind of order 0.
          * `y1`: Bessel function of the second kind of order 1.

        type: string
        enum:
        - abs
        - acos
        - acosh
        - asin
        - asinh
        - atan
        - atanh
        - cbrt
        - ceil
        - cos
        - cosh
        - erf
        - erfc
        - erfcinv
        - erfinv
        - exp
        - exp2
        - expm1
        - floor
        - gamma
        - j0
        - j1
        - lgamma
        - log
        - log10
        - log1p
        - log2
        - round
        - roundtoeven
        - sin
        - sinh
        - sqrt
        - tan
        - tanh
        - trunc
        - y0
        - y1
        x-go-tag-validate: oneof=abs acos acosh asin asinh atan atanh cbrt ceil cos
          cosh erf erfc erfcinv erfinv exp exp2 expm1 floor gamma j0 j1 lgamma log
          log10 log1p log2 round roundtoeven sin sinh sqrt tan tanh trunc y0 y1
        x-oneof: abs | acos | acosh | asin | asinh | atan | atanh | cbrt | ceil |
          cos | cosh | erf | erfc | erfcinv | erfinv | exp | exp2 | expm1 | floor
          | gamma | j0 | j1 | lgamma | log | log10 | log1p | log2 | round | roundtoeven
          | sin | sinh | sqrt | tan | tanh | trunc | y0 | y1
      out_ports:
        description: Output ports for the UnaryOperator component.
        $ref: '#/definitions/UnaryOperatorOuts'
  UnaryOperatorIns:
    description: Inputs for the UnaryOperator component.
    type: object
    properties:
      input:
        description: Input signal.
        $ref: '#/definitions/InPort'
  UnaryOperatorOuts:
    description: Outputs for the UnaryOperator component.
    type: object
    properties:
      output:
        description: Output signal.
        $ref: '#/definitions/OutPort'
  Variable:
    description: Component that emits a variable value as an output signal, can be
      defined in dynamic configuration.
    type: object
    properties:
      default_config:
        description: |+
          Default configuration.

        x-go-tag-validate: required
        $ref: '#/definitions/VariableDynamicConfig'
      dynamic_config_key:
        description: Configuration key for DynamicConfig.
        type: string
      out_ports:
        description: Output ports for the Variable component.
        $ref: '#/definitions/VariableOuts'
  VariableDynamicConfig:
    type: object
    properties:
      constant_signal:
        x-go-tag-validate: required
        $ref: '#/definitions/ConstantSignal'
  VariableOuts:
    description: Outputs for the Variable component.
    type: object
    properties:
      output:
        description: The value is emitted to the output port.
        $ref: '#/definitions/OutPort'
  VersionInfo:
    type: object
    properties:
      build_host:
        type: string
      build_os:
        type: string
      build_time:
        type: string
      git_branch:
        type: string
      git_commit_hash:
        type: string
      service:
        type: string
      version:
        type: string
  googleprotobufAny:
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON

      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
    type: object
    properties:
      '@type':
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
        type: string
    additionalProperties: false
  googlerpcStatus:
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
    type: object
    properties:
      code:
        description: |-
          The status code, which should be an enum value of
          [google.rpc.Code][google.rpc.Code].
        type: integer
        format: int32
      details:
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
        type: array
        items:
          type: object
          $ref: '#/definitions/googleprotobufAny'
      message:
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized
          by the client.
        type: string
