consumes:
- application/json
produces:
- application/json
schemes:
- https
swagger: "2.0"
info:
  title: Aperture API
  version: "1.0"
host: aperture-agent
paths:
  /v1/entities:
    get:
      tags:
      - aperture-agent
      operationId: EntityCacheService_GetEntityCache
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1EntityCache'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/entities/ip-address/{ip_address}:
    get:
      tags:
      - aperture-agent
      operationId: EntityCacheService_GetEntityByIPAddress
      parameters:
      - type: string
        name: ip_address
        in: path
        required: true
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1Entity'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/entities/name/{name}:
    get:
      tags:
      - aperture-agent
      operationId: EntityCacheService_GetEntityByName
      parameters:
      - type: string
        name: name
        in: path
        required: true
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1Entity'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/info/host:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Host
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1HostInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/info/process:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Process
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1ProcessInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/info/version:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: InfoService_Version
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1VersionInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/peers:
    get:
      tags:
      - aperture-agent
      operationId: PeerDiscoveryService_GetPeers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1Peers'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/peers/address/{address}:
    get:
      tags:
      - aperture-agent
      operationId: PeerDiscoveryService_GetPeer
      parameters:
      - type: string
        name: address
        in: path
        required: true
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1Peer'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
  /v1/status/{path}:
    get:
      tags:
      - aperture-agent
      - aperture-controller
      operationId: StatusService_GetGroupStatus
      parameters:
      - pattern: .+
        type: string
        name: path
        in: path
        required: true
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1GroupStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
definitions:
  EntityCacheEntities:
    description: Entities defines mapping of entities.
    type: object
    properties:
      entities:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1Entity'
  googlerpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
      message:
        type: string
  protobufAny:
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".


      JSON

      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
    type: object
    properties:
      '@type':
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
        type: string
    additionalProperties: false
  statusv1Status:
    description: Status holds details about a status that can be reported to the registry.
    type: object
    properties:
      error:
        $ref: '#/definitions/v1StatusError'
      message:
        $ref: '#/definitions/protobufAny'
      timestamp:
        type: string
        format: date-time
  v1Entity:
    description: Entity represents a pod, vm, etc.
    type: object
    properties:
      ip_address:
        type: string
      name:
        type: string
      prefix:
        type: string
      services:
        type: array
        items:
          type: string
      uid:
        type: string
  v1EntityCache:
    description: EntityCache contains both mappings of ip address to entity and entity
      name to entity.
    type: object
    properties:
      entities_by_ip_address:
        $ref: '#/definitions/EntityCacheEntities'
      entities_by_name:
        $ref: '#/definitions/EntityCacheEntities'
  v1GroupStatus:
    description: |-
      Groups is nested structure that holds status information about the node and a
      pointer to the next node.
    type: object
    properties:
      groups:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1GroupStatus'
      status:
        $ref: '#/definitions/statusv1Status'
  v1HostInfo:
    type: object
    properties:
      hostname:
        type: string
      local_ip:
        type: string
      uuid:
        type: string
  v1Peer:
    description: Peer holds peer info and services.
    type: object
    properties:
      address:
        type: string
      hostname:
        type: string
      services:
        type: object
        additionalProperties:
          type: string
  v1Peers:
    description: Peers holds the peer info of this peer and a mapping of address to
      other peers.
    type: object
    properties:
      peers:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1Peer'
      self_peer:
        $ref: '#/definitions/v1Peer'
  v1ProcessInfo:
    type: object
    properties:
      start_time:
        type: string
        format: date-time
      uptime:
        type: string
  v1StatusError:
    description: Error holds raw error message and its cause in a nested field.
    type: object
    properties:
      message:
        type: string
  v1VersionInfo:
    type: object
    properties:
      build_host:
        type: string
      build_os:
        type: string
      build_time:
        type: string
      git_branch:
        type: string
      git_commit_hash:
        type: string
      service:
        type: string
      version:
        type: string
