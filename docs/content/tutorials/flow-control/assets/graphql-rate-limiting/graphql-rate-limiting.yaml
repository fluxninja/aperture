apiVersion: fluxninja.com/v1alpha1
kind: Policy
metadata:
  labels:
    fluxninja.com/validate: "true"
  name: graphql-static-rate-limiting
spec:
  circuit:
    components:
      - rate_limiter:
          flow_selector:
            flow_matcher:
              control_point:
                traffic: ingress
            service_selector:
              agent_group: default
              service: service-graphql-demo-app.demoapp.svc.cluster.local
          in_ports:
            limit:
              constant_value: 10
          label_key: user_id
          lazy_sync:
            enabled: false
            num_sync: 5
          limit_reset_interval: 1s
    evaluation_interval: 300s
  resources:
    classifiers:
      - flow_selector:
          flow_matcher:
            control_point:
              traffic: ingress
          service_selector:
            agent_group: default
            service: service-graphql-demo-app.demoapp.svc.cluster.local
        rules:
          user_id:
            rego:
              query: data.graphql_example.userID
              source: |
                package graphql_example

                query_ast := graphql.parse_query(input.parsed_body.query)

                createTodoByUserIds[name] := value {
                  some operation
                  walk(query_ast, [_, operation])
                  operation.Name == "createTodo"
                  count(operation.SelectionSet) > 0
                  some selection
                  walk(operation.SelectionSet, [_, selection])
                  selection.Name == "createTodo"
                  count(selection.Arguments) > 0
                  argument := selection.Arguments[_]
                  argument.Name == "input"
                  count(argument.Value.Children) > 0
                  child := argument.Value.Children[_]
                  child.Name == "userId"
                  name := child.Name
                  value := child.Value.Raw
                }

                userID := createTodoByUserIds.userId
            telemetry: true
