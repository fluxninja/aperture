common:
  policy_name: "graphql-static-rate-limiting"
policy:
  rate_limiter:
    rate_limit: 10
    flow_selector:
      flow_matcher:
        control_point: ingress
      service_selector:
        service: service-graphql-demo-app.demoapp.svc.cluster.local
    parameters:
      label_key: user_id
      limit_reset_interval: 1s
  classifiers:
    - flow_selector:
        flow_matcher:
          control_point: ingress
        service_selector:
          service: service-graphql-demo-app.demoapp.svc.cluster.local
      rules:
        user_id:
          rego:
            query: data.graphql_example.userID
            source: |
              package graphql_example
              import future.keywords.if
              query_ast := graphql.parse_query(input.parsed_body.query)
              claims := payload if {
                io.jwt.verify_hs256(bearer_token, "secret")
                [_, payload, _] := io.jwt.decode(bearer_token)
              }
              bearer_token := t if {
                v := input.attributes.request.http.headers.authorization
                startswith(v, "Bearer ")
                t := substring(v, count("Bearer "), -1)
              }
              queryIsCreateTodo if {
                some operation
                walk(query_ast, [_, operation])
                operation.Name == "createTodo"
                count(operation.SelectionSet) > 0
                some selection
                walk(operation.SelectionSet, [_, selection])
                selection.Name == "createTodo"
              }
              userID := u if {
                queryIsCreateTodo
                u := claims.userID
              }
          telemetry: true
