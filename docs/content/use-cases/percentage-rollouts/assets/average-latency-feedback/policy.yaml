apiVersion: fluxninja.com/v1alpha1
kind: Policy
metadata:
  labels:
    fluxninja.com/validate: "true"
  name: load-ramping
spec:
  circuit:
    components:
    - query:
        promql:
          evaluation_interval: 10s
          out_ports:
            output:
              signal_name: AVERAGE_LATENCY_0
          query_string: sum(increase(flux_meter_sum{flow_status="OK", flux_meter_name="load-ramping/average_latency/0",
            policy_name="load-ramping"}[30s]))/sum(increase(flux_meter_count{flow_status="OK",
            flux_meter_name="load-ramping/average_latency/0", policy_name="load-ramping"}[30s]))
    - decider:
        in_ports:
          lhs:
            signal_name: AVERAGE_LATENCY_0
          rhs:
            constant_signal:
              value: 75
        operator: lt
        out_ports:
          output:
            signal_name: FORWARD_0
    - decider:
        in_ports:
          lhs:
            signal_name: AVERAGE_LATENCY_0
          rhs:
            constant_signal:
              value: 75
        operator: gt
        out_ports:
          output:
            signal_name: RESET_0
    - bool_variable:
        config_key: start
        constant_output: false
        out_ports:
          output:
            signal_name: USER_START_CONTROL
    - bool_variable:
        config_key: reset
        constant_output: false
        out_ports:
          output:
            signal_name: USER_RESET_CONTROL
    - or:
        in_ports:
          inputs: []
        out_ports:
          output:
            signal_name: BACKWARD_INTENT
    - or:
        in_ports:
          inputs:
          - signal_name: RESET_0
          - signal_name: USER_RESET_CONTROL
        out_ports:
          output:
            signal_name: RESET
    - or:
        in_ports:
          inputs:
          - signal_name: FORWARD_0
        out_ports:
          output:
            signal_name: FORWARD_INTENT
    - inverter:
        in_ports:
          input:
            signal_name: BACKWARD_INTENT
        out_ports:
          output:
            signal_name: INVERTED_BACKWARD_INTENT
    - first_valid:
        in_ports:
          inputs:
          - signal_name: INVERTED_BACKWARD_INTENT
          - constant_signal:
              value: 1
        out_ports:
          output:
            signal_name: NOT_BACKWARD
    - inverter:
        in_ports:
          input:
            signal_name: RESET
        out_ports:
          output:
            signal_name: INVERTED_RESET
    - first_valid:
        in_ports:
          inputs:
          - signal_name: INVERTED_RESET
          - constant_signal:
              value: 1
        out_ports:
          output:
            signal_name: NOT_RESET
    - and:
        in_ports:
          inputs:
          - signal_name: NOT_BACKWARD
          - signal_name: NOT_RESET
          - signal_name: USER_START_CONTROL
          - signal_name: FORWARD_INTENT
        out_ports:
          output:
            signal_name: FORWARD
    - and:
        in_ports:
          inputs:
          - signal_name: BACKWARD_INTENT
          - signal_name: NOT_RESET
        out_ports:
          output:
            signal_name: BACKWARD
    - flow_control:
        load_ramp:
          in_ports:
            backward:
              signal_name: BACKWARD
            forward:
              signal_name: FORWARD
            reset:
              signal_name: RESET
          parameters:
            sampler:
              label_key: ""
              selectors:
              - control_point: awesome-feature
                service: checkout-service.prod.svc.cluster.local
            steps:
            - duration: 0s
              target_accept_percentage: 1
            - duration: 300s
              target_accept_percentage: 100
          pass_through_label_values_config_key: pass_through_label_values
    evaluation_interval: 1s
  resources:
    flow_control:
      flux_meters:
        load-ramping/average_latency/0:
          selectors:
          - control_point: ingress
            label_matcher:
              match_labels:
                http.path: /checkout
            service: checkout-service.prod.svc.cluster.local
    infra_meters: {}
