apiVersion: fluxninja.com/v1alpha1
kind: Policy
metadata:
  labels:
    fluxninja.com/validate: "true"
  name: graphql-static-rate-limiting
spec:
  circuit:
    components:
      - flow_control:
          rate_limiter:
            default_config:
              overrides: []
            dynamic_config_key: rate_limiter
            in_ports:
              limit:
                constant_signal:
                  value: 10
            parameters:
              label_key: user_id
              limit_reset_interval: 1s
            selectors:
              - control_point: ingress
                service: service-graphql-demo-app.demoapp.svc.cluster.local
    evaluation_interval: 1s
  resources:
    flow_control:
      classifiers:
        - rego:
            labels:
              user_id:
                telemetry: true
            module: |
              package graphql_example
              import future.keywords.if
              query_ast := graphql.parse_query(input.parsed_body.query)
              claims := payload if {
                io.jwt.verify_hs256(bearer_token, "secret")
                [_, payload, _] := io.jwt.decode(bearer_token)
              }
              bearer_token := t if {
                v := input.attributes.request.http.headers.authorization
                startswith(v, "Bearer ")
                t := substring(v, count("Bearer "), -1)
              }
              queryIsCreateTodo if {
                some operation
                walk(query_ast, [_, operation])
                operation.Name == "createTodo"
                count(operation.SelectionSet) > 0
                some selection
                walk(operation.SelectionSet, [_, selection])
                selection.Name == "createTodo"
              }
              user_id := u if {
                queryIsCreateTodo
                u := claims.userID
              }
          selectors:
            - control_point: ingress
              service: service-graphql-demo-app.demoapp.svc.cluster.local
