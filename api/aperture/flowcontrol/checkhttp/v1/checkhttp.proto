syntax = "proto3";

package aperture.flowcontrol.checkhttp.v1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/rpc/status.proto";
import "validate/validate.proto";

// A generic interface for performing Aperture Flowcontrol check on incoming
// requests to a networked service.
service FlowControlServiceHTTP {
  // Performs Aperture Flowcontrol check based on the fields received with the
  // incoming request, and returns status `OK` or not `OK`.
  rpc CheckHTTP(CheckHTTPRequest) returns (CheckHTTPResponse) {
    option (google.api.http) = {
      post: "/v1/flowcontrol/checkhttp"
      body: "*"
    };
  }
}

message CheckHTTPRequest {
  // This message defines attributes for an HTTP request.
  // HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
  message HttpRequest {
    // The HTTP request method, such as ``GET``, ``POST``.
    string method = 1;

    // The HTTP request headers.
    map<string, string> headers = 2;

    // The request target, as it appears in the first line of the HTTP request. This includes
    // the URL path and query-string. No decoding is performed.
    string path = 3;

    // The HTTP request ``Host`` header value.
    string host = 4;

    // The HTTP URL scheme, such as ``http`` and ``https``.
    string scheme = 5;

    // The HTTP request size in bytes. If unknown, it must be -1.
    int64 size = 6;

    // The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
    string protocol = 7;

    // The HTTP request body.
    string body = 8;
  }

  // The source of a network activity, such as starting a TCP connection.
  // In a multi hop network activity, the source represents the sender of the
  // last hop.
  SocketAddress source = 1;

  // The destination of a network activity, such as accepting a TCP connection.
  // In a multi hop network activity, the destination represents the receiver of
  // the last hop.
  SocketAddress destination = 2;

  // Represents a network request, such as an HTTP request.
  HttpRequest request = 3;

  // For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
  // In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
  string control_point = 4;
}

// HTTP attributes for a denied response.
message DeniedHttpResponse {
  // This field allows the authorization service to send an HTTP response status code to the
  // downstream client. If not set, Envoy sends ``403 Forbidden`` HTTP status code by default.
  int32 status = 1;

  // This field allows the authorization service to send HTTP response headers
  // to the downstream client.
  map<string, string> headers = 2;

  // This field allows the authorization service to send a response body data
  // to the downstream client.
  string body = 3;
}

// HTTP attributes for an OK response.
message OkHttpResponse {
  // HTTP entity headers in addition to the original request headers.
  map<string, string> headers = 1;

  google.protobuf.Struct dynamic_metadata = 2;
}

message CheckHTTPResponse {
  // Status ``OK`` allows the request. Any other status indicates the request should be denied
  google.rpc.Status status = 1;

  // An message that contains HTTP response attributes.
  oneof http_response {
    // Supplies http attributes for a denied response.
    DeniedHttpResponse denied_response = 2;

    // Supplies http attributes for an ok response.
    OkHttpResponse ok_response = 3;
  }

  // Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
  // filter.
  google.protobuf.Struct dynamic_metadata = 4;
}

message SocketAddress {
  enum Protocol {
    TCP = 0;
    UDP = 1;
  }

  Protocol protocol = 1 [(validate.rules).enum = {defined_only: true}];

  // The address for this socket.
  string address = 2 [(validate.rules).string = {min_len: 1}];

  // The port for this socket.
  uint32 port = 3 [(validate.rules).uint32 = {lte: 65535}];
}
