syntax = "proto3";

package aperture.flowcontrol.v1;

import "google/protobuf/timestamp.proto";

// FlowControlService is used to perform Flow Control operations.
service FlowControlService {
  // Check wraps the given arbitrary resource and matches the given labels
  // against Flow Control Limiters to makes a decision whether to allow/deny.
  rpc Check(CheckRequest) returns (CheckResponse) {}
}

// CheckRequest contains fields required to perform Check call.
message CheckRequest {
  string feature = 1;
  map<string, string> labels = 2;
}

// CheckResponse contains fields that represent decision made by Check call.
message CheckResponse {
  // Error information.
  enum Error {
    ERROR_NONE = 0;
    ERROR_MISSING_TRAFFIC_DIRECTION = 1;
    ERROR_INVALID_TRAFFIC_DIRECTION = 2;
    ERROR_CONVERT_TO_MAP_STRUCT = 3;
    ERROR_CONVERT_TO_REGO_AST = 4;
    ERROR_CLASSIFY = 5;
  }

  // RejectReason contains fields that give further information about rejection.
  enum RejectReason {
    REJECT_REASON_NONE = 0;
    REJECT_REASON_RATE_LIMITED = 1;
    REJECT_REASON_CONCURRENCY_LIMITED = 2;
  }

  // DecisionType contains fields that represent decision made by Check call.
  enum DecisionType {
    DECISION_TYPE_ACCEPTED = 0;
    DECISION_TYPE_REJECTED = 1;
  }

  // start timestamp
  google.protobuf.Timestamp start = 1;
  // end timestamp
  google.protobuf.Timestamp end = 2;
  // error information.
  Error error = 3;
  // services that matched
  repeated Service services = 4;
  // flow label keys that were matched for this request.
  repeated string flow_label_keys = 5;
  // telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
  map<string, string> telemetry_flow_labels = 6;
  // decision_type contains what the decision was.
  DecisionType decision_type = 7;
  // reject_reason contains the reason for the rejection.
  RejectReason reject_reason = 8;
  // classifiers that were matched for this request.
  repeated Classifier classifiers = 9;
  // flux meters that were matched for this request.
  repeated FluxMeter flux_meters = 10;
  // limiter_decisions contains information about decision made by each limiter.
  repeated LimiterDecision limiter_decisions = 11;
}

message Service {
  string agent_group = 1;
  string service = 2;
}

// Classifier describes details for each Classifier.
message Classifier {
  // Error information.
  enum Error {
    ERROR_NONE = 0;
    ERROR_EVAL_FAILED = 1;
    ERROR_EMPTY_RESULTSET = 2;
    ERROR_AMBIGUOUS_RESULTSET = 3;
    ERROR_MULTI_EXPRESSION = 4;
    ERROR_EXPRESSION_NOT_MAP = 5;
  }

  string policy_name = 1;
  string policy_hash = 2;
  int64 classifier_index = 3;
  string label_key = 4;
  Error error = 5;
}

// LimiterDecision describes details for each limiter.
message LimiterDecision {
  message RateLimiter {
    int64 remaining = 1;
    int64 current = 2;
    string label = 3;
  }

  message ConcurrencyLimiter {
    string workload_index = 1;
  }

  enum LimiterReason {
    LIMITER_REASON_UNSPECIFIED = 0;
    LIMITER_REASON_KEY_NOT_FOUND = 1;
  }

  string policy_name = 1;
  string policy_hash = 2;
  int64 component_index = 3;
  bool dropped = 4;
  LimiterReason reason = 5;
  oneof details {
    RateLimiter rate_limiter = 6;
    ConcurrencyLimiter concurrency_limiter = 7;
  }
}

// FluxMeter describes detail for each FluxMeter.
message FluxMeter {
  string flux_meter_name = 1;
}
