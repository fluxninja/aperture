syntax = "proto3";

package aperture.flowcontrol.v1;

// FlowControlService is used to perform Flow Control operations.
service FlowControlService {
  // Check wraps the given arbitrary resource and matches the given labels
  // against Flow Control Limiters to makes a decision whether to allow/deny
  rpc Check(CheckRequest) returns (CheckResponse) {}
}

// CheckRequest contains fields required to perform Check call.
message CheckRequest {
  string feature = 1;
  map<string, string> labels = 2;
}

// CheckResponse contains fields that represent decision made by Check call.
message CheckResponse {
  // decision_type contains what the decision was.
  DecisionType decision_type = 1;
  // reason contains information in the case of an error or rejection.
  DecisionReason decision_reason = 2;
  // limiter_decisions contains information about decision made by each limiter.
  repeated LimiterDecision limiter_decisions = 3;
  // flux meters that were matched for this request.
  repeated FluxMeter flux_meters = 4;
}

// Reason contains fields that give futher information about error or rejection.
message DecisionReason {
  enum ErrorReason {
    ERROR_REASON_UNSPECIFIED = 0;
  }

  enum RejectReason {
    REJECT_REASON_UNSPECIFIED = 0;
    REJECT_REASON_RATE_LIMITED = 1;
    REJECT_REASON_CONCURRENCY_LIMITED = 2;
  }

  ErrorReason error_reason = 1;
  RejectReason reject_reason = 2;
}

enum DecisionType {
  DECISION_TYPE_UNSPECIFIED = 0;
  DECISION_TYPE_ACCEPTED = 1;
  DECISION_TYPE_REJECTED = 2;
}

// LimiterDecision describes details for each limiter.
message LimiterDecision {
  message RateLimiter {
    int64 remaining = 1;
    int64 current = 2;
    string label = 3;
  }

  message ConcurrencyLimiter {
    string workload = 1;
  }

  enum LimiterReason {
    LIMITER_REASON_UNSPECIFIED = 0;
    LIMITER_REASON_KEY_NOT_FOUND = 1;
  }

  string policy_name = 1;
  string policy_hash = 2;
  int64 component_index = 3;
  bool dropped = 4;
  LimiterReason reason = 5;
  oneof details {
    RateLimiter rate_limiter = 6;
    ConcurrencyLimiter concurrency_limiter = 7;
  }
}

// FluxMeter describes detail for each FluxMeter.
message FluxMeter {
  string agent_group = 1;
  string policy_name = 2;
  string policy_hash = 3;
  string flux_meter_name = 4;
}
