syntax = "proto3";

package aperture.flowcontrol.entitycache.v1;

import "aperture/entitycache/v1/entitycache.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

//
// gRPC service
//

// EntityCacheService is used to query EntityCache.
service EntityCacheService {
  rpc GetEntityCache(google.protobuf.Empty) returns (aperture.entitycache.v1.EntityCache) {
    option (google.api.http) = {get: "/v1/flowcontrol/entities"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["aperture-agent"];
    };
  }
  rpc GetEntityByIPAddress(GetEntityByIPAddressRequest) returns (aperture.entitycache.v1.Entity) {
    option (google.api.http) = {get: "/v1/flowcontrol/entities/ip-address/{ip_address}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["aperture-agent"];
    };
  }
  rpc GetEntityByName(GetEntityByNameRequest) returns (aperture.entitycache.v1.Entity) {
    option (google.api.http) = {get: "/v1/flowcontrol/entities/name/{name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["aperture-agent"];
    };
  }
}

message GetEntityByIPAddressRequest {
  string ip_address = 1;
}

message GetEntityByNameRequest {
  string name = 1;
}
