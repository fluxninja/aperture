syntax = "proto3";

package aperture.flowcontrol.check.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// FlowControlService is used to perform Flow Control operations.
service FlowControlService {
  // Check wraps the given arbitrary resource and matches the given labels against Flow Control Limiters to makes a decision whether to allow/deny.
  rpc Check(CheckRequest) returns (CheckResponse) {}
  rpc CacheLookup(CacheLookupRequest) returns (CacheLookupResponse) {}
  rpc CacheUpsert(CacheUpsertRequest) returns (CacheUpsertResponse) {}
  rpc CacheDelete(CacheDeleteRequest) returns (CacheDeleteResponse) {}
  rpc FlowEnd(FlowEndRequest) returns (FlowEndResponse) {}
}

// CheckRequest contains fields required to perform Check call.
message CheckRequest {
  string control_point = 1;
  map<string, string> labels = 2;
  bool ramp_mode = 3;
  CacheLookupRequest cache_lookup_request = 4;
  bool expect_end = 5;
}

// CheckResponse contains fields that represent decision made by Check call.
message CheckResponse {
  // RejectReason contains fields that give further information about rejection.
  enum RejectReason {
    REJECT_REASON_NONE = 0;
    REJECT_REASON_RATE_LIMITED = 1;
    REJECT_REASON_NO_TOKENS = 2;
    REJECT_REASON_NOT_SAMPLED = 3;
    REJECT_REASON_NO_MATCHING_RAMP = 4;
  }

  // DecisionType contains fields that represent decision made by Check call.
  enum DecisionType {
    DECISION_TYPE_ACCEPTED = 0;
    DECISION_TYPE_REJECTED = 1;
  }

  // start timestamp
  google.protobuf.Timestamp start = 1;
  // end timestamp
  google.protobuf.Timestamp end = 2;
  // services that matched
  repeated string services = 4;
  // control_point of request
  string control_point = 5;
  // flow label keys that were matched for this request.
  repeated string flow_label_keys = 6;
  // telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
  map<string, string> telemetry_flow_labels = 7;
  // decision_type contains what the decision was.
  DecisionType decision_type = 8;
  // reject_reason contains the reason for the rejection.
  RejectReason reject_reason = 9;
  // classifiers that were matched for this request.
  repeated ClassifierInfo classifier_infos = 10;
  // flux meters that were matched for this request.
  repeated FluxMeterInfo flux_meter_infos = 11;
  // limiter_decisions contains information about decision made by each limiter.
  repeated LimiterDecision limiter_decisions = 12;
  // Recommended minimal amount of time to wait when retrying the request, if
  // decision_type is REJECTED. Optional.
  google.protobuf.Duration wait_time = 13;
  // http_status contains the http status code to be returned to the client, if
  // decision_type is REJECTED. Optional.
  StatusCode denied_response_status_code = 14;
  // CacheLookupResponse contains the result of the cache lookup.
  CacheLookupResponse cache_lookup_response = 15;
  // Expected End for this request.
  bool expect_end = 16;
}

message KeyLookupResponse {
  bytes value = 1;
  CacheLookupStatus lookup_status = 2;
  CacheOperationStatus operation_status = 3;
  string error = 4;
}

enum CacheLookupStatus {
  HIT = 0;
  MISS = 1;
}

enum CacheOperationStatus {
  SUCCESS = 0;
  ERROR = 1;
}

message CacheUpsertRequest {
  string control_point = 1;
  CacheEntry result_cache_entry = 2;
  map<string, CacheEntry> global_cache_entries = 3;
}

message CacheEntry {
  string key = 1;
  bytes value = 2;
  google.protobuf.Duration ttl = 3;
}

message CacheUpsertResponse {
  KeyUpsertResponse result_cache_response = 1;
  map<string, KeyUpsertResponse> global_cache_responses = 2;
}

message KeyUpsertResponse {
  CacheOperationStatus operation_status = 1;
  string error = 2;
}

message CacheDeleteRequest {
  string control_point = 1;
  string result_cache_key = 2;
  repeated string global_cache_keys = 3;
}

message CacheDeleteResponse {
  KeyDeleteResponse result_cache_response = 1;
  map<string, KeyDeleteResponse> global_cache_responses = 2;
}

message KeyDeleteResponse {
  CacheOperationStatus operation_status = 1;
  string error = 2;
}

message CacheLookupRequest {
  string control_point = 1;
  // Key for result cache that needs to be fetched.
  string result_cache_key = 2;
  // Keys for global cache entries that need to be fetched.
  repeated string global_cache_keys = 3;
}

message CacheLookupResponse {
  KeyLookupResponse result_cache_response = 1;
  map<string, KeyLookupResponse> global_cache_responses = 2;
}

// ClassifierInfo describes details for each ClassifierInfo.
message ClassifierInfo {
  // Error information.
  enum Error {
    ERROR_NONE = 0;
    ERROR_EVAL_FAILED = 1;
    ERROR_EMPTY_RESULTSET = 2;
    ERROR_AMBIGUOUS_RESULTSET = 3;
    ERROR_MULTI_EXPRESSION = 4;
    ERROR_EXPRESSION_NOT_MAP = 5;
  }

  string policy_name = 1;
  string policy_hash = 2;
  int64 classifier_index = 3;
  Error error = 5;
}

// LimiterDecision describes details for each limiter.
message LimiterDecision {
  message TokensInfo {
    // remaining and current may not
    // provide accurate values in case
    // the request times out while waiting
    // for tokens.
    double remaining = 1;
    double current = 2;
    double consumed = 3;
  }

  message RateLimiterInfo {
    string label = 1;
    TokensInfo tokens_info = 2;
  }

  message SchedulerInfo {
    string workload_index = 1;
    TokensInfo tokens_info = 2;
    double priority = 3;
  }

  message SamplerInfo {
    string label = 1;
  }

  message QuotaSchedulerInfo {
    string label = 1;
    string workload_index = 2;
    TokensInfo tokens_info = 3;
    double priority = 4;
  }

  message ConcurrencyLimiterInfo {
    string label = 1;
    TokensInfo tokens_info = 2;
    string request_id = 3;
  }

  message ConcurrencySchedulerInfo {
    string label = 1;
    string workload_index = 2;
    TokensInfo tokens_info = 3;
    double priority = 4;
    string request_id = 5;
  }

  enum LimiterReason {
    LIMITER_REASON_UNSPECIFIED = 0;
    LIMITER_REASON_KEY_NOT_FOUND = 1;
  }

  string policy_name = 1;
  string policy_hash = 2;
  string component_id = 3;
  bool dropped = 4;
  LimiterReason reason = 5;
  StatusCode denied_response_status_code = 10;
  google.protobuf.Duration wait_time = 11;
  oneof details {
    RateLimiterInfo rate_limiter_info = 20;
    SchedulerInfo load_scheduler_info = 21;
    SamplerInfo sampler_info = 22;
    QuotaSchedulerInfo quota_scheduler_info = 23;
    ConcurrencyLimiterInfo concurrency_limiter_info = 24;
    ConcurrencySchedulerInfo concurrency_scheduler_info = 25;
  }
}

// FluxMeterInfo describes detail for each FluxMeterInfo.
message FluxMeterInfo {
  string flux_meter_name = 1;
}

// HTTP response codes.
// For more details: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
enum StatusCode {
  // Empty - This code not part of the HTTP status code specification, but it is needed for `enum` type.
  Empty = 0;

  Continue = 100;

  OK = 200;

  Created = 201;

  Accepted = 202;

  NonAuthoritativeInformation = 203;

  NoContent = 204;

  ResetContent = 205;

  PartialContent = 206;

  MultiStatus = 207;

  AlreadyReported = 208;

  IMUsed = 226;

  MultipleChoices = 300;

  MovedPermanently = 301;

  Found = 302;

  SeeOther = 303;

  NotModified = 304;

  UseProxy = 305;

  TemporaryRedirect = 307;

  PermanentRedirect = 308;

  BadRequest = 400;

  Unauthorized = 401;

  PaymentRequired = 402;

  Forbidden = 403;

  NotFound = 404;

  MethodNotAllowed = 405;

  NotAcceptable = 406;

  ProxyAuthenticationRequired = 407;

  RequestTimeout = 408;

  Conflict = 409;

  Gone = 410;

  LengthRequired = 411;

  PreconditionFailed = 412;

  PayloadTooLarge = 413;

  URITooLong = 414;

  UnsupportedMediaType = 415;

  RangeNotSatisfiable = 416;

  ExpectationFailed = 417;

  MisdirectedRequest = 421;

  UnprocessableEntity = 422;

  Locked = 423;

  FailedDependency = 424;

  UpgradeRequired = 426;

  PreconditionRequired = 428;

  TooManyRequests = 429;

  RequestHeaderFieldsTooLarge = 431;

  InternalServerError = 500;

  NotImplemented = 501;

  BadGateway = 502;

  ServiceUnavailable = 503;

  GatewayTimeout = 504;

  HTTPVersionNotSupported = 505;

  VariantAlsoNegotiates = 506;

  InsufficientStorage = 507;

  LoopDetected = 508;

  NotExtended = 510;

  NetworkAuthenticationRequired = 511;
}

message InflightRequestRef {
  string policy_name = 1;
  string policy_hash = 2;
  string component_id = 3;
  string label = 4;
  string request_id = 5;
  double tokens = 6;
}

message TokenReturnStatus {
  InflightRequestRef inflight_request_ref = 1;
  bool returned = 2;
  string error = 3;
}

message FlowEndRequest {
  string control_point = 1; // needed for telemetry
  repeated InflightRequestRef inflight_requests = 2;
}

message FlowEndResponse {
  repeated TokenReturnStatus token_return_statuses = 1;
}
