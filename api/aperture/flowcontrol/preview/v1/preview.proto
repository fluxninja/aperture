syntax = "proto3";

package aperture.flowcontrol.preview.v1;

import "aperture/policy/language/v1/label_matcher.proto";
import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

service FlowPreviewService {
  rpc PreviewFlowLabels(PreviewRequest) returns (PreviewFlowLabelsResponse) {
    option (google.api.http) = {
      post: "/v1/flowcontrol/preview/labels/{service}/{control_point}"
      body: "label_matcher"
      additional_bindings: [
        {
          post: "/v1/flowcontrol/preview/labels/{control_point}"
          body: "label_matcher"
        }
      ]
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["aperture-agent"];
    };
  }
  rpc PreviewHTTPRequests(PreviewRequest) returns (PreviewHTTPRequestsResponse) {
    option (google.api.http) = {
      post: "/v1/flowcontrol/preview/http_requests/{service}/{control_point}"
      body: "label_matcher"
      additional_bindings: [
        {
          post: "/v1/flowcontrol/preview/http_requests/{control_point}"
          body: "label_matcher"
        }
      ]
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["aperture-agent"];
    };
  }
}

message PreviewRequest {
  // Number of samples to collect.
  int64 samples = 1 [(validate.rules).int64.gt = 0];
  // Control point to preview.
  string control_point = 2 [(validate.rules).string.min_len = 1];
  // Service to preview.
  string service = 3 [(validate.rules).string.min_len = 1];
  // Flow labels to match. Optional parameter for advanced filtering.
  policy.language.v1.LabelMatcher label_matcher = 4;
}

message PreviewFlowLabelsResponse {
  message FlowLabels {
    map<string, string> labels = 1;
  }
  repeated FlowLabels samples = 1;
}

message PreviewHTTPRequestsResponse {
  repeated google.protobuf.Struct samples = 1;
}
