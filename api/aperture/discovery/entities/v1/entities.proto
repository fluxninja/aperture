syntax = "proto3";

package aperture.discovery.entities.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

//
// gRPC service
//

// EntitiesService is used to query Entities.
service EntitiesService {
  rpc GetEntities(google.protobuf.Empty) returns (Entities) {
    option (google.api.http) = {get: "/v1/discovery/entities"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["aperture-agent"];
    };
  }
  rpc GetEntityByIPAddress(GetEntityByIPAddressRequest) returns (Entity) {
    option (google.api.http) = {get: "/v1/discovery/entities/ip-address/{ip_address}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["aperture-agent"];
    };
  }
  rpc GetEntityByName(GetEntityByNameRequest) returns (Entity) {
    option (google.api.http) = {get: "/v1/discovery/entities/name/{name}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: ["aperture-agent"];
    };
  }
}

message GetEntityByIPAddressRequest {
  string ip_address = 1;
}

message GetEntityByNameRequest {
  string name = 1;
}

// Entities contains both mappings of ip address to entity and entity name to entity.
message Entities {
  // Entities defines mapping of entities.
  message Entities {
    map<string, Entity> entities = 1;
  }

  Entities entities_by_ip_address = 1;
  Entities entities_by_name = 2;
}

// Entity represents a pod, VM, etc.
message Entity {
  // Unique identifier of the entity.
  string uid = 1; // @gotags: validate:"required"
  // IP address of the entity.
  string ip_address = 2; // @gotags: validate:"required,ip"
  // Name of the entity. For example, pod name.
  string name = 3;
  // Namespace of the entity. For example, pod namespace.
  string namespace = 4;
  // Node name of the entity. For example, host name.
  string node_name = 5;
  // Services of the entity.
  repeated string services = 6; // @gotags: validate:"gt=0"
}
