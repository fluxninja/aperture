syntax = "proto3";

package aperture.policy.language.v1;

// Allows to define rules whether a map of
// [labels](/concepts/flow-control/flow-label.md)
// should be considered a match or not
//
// It provides three ways to define requirements:
// - match labels
// - match expressions
// - arbitrary expression
//
// If multiple requirements are set, they're all combined using the logical AND operator.
// An empty label matcher always matches.
message LabelMatcher {
  // A map of {key,value} pairs representing labels to be matched.
  // A single {key,value} in the `match_labels` requires that the label `key` is present and equal to `value`.
  //
  // Note: The requirements are combined using the logical AND operator.
  map<string, string> match_labels = 1;

  // List of k8s-style label matcher requirements.
  //
  // Note: The requirements are combined using the logical AND operator.
  repeated K8sLabelMatcherRequirement match_expressions = 2;

  // An arbitrary expression to be evaluated on the labels.
  MatchExpression expression = 3;
}

// Label selector requirement which is a selector that contains values, a key, and an operator that relates the key and values.
message K8sLabelMatcherRequirement {
  // Label key that the selector applies to.
  string key = 1; // @gotags: validate:"required"

  // Logical operator which represents a key's relationship to a set of values.
  // Valid operators are In, NotIn, Exists and DoesNotExist.
  string operator = 2; // @gotags: validate:"oneof=In NotIn Exists DoesNotExists"

  // An array of string values that relates to the key by an operator.
  // If the operator is In or NotIn, the values array must be non-empty.
  // If the operator is Exists or DoesNotExist, the values array must be empty.
  repeated string values = 3;
}

// Defines a `[map<string, string> → bool]` expression to be evaluated on labels
//
// MatchExpression has multiple variants, exactly one should be set.
//
// Example:
// ```yaml
// all:
//   of:
//     - label_exists: foo
//     - label_equals: { label = app, value = frobnicator }
// ```
message MatchExpression {
  // List of MatchExpressions that's used for all/any matching
  //
  // for example, `{any: {of: [expr1, expr2]}}`.
  message List {
    // List of sub expressions of the match expression.
    repeated MatchExpression of = 1;
  }

  // @gotags: validate:"required"
  oneof variant {
    // The expression negates the result of sub expression.
    MatchExpression not = 1;

    // The expression is true when all sub expressions are true.
    List all = 2;

    // The expression is true when any sub expression is true.
    List any = 3;

    // The expression is true when label with given name exists.
    string label_exists = 4; // @gotags: validate:"required"

    // The expression is true when label value equals given value.
    EqualsMatchExpression label_equals = 5;

    // The expression is true when label matches given regex.
    MatchesMatchExpression label_matches = 6;
  }
}

// Label selector expression of the equal form `label == value`.
message EqualsMatchExpression {
  // Name of the label to equal match the value.
  string label = 1; // @gotags: validate:"required"

  // Exact value that the label should be equal to.
  string value = 2;
}

// Label selector expression of the form `label matches regex`.
message MatchesMatchExpression {
  // Name of the label to match the regular expression.
  string label = 1; // @gotags: validate:"required"

  // Regular expression that should match the label value.
  // It uses [Go's regular expression syntax](https://github.com/google/re2/wiki/Syntax).
  string regex = 2; // @gotags: validate:"required"
}
