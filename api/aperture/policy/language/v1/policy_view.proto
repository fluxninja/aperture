syntax = "proto3";

package aperture.policy.language.v1;

import "google/protobuf/struct.proto";

// Components are interconnected with each other via Ports
message PortView {
  // Port name
  string port_name = 1;
  // Name of the incoming or outgoing Signal on the Port.
  string signal_name = 2;
  // True if port is looped.
  bool looped = 3;
}

message ComponentView {
  string component_id = 1;
  string component_name = 2;
  string component_type = 3;
  google.protobuf.Struct component = 4;
  repeated PortView in_ports = 5;
  repeated PortView out_ports = 6;
  string parent_component_id = 7;
}

// SourceTarget describes a link attachment to a component.
message SourceTarget {
  string component_id = 1;
  string port_name = 2;
}

// Link is a connection between Components.
message Link {
  SourceTarget source = 1;
  SourceTarget target = 2;
  string signal_name = 3;
}

// // Port is enables Component connection.
// type Port struct {
// 	Name   string `json:"portName"`
// 	Signal string `json:"signalName"`
// 	Looped bool   `json:"looped"`
// }

// Component is a computational block that forms the circuit.
// type Component struct {
// 	ComponentID       string `json:"componentID"`
// 	ComponentName     string `json:"componentName"`
// 	ComponentType     string `json:"componentType"`
// 	Component         jsonb  `json:"component,omitempty"`
// 	InPorts           []Port `json:"inPorts"`
// 	OutPorts          []Port `json:"outPorts"`
// 	ParentComponentID string `json:"parentComponentID,omitempty"`
// }

// // SourceTarget describes a link attachment to a component.
// type SourceTarget struct {
// 	ComponentID string `json:"componentID"`
// 	PortName    string `json:"portName"`
// }

// // Link is a connection between Components.
// type Link struct {
// 	Source     SourceTarget `json:"source"`
// 	Target     SourceTarget `json:"target"`
// 	SignalName string       `json:"signalName"`
// }
