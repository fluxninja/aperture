syntax = "proto3";

package aperture.policy.language.v1;

import "aperture/common/selector/v1/selector.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// Set of classification rules sharing a common selector
//
// :::info
// See also [Classifier overview](/concepts/flow-control/label/classifier.md).
// :::
//
// Example:
// ```yaml
// selector:
//   service: service1.default.svc.cluster.local
//   control_point:
//     traffic: ingress
// rules:
//   user:
//     extractor:
//       from: request.http.headers.user
// ```
message Classifier {
  // Defines where to apply the flow classification rule.
  common.selector.v1.Selector selector = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    extensions: {
      key: "x-go-validate"
      value: {
        string_value: "required"
      }
    }
  }]; // @gotags: validate:"required"

  // A map of {key, value} pairs mapping from
  // [flow label](/concepts/flow-control/label/label.md) keys to rules that define
  // how to extract and propagate flow labels with that key.
  map<string, Rule> rules = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    extensions: {
      key: "x-go-validate"
      value: {
        string_value: "required,gt=0,dive,keys,required,endkeys,required"
      }
    }
  }]; // @gotags: validate:"required,gt=0,dive,keys,required,endkeys,required"
}

// Rule describes a single Flow Classification Rule
//
// Flow classification rule extracts a value from request metadata.
// More specifically, from `input`, which has the same spec as [Envoy's External Authorization Attribute Context][attribute-context].
// See <https://play.openpolicyagent.org/p/gU7vcLkc70> for an example input.
// There are two ways to define a flow classification rule:
// * Using a declarative extractor â€“ suitable from simple cases, such as directly reading a value from header or a field from json body.
// * Rego expression.
//
// Performance note: It's recommended to use declarative extractors where possible, as they may be slightly performant than Rego expressions.
// [attribute-context](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto)
//
// Example of Declarative JSON extractor:
// ```yaml
// extractor:
//   json:
//     from: request.http.body
//     pointer: /user/name
// ```
//
// Example of Rego module which also disables propagation of a label:
// ```yaml
// rego:
//   query: data.user_from_cookie.user
//   source: |
//     package: user_from_cookie
//     cookies: split(input.attributes.request.http.headers.cookie, ';')
//     cookie: cookies[_]
//     cookie.startswith: ('session=')
//     session: substring(cookie, count('session='), -1)
//     parts: split(session, '.')
//     object: json.unmarshal(base64url.decode(parts[0]))
//     user: object.user
// propagate: false
// ```
message Rule {
  // Raw rego rules are compiled 1:1 to rego queries
  //
  // High-level extractor-based rules are compiled into a single rego query.
  message Rego {
    // Source code of the rego module.
    //
    // Note: Must include a "package" declaration.
    string source = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      extensions: {
        key: "x-go-validate"
        value: {
          string_value: "required"
        }
      }
    }]; // @gotags: validate:"required"

    // Query string to extract a value (eg. `data.<mymodulename>.<variablename>`).
    //
    // Note: The module name must match the package name from the "source".
    string query = 2 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      extensions: {
        key: "x-go-validate"
        value: {
          string_value: "required"
        }
      }
    }]; // @gotags: validate:"required"
  }

  oneof source {
    // High-level declarative extractor.
    Extractor extractor = 1;

    // Rego module to extract a value from the rego module.
    Rego rego = 2;
  } // @gotags: validate:"required"

  // Decides if the created label should be applied to the whole request chain
  // (propagated in [baggage](/concepts/flow-control/label/label.md#baggage))
  bool propagate = 3 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    extensions: {
      key: "x-go-validate"
      value: {
        string_value: "required"
      }
    }
  }]; // @gotags: default:"true"

  // Decides if the created flow label should be hidden from the telemetry.
  // A hidden flow label is still accessible in policies and can be used as eg.
  // fairness key.
  //
  // :::caution
  // When using [FluxNinja Cloud plugin](cloud/plugin.md), all non-hidden
  // labels are sent to cloud for observability. We thus recommend to set this
  // _hidden_ flag for high-cardinality labels, such as usernames or ids, to
  // avoid bloating analytics database. _Hidden_ flag should also be set for
  // sensitive labels.
  // :::
  bool hidden = 4 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    extensions: {
      key: "x-go-validate"
      value: {
        string_value: "required"
      }
    }
  }]; // @gotags: default:"false"
}

// Defines a high-level way to specify how to extract a flow label value given http request metadata, without a need to write rego code
//
// There are multiple variants of extractor, specify exactly one.
message Extractor {
  oneof variant {
    // Use an attribute with no convertion
    //
    // Attribute path is a dot-separated path to attribute.
    //
    // Should be either:
    // * one of the fields of [Attribute Context][attribute-context], or
    // * a special "request.http.bearer" pseudo-attribute.
    // Eg. "request.http.method" or "request.http.header.user-agent"
    //
    // Note: The same attribute path syntax is shared by other extractor variants,
    // wherever attribute path is needed in their "from" syntax.
    //
    // Example:
    // ```yaml
    // from: request.http.headers.user-agent
    // ```
    // [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
    string from = 1;

    // Deserialize a json, and extract one of the fields.
    JSONExtractor json = 2;

    // Display an address as a single string - `<ip>:<port>`.
    AddressExtractor address = 3;

    // Parse the attribute as JWT and read the payload.
    JWTExtractor jwt = 4;

    // Match HTTP Path to given path templates.
    PathTemplateMatcher path_templates = 5;
  }
}

// Deserialize a json, and extract one of the fields
//
// Example:
// ```yaml
// from: request.http.body
// pointer: /user/name
// ```
message JSONExtractor {
  // Attribute path pointing to some strings - eg. "request.http.body".
  string from = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    extensions: {
      key: "x-go-validate"
      value: {
        string_value: "required"
      }
    }
  }]; //@gotags: validate:"required"

  // Json pointer represents a parsed json pointer which allows to select a specified field from the json payload.
  //
  // Note: Uses [json pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
  // eg. `/foo/bar`. If the pointer points into an object, it'd be stringified.
  string pointer = 2;
}

// Display an [Address][ext-authz-address] as a single string, eg. `<ip>:<port>`
//
// IP addresses in attribute context are defined as objects with separate ip and port fields.
// This is a helper to display an address as a single string.
//
// Note: Use with care, as it might accidentally introduce a high-cardinality flow label values.
//
// [ext-authz-address]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address
//
// Example:
// ```yaml
// from: "source.address # or dstination.address"
// ```
message AddressExtractor {
  // Attribute path pointing to some string - eg. "source.address".
  string from = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    extensions: {
      key: "x-go-validate"
      value: {
        string_value: "required"
      }
    }
  }]; //@gotags: validate:"required"
}

// Parse the attribute as JWT and read the payload
//
// Specify a field to be extracted from payload using "json_pointer".
//
// Note: The signature is not verified against the secret (we're assuming there's some
// other parts of the system that handles such verification).
//
// Example:
// ```yaml
// from: request.http.bearer
// json_pointer: /user/email
// ```
message JWTExtractor {
  // Jwt token can be pulled from any input attribute, but most likely you'd want to use "request.http.bearer".
  string from = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    extensions: {
      key: "x-go-validate"
      value: {
        string_value: "required"
      }
    }
  }]; //@gotags: validate:"required"

  // Json pointer allowing to select a specified field from the json payload.
  //
  // Note: Uses [json pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
  // eg. `/foo/bar`. If the pointer points into an object, it'd be stringified.
  string json_pointer = 2;
}

// Matches HTTP Path to given path templates
//
// HTTP path will be matched against given path templates.
// If a match occurs, the value associated with the path template will be treated as a result.
// In case of multiple path templates matching, the most specific one will be chosen.
message PathTemplateMatcher {
  // Template value keys are OpenAPI-inspired path templates.
  //
  // * Static path segment `/foo` matches a path segment exactly
  // * `/{param}` matches arbitrary path segment.
  //   (The param name is ignored and can be omitted (`{}`))
  // * The parameter must cover whole segment.
  // * Additionally, path template can end with `/*` wildcard to match
  //   arbitrary number of trailing segments (0 or more).
  // * Multiple consecutive `/` are ignored, as well as trailing `/`.
  // * Parametrized path segments must come after static segments.
  // * `*`, if present, must come last.
  // * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/*`).
  //
  // See also <https://swagger.io/specification/#path-templating-matching>
  //
  // Example:
  // ```yaml
  // /register: register
  // "/user/{userId}": user
  // /static/*: other
  // ```
  map<string, string> template_values = 1 [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    extensions: {
      key: "x-go-validate"
      value: {
        string_value: "required"
      }
    }
  }]; // @gotags: validate:"gt=0,dive,keys,required,endkeys,required"
}
