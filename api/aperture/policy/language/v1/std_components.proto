syntax = "proto3";

package aperture.policy.language.v1;

import "aperture/policy/language/v1/ports.proto";
import "google/protobuf/duration.proto";

// Gradient controller is a type of controller which tries to adjust the
// control variable proportionally to the relative difference between setpoint
// and actual value of the signal
//
// The `gradient` describes a corrective factor that should be applied to the
// control variable to get the signal closer to the setpoint. It is computed as follows:
//
// $$
// \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
// $$
//
// `gradient` is then clamped to `[min_gradient, max_gradient]` range.
//
// The output of gradient controller is computed as follows:
// $$
// \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
// $$
//
// Note the additional `optimize` signal, that can be used to "nudge" the
// controller into desired idle state.
//
// The output can be _optionally_ clamped to desired range using `max` and
// `min` input.
message GradientController {
  // Gradient Parameters.
  message Parameters {
    // Slope controls the aggressiveness and direction of the Gradient Controller.
    //
    // Slope is used as exponent on the signal to setpoint ratio in computation
    // of the gradient (see the [main description](#gradient-controller) for
    // exact equation). Good intuition for this parameter is "What should the
    // Gradient Controller do to the control variable when signal is too high",
    // eg.:
    // * $\text{slope} = 1$: when signal is too high, increase control variable,
    // * $\text{slope} = -1$: when signal is too high, decrease control variable,
    // * $\text{slope} = -0.5$: when signal is too high, decrease control variable slowly.
    //
    // The sign of slope depends on correlation between the signal and control variable:
    // * Use $\text{slope} < 0$ if signal and control variable are _positively_
    // correlated (eg. Per-pod CPU usage and total concurrency).
    // * Use $\text{slope} > 0$ if signal and control variable are _negatively_
    // correlated (eg. Per-pod CPU usage and number of pods).
    //
    // :::note
    //
    // You need to set _negative_ slope for a _positive_ correlation, as you're
    // describing the _action_ which controller should make when the signal
    // increases.
    //
    // :::
    //
    // The magnitude of slope describes how aggressively should the controller
    // react to a deviation of signal.
    // With $|\text{slope}| = 1$, the controller will aim to bring the signal to
    // the setpoint in one tick (assuming linear correlation with signal and setpoint).
    // Smaller magnitudes of slope will make the controller adjust the control
    // variable more slowly.
    //
    // We recommend setting $|\text{slope}| < 1$ (eg. $\pm0.8$).
    // If you experience overshooting, consider lowering the magnitude even more.
    // Values of $|\text{slope}| > 1$ are not recommended.
    //
    // :::note
    //
    // Remember that the gradient and output signal can be (optionally) clamped,
    // so the _slope_ might not fully describe aggressiveness of the controller.
    //
    // :::
    double slope = 1; // @gotags: validate:"required"

    // Minimum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].
    double min_gradient = 2; // @gotags: default:"-1.79769313486231570814527423731704356798070e+308"

    // Maximum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].
    double max_gradient = 3; // @gotags: default:"1.79769313486231570814527423731704356798070e+308"
  }

  // Dynamic Configuration for a Controller
  message DynamicConfig {
    // Decides whether the controller runs in "manual_mode".
    // In manual mode, the controller does not adjust the control variable I.E. emits the same output as the control variable input.
    bool manual_mode = 1; // @gotags: default:"false"
  }

  // Inputs for the Gradient Controller component.
  message Ins {
    // Signal to be used for the gradient computation.
    InPort signal = 1;

    // Setpoint to be used for the gradient computation.
    InPort setpoint = 2;

    // Optimize signal is added to the output of the gradient calculation.
    InPort optimize = 3;

    // Maximum value to limit the output signal.
    InPort max = 4;

    // Minimum value to limit the output signal.
    InPort min = 5;

    // Actual current value of the control variable.
    //
    // This signal is multiplied by the gradient to produce the output.
    InPort control_variable = 6;
  }

  // Outputs for the Gradient Controller component.
  message Outs {
    // Computed desired value of the control variable.
    OutPort output = 1;
  }

  // Input ports of the Gradient Controller.
  Ins in_ports = 1;

  // Output ports of the Gradient Controller.
  Outs out_ports = 2;

  // Gradient Parameters.
  Parameters parameters = 3; // @gotags: validate:"required"

  // Configuration key for DynamicConfig
  string dynamic_config_key = 4;

  // Default configuration.
  DynamicConfig default_config = 5;
}

// Exponential Moving Average (EMA) is a type of moving average that applies exponentially more weight to recent signal readings
//
// At any time EMA component operates in one of the following states:
// 1. Warm up state: The first warmup_window samples are used to compute the initial EMA.
//    If an invalid reading is received during the warmup_window, the last good average is emitted and the state gets reset back to beginning of warm up state.
// 2. Normal state: The EMA is computed using following formula.
//
// The EMA for a series $Y$ is calculated recursively as:
//
// $$
// \text{EMA} _t =
// \begin{cases}
//   Y_0, &\text{for } t = 0 \\
//   \alpha Y_t + (1 - \alpha) \text{EMA} _{t-1}, &\text{for }t > 0
// \end{cases}
// $$
//
// The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
// A higher $\alpha$ discounts older observations faster.
// The $\alpha$ is computed using ema\_window:
//
// $$
// \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
// $$
message EMA {
  // Inputs for the EMA component.
  message Ins {
    // Input signal to be used for the EMA computation.
    InPort input = 1;

    // Upper bound of the moving average.
    //
    // When the signal exceeds `max_envelope` it's multiplied by
    // `correction_factor_on_max_envelope_violation` **once per tick**.
    //
    // :::note
    //
    // If the signal deviates from `max_envelope` faster than the correction
    // faster, it might end up exceeding the envelope.
    //
    // :::
    //
    InPort max_envelope = 2;

    // Lower bound of the moving average.
    //
    // Behavior is similar to `max_envelope`.
    InPort min_envelope = 3;
  }

  // Outputs for the EMA component.
  message Outs {
    // Exponential moving average of the series of reading as an output signal.
    OutPort output = 1;
  }

  // Parameters for the EMA component.
  message Parameters {
    // Duration of EMA sampling window.
    google.protobuf.Duration ema_window = 1; // @gotags: validate:"required"

    // Duration of EMA warming up window.
    //
    // The initial value of the EMA is the average of signal readings received during the warm up window.
    google.protobuf.Duration warmup_window = 2; // @gotags: validate:"required"

    // Correction factor to apply on the output value if its in violation of the min envelope.
    double correction_factor_on_min_envelope_violation = 3; // @gotags: validate:"gte=1.0" default:"1.0"

    // Correction factor to apply on the output value if its in violation of the max envelope.
    double correction_factor_on_max_envelope_violation = 4; // @gotags: validate:"gte=0,lte=1.0" default:"1.0"

    // Whether the output is valid during the warm up stage.
    bool valid_during_warmup = 5; // @gotags: default:"false"
  }

  // Input ports for the EMA component.
  Ins in_ports = 1;

  // Output ports for the EMA component.
  Outs out_ports = 2;

  // Parameters for the EMA component.
  Parameters parameters = 3; // @gotags: validate:"required"
}

// Type of combinator that computes the arithmetic operation on the operand signals
message ArithmeticCombinator {
  // Inputs for the Arithmetic Combinator component.
  message Ins {
    // Left hand side of the arithmetic operation.
    InPort lhs = 1;

    // Right hand side of the arithmetic operation.
    InPort rhs = 2;
  }

  // Outputs for the Arithmetic Combinator component.
  message Outs {
    // Result of arithmetic operation.
    OutPort output = 1;
  }

  // Input ports for the Arithmetic Combinator component.
  Ins in_ports = 1;

  // Output ports for the Arithmetic Combinator component.
  Outs out_ports = 2;

  // Operator of the arithmetic operation.
  //
  // The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
  // In case of XOR and bitshifts, value of signals is cast to integers before performing the operation.
  string operator = 3; // @gotags: validate:"oneof=add sub mul div xor lshift rshift"
}

// Type of combinator that computes the comparison operation on lhs and rhs signals
//
// The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.
//
// This component also supports time-based response, i.e. the output
// transitions between 1.0 or 0.0 signal if the decider condition is
// true or false for at least "true_for" or "false_for" duration. If
// `true_for` and `false_for` durations are zero then the transitions are
// instantaneous.
message Decider {
  // Inputs for the Decider component.
  message Ins {
    // Left hand side input signal for the comparison operation.
    InPort lhs = 1;

    // Right hand side input signal for the comparison operation.
    InPort rhs = 2;
  }

  // Outputs for the Decider component.
  message Outs {
    // Selected signal (1.0 or 0.0).
    OutPort output = 1;
  }

  // Input ports for the Decider component.
  Ins in_ports = 1;

  // Output ports for the Decider component.
  Outs out_ports = 2;

  // Comparison operator that computes operation on lhs and rhs input signals.
  string operator = 3; // @gotags: validate:"oneof=gt lt gte lte eq neq"

  // Duration of time to wait before a transition to true state.
  // If the duration is zero, the transition will happen instantaneously.
  google.protobuf.Duration true_for = 4; // @gotags: default:"0s"

  // Duration of time to wait before a transition to false state.
  // If the duration is zero, the transition will happen instantaneously.
  google.protobuf.Duration false_for = 5; // @gotags: default:"0s"
}

// Type of combinator that switches between `on_signal` and `off_signal` signals based on switch input
//
// `on_signal` will be returned if switch input is valid and not equal to 0.0 ,
//  otherwise `off_signal` will be returned.
message Switcher {
  // Inputs for the Switcher component.
  message Ins {
    // Output signal when switch is valid and not 0.0.
    InPort on_signal = 1;

    // Output signal when switch is invalid or 0.0.
    InPort off_signal = 2;

    // Decides whether to return `on_signal` or `off_signal`.
    InPort switch = 3;
  }

  // Outputs for the Switcher component.
  message Outs {
    // Selected signal (`on_signal` or `off_signal`).
    OutPort output = 1;
  }

  // Input ports for the Switcher component.
  Ins in_ports = 1;

  // Output ports for the Switcher component.
  Outs out_ports = 2;
}

// Component that emits a variable value as an output signal, can be defined in dynamic configuration.
message Variable {
  message DynamicConfig {
    ConstantSignal constant_signal = 1; // @gotags: validate:"required"
  }
  // Outputs for the Variable component.
  message Outs {
    // The value is emitted to the output port.
    OutPort output = 1;
  }

  // Output ports for the Variable component.
  Outs out_ports = 1;

  // Configuration key for DynamicConfig.
  string dynamic_config_key = 2;

  // Default configuration.
  DynamicConfig default_config = 3; // @gotags: validate:"required"
}

// Takes an input signal and emits the output after applying the specified unary operator
//
// $$
// \text{output} = \unary_operator{\text{input}}
// $$
message UnaryOperator {
  // Inputs for the UnaryOperator component.
  message Ins {
    // Input signal.
    InPort input = 1;
  }

  // Outputs for the UnaryOperator component.
  message Outs {
    // Output signal.
    OutPort output = 1;
  }

  // Input ports for the UnaryOperator component.
  Ins in_ports = 1;

  // Output ports for the UnaryOperator component.
  Outs out_ports = 2;

  // Unary Operator to apply.
  //
  // The unary operator can be one of the following:
  // * abs: Absolute value with the sign removed.
  // * acos: arccosine, in radians.
  // * acosh: Inverse hyperbolic cosine.
  // * asin: arcsine, in radians.
  // * asinh: Inverse hyperbolic sine.
  // * atan: arctangent, in radians.
  // * atanh: Inverse hyperbolic tangent.
  // * cbrt: Cube root.
  // * ceil: Least integer value greater than or equal to input signal.
  // * cos: cosine, in radians.
  // * cosh: Hyperbolic cosine.
  // * erf: Error function.
  // * erfc: Complementary error function.
  // * erfcinv: Inverse complementary error function.
  // * erfinv: Inverse error function.
  // * exp: The base-e exponential of input signal.
  // * exp2: The base-2 exponential of input signal.
  // * expm1: The base-e exponential of input signal minus 1.
  // * floor: Greatest integer value less than or equal to input signal.
  // * gamma: Gamma function.
  // * j0: Bessel function of the first kind of order 0.
  // * j1: Bessel function of the first kind of order 1.
  // * lgamma: Natural logarithm of the absolute value of the gamma function.
  // * log: Natural logarithm of input signal.
  // * log10: Base-10 logarithm of input signal.
  // * log1p: Natural logarithm of input signal plus 1.
  // * log2: Base-2 logarithm of input signal.
  // * round: Round to nearest integer.
  // * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
  // * sin: sine, in radians.
  // * sinh: Hyperbolic sine.
  // * sqrt: Square root.
  // * tan: tangent, in radians.
  // * tanh: Hyperbolic tangent.
  // * trunc: Truncate to integer.
  // * y0: Bessel function of the second kind of order 0.
  // * y1: Bessel function of the second kind of order 1.
  string operator = 3; // @gotags: validate:"oneof=abs acos acosh asin asinh atan atanh cbrt ceil cos cosh erf erfc erfcinv erfinv exp exp2 expm1 floor gamma j0 j1 lgamma log log10 log1p log2 round roundtoeven sin sinh sqrt tan tanh trunc y0 y1"
}

// Extrapolates the input signal by repeating the last valid value during the period in which it is invalid
//
// It does so until `maximum_extrapolation_interval` is reached, beyond which it emits invalid signal unless input signal becomes valid again.
message Extrapolator {
  // Parameters for the Extrapolator component.
  message Parameters {
    // Maximum time interval to repeat the last valid value of input signal.
    google.protobuf.Duration max_extrapolation_interval = 1; // @gotags: validate:"required"
  }

  // Inputs for the Extrapolator component.
  message Ins {
    // Input signal for the Extrapolator component.
    InPort input = 1;
  }

  // Outputs for the Extrapolator component.
  message Outs {
    // Extrapolated signal.
    OutPort output = 1;
  }

  // Input ports for the Extrapolator component.
  Ins in_ports = 1;

  // Output ports for the Extrapolator component.
  Outs out_ports = 2;

  // Parameters for the Extrapolator component.
  Parameters parameters = 3; // @gotags: validate:"required"
}

// Takes a list of input signals and emits the signal with the maximum value
//
// Max: output = max([]inputs).
message Max {
  // Inputs for the Max component.
  message Ins {
    // Array of input signals.
    repeated InPort inputs = 1; // @gotags: validate:"dive"
  }

  // Output for the Max component.
  message Outs {
    // Signal with maximum value as an output signal.
    OutPort output = 1;
  }

  // Input ports for the Max component.
  Ins in_ports = 1;

  // Output ports for the Max component.
  Outs out_ports = 2;
}

// Takes an array of input signals and emits the signal with the minimum value
// Min: output = min([]inputs).
message Min {
  // Inputs for the Min component.
  message Ins {
    // Array of input signals.
    repeated InPort inputs = 1; // @gotags: validate:"dive"
  }

  // Output ports for the Min component.
  message Outs {
    // Signal with minimum value as an output signal.
    OutPort output = 1;
  }

  // Input ports for the Min component.
  Ins in_ports = 1;

  // Output ports for the Min component.
  Outs out_ports = 2;
}

// Logical AND.
//
// Signals are mapped to boolean values as follows:
// * Zero is treated as false.
// * Any non-zero is treated as true.
// * Invalid inputs are considered unknown.
//
//   :::note
//
//   Treating invalid inputs as "unknowns" has a consequence that the result
//   might end up being valid even when some inputs are invalid. Eg. `unknown && false == false`,
//   because the result would end up false no matter if
//   first signal was true or false. On the other hand, `unknown && true == unknown`.
//
//   :::
message And {
  // Inputs for the And component.
  message Ins {
    // Array of input signals.
    repeated InPort inputs = 1; // @gotags: validate:"dive"
  }

  // Output ports for the And component.
  message Outs {
    // Result of logical AND of all the input signals.
    //
    // Will always be 0 (false), 1 (true) or invalid (unknown).
    OutPort output = 1;
  }

  // Input ports for the And component.
  Ins in_ports = 1;

  // Output ports for the And component.
  Outs out_ports = 2;
}

// Logical OR.
//
// See [And component](#and) on how signals are mapped onto boolean values.
message Or {
  // Inputs for the Or component.
  message Ins {
    // Array of input signals.
    repeated InPort inputs = 1; // @gotags: validate:"dive"
  }

  // Output ports for the Or component.
  message Outs {
    // Result of logical OR of all the input signals.
    //
    // Will always be 0 (false), 1 (true) or invalid (unknown).
    OutPort output = 1;
  }

  // Input ports for the Or component.
  Ins in_ports = 1;

  // Output ports for the Or component.
  Outs out_ports = 2;
}

// Logical NOT.
//
// See [And component](#and) on how signals are mapped onto boolean values.
message Inverter {
  // Inputs for the Inverter component.
  message Ins {
    // Signal to be negated.
    InPort input = 1; // @gotags: validate:"dive"
  }

  // Output ports for the Inverter component.
  message Outs {
    // Logical negation of the input signal.
    //
    // Will always be 0 (false), 1 (true) or invalid (unknown).
    OutPort output = 1;
  }

  // Input ports for the Inverter component.
  Ins in_ports = 1;

  // Output ports for the Inverter component.
  Outs out_ports = 2;
}

// Picks the first valid input signal from the array of input signals and emits it as an output signal
message FirstValid {
  // Inputs for the FirstValid component.
  message Ins {
    // Array of input signals.
    repeated InPort inputs = 1; // @gotags: validate:"dive"
  }

  // Outputs for the FirstValid component.
  message Outs {
    // First valid input signal as an output signal.
    OutPort output = 1;
  }

  // Input ports for the FirstValid component.
  Ins in_ports = 1;

  // Output ports for the FirstValid component.
  Outs out_ports = 2;
}

// Alerter reacts to a signal and generates alert to send to alert manager.
message Alerter {
  // Alerter Parameters is a common config for separate alerter components and alerters embedded in other components.
  message Parameters {
    // Name of the alert.
    string alert_name = 1; // @gotags: validate:"required"

    // Severity of the alert, one of 'info', 'warn' or 'crit'.
    string severity = 2; // @gotags: default:"info" validate:"oneof=info warn crit"

    // Duration of alert resolver.
    google.protobuf.Duration resolve_timeout = 3; // @gotags: default:"5s"

    // A list of alert channel strings.
    repeated string alert_channels = 4;

    // Additional labels to add to alert.
    map<string, string> labels = 5;
  }

  // Inputs for the Alerter component.
  message Ins {
    // Signal which Alerter is monitoring. If the signal greater than 0, Alerter generates an alert.
    InPort signal = 1;
  }

  // Input ports for the Alerter component.
  Ins in_ports = 1;

  // Alerter configuration
  Parameters parameters = 2; // @gotags: validate:"required"
}

// Accumulates sum of signal every tick.
message Integrator {
  // Inputs for the Integrator component.
  message Ins {
    // The input signal.
    InPort input = 1;
    // Resets the integrator output to zero when reset signal is valid and non-zero. Reset also resets the max and min constraints.
    InPort reset = 2;
    //The maximum output.
    InPort max = 3;
    //The minimum output.
    InPort min = 4;
  }

  // Outputs for the Integrator component.
  message Outs {
    OutPort output = 1;
  }

  // Input ports for the Integrator component.
  Ins in_ports = 1;

  // Output ports for the Integrator component.
  Outs out_ports = 2;
}

// Differentiator calculates rate of change per tick.
message Differentiator {
  // Inputs for the Differentiator component.
  message Ins {
    InPort input = 1;
  }

  // Outputs for the Differentiator component.
  message Outs {
    OutPort output = 1;
  }

  // Input ports for the Differentiator component.
  Ins in_ports = 1;

  // Output ports for the Differentiator component.
  Outs out_ports = 2;

  // The window of time over which differentiator operates.
  google.protobuf.Duration window = 3; // @gotags: default:"5s"
}

// Generates 0 and 1 in turns.
message PulseGenerator {
  // Outputs for the PulseGenerator component.
  message Outs {
    OutPort output = 1;
  }

  // Output ports for the PulseGenerator component.
  Outs out_ports = 1;

  // Emitting 1 for the true_for duration.
  google.protobuf.Duration true_for = 2; // @gotags: default:"5s"

  // Emitting 0 for the false_for duration.
  google.protobuf.Duration false_for = 3; // @gotags: default:"5s"
}

// Holds the last valid signal value for the specified duration then waits for next valid value to hold.
// If it's holding a value that means it ignores both valid and invalid new signals until the hold_for duration is finished.
message Holder {
  // Inputs for the Holder component.
  message Ins {
    // The input signal.
    InPort input = 1;
    // Resets the holder output to the current input signal when reset signal is valid and non-zero.
    InPort reset = 2;
  }

  // Outputs for the Holder component.
  message Outs {
    // The output signal.
    OutPort output = 1;
  }

  // Input ports for the Holder component.
  Ins in_ports = 1;
  // Output ports for the Holder component.
  Outs out_ports = 2;

  // Holding the last valid signal value for the hold_for duration.
  google.protobuf.Duration hold_for = 3; // @gotags: default:"5s"
}

// Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
message NestedSignalIngress {
  // Outputs for the NestedSignalIngress component.
  message Outs {
    // The signal to be ingressed.
    OutPort signal = 1;
  }

  // Output ports for the NestedSignalIngress component.
  Outs out_ports = 1;
  // Name of the port.
  string port_name = 2;
}

// Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
message NestedSignalEgress {
  // Inputs for the NestedSignalEgress component.
  message Ins {
    // The signal to be egressed.
    InPort signal = 1;
  }

  // Input ports for the NestedSignalEgress component.
  Ins in_ports = 1;
  // Name of the port.
  string port_name = 2;
}
