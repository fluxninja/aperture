syntax = "proto3";

package aperture.plugins.fluxninja.v1;

import "aperture/common/entitycache/v1/entitycache.proto";
import "aperture/common/info/v1/info.proto";
import "aperture/common/peers/v1/peers.proto";
import "aperture/common/status/v1/status.proto";
import "google/api/annotations.proto";

// FluxNinjaService is used to receive health and status info from agents.
service FluxNinjaService {
  // Report accepts information about agents' health and applied
  // configurations/policies.
  rpc Report(ReportRequest) returns (ReportResponse) {
    option (google.api.http) = {
      post: "/plugins/fluxninja/v1/report"
      body: "*"
    };
  }
}

message ReportRequest {
  aperture.common.info.v1.VersionInfo version_info = 1;
  aperture.common.info.v1.ProcessInfo process_info = 2;
  aperture.common.info.v1.HostInfo host_info = 3;
  string agent_group = 4;
  ControllerInfo controller_info = 5;
  aperture.common.peers.v1.Peers peers = 6;
  aperture.common.entitycache.v1.EntityCache entity_cache = 8;
  aperture.common.status.v1.GroupStatus all_statuses = 9;
}

// ReportResponse is empty for now.
message ReportResponse {}

message ControllerInfo {
  string id = 1;
}
