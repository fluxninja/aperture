syntax = "proto3";

package aperture.plugins.fluxninja.v1;

import "aperture/autoscale/kubernetes/controlpoints/v1/controlpoints.proto";
import "aperture/flowcontrol/controlpoints/v1/controlpoints.proto";
import "aperture/info/v1/info.proto";
import "aperture/peers/v1/peers.proto";
import "aperture/policy/sync/v1/policy.proto";
import "aperture/status/v1/status.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// FluxNinjaService is used to receive health and status info from agents.
service FluxNinjaService {
  // Report accepts information about agents' health and applied configurations/policies.
  rpc Report(ReportRequest) returns (ReportResponse) {
    option (google.api.http) = {
      post: "/plugins/fluxninja/v1/report"
      body: "*"
    };
  }
}

// ControllerInfoService is used to read controllerID to which agent/controller belong.
service ControllerInfoService {
  rpc GetControllerInfo(google.protobuf.Empty) returns (ControllerInfo) {
    option (google.api.http) = {get: "/plugins/fluxninja/v1/controllerinfo"};
  }
}

message ReportRequest {
  aperture.info.v1.VersionInfo version_info = 1;
  aperture.info.v1.ProcessInfo process_info = 2;
  aperture.info.v1.HostInfo host_info = 3;
  string agent_group = 4;
  ControllerInfo controller_info = 5;
  aperture.peers.v1.Peers peers = 6;
  ServicesList services_list = 8;
  aperture.status.v1.GroupStatus all_statuses = 9;
  aperture.policy.sync.v1.PolicyWrappers policies = 10;
  aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11;
  aperture.autoscale.kubernetes.controlpoints.v1.AutoscaleKubernetesControlPoints autoscale_kubernetes_control_points = 12;
  string installation_mode = 13;
}

// ReportResponse is empty for now.
message ReportResponse {}

message ControllerInfo {
  string id = 1;
}

// EntityCache summary

message ServicesList {
  repeated Service services = 1;
  repeated OverlappingService overlapping_services = 2;
}

// Service contains information about single service discovered in agent group by a
// particular agent.
message Service {
  string name = 1;
  int32 entities_count = 2;
}

// OverlappingService contains info about a service that overlaps with another one.
message OverlappingService {
  string service1 = 1;
  string service2 = 2;
  int32 entities_count = 3;
}
