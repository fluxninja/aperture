// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/classification/v1/ruleset.proto

package com.aperture.classification.v1;

public interface RuleOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.classification.v1.Rule)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * High-level flow label declarative extractor.
   * Rego extractor extracts a value from the rego module.
   * </pre>
   *
   * <code>.aperture.classification.v1.Extractor extractor = 1 [json_name = "extractor"];</code>
   * @return Whether the extractor field is set.
   */
  boolean hasExtractor();
  /**
   * <pre>
   * High-level flow label declarative extractor.
   * Rego extractor extracts a value from the rego module.
   * </pre>
   *
   * <code>.aperture.classification.v1.Extractor extractor = 1 [json_name = "extractor"];</code>
   * @return The extractor.
   */
  com.aperture.classification.v1.Extractor getExtractor();
  /**
   * <pre>
   * High-level flow label declarative extractor.
   * Rego extractor extracts a value from the rego module.
   * </pre>
   *
   * <code>.aperture.classification.v1.Extractor extractor = 1 [json_name = "extractor"];</code>
   */
  com.aperture.classification.v1.ExtractorOrBuilder getExtractorOrBuilder();

  /**
   * <pre>
   * Rego module to extract a value from the rego module.
   * </pre>
   *
   * <code>.aperture.classification.v1.Rule.Rego rego = 2 [json_name = "rego"];</code>
   * @return Whether the rego field is set.
   */
  boolean hasRego();
  /**
   * <pre>
   * Rego module to extract a value from the rego module.
   * </pre>
   *
   * <code>.aperture.classification.v1.Rule.Rego rego = 2 [json_name = "rego"];</code>
   * @return The rego.
   */
  com.aperture.classification.v1.Rule.Rego getRego();
  /**
   * <pre>
   * Rego module to extract a value from the rego module.
   * </pre>
   *
   * <code>.aperture.classification.v1.Rule.Rego rego = 2 [json_name = "rego"];</code>
   */
  com.aperture.classification.v1.Rule.RegoOrBuilder getRegoOrBuilder();

  /**
   * <pre>
   * Decides if the created label should be applied to the whole flow (propagated in baggage) (default=true).
   * </pre>
   *
   * <code>.google.protobuf.BoolValue propagate = 3 [json_name = "propagate"];</code>
   * @return Whether the propagate field is set.
   */
  boolean hasPropagate();
  /**
   * <pre>
   * Decides if the created label should be applied to the whole flow (propagated in baggage) (default=true).
   * </pre>
   *
   * <code>.google.protobuf.BoolValue propagate = 3 [json_name = "propagate"];</code>
   * @return The propagate.
   */
  com.google.protobuf.BoolValue getPropagate();
  /**
   * <pre>
   * Decides if the created label should be applied to the whole flow (propagated in baggage) (default=true).
   * </pre>
   *
   * <code>.google.protobuf.BoolValue propagate = 3 [json_name = "propagate"];</code>
   */
  com.google.protobuf.BoolValueOrBuilder getPropagateOrBuilder();

  /**
   * <pre>
   * Decides if the created flow label should be hidden from the telemetry.
   * </pre>
   *
   * <code>bool hidden = 4 [json_name = "hidden"];</code>
   * @return The hidden.
   */
  boolean getHidden();

  public com.aperture.classification.v1.Rule.SourceCase getSourceCase();
}
