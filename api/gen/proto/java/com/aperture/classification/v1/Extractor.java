// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/classification/v1/extractor.proto

package com.aperture.classification.v1;

/**
 * <pre>
 * Defines a high-level way to specify how to extract a flow label given http request metadata, without a need to write regod code.
 * There are multiple variants of extractor, specify exactly one:
 * - JSON Extractor
 * - Address Extractor
 * - JWT Extractor
 * </pre>
 *
 * Protobuf type {@code aperture.classification.v1.Extractor}
 */
public final class Extractor extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.classification.v1.Extractor)
    ExtractorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Extractor.newBuilder() to construct.
  private Extractor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Extractor() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Extractor();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Extractor(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();
            variantCase_ = 1;
            variant_ = s;
            break;
          }
          case 18: {
            com.aperture.classification.v1.JSONExtractor.Builder subBuilder = null;
            if (variantCase_ == 2) {
              subBuilder = ((com.aperture.classification.v1.JSONExtractor) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.aperture.classification.v1.JSONExtractor.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.classification.v1.JSONExtractor) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 2;
            break;
          }
          case 26: {
            com.aperture.classification.v1.AddressExtractor.Builder subBuilder = null;
            if (variantCase_ == 3) {
              subBuilder = ((com.aperture.classification.v1.AddressExtractor) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.aperture.classification.v1.AddressExtractor.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.classification.v1.AddressExtractor) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 3;
            break;
          }
          case 34: {
            com.aperture.classification.v1.JWTExtractor.Builder subBuilder = null;
            if (variantCase_ == 4) {
              subBuilder = ((com.aperture.classification.v1.JWTExtractor) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.aperture.classification.v1.JWTExtractor.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.classification.v1.JWTExtractor) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 4;
            break;
          }
          case 42: {
            com.aperture.classification.v1.PathTemplateMatcher.Builder subBuilder = null;
            if (variantCase_ == 5) {
              subBuilder = ((com.aperture.classification.v1.PathTemplateMatcher) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.aperture.classification.v1.PathTemplateMatcher.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.classification.v1.PathTemplateMatcher) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 5;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.classification.v1.ExtractorProto.internal_static_aperture_classification_v1_Extractor_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.classification.v1.ExtractorProto.internal_static_aperture_classification_v1_Extractor_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.classification.v1.Extractor.class, com.aperture.classification.v1.Extractor.Builder.class);
  }

  private int variantCase_ = 0;
  private java.lang.Object variant_;
  public enum VariantCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    FROM(1),
    JSON(2),
    ADDRESS(3),
    JWT(4),
    PATH_TEMPLATES(5),
    VARIANT_NOT_SET(0);
    private final int value;
    private VariantCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VariantCase valueOf(int value) {
      return forNumber(value);
    }

    public static VariantCase forNumber(int value) {
      switch (value) {
        case 1: return FROM;
        case 2: return JSON;
        case 3: return ADDRESS;
        case 4: return JWT;
        case 5: return PATH_TEMPLATES;
        case 0: return VARIANT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public VariantCase
  getVariantCase() {
    return VariantCase.forNumber(
        variantCase_);
  }

  public static final int FROM_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Use an attribute with no convertion.
   * Attribute path is a dot-separated path to attribute.
   * Should be either:
   * * one of the fields of [Attribute Context][attribute-context], or
   * * a special "request.http.bearer" pseudo-attribute.
   * Eg. "request.http.method" or "request.http.header.user-agent"
   * Note: The same attribute path syntax is shared by other extractor variants,
   * wherever attribute path is needed in their "from" syntax.
   * Example:
   * ```yaml
   * from: request.http.headers.user-agent
   * ```
   * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
   * </pre>
   *
   * <code>string from = 1 [json_name = "from"];</code>
   * @return Whether the from field is set.
   */
  public boolean hasFrom() {
    return variantCase_ == 1;
  }
  /**
   * <pre>
   * Use an attribute with no convertion.
   * Attribute path is a dot-separated path to attribute.
   * Should be either:
   * * one of the fields of [Attribute Context][attribute-context], or
   * * a special "request.http.bearer" pseudo-attribute.
   * Eg. "request.http.method" or "request.http.header.user-agent"
   * Note: The same attribute path syntax is shared by other extractor variants,
   * wherever attribute path is needed in their "from" syntax.
   * Example:
   * ```yaml
   * from: request.http.headers.user-agent
   * ```
   * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
   * </pre>
   *
   * <code>string from = 1 [json_name = "from"];</code>
   * @return The from.
   */
  public java.lang.String getFrom() {
    java.lang.Object ref = "";
    if (variantCase_ == 1) {
      ref = variant_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (variantCase_ == 1) {
        variant_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Use an attribute with no convertion.
   * Attribute path is a dot-separated path to attribute.
   * Should be either:
   * * one of the fields of [Attribute Context][attribute-context], or
   * * a special "request.http.bearer" pseudo-attribute.
   * Eg. "request.http.method" or "request.http.header.user-agent"
   * Note: The same attribute path syntax is shared by other extractor variants,
   * wherever attribute path is needed in their "from" syntax.
   * Example:
   * ```yaml
   * from: request.http.headers.user-agent
   * ```
   * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
   * </pre>
   *
   * <code>string from = 1 [json_name = "from"];</code>
   * @return The bytes for from.
   */
  public com.google.protobuf.ByteString
      getFromBytes() {
    java.lang.Object ref = "";
    if (variantCase_ == 1) {
      ref = variant_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (variantCase_ == 1) {
        variant_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int JSON_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Deserialize a json, and extract one of the fields.
   * </pre>
   *
   * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
   * @return Whether the json field is set.
   */
  @java.lang.Override
  public boolean hasJson() {
    return variantCase_ == 2;
  }
  /**
   * <pre>
   * Deserialize a json, and extract one of the fields.
   * </pre>
   *
   * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
   * @return The json.
   */
  @java.lang.Override
  public com.aperture.classification.v1.JSONExtractor getJson() {
    if (variantCase_ == 2) {
       return (com.aperture.classification.v1.JSONExtractor) variant_;
    }
    return com.aperture.classification.v1.JSONExtractor.getDefaultInstance();
  }
  /**
   * <pre>
   * Deserialize a json, and extract one of the fields.
   * </pre>
   *
   * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
   */
  @java.lang.Override
  public com.aperture.classification.v1.JSONExtractorOrBuilder getJsonOrBuilder() {
    if (variantCase_ == 2) {
       return (com.aperture.classification.v1.JSONExtractor) variant_;
    }
    return com.aperture.classification.v1.JSONExtractor.getDefaultInstance();
  }

  public static final int ADDRESS_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
   * </pre>
   *
   * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
   * @return Whether the address field is set.
   */
  @java.lang.Override
  public boolean hasAddress() {
    return variantCase_ == 3;
  }
  /**
   * <pre>
   * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
   * </pre>
   *
   * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
   * @return The address.
   */
  @java.lang.Override
  public com.aperture.classification.v1.AddressExtractor getAddress() {
    if (variantCase_ == 3) {
       return (com.aperture.classification.v1.AddressExtractor) variant_;
    }
    return com.aperture.classification.v1.AddressExtractor.getDefaultInstance();
  }
  /**
   * <pre>
   * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
   * </pre>
   *
   * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
   */
  @java.lang.Override
  public com.aperture.classification.v1.AddressExtractorOrBuilder getAddressOrBuilder() {
    if (variantCase_ == 3) {
       return (com.aperture.classification.v1.AddressExtractor) variant_;
    }
    return com.aperture.classification.v1.AddressExtractor.getDefaultInstance();
  }

  public static final int JWT_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Parse the attribute as JWT and read the payload.
   * </pre>
   *
   * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
   * @return Whether the jwt field is set.
   */
  @java.lang.Override
  public boolean hasJwt() {
    return variantCase_ == 4;
  }
  /**
   * <pre>
   * Parse the attribute as JWT and read the payload.
   * </pre>
   *
   * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
   * @return The jwt.
   */
  @java.lang.Override
  public com.aperture.classification.v1.JWTExtractor getJwt() {
    if (variantCase_ == 4) {
       return (com.aperture.classification.v1.JWTExtractor) variant_;
    }
    return com.aperture.classification.v1.JWTExtractor.getDefaultInstance();
  }
  /**
   * <pre>
   * Parse the attribute as JWT and read the payload.
   * </pre>
   *
   * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
   */
  @java.lang.Override
  public com.aperture.classification.v1.JWTExtractorOrBuilder getJwtOrBuilder() {
    if (variantCase_ == 4) {
       return (com.aperture.classification.v1.JWTExtractor) variant_;
    }
    return com.aperture.classification.v1.JWTExtractor.getDefaultInstance();
  }

  public static final int PATH_TEMPLATES_FIELD_NUMBER = 5;
  /**
   * <pre>
   * Match HTTP Path to given path templates.
   * </pre>
   *
   * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
   * @return Whether the pathTemplates field is set.
   */
  @java.lang.Override
  public boolean hasPathTemplates() {
    return variantCase_ == 5;
  }
  /**
   * <pre>
   * Match HTTP Path to given path templates.
   * </pre>
   *
   * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
   * @return The pathTemplates.
   */
  @java.lang.Override
  public com.aperture.classification.v1.PathTemplateMatcher getPathTemplates() {
    if (variantCase_ == 5) {
       return (com.aperture.classification.v1.PathTemplateMatcher) variant_;
    }
    return com.aperture.classification.v1.PathTemplateMatcher.getDefaultInstance();
  }
  /**
   * <pre>
   * Match HTTP Path to given path templates.
   * </pre>
   *
   * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
   */
  @java.lang.Override
  public com.aperture.classification.v1.PathTemplateMatcherOrBuilder getPathTemplatesOrBuilder() {
    if (variantCase_ == 5) {
       return (com.aperture.classification.v1.PathTemplateMatcher) variant_;
    }
    return com.aperture.classification.v1.PathTemplateMatcher.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (variantCase_ == 1) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, variant_);
    }
    if (variantCase_ == 2) {
      output.writeMessage(2, (com.aperture.classification.v1.JSONExtractor) variant_);
    }
    if (variantCase_ == 3) {
      output.writeMessage(3, (com.aperture.classification.v1.AddressExtractor) variant_);
    }
    if (variantCase_ == 4) {
      output.writeMessage(4, (com.aperture.classification.v1.JWTExtractor) variant_);
    }
    if (variantCase_ == 5) {
      output.writeMessage(5, (com.aperture.classification.v1.PathTemplateMatcher) variant_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (variantCase_ == 1) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, variant_);
    }
    if (variantCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.aperture.classification.v1.JSONExtractor) variant_);
    }
    if (variantCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.aperture.classification.v1.AddressExtractor) variant_);
    }
    if (variantCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.aperture.classification.v1.JWTExtractor) variant_);
    }
    if (variantCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.aperture.classification.v1.PathTemplateMatcher) variant_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.classification.v1.Extractor)) {
      return super.equals(obj);
    }
    com.aperture.classification.v1.Extractor other = (com.aperture.classification.v1.Extractor) obj;

    if (!getVariantCase().equals(other.getVariantCase())) return false;
    switch (variantCase_) {
      case 1:
        if (!getFrom()
            .equals(other.getFrom())) return false;
        break;
      case 2:
        if (!getJson()
            .equals(other.getJson())) return false;
        break;
      case 3:
        if (!getAddress()
            .equals(other.getAddress())) return false;
        break;
      case 4:
        if (!getJwt()
            .equals(other.getJwt())) return false;
        break;
      case 5:
        if (!getPathTemplates()
            .equals(other.getPathTemplates())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (variantCase_) {
      case 1:
        hash = (37 * hash) + FROM_FIELD_NUMBER;
        hash = (53 * hash) + getFrom().hashCode();
        break;
      case 2:
        hash = (37 * hash) + JSON_FIELD_NUMBER;
        hash = (53 * hash) + getJson().hashCode();
        break;
      case 3:
        hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
        hash = (53 * hash) + getAddress().hashCode();
        break;
      case 4:
        hash = (37 * hash) + JWT_FIELD_NUMBER;
        hash = (53 * hash) + getJwt().hashCode();
        break;
      case 5:
        hash = (37 * hash) + PATH_TEMPLATES_FIELD_NUMBER;
        hash = (53 * hash) + getPathTemplates().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.classification.v1.Extractor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.classification.v1.Extractor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.classification.v1.Extractor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.classification.v1.Extractor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.classification.v1.Extractor prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Defines a high-level way to specify how to extract a flow label given http request metadata, without a need to write regod code.
   * There are multiple variants of extractor, specify exactly one:
   * - JSON Extractor
   * - Address Extractor
   * - JWT Extractor
   * </pre>
   *
   * Protobuf type {@code aperture.classification.v1.Extractor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.classification.v1.Extractor)
      com.aperture.classification.v1.ExtractorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.classification.v1.ExtractorProto.internal_static_aperture_classification_v1_Extractor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.classification.v1.ExtractorProto.internal_static_aperture_classification_v1_Extractor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.classification.v1.Extractor.class, com.aperture.classification.v1.Extractor.Builder.class);
    }

    // Construct using com.aperture.classification.v1.Extractor.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      variantCase_ = 0;
      variant_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.classification.v1.ExtractorProto.internal_static_aperture_classification_v1_Extractor_descriptor;
    }

    @java.lang.Override
    public com.aperture.classification.v1.Extractor getDefaultInstanceForType() {
      return com.aperture.classification.v1.Extractor.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.classification.v1.Extractor build() {
      com.aperture.classification.v1.Extractor result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.classification.v1.Extractor buildPartial() {
      com.aperture.classification.v1.Extractor result = new com.aperture.classification.v1.Extractor(this);
      if (variantCase_ == 1) {
        result.variant_ = variant_;
      }
      if (variantCase_ == 2) {
        if (jsonBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = jsonBuilder_.build();
        }
      }
      if (variantCase_ == 3) {
        if (addressBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = addressBuilder_.build();
        }
      }
      if (variantCase_ == 4) {
        if (jwtBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = jwtBuilder_.build();
        }
      }
      if (variantCase_ == 5) {
        if (pathTemplatesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = pathTemplatesBuilder_.build();
        }
      }
      result.variantCase_ = variantCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.classification.v1.Extractor) {
        return mergeFrom((com.aperture.classification.v1.Extractor)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.classification.v1.Extractor other) {
      if (other == com.aperture.classification.v1.Extractor.getDefaultInstance()) return this;
      switch (other.getVariantCase()) {
        case FROM: {
          variantCase_ = 1;
          variant_ = other.variant_;
          onChanged();
          break;
        }
        case JSON: {
          mergeJson(other.getJson());
          break;
        }
        case ADDRESS: {
          mergeAddress(other.getAddress());
          break;
        }
        case JWT: {
          mergeJwt(other.getJwt());
          break;
        }
        case PATH_TEMPLATES: {
          mergePathTemplates(other.getPathTemplates());
          break;
        }
        case VARIANT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.classification.v1.Extractor parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.classification.v1.Extractor) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int variantCase_ = 0;
    private java.lang.Object variant_;
    public VariantCase
        getVariantCase() {
      return VariantCase.forNumber(
          variantCase_);
    }

    public Builder clearVariant() {
      variantCase_ = 0;
      variant_ = null;
      onChanged();
      return this;
    }


    /**
     * <pre>
     * Use an attribute with no convertion.
     * Attribute path is a dot-separated path to attribute.
     * Should be either:
     * * one of the fields of [Attribute Context][attribute-context], or
     * * a special "request.http.bearer" pseudo-attribute.
     * Eg. "request.http.method" or "request.http.header.user-agent"
     * Note: The same attribute path syntax is shared by other extractor variants,
     * wherever attribute path is needed in their "from" syntax.
     * Example:
     * ```yaml
     * from: request.http.headers.user-agent
     * ```
     * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
     * </pre>
     *
     * <code>string from = 1 [json_name = "from"];</code>
     * @return Whether the from field is set.
     */
    @java.lang.Override
    public boolean hasFrom() {
      return variantCase_ == 1;
    }
    /**
     * <pre>
     * Use an attribute with no convertion.
     * Attribute path is a dot-separated path to attribute.
     * Should be either:
     * * one of the fields of [Attribute Context][attribute-context], or
     * * a special "request.http.bearer" pseudo-attribute.
     * Eg. "request.http.method" or "request.http.header.user-agent"
     * Note: The same attribute path syntax is shared by other extractor variants,
     * wherever attribute path is needed in their "from" syntax.
     * Example:
     * ```yaml
     * from: request.http.headers.user-agent
     * ```
     * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
     * </pre>
     *
     * <code>string from = 1 [json_name = "from"];</code>
     * @return The from.
     */
    @java.lang.Override
    public java.lang.String getFrom() {
      java.lang.Object ref = "";
      if (variantCase_ == 1) {
        ref = variant_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (variantCase_ == 1) {
          variant_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Use an attribute with no convertion.
     * Attribute path is a dot-separated path to attribute.
     * Should be either:
     * * one of the fields of [Attribute Context][attribute-context], or
     * * a special "request.http.bearer" pseudo-attribute.
     * Eg. "request.http.method" or "request.http.header.user-agent"
     * Note: The same attribute path syntax is shared by other extractor variants,
     * wherever attribute path is needed in their "from" syntax.
     * Example:
     * ```yaml
     * from: request.http.headers.user-agent
     * ```
     * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
     * </pre>
     *
     * <code>string from = 1 [json_name = "from"];</code>
     * @return The bytes for from.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFromBytes() {
      java.lang.Object ref = "";
      if (variantCase_ == 1) {
        ref = variant_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (variantCase_ == 1) {
          variant_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Use an attribute with no convertion.
     * Attribute path is a dot-separated path to attribute.
     * Should be either:
     * * one of the fields of [Attribute Context][attribute-context], or
     * * a special "request.http.bearer" pseudo-attribute.
     * Eg. "request.http.method" or "request.http.header.user-agent"
     * Note: The same attribute path syntax is shared by other extractor variants,
     * wherever attribute path is needed in their "from" syntax.
     * Example:
     * ```yaml
     * from: request.http.headers.user-agent
     * ```
     * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
     * </pre>
     *
     * <code>string from = 1 [json_name = "from"];</code>
     * @param value The from to set.
     * @return This builder for chaining.
     */
    public Builder setFrom(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  variantCase_ = 1;
      variant_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Use an attribute with no convertion.
     * Attribute path is a dot-separated path to attribute.
     * Should be either:
     * * one of the fields of [Attribute Context][attribute-context], or
     * * a special "request.http.bearer" pseudo-attribute.
     * Eg. "request.http.method" or "request.http.header.user-agent"
     * Note: The same attribute path syntax is shared by other extractor variants,
     * wherever attribute path is needed in their "from" syntax.
     * Example:
     * ```yaml
     * from: request.http.headers.user-agent
     * ```
     * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
     * </pre>
     *
     * <code>string from = 1 [json_name = "from"];</code>
     * @return This builder for chaining.
     */
    public Builder clearFrom() {
      if (variantCase_ == 1) {
        variantCase_ = 0;
        variant_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Use an attribute with no convertion.
     * Attribute path is a dot-separated path to attribute.
     * Should be either:
     * * one of the fields of [Attribute Context][attribute-context], or
     * * a special "request.http.bearer" pseudo-attribute.
     * Eg. "request.http.method" or "request.http.header.user-agent"
     * Note: The same attribute path syntax is shared by other extractor variants,
     * wherever attribute path is needed in their "from" syntax.
     * Example:
     * ```yaml
     * from: request.http.headers.user-agent
     * ```
     * [attribute-context]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto"
     * </pre>
     *
     * <code>string from = 1 [json_name = "from"];</code>
     * @param value The bytes for from to set.
     * @return This builder for chaining.
     */
    public Builder setFromBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      variantCase_ = 1;
      variant_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.classification.v1.JSONExtractor, com.aperture.classification.v1.JSONExtractor.Builder, com.aperture.classification.v1.JSONExtractorOrBuilder> jsonBuilder_;
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     * @return Whether the json field is set.
     */
    @java.lang.Override
    public boolean hasJson() {
      return variantCase_ == 2;
    }
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     * @return The json.
     */
    @java.lang.Override
    public com.aperture.classification.v1.JSONExtractor getJson() {
      if (jsonBuilder_ == null) {
        if (variantCase_ == 2) {
          return (com.aperture.classification.v1.JSONExtractor) variant_;
        }
        return com.aperture.classification.v1.JSONExtractor.getDefaultInstance();
      } else {
        if (variantCase_ == 2) {
          return jsonBuilder_.getMessage();
        }
        return com.aperture.classification.v1.JSONExtractor.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     */
    public Builder setJson(com.aperture.classification.v1.JSONExtractor value) {
      if (jsonBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        jsonBuilder_.setMessage(value);
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     */
    public Builder setJson(
        com.aperture.classification.v1.JSONExtractor.Builder builderForValue) {
      if (jsonBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        jsonBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     */
    public Builder mergeJson(com.aperture.classification.v1.JSONExtractor value) {
      if (jsonBuilder_ == null) {
        if (variantCase_ == 2 &&
            variant_ != com.aperture.classification.v1.JSONExtractor.getDefaultInstance()) {
          variant_ = com.aperture.classification.v1.JSONExtractor.newBuilder((com.aperture.classification.v1.JSONExtractor) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 2) {
          jsonBuilder_.mergeFrom(value);
        } else {
          jsonBuilder_.setMessage(value);
        }
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     */
    public Builder clearJson() {
      if (jsonBuilder_ == null) {
        if (variantCase_ == 2) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 2) {
          variantCase_ = 0;
          variant_ = null;
        }
        jsonBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     */
    public com.aperture.classification.v1.JSONExtractor.Builder getJsonBuilder() {
      return getJsonFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     */
    @java.lang.Override
    public com.aperture.classification.v1.JSONExtractorOrBuilder getJsonOrBuilder() {
      if ((variantCase_ == 2) && (jsonBuilder_ != null)) {
        return jsonBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 2) {
          return (com.aperture.classification.v1.JSONExtractor) variant_;
        }
        return com.aperture.classification.v1.JSONExtractor.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Deserialize a json, and extract one of the fields.
     * </pre>
     *
     * <code>.aperture.classification.v1.JSONExtractor json = 2 [json_name = "json"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.classification.v1.JSONExtractor, com.aperture.classification.v1.JSONExtractor.Builder, com.aperture.classification.v1.JSONExtractorOrBuilder>
        getJsonFieldBuilder() {
      if (jsonBuilder_ == null) {
        if (!(variantCase_ == 2)) {
          variant_ = com.aperture.classification.v1.JSONExtractor.getDefaultInstance();
        }
        jsonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.classification.v1.JSONExtractor, com.aperture.classification.v1.JSONExtractor.Builder, com.aperture.classification.v1.JSONExtractorOrBuilder>(
                (com.aperture.classification.v1.JSONExtractor) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 2;
      onChanged();;
      return jsonBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.classification.v1.AddressExtractor, com.aperture.classification.v1.AddressExtractor.Builder, com.aperture.classification.v1.AddressExtractorOrBuilder> addressBuilder_;
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     * @return Whether the address field is set.
     */
    @java.lang.Override
    public boolean hasAddress() {
      return variantCase_ == 3;
    }
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     * @return The address.
     */
    @java.lang.Override
    public com.aperture.classification.v1.AddressExtractor getAddress() {
      if (addressBuilder_ == null) {
        if (variantCase_ == 3) {
          return (com.aperture.classification.v1.AddressExtractor) variant_;
        }
        return com.aperture.classification.v1.AddressExtractor.getDefaultInstance();
      } else {
        if (variantCase_ == 3) {
          return addressBuilder_.getMessage();
        }
        return com.aperture.classification.v1.AddressExtractor.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     */
    public Builder setAddress(com.aperture.classification.v1.AddressExtractor value) {
      if (addressBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        addressBuilder_.setMessage(value);
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     */
    public Builder setAddress(
        com.aperture.classification.v1.AddressExtractor.Builder builderForValue) {
      if (addressBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        addressBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     */
    public Builder mergeAddress(com.aperture.classification.v1.AddressExtractor value) {
      if (addressBuilder_ == null) {
        if (variantCase_ == 3 &&
            variant_ != com.aperture.classification.v1.AddressExtractor.getDefaultInstance()) {
          variant_ = com.aperture.classification.v1.AddressExtractor.newBuilder((com.aperture.classification.v1.AddressExtractor) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 3) {
          addressBuilder_.mergeFrom(value);
        } else {
          addressBuilder_.setMessage(value);
        }
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     */
    public Builder clearAddress() {
      if (addressBuilder_ == null) {
        if (variantCase_ == 3) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 3) {
          variantCase_ = 0;
          variant_ = null;
        }
        addressBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     */
    public com.aperture.classification.v1.AddressExtractor.Builder getAddressBuilder() {
      return getAddressFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     */
    @java.lang.Override
    public com.aperture.classification.v1.AddressExtractorOrBuilder getAddressOrBuilder() {
      if ((variantCase_ == 3) && (addressBuilder_ != null)) {
        return addressBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 3) {
          return (com.aperture.classification.v1.AddressExtractor) variant_;
        }
        return com.aperture.classification.v1.AddressExtractor.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Display an address as a single string - `&lt;ip&gt;:&lt;port&gt;`.
     * </pre>
     *
     * <code>.aperture.classification.v1.AddressExtractor address = 3 [json_name = "address"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.classification.v1.AddressExtractor, com.aperture.classification.v1.AddressExtractor.Builder, com.aperture.classification.v1.AddressExtractorOrBuilder>
        getAddressFieldBuilder() {
      if (addressBuilder_ == null) {
        if (!(variantCase_ == 3)) {
          variant_ = com.aperture.classification.v1.AddressExtractor.getDefaultInstance();
        }
        addressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.classification.v1.AddressExtractor, com.aperture.classification.v1.AddressExtractor.Builder, com.aperture.classification.v1.AddressExtractorOrBuilder>(
                (com.aperture.classification.v1.AddressExtractor) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 3;
      onChanged();;
      return addressBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.classification.v1.JWTExtractor, com.aperture.classification.v1.JWTExtractor.Builder, com.aperture.classification.v1.JWTExtractorOrBuilder> jwtBuilder_;
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     * @return Whether the jwt field is set.
     */
    @java.lang.Override
    public boolean hasJwt() {
      return variantCase_ == 4;
    }
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     * @return The jwt.
     */
    @java.lang.Override
    public com.aperture.classification.v1.JWTExtractor getJwt() {
      if (jwtBuilder_ == null) {
        if (variantCase_ == 4) {
          return (com.aperture.classification.v1.JWTExtractor) variant_;
        }
        return com.aperture.classification.v1.JWTExtractor.getDefaultInstance();
      } else {
        if (variantCase_ == 4) {
          return jwtBuilder_.getMessage();
        }
        return com.aperture.classification.v1.JWTExtractor.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     */
    public Builder setJwt(com.aperture.classification.v1.JWTExtractor value) {
      if (jwtBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        jwtBuilder_.setMessage(value);
      }
      variantCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     */
    public Builder setJwt(
        com.aperture.classification.v1.JWTExtractor.Builder builderForValue) {
      if (jwtBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        jwtBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     */
    public Builder mergeJwt(com.aperture.classification.v1.JWTExtractor value) {
      if (jwtBuilder_ == null) {
        if (variantCase_ == 4 &&
            variant_ != com.aperture.classification.v1.JWTExtractor.getDefaultInstance()) {
          variant_ = com.aperture.classification.v1.JWTExtractor.newBuilder((com.aperture.classification.v1.JWTExtractor) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 4) {
          jwtBuilder_.mergeFrom(value);
        } else {
          jwtBuilder_.setMessage(value);
        }
      }
      variantCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     */
    public Builder clearJwt() {
      if (jwtBuilder_ == null) {
        if (variantCase_ == 4) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 4) {
          variantCase_ = 0;
          variant_ = null;
        }
        jwtBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     */
    public com.aperture.classification.v1.JWTExtractor.Builder getJwtBuilder() {
      return getJwtFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     */
    @java.lang.Override
    public com.aperture.classification.v1.JWTExtractorOrBuilder getJwtOrBuilder() {
      if ((variantCase_ == 4) && (jwtBuilder_ != null)) {
        return jwtBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 4) {
          return (com.aperture.classification.v1.JWTExtractor) variant_;
        }
        return com.aperture.classification.v1.JWTExtractor.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Parse the attribute as JWT and read the payload.
     * </pre>
     *
     * <code>.aperture.classification.v1.JWTExtractor jwt = 4 [json_name = "jwt"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.classification.v1.JWTExtractor, com.aperture.classification.v1.JWTExtractor.Builder, com.aperture.classification.v1.JWTExtractorOrBuilder>
        getJwtFieldBuilder() {
      if (jwtBuilder_ == null) {
        if (!(variantCase_ == 4)) {
          variant_ = com.aperture.classification.v1.JWTExtractor.getDefaultInstance();
        }
        jwtBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.classification.v1.JWTExtractor, com.aperture.classification.v1.JWTExtractor.Builder, com.aperture.classification.v1.JWTExtractorOrBuilder>(
                (com.aperture.classification.v1.JWTExtractor) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 4;
      onChanged();;
      return jwtBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.classification.v1.PathTemplateMatcher, com.aperture.classification.v1.PathTemplateMatcher.Builder, com.aperture.classification.v1.PathTemplateMatcherOrBuilder> pathTemplatesBuilder_;
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     * @return Whether the pathTemplates field is set.
     */
    @java.lang.Override
    public boolean hasPathTemplates() {
      return variantCase_ == 5;
    }
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     * @return The pathTemplates.
     */
    @java.lang.Override
    public com.aperture.classification.v1.PathTemplateMatcher getPathTemplates() {
      if (pathTemplatesBuilder_ == null) {
        if (variantCase_ == 5) {
          return (com.aperture.classification.v1.PathTemplateMatcher) variant_;
        }
        return com.aperture.classification.v1.PathTemplateMatcher.getDefaultInstance();
      } else {
        if (variantCase_ == 5) {
          return pathTemplatesBuilder_.getMessage();
        }
        return com.aperture.classification.v1.PathTemplateMatcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     */
    public Builder setPathTemplates(com.aperture.classification.v1.PathTemplateMatcher value) {
      if (pathTemplatesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        pathTemplatesBuilder_.setMessage(value);
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     */
    public Builder setPathTemplates(
        com.aperture.classification.v1.PathTemplateMatcher.Builder builderForValue) {
      if (pathTemplatesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        pathTemplatesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     */
    public Builder mergePathTemplates(com.aperture.classification.v1.PathTemplateMatcher value) {
      if (pathTemplatesBuilder_ == null) {
        if (variantCase_ == 5 &&
            variant_ != com.aperture.classification.v1.PathTemplateMatcher.getDefaultInstance()) {
          variant_ = com.aperture.classification.v1.PathTemplateMatcher.newBuilder((com.aperture.classification.v1.PathTemplateMatcher) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 5) {
          pathTemplatesBuilder_.mergeFrom(value);
        } else {
          pathTemplatesBuilder_.setMessage(value);
        }
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     */
    public Builder clearPathTemplates() {
      if (pathTemplatesBuilder_ == null) {
        if (variantCase_ == 5) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 5) {
          variantCase_ = 0;
          variant_ = null;
        }
        pathTemplatesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     */
    public com.aperture.classification.v1.PathTemplateMatcher.Builder getPathTemplatesBuilder() {
      return getPathTemplatesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     */
    @java.lang.Override
    public com.aperture.classification.v1.PathTemplateMatcherOrBuilder getPathTemplatesOrBuilder() {
      if ((variantCase_ == 5) && (pathTemplatesBuilder_ != null)) {
        return pathTemplatesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 5) {
          return (com.aperture.classification.v1.PathTemplateMatcher) variant_;
        }
        return com.aperture.classification.v1.PathTemplateMatcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Match HTTP Path to given path templates.
     * </pre>
     *
     * <code>.aperture.classification.v1.PathTemplateMatcher path_templates = 5 [json_name = "pathTemplates"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.classification.v1.PathTemplateMatcher, com.aperture.classification.v1.PathTemplateMatcher.Builder, com.aperture.classification.v1.PathTemplateMatcherOrBuilder>
        getPathTemplatesFieldBuilder() {
      if (pathTemplatesBuilder_ == null) {
        if (!(variantCase_ == 5)) {
          variant_ = com.aperture.classification.v1.PathTemplateMatcher.getDefaultInstance();
        }
        pathTemplatesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.classification.v1.PathTemplateMatcher, com.aperture.classification.v1.PathTemplateMatcher.Builder, com.aperture.classification.v1.PathTemplateMatcherOrBuilder>(
                (com.aperture.classification.v1.PathTemplateMatcher) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 5;
      onChanged();;
      return pathTemplatesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.classification.v1.Extractor)
  }

  // @@protoc_insertion_point(class_scope:aperture.classification.v1.Extractor)
  private static final com.aperture.classification.v1.Extractor DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.classification.v1.Extractor();
  }

  public static com.aperture.classification.v1.Extractor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Extractor>
      PARSER = new com.google.protobuf.AbstractParser<Extractor>() {
    @java.lang.Override
    public Extractor parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Extractor(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Extractor> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Extractor> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.classification.v1.Extractor getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
