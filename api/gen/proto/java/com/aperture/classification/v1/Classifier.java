// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/classification/v1/ruleset.proto

package com.aperture.classification.v1;

/**
 * <pre>
 * Set of classification rules sharing a common selector.
 * Example:
 * ```yaml
 * selector:
 *   service: service1.default.svc.cluster.local
 *   control_point:
 *     traffic: ingress
 * rules:
 *   user:
 *     extractor:
 *       from: request.http.headers.user
 * ```
 * </pre>
 *
 * Protobuf type {@code aperture.classification.v1.Classifier}
 */
public final class Classifier extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.classification.v1.Classifier)
    ClassifierOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Classifier.newBuilder() to construct.
  private Classifier(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Classifier() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Classifier();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Classifier(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.aperture.policy.language.v1.Selector.Builder subBuilder = null;
            if (selector_ != null) {
              subBuilder = selector_.toBuilder();
            }
            selector_ = input.readMessage(com.aperture.policy.language.v1.Selector.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(selector_);
              selector_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              rules_ = com.google.protobuf.MapField.newMapField(
                  RulesDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.aperture.classification.v1.Rule>
            rules__ = input.readMessage(
                RulesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            rules_.getMutableMap().put(
                rules__.getKey(), rules__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.classification.v1.RulesetProto.internal_static_aperture_classification_v1_Classifier_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetRules();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.classification.v1.RulesetProto.internal_static_aperture_classification_v1_Classifier_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.classification.v1.Classifier.class, com.aperture.classification.v1.Classifier.Builder.class);
  }

  public static final int SELECTOR_FIELD_NUMBER = 1;
  private com.aperture.policy.language.v1.Selector selector_;
  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
   * @return Whether the selector field is set.
   */
  @java.lang.Override
  public boolean hasSelector() {
    return selector_ != null;
  }
  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
   * @return The selector.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Selector getSelector() {
    return selector_ == null ? com.aperture.policy.language.v1.Selector.getDefaultInstance() : selector_;
  }
  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.SelectorOrBuilder getSelectorOrBuilder() {
    return getSelector();
  }

  public static final int RULES_FIELD_NUMBER = 2;
  private static final class RulesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.aperture.classification.v1.Rule> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.aperture.classification.v1.Rule>newDefaultInstance(
                com.aperture.classification.v1.RulesetProto.internal_static_aperture_classification_v1_Classifier_RulesEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.aperture.classification.v1.Rule.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.aperture.classification.v1.Rule> rules_;
  private com.google.protobuf.MapField<java.lang.String, com.aperture.classification.v1.Rule>
  internalGetRules() {
    if (rules_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          RulesDefaultEntryHolder.defaultEntry);
    }
    return rules_;
  }

  public int getRulesCount() {
    return internalGetRules().getMap().size();
  }
  /**
   * <pre>
   * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
   * </pre>
   *
   * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */

  @java.lang.Override
  public boolean containsRules(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetRules().getMap().containsKey(key);
  }
  /**
   * Use {@link #getRulesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> getRules() {
    return getRulesMap();
  }
  /**
   * <pre>
   * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
   * </pre>
   *
   * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> getRulesMap() {
    return internalGetRules().getMap();
  }
  /**
   * <pre>
   * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
   * </pre>
   *
   * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  @java.lang.Override

  public com.aperture.classification.v1.Rule getRulesOrDefault(
      java.lang.String key,
      com.aperture.classification.v1.Rule defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> map =
        internalGetRules().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
   * </pre>
   *
   * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  @java.lang.Override

  public com.aperture.classification.v1.Rule getRulesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> map =
        internalGetRules().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (selector_ != null) {
      output.writeMessage(1, getSelector());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetRules(),
        RulesDefaultEntryHolder.defaultEntry,
        2);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (selector_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getSelector());
    }
    for (java.util.Map.Entry<java.lang.String, com.aperture.classification.v1.Rule> entry
         : internalGetRules().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.aperture.classification.v1.Rule>
      rules__ = RulesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, rules__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.classification.v1.Classifier)) {
      return super.equals(obj);
    }
    com.aperture.classification.v1.Classifier other = (com.aperture.classification.v1.Classifier) obj;

    if (hasSelector() != other.hasSelector()) return false;
    if (hasSelector()) {
      if (!getSelector()
          .equals(other.getSelector())) return false;
    }
    if (!internalGetRules().equals(
        other.internalGetRules())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSelector()) {
      hash = (37 * hash) + SELECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getSelector().hashCode();
    }
    if (!internalGetRules().getMap().isEmpty()) {
      hash = (37 * hash) + RULES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetRules().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.classification.v1.Classifier parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.classification.v1.Classifier parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.classification.v1.Classifier parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.classification.v1.Classifier parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.classification.v1.Classifier prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Set of classification rules sharing a common selector.
   * Example:
   * ```yaml
   * selector:
   *   service: service1.default.svc.cluster.local
   *   control_point:
   *     traffic: ingress
   * rules:
   *   user:
   *     extractor:
   *       from: request.http.headers.user
   * ```
   * </pre>
   *
   * Protobuf type {@code aperture.classification.v1.Classifier}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.classification.v1.Classifier)
      com.aperture.classification.v1.ClassifierOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.classification.v1.RulesetProto.internal_static_aperture_classification_v1_Classifier_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetRules();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableRules();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.classification.v1.RulesetProto.internal_static_aperture_classification_v1_Classifier_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.classification.v1.Classifier.class, com.aperture.classification.v1.Classifier.Builder.class);
    }

    // Construct using com.aperture.classification.v1.Classifier.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (selectorBuilder_ == null) {
        selector_ = null;
      } else {
        selector_ = null;
        selectorBuilder_ = null;
      }
      internalGetMutableRules().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.classification.v1.RulesetProto.internal_static_aperture_classification_v1_Classifier_descriptor;
    }

    @java.lang.Override
    public com.aperture.classification.v1.Classifier getDefaultInstanceForType() {
      return com.aperture.classification.v1.Classifier.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.classification.v1.Classifier build() {
      com.aperture.classification.v1.Classifier result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.classification.v1.Classifier buildPartial() {
      com.aperture.classification.v1.Classifier result = new com.aperture.classification.v1.Classifier(this);
      int from_bitField0_ = bitField0_;
      if (selectorBuilder_ == null) {
        result.selector_ = selector_;
      } else {
        result.selector_ = selectorBuilder_.build();
      }
      result.rules_ = internalGetRules();
      result.rules_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.classification.v1.Classifier) {
        return mergeFrom((com.aperture.classification.v1.Classifier)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.classification.v1.Classifier other) {
      if (other == com.aperture.classification.v1.Classifier.getDefaultInstance()) return this;
      if (other.hasSelector()) {
        mergeSelector(other.getSelector());
      }
      internalGetMutableRules().mergeFrom(
          other.internalGetRules());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.classification.v1.Classifier parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.classification.v1.Classifier) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.aperture.policy.language.v1.Selector selector_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Selector, com.aperture.policy.language.v1.Selector.Builder, com.aperture.policy.language.v1.SelectorOrBuilder> selectorBuilder_;
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     * @return Whether the selector field is set.
     */
    public boolean hasSelector() {
      return selectorBuilder_ != null || selector_ != null;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     * @return The selector.
     */
    public com.aperture.policy.language.v1.Selector getSelector() {
      if (selectorBuilder_ == null) {
        return selector_ == null ? com.aperture.policy.language.v1.Selector.getDefaultInstance() : selector_;
      } else {
        return selectorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public Builder setSelector(com.aperture.policy.language.v1.Selector value) {
      if (selectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        selector_ = value;
        onChanged();
      } else {
        selectorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public Builder setSelector(
        com.aperture.policy.language.v1.Selector.Builder builderForValue) {
      if (selectorBuilder_ == null) {
        selector_ = builderForValue.build();
        onChanged();
      } else {
        selectorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public Builder mergeSelector(com.aperture.policy.language.v1.Selector value) {
      if (selectorBuilder_ == null) {
        if (selector_ != null) {
          selector_ =
            com.aperture.policy.language.v1.Selector.newBuilder(selector_).mergeFrom(value).buildPartial();
        } else {
          selector_ = value;
        }
        onChanged();
      } else {
        selectorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public Builder clearSelector() {
      if (selectorBuilder_ == null) {
        selector_ = null;
        onChanged();
      } else {
        selector_ = null;
        selectorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public com.aperture.policy.language.v1.Selector.Builder getSelectorBuilder() {

      onChanged();
      return getSelectorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public com.aperture.policy.language.v1.SelectorOrBuilder getSelectorOrBuilder() {
      if (selectorBuilder_ != null) {
        return selectorBuilder_.getMessageOrBuilder();
      } else {
        return selector_ == null ?
            com.aperture.policy.language.v1.Selector.getDefaultInstance() : selector_;
      }
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Selector, com.aperture.policy.language.v1.Selector.Builder, com.aperture.policy.language.v1.SelectorOrBuilder>
        getSelectorFieldBuilder() {
      if (selectorBuilder_ == null) {
        selectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.Selector, com.aperture.policy.language.v1.Selector.Builder, com.aperture.policy.language.v1.SelectorOrBuilder>(
                getSelector(),
                getParentForChildren(),
                isClean());
        selector_ = null;
      }
      return selectorBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.aperture.classification.v1.Rule> rules_;
    private com.google.protobuf.MapField<java.lang.String, com.aperture.classification.v1.Rule>
    internalGetRules() {
      if (rules_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            RulesDefaultEntryHolder.defaultEntry);
      }
      return rules_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.aperture.classification.v1.Rule>
    internalGetMutableRules() {
      onChanged();;
      if (rules_ == null) {
        rules_ = com.google.protobuf.MapField.newMapField(
            RulesDefaultEntryHolder.defaultEntry);
      }
      if (!rules_.isMutable()) {
        rules_ = rules_.copy();
      }
      return rules_;
    }

    public int getRulesCount() {
      return internalGetRules().getMap().size();
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
     * </pre>
     *
     * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */

    @java.lang.Override
    public boolean containsRules(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetRules().getMap().containsKey(key);
    }
    /**
     * Use {@link #getRulesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> getRules() {
      return getRulesMap();
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
     * </pre>
     *
     * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> getRulesMap() {
      return internalGetRules().getMap();
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
     * </pre>
     *
     * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */
    @java.lang.Override

    public com.aperture.classification.v1.Rule getRulesOrDefault(
        java.lang.String key,
        com.aperture.classification.v1.Rule defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> map =
          internalGetRules().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
     * </pre>
     *
     * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */
    @java.lang.Override

    public com.aperture.classification.v1.Rule getRulesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> map =
          internalGetRules().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearRules() {
      internalGetMutableRules().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
     * </pre>
     *
     * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */

    public Builder removeRules(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableRules().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.aperture.classification.v1.Rule>
    getMutableRules() {
      return internalGetMutableRules().getMutableMap();
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
     * </pre>
     *
     * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */
    public Builder putRules(
        java.lang.String key,
        com.aperture.classification.v1.Rule value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableRules().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from flow label names to rules that define how to extract and propagate them.
     * </pre>
     *
     * <code>map&lt;string, .aperture.classification.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */

    public Builder putAllRules(
        java.util.Map<java.lang.String, com.aperture.classification.v1.Rule> values) {
      internalGetMutableRules().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.classification.v1.Classifier)
  }

  // @@protoc_insertion_point(class_scope:aperture.classification.v1.Classifier)
  private static final com.aperture.classification.v1.Classifier DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.classification.v1.Classifier();
  }

  public static com.aperture.classification.v1.Classifier getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Classifier>
      PARSER = new com.google.protobuf.AbstractParser<Classifier>() {
    @java.lang.Override
    public Classifier parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Classifier(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Classifier> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Classifier> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.classification.v1.Classifier getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
