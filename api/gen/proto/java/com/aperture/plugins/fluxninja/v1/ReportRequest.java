// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/plugins/fluxninja/v1/heartbeat.proto

package com.aperture.plugins.fluxninja.v1;

/**
 * Protobuf type {@code aperture.plugins.fluxninja.v1.ReportRequest}
 */
public final class ReportRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.plugins.fluxninja.v1.ReportRequest)
    ReportRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ReportRequest.newBuilder() to construct.
  private ReportRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ReportRequest() {
    agentGroup_ = "";
    peerInfos_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ReportRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ReportRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.aperture.common.info.v1.VersionInfo.Builder subBuilder = null;
            if (versionInfo_ != null) {
              subBuilder = versionInfo_.toBuilder();
            }
            versionInfo_ = input.readMessage(com.aperture.common.info.v1.VersionInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(versionInfo_);
              versionInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.aperture.common.info.v1.ProcessInfo.Builder subBuilder = null;
            if (processInfo_ != null) {
              subBuilder = processInfo_.toBuilder();
            }
            processInfo_ = input.readMessage(com.aperture.common.info.v1.ProcessInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(processInfo_);
              processInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.aperture.common.info.v1.HostInfo.Builder subBuilder = null;
            if (hostInfo_ != null) {
              subBuilder = hostInfo_.toBuilder();
            }
            hostInfo_ = input.readMessage(com.aperture.common.info.v1.HostInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(hostInfo_);
              hostInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            agentGroup_ = s;
            break;
          }
          case 42: {
            com.aperture.plugins.fluxninja.v1.ControllerInfo.Builder subBuilder = null;
            if (controllerInfo_ != null) {
              subBuilder = controllerInfo_.toBuilder();
            }
            controllerInfo_ = input.readMessage(com.aperture.plugins.fluxninja.v1.ControllerInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(controllerInfo_);
              controllerInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              peerInfos_ = new java.util.ArrayList<com.aperture.common.peers.v1.PeerInfo>();
              mutable_bitField0_ |= 0x00000001;
            }
            peerInfos_.add(
                input.readMessage(com.aperture.common.peers.v1.PeerInfo.parser(), extensionRegistry));
            break;
          }
          case 58: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              allStatuses_ = com.google.protobuf.MapField.newMapField(
                  AllStatusesDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.Any>
            allStatuses__ = input.readMessage(
                AllStatusesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            allStatuses_.getMutableMap().put(
                allStatuses__.getKey(), allStatuses__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        peerInfos_ = java.util.Collections.unmodifiableList(peerInfos_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.plugins.fluxninja.v1.HeartbeatProto.internal_static_aperture_plugins_fluxninja_v1_ReportRequest_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 7:
        return internalGetAllStatuses();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.plugins.fluxninja.v1.HeartbeatProto.internal_static_aperture_plugins_fluxninja_v1_ReportRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.plugins.fluxninja.v1.ReportRequest.class, com.aperture.plugins.fluxninja.v1.ReportRequest.Builder.class);
  }

  public static final int VERSION_INFO_FIELD_NUMBER = 1;
  private com.aperture.common.info.v1.VersionInfo versionInfo_;
  /**
   * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
   * @return Whether the versionInfo field is set.
   */
  @java.lang.Override
  public boolean hasVersionInfo() {
    return versionInfo_ != null;
  }
  /**
   * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
   * @return The versionInfo.
   */
  @java.lang.Override
  public com.aperture.common.info.v1.VersionInfo getVersionInfo() {
    return versionInfo_ == null ? com.aperture.common.info.v1.VersionInfo.getDefaultInstance() : versionInfo_;
  }
  /**
   * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
   */
  @java.lang.Override
  public com.aperture.common.info.v1.VersionInfoOrBuilder getVersionInfoOrBuilder() {
    return getVersionInfo();
  }

  public static final int PROCESS_INFO_FIELD_NUMBER = 2;
  private com.aperture.common.info.v1.ProcessInfo processInfo_;
  /**
   * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
   * @return Whether the processInfo field is set.
   */
  @java.lang.Override
  public boolean hasProcessInfo() {
    return processInfo_ != null;
  }
  /**
   * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
   * @return The processInfo.
   */
  @java.lang.Override
  public com.aperture.common.info.v1.ProcessInfo getProcessInfo() {
    return processInfo_ == null ? com.aperture.common.info.v1.ProcessInfo.getDefaultInstance() : processInfo_;
  }
  /**
   * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
   */
  @java.lang.Override
  public com.aperture.common.info.v1.ProcessInfoOrBuilder getProcessInfoOrBuilder() {
    return getProcessInfo();
  }

  public static final int HOST_INFO_FIELD_NUMBER = 3;
  private com.aperture.common.info.v1.HostInfo hostInfo_;
  /**
   * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
   * @return Whether the hostInfo field is set.
   */
  @java.lang.Override
  public boolean hasHostInfo() {
    return hostInfo_ != null;
  }
  /**
   * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
   * @return The hostInfo.
   */
  @java.lang.Override
  public com.aperture.common.info.v1.HostInfo getHostInfo() {
    return hostInfo_ == null ? com.aperture.common.info.v1.HostInfo.getDefaultInstance() : hostInfo_;
  }
  /**
   * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
   */
  @java.lang.Override
  public com.aperture.common.info.v1.HostInfoOrBuilder getHostInfoOrBuilder() {
    return getHostInfo();
  }

  public static final int AGENT_GROUP_FIELD_NUMBER = 4;
  private volatile java.lang.Object agentGroup_;
  /**
   * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
   * @return The agentGroup.
   */
  @java.lang.Override
  public java.lang.String getAgentGroup() {
    java.lang.Object ref = agentGroup_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      agentGroup_ = s;
      return s;
    }
  }
  /**
   * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
   * @return The bytes for agentGroup.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAgentGroupBytes() {
    java.lang.Object ref = agentGroup_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      agentGroup_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CONTROLLER_INFO_FIELD_NUMBER = 5;
  private com.aperture.plugins.fluxninja.v1.ControllerInfo controllerInfo_;
  /**
   * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
   * @return Whether the controllerInfo field is set.
   */
  @java.lang.Override
  public boolean hasControllerInfo() {
    return controllerInfo_ != null;
  }
  /**
   * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
   * @return The controllerInfo.
   */
  @java.lang.Override
  public com.aperture.plugins.fluxninja.v1.ControllerInfo getControllerInfo() {
    return controllerInfo_ == null ? com.aperture.plugins.fluxninja.v1.ControllerInfo.getDefaultInstance() : controllerInfo_;
  }
  /**
   * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
   */
  @java.lang.Override
  public com.aperture.plugins.fluxninja.v1.ControllerInfoOrBuilder getControllerInfoOrBuilder() {
    return getControllerInfo();
  }

  public static final int PEER_INFOS_FIELD_NUMBER = 6;
  private java.util.List<com.aperture.common.peers.v1.PeerInfo> peerInfos_;
  /**
   * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
   */
  @java.lang.Override
  public java.util.List<com.aperture.common.peers.v1.PeerInfo> getPeerInfosList() {
    return peerInfos_;
  }
  /**
   * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.aperture.common.peers.v1.PeerInfoOrBuilder>
      getPeerInfosOrBuilderList() {
    return peerInfos_;
  }
  /**
   * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
   */
  @java.lang.Override
  public int getPeerInfosCount() {
    return peerInfos_.size();
  }
  /**
   * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
   */
  @java.lang.Override
  public com.aperture.common.peers.v1.PeerInfo getPeerInfos(int index) {
    return peerInfos_.get(index);
  }
  /**
   * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
   */
  @java.lang.Override
  public com.aperture.common.peers.v1.PeerInfoOrBuilder getPeerInfosOrBuilder(
      int index) {
    return peerInfos_.get(index);
  }

  public static final int ALL_STATUSES_FIELD_NUMBER = 7;
  private static final class AllStatusesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.google.protobuf.Any> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.google.protobuf.Any>newDefaultInstance(
                com.aperture.plugins.fluxninja.v1.HeartbeatProto.internal_static_aperture_plugins_fluxninja_v1_ReportRequest_AllStatusesEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.google.protobuf.Any.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.google.protobuf.Any> allStatuses_;
  private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Any>
  internalGetAllStatuses() {
    if (allStatuses_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          AllStatusesDefaultEntryHolder.defaultEntry);
    }
    return allStatuses_;
  }

  public int getAllStatusesCount() {
    return internalGetAllStatuses().getMap().size();
  }
  /**
   * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
   */

  @java.lang.Override
  public boolean containsAllStatuses(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetAllStatuses().getMap().containsKey(key);
  }
  /**
   * Use {@link #getAllStatusesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.google.protobuf.Any> getAllStatuses() {
    return getAllStatusesMap();
  }
  /**
   * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.google.protobuf.Any> getAllStatusesMap() {
    return internalGetAllStatuses().getMap();
  }
  /**
   * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
   */
  @java.lang.Override

  public com.google.protobuf.Any getAllStatusesOrDefault(
      java.lang.String key,
      com.google.protobuf.Any defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.google.protobuf.Any> map =
        internalGetAllStatuses().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
   */
  @java.lang.Override

  public com.google.protobuf.Any getAllStatusesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.google.protobuf.Any> map =
        internalGetAllStatuses().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (versionInfo_ != null) {
      output.writeMessage(1, getVersionInfo());
    }
    if (processInfo_ != null) {
      output.writeMessage(2, getProcessInfo());
    }
    if (hostInfo_ != null) {
      output.writeMessage(3, getHostInfo());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(agentGroup_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, agentGroup_);
    }
    if (controllerInfo_ != null) {
      output.writeMessage(5, getControllerInfo());
    }
    for (int i = 0; i < peerInfos_.size(); i++) {
      output.writeMessage(6, peerInfos_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetAllStatuses(),
        AllStatusesDefaultEntryHolder.defaultEntry,
        7);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (versionInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getVersionInfo());
    }
    if (processInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getProcessInfo());
    }
    if (hostInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getHostInfo());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(agentGroup_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, agentGroup_);
    }
    if (controllerInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getControllerInfo());
    }
    for (int i = 0; i < peerInfos_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, peerInfos_.get(i));
    }
    for (java.util.Map.Entry<java.lang.String, com.google.protobuf.Any> entry
         : internalGetAllStatuses().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.google.protobuf.Any>
      allStatuses__ = AllStatusesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, allStatuses__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.plugins.fluxninja.v1.ReportRequest)) {
      return super.equals(obj);
    }
    com.aperture.plugins.fluxninja.v1.ReportRequest other = (com.aperture.plugins.fluxninja.v1.ReportRequest) obj;

    if (hasVersionInfo() != other.hasVersionInfo()) return false;
    if (hasVersionInfo()) {
      if (!getVersionInfo()
          .equals(other.getVersionInfo())) return false;
    }
    if (hasProcessInfo() != other.hasProcessInfo()) return false;
    if (hasProcessInfo()) {
      if (!getProcessInfo()
          .equals(other.getProcessInfo())) return false;
    }
    if (hasHostInfo() != other.hasHostInfo()) return false;
    if (hasHostInfo()) {
      if (!getHostInfo()
          .equals(other.getHostInfo())) return false;
    }
    if (!getAgentGroup()
        .equals(other.getAgentGroup())) return false;
    if (hasControllerInfo() != other.hasControllerInfo()) return false;
    if (hasControllerInfo()) {
      if (!getControllerInfo()
          .equals(other.getControllerInfo())) return false;
    }
    if (!getPeerInfosList()
        .equals(other.getPeerInfosList())) return false;
    if (!internalGetAllStatuses().equals(
        other.internalGetAllStatuses())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasVersionInfo()) {
      hash = (37 * hash) + VERSION_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getVersionInfo().hashCode();
    }
    if (hasProcessInfo()) {
      hash = (37 * hash) + PROCESS_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getProcessInfo().hashCode();
    }
    if (hasHostInfo()) {
      hash = (37 * hash) + HOST_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getHostInfo().hashCode();
    }
    hash = (37 * hash) + AGENT_GROUP_FIELD_NUMBER;
    hash = (53 * hash) + getAgentGroup().hashCode();
    if (hasControllerInfo()) {
      hash = (37 * hash) + CONTROLLER_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getControllerInfo().hashCode();
    }
    if (getPeerInfosCount() > 0) {
      hash = (37 * hash) + PEER_INFOS_FIELD_NUMBER;
      hash = (53 * hash) + getPeerInfosList().hashCode();
    }
    if (!internalGetAllStatuses().getMap().isEmpty()) {
      hash = (37 * hash) + ALL_STATUSES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetAllStatuses().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.plugins.fluxninja.v1.ReportRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.plugins.fluxninja.v1.ReportRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.plugins.fluxninja.v1.ReportRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.plugins.fluxninja.v1.ReportRequest)
      com.aperture.plugins.fluxninja.v1.ReportRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.plugins.fluxninja.v1.HeartbeatProto.internal_static_aperture_plugins_fluxninja_v1_ReportRequest_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetAllStatuses();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 7:
          return internalGetMutableAllStatuses();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.plugins.fluxninja.v1.HeartbeatProto.internal_static_aperture_plugins_fluxninja_v1_ReportRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.plugins.fluxninja.v1.ReportRequest.class, com.aperture.plugins.fluxninja.v1.ReportRequest.Builder.class);
    }

    // Construct using com.aperture.plugins.fluxninja.v1.ReportRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPeerInfosFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (versionInfoBuilder_ == null) {
        versionInfo_ = null;
      } else {
        versionInfo_ = null;
        versionInfoBuilder_ = null;
      }
      if (processInfoBuilder_ == null) {
        processInfo_ = null;
      } else {
        processInfo_ = null;
        processInfoBuilder_ = null;
      }
      if (hostInfoBuilder_ == null) {
        hostInfo_ = null;
      } else {
        hostInfo_ = null;
        hostInfoBuilder_ = null;
      }
      agentGroup_ = "";

      if (controllerInfoBuilder_ == null) {
        controllerInfo_ = null;
      } else {
        controllerInfo_ = null;
        controllerInfoBuilder_ = null;
      }
      if (peerInfosBuilder_ == null) {
        peerInfos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        peerInfosBuilder_.clear();
      }
      internalGetMutableAllStatuses().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.plugins.fluxninja.v1.HeartbeatProto.internal_static_aperture_plugins_fluxninja_v1_ReportRequest_descriptor;
    }

    @java.lang.Override
    public com.aperture.plugins.fluxninja.v1.ReportRequest getDefaultInstanceForType() {
      return com.aperture.plugins.fluxninja.v1.ReportRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.plugins.fluxninja.v1.ReportRequest build() {
      com.aperture.plugins.fluxninja.v1.ReportRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.plugins.fluxninja.v1.ReportRequest buildPartial() {
      com.aperture.plugins.fluxninja.v1.ReportRequest result = new com.aperture.plugins.fluxninja.v1.ReportRequest(this);
      int from_bitField0_ = bitField0_;
      if (versionInfoBuilder_ == null) {
        result.versionInfo_ = versionInfo_;
      } else {
        result.versionInfo_ = versionInfoBuilder_.build();
      }
      if (processInfoBuilder_ == null) {
        result.processInfo_ = processInfo_;
      } else {
        result.processInfo_ = processInfoBuilder_.build();
      }
      if (hostInfoBuilder_ == null) {
        result.hostInfo_ = hostInfo_;
      } else {
        result.hostInfo_ = hostInfoBuilder_.build();
      }
      result.agentGroup_ = agentGroup_;
      if (controllerInfoBuilder_ == null) {
        result.controllerInfo_ = controllerInfo_;
      } else {
        result.controllerInfo_ = controllerInfoBuilder_.build();
      }
      if (peerInfosBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          peerInfos_ = java.util.Collections.unmodifiableList(peerInfos_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.peerInfos_ = peerInfos_;
      } else {
        result.peerInfos_ = peerInfosBuilder_.build();
      }
      result.allStatuses_ = internalGetAllStatuses();
      result.allStatuses_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.plugins.fluxninja.v1.ReportRequest) {
        return mergeFrom((com.aperture.plugins.fluxninja.v1.ReportRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.plugins.fluxninja.v1.ReportRequest other) {
      if (other == com.aperture.plugins.fluxninja.v1.ReportRequest.getDefaultInstance()) return this;
      if (other.hasVersionInfo()) {
        mergeVersionInfo(other.getVersionInfo());
      }
      if (other.hasProcessInfo()) {
        mergeProcessInfo(other.getProcessInfo());
      }
      if (other.hasHostInfo()) {
        mergeHostInfo(other.getHostInfo());
      }
      if (!other.getAgentGroup().isEmpty()) {
        agentGroup_ = other.agentGroup_;
        onChanged();
      }
      if (other.hasControllerInfo()) {
        mergeControllerInfo(other.getControllerInfo());
      }
      if (peerInfosBuilder_ == null) {
        if (!other.peerInfos_.isEmpty()) {
          if (peerInfos_.isEmpty()) {
            peerInfos_ = other.peerInfos_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePeerInfosIsMutable();
            peerInfos_.addAll(other.peerInfos_);
          }
          onChanged();
        }
      } else {
        if (!other.peerInfos_.isEmpty()) {
          if (peerInfosBuilder_.isEmpty()) {
            peerInfosBuilder_.dispose();
            peerInfosBuilder_ = null;
            peerInfos_ = other.peerInfos_;
            bitField0_ = (bitField0_ & ~0x00000001);
            peerInfosBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPeerInfosFieldBuilder() : null;
          } else {
            peerInfosBuilder_.addAllMessages(other.peerInfos_);
          }
        }
      }
      internalGetMutableAllStatuses().mergeFrom(
          other.internalGetAllStatuses());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.plugins.fluxninja.v1.ReportRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.plugins.fluxninja.v1.ReportRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.aperture.common.info.v1.VersionInfo versionInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.common.info.v1.VersionInfo, com.aperture.common.info.v1.VersionInfo.Builder, com.aperture.common.info.v1.VersionInfoOrBuilder> versionInfoBuilder_;
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     * @return Whether the versionInfo field is set.
     */
    public boolean hasVersionInfo() {
      return versionInfoBuilder_ != null || versionInfo_ != null;
    }
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     * @return The versionInfo.
     */
    public com.aperture.common.info.v1.VersionInfo getVersionInfo() {
      if (versionInfoBuilder_ == null) {
        return versionInfo_ == null ? com.aperture.common.info.v1.VersionInfo.getDefaultInstance() : versionInfo_;
      } else {
        return versionInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public Builder setVersionInfo(com.aperture.common.info.v1.VersionInfo value) {
      if (versionInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        versionInfo_ = value;
        onChanged();
      } else {
        versionInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public Builder setVersionInfo(
        com.aperture.common.info.v1.VersionInfo.Builder builderForValue) {
      if (versionInfoBuilder_ == null) {
        versionInfo_ = builderForValue.build();
        onChanged();
      } else {
        versionInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public Builder mergeVersionInfo(com.aperture.common.info.v1.VersionInfo value) {
      if (versionInfoBuilder_ == null) {
        if (versionInfo_ != null) {
          versionInfo_ =
            com.aperture.common.info.v1.VersionInfo.newBuilder(versionInfo_).mergeFrom(value).buildPartial();
        } else {
          versionInfo_ = value;
        }
        onChanged();
      } else {
        versionInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public Builder clearVersionInfo() {
      if (versionInfoBuilder_ == null) {
        versionInfo_ = null;
        onChanged();
      } else {
        versionInfo_ = null;
        versionInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public com.aperture.common.info.v1.VersionInfo.Builder getVersionInfoBuilder() {

      onChanged();
      return getVersionInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public com.aperture.common.info.v1.VersionInfoOrBuilder getVersionInfoOrBuilder() {
      if (versionInfoBuilder_ != null) {
        return versionInfoBuilder_.getMessageOrBuilder();
      } else {
        return versionInfo_ == null ?
            com.aperture.common.info.v1.VersionInfo.getDefaultInstance() : versionInfo_;
      }
    }
    /**
     * <code>.aperture.common.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.common.info.v1.VersionInfo, com.aperture.common.info.v1.VersionInfo.Builder, com.aperture.common.info.v1.VersionInfoOrBuilder>
        getVersionInfoFieldBuilder() {
      if (versionInfoBuilder_ == null) {
        versionInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.common.info.v1.VersionInfo, com.aperture.common.info.v1.VersionInfo.Builder, com.aperture.common.info.v1.VersionInfoOrBuilder>(
                getVersionInfo(),
                getParentForChildren(),
                isClean());
        versionInfo_ = null;
      }
      return versionInfoBuilder_;
    }

    private com.aperture.common.info.v1.ProcessInfo processInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.common.info.v1.ProcessInfo, com.aperture.common.info.v1.ProcessInfo.Builder, com.aperture.common.info.v1.ProcessInfoOrBuilder> processInfoBuilder_;
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     * @return Whether the processInfo field is set.
     */
    public boolean hasProcessInfo() {
      return processInfoBuilder_ != null || processInfo_ != null;
    }
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     * @return The processInfo.
     */
    public com.aperture.common.info.v1.ProcessInfo getProcessInfo() {
      if (processInfoBuilder_ == null) {
        return processInfo_ == null ? com.aperture.common.info.v1.ProcessInfo.getDefaultInstance() : processInfo_;
      } else {
        return processInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public Builder setProcessInfo(com.aperture.common.info.v1.ProcessInfo value) {
      if (processInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        processInfo_ = value;
        onChanged();
      } else {
        processInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public Builder setProcessInfo(
        com.aperture.common.info.v1.ProcessInfo.Builder builderForValue) {
      if (processInfoBuilder_ == null) {
        processInfo_ = builderForValue.build();
        onChanged();
      } else {
        processInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public Builder mergeProcessInfo(com.aperture.common.info.v1.ProcessInfo value) {
      if (processInfoBuilder_ == null) {
        if (processInfo_ != null) {
          processInfo_ =
            com.aperture.common.info.v1.ProcessInfo.newBuilder(processInfo_).mergeFrom(value).buildPartial();
        } else {
          processInfo_ = value;
        }
        onChanged();
      } else {
        processInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public Builder clearProcessInfo() {
      if (processInfoBuilder_ == null) {
        processInfo_ = null;
        onChanged();
      } else {
        processInfo_ = null;
        processInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public com.aperture.common.info.v1.ProcessInfo.Builder getProcessInfoBuilder() {

      onChanged();
      return getProcessInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public com.aperture.common.info.v1.ProcessInfoOrBuilder getProcessInfoOrBuilder() {
      if (processInfoBuilder_ != null) {
        return processInfoBuilder_.getMessageOrBuilder();
      } else {
        return processInfo_ == null ?
            com.aperture.common.info.v1.ProcessInfo.getDefaultInstance() : processInfo_;
      }
    }
    /**
     * <code>.aperture.common.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.common.info.v1.ProcessInfo, com.aperture.common.info.v1.ProcessInfo.Builder, com.aperture.common.info.v1.ProcessInfoOrBuilder>
        getProcessInfoFieldBuilder() {
      if (processInfoBuilder_ == null) {
        processInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.common.info.v1.ProcessInfo, com.aperture.common.info.v1.ProcessInfo.Builder, com.aperture.common.info.v1.ProcessInfoOrBuilder>(
                getProcessInfo(),
                getParentForChildren(),
                isClean());
        processInfo_ = null;
      }
      return processInfoBuilder_;
    }

    private com.aperture.common.info.v1.HostInfo hostInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.common.info.v1.HostInfo, com.aperture.common.info.v1.HostInfo.Builder, com.aperture.common.info.v1.HostInfoOrBuilder> hostInfoBuilder_;
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     * @return Whether the hostInfo field is set.
     */
    public boolean hasHostInfo() {
      return hostInfoBuilder_ != null || hostInfo_ != null;
    }
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     * @return The hostInfo.
     */
    public com.aperture.common.info.v1.HostInfo getHostInfo() {
      if (hostInfoBuilder_ == null) {
        return hostInfo_ == null ? com.aperture.common.info.v1.HostInfo.getDefaultInstance() : hostInfo_;
      } else {
        return hostInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public Builder setHostInfo(com.aperture.common.info.v1.HostInfo value) {
      if (hostInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hostInfo_ = value;
        onChanged();
      } else {
        hostInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public Builder setHostInfo(
        com.aperture.common.info.v1.HostInfo.Builder builderForValue) {
      if (hostInfoBuilder_ == null) {
        hostInfo_ = builderForValue.build();
        onChanged();
      } else {
        hostInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public Builder mergeHostInfo(com.aperture.common.info.v1.HostInfo value) {
      if (hostInfoBuilder_ == null) {
        if (hostInfo_ != null) {
          hostInfo_ =
            com.aperture.common.info.v1.HostInfo.newBuilder(hostInfo_).mergeFrom(value).buildPartial();
        } else {
          hostInfo_ = value;
        }
        onChanged();
      } else {
        hostInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public Builder clearHostInfo() {
      if (hostInfoBuilder_ == null) {
        hostInfo_ = null;
        onChanged();
      } else {
        hostInfo_ = null;
        hostInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public com.aperture.common.info.v1.HostInfo.Builder getHostInfoBuilder() {

      onChanged();
      return getHostInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public com.aperture.common.info.v1.HostInfoOrBuilder getHostInfoOrBuilder() {
      if (hostInfoBuilder_ != null) {
        return hostInfoBuilder_.getMessageOrBuilder();
      } else {
        return hostInfo_ == null ?
            com.aperture.common.info.v1.HostInfo.getDefaultInstance() : hostInfo_;
      }
    }
    /**
     * <code>.aperture.common.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.common.info.v1.HostInfo, com.aperture.common.info.v1.HostInfo.Builder, com.aperture.common.info.v1.HostInfoOrBuilder>
        getHostInfoFieldBuilder() {
      if (hostInfoBuilder_ == null) {
        hostInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.common.info.v1.HostInfo, com.aperture.common.info.v1.HostInfo.Builder, com.aperture.common.info.v1.HostInfoOrBuilder>(
                getHostInfo(),
                getParentForChildren(),
                isClean());
        hostInfo_ = null;
      }
      return hostInfoBuilder_;
    }

    private java.lang.Object agentGroup_ = "";
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @return The agentGroup.
     */
    public java.lang.String getAgentGroup() {
      java.lang.Object ref = agentGroup_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        agentGroup_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @return The bytes for agentGroup.
     */
    public com.google.protobuf.ByteString
        getAgentGroupBytes() {
      java.lang.Object ref = agentGroup_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        agentGroup_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @param value The agentGroup to set.
     * @return This builder for chaining.
     */
    public Builder setAgentGroup(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      agentGroup_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAgentGroup() {

      agentGroup_ = getDefaultInstance().getAgentGroup();
      onChanged();
      return this;
    }
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @param value The bytes for agentGroup to set.
     * @return This builder for chaining.
     */
    public Builder setAgentGroupBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      agentGroup_ = value;
      onChanged();
      return this;
    }

    private com.aperture.plugins.fluxninja.v1.ControllerInfo controllerInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.plugins.fluxninja.v1.ControllerInfo, com.aperture.plugins.fluxninja.v1.ControllerInfo.Builder, com.aperture.plugins.fluxninja.v1.ControllerInfoOrBuilder> controllerInfoBuilder_;
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     * @return Whether the controllerInfo field is set.
     */
    public boolean hasControllerInfo() {
      return controllerInfoBuilder_ != null || controllerInfo_ != null;
    }
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     * @return The controllerInfo.
     */
    public com.aperture.plugins.fluxninja.v1.ControllerInfo getControllerInfo() {
      if (controllerInfoBuilder_ == null) {
        return controllerInfo_ == null ? com.aperture.plugins.fluxninja.v1.ControllerInfo.getDefaultInstance() : controllerInfo_;
      } else {
        return controllerInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public Builder setControllerInfo(com.aperture.plugins.fluxninja.v1.ControllerInfo value) {
      if (controllerInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        controllerInfo_ = value;
        onChanged();
      } else {
        controllerInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public Builder setControllerInfo(
        com.aperture.plugins.fluxninja.v1.ControllerInfo.Builder builderForValue) {
      if (controllerInfoBuilder_ == null) {
        controllerInfo_ = builderForValue.build();
        onChanged();
      } else {
        controllerInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public Builder mergeControllerInfo(com.aperture.plugins.fluxninja.v1.ControllerInfo value) {
      if (controllerInfoBuilder_ == null) {
        if (controllerInfo_ != null) {
          controllerInfo_ =
            com.aperture.plugins.fluxninja.v1.ControllerInfo.newBuilder(controllerInfo_).mergeFrom(value).buildPartial();
        } else {
          controllerInfo_ = value;
        }
        onChanged();
      } else {
        controllerInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public Builder clearControllerInfo() {
      if (controllerInfoBuilder_ == null) {
        controllerInfo_ = null;
        onChanged();
      } else {
        controllerInfo_ = null;
        controllerInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public com.aperture.plugins.fluxninja.v1.ControllerInfo.Builder getControllerInfoBuilder() {

      onChanged();
      return getControllerInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public com.aperture.plugins.fluxninja.v1.ControllerInfoOrBuilder getControllerInfoOrBuilder() {
      if (controllerInfoBuilder_ != null) {
        return controllerInfoBuilder_.getMessageOrBuilder();
      } else {
        return controllerInfo_ == null ?
            com.aperture.plugins.fluxninja.v1.ControllerInfo.getDefaultInstance() : controllerInfo_;
      }
    }
    /**
     * <code>.aperture.plugins.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.plugins.fluxninja.v1.ControllerInfo, com.aperture.plugins.fluxninja.v1.ControllerInfo.Builder, com.aperture.plugins.fluxninja.v1.ControllerInfoOrBuilder>
        getControllerInfoFieldBuilder() {
      if (controllerInfoBuilder_ == null) {
        controllerInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.plugins.fluxninja.v1.ControllerInfo, com.aperture.plugins.fluxninja.v1.ControllerInfo.Builder, com.aperture.plugins.fluxninja.v1.ControllerInfoOrBuilder>(
                getControllerInfo(),
                getParentForChildren(),
                isClean());
        controllerInfo_ = null;
      }
      return controllerInfoBuilder_;
    }

    private java.util.List<com.aperture.common.peers.v1.PeerInfo> peerInfos_ =
      java.util.Collections.emptyList();
    private void ensurePeerInfosIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        peerInfos_ = new java.util.ArrayList<com.aperture.common.peers.v1.PeerInfo>(peerInfos_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.common.peers.v1.PeerInfo, com.aperture.common.peers.v1.PeerInfo.Builder, com.aperture.common.peers.v1.PeerInfoOrBuilder> peerInfosBuilder_;

    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public java.util.List<com.aperture.common.peers.v1.PeerInfo> getPeerInfosList() {
      if (peerInfosBuilder_ == null) {
        return java.util.Collections.unmodifiableList(peerInfos_);
      } else {
        return peerInfosBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public int getPeerInfosCount() {
      if (peerInfosBuilder_ == null) {
        return peerInfos_.size();
      } else {
        return peerInfosBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public com.aperture.common.peers.v1.PeerInfo getPeerInfos(int index) {
      if (peerInfosBuilder_ == null) {
        return peerInfos_.get(index);
      } else {
        return peerInfosBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder setPeerInfos(
        int index, com.aperture.common.peers.v1.PeerInfo value) {
      if (peerInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePeerInfosIsMutable();
        peerInfos_.set(index, value);
        onChanged();
      } else {
        peerInfosBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder setPeerInfos(
        int index, com.aperture.common.peers.v1.PeerInfo.Builder builderForValue) {
      if (peerInfosBuilder_ == null) {
        ensurePeerInfosIsMutable();
        peerInfos_.set(index, builderForValue.build());
        onChanged();
      } else {
        peerInfosBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder addPeerInfos(com.aperture.common.peers.v1.PeerInfo value) {
      if (peerInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePeerInfosIsMutable();
        peerInfos_.add(value);
        onChanged();
      } else {
        peerInfosBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder addPeerInfos(
        int index, com.aperture.common.peers.v1.PeerInfo value) {
      if (peerInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePeerInfosIsMutable();
        peerInfos_.add(index, value);
        onChanged();
      } else {
        peerInfosBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder addPeerInfos(
        com.aperture.common.peers.v1.PeerInfo.Builder builderForValue) {
      if (peerInfosBuilder_ == null) {
        ensurePeerInfosIsMutable();
        peerInfos_.add(builderForValue.build());
        onChanged();
      } else {
        peerInfosBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder addPeerInfos(
        int index, com.aperture.common.peers.v1.PeerInfo.Builder builderForValue) {
      if (peerInfosBuilder_ == null) {
        ensurePeerInfosIsMutable();
        peerInfos_.add(index, builderForValue.build());
        onChanged();
      } else {
        peerInfosBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder addAllPeerInfos(
        java.lang.Iterable<? extends com.aperture.common.peers.v1.PeerInfo> values) {
      if (peerInfosBuilder_ == null) {
        ensurePeerInfosIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, peerInfos_);
        onChanged();
      } else {
        peerInfosBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder clearPeerInfos() {
      if (peerInfosBuilder_ == null) {
        peerInfos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        peerInfosBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public Builder removePeerInfos(int index) {
      if (peerInfosBuilder_ == null) {
        ensurePeerInfosIsMutable();
        peerInfos_.remove(index);
        onChanged();
      } else {
        peerInfosBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public com.aperture.common.peers.v1.PeerInfo.Builder getPeerInfosBuilder(
        int index) {
      return getPeerInfosFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public com.aperture.common.peers.v1.PeerInfoOrBuilder getPeerInfosOrBuilder(
        int index) {
      if (peerInfosBuilder_ == null) {
        return peerInfos_.get(index);  } else {
        return peerInfosBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public java.util.List<? extends com.aperture.common.peers.v1.PeerInfoOrBuilder>
         getPeerInfosOrBuilderList() {
      if (peerInfosBuilder_ != null) {
        return peerInfosBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(peerInfos_);
      }
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public com.aperture.common.peers.v1.PeerInfo.Builder addPeerInfosBuilder() {
      return getPeerInfosFieldBuilder().addBuilder(
          com.aperture.common.peers.v1.PeerInfo.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public com.aperture.common.peers.v1.PeerInfo.Builder addPeerInfosBuilder(
        int index) {
      return getPeerInfosFieldBuilder().addBuilder(
          index, com.aperture.common.peers.v1.PeerInfo.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.common.peers.v1.PeerInfo peer_infos = 6 [json_name = "peerInfos"];</code>
     */
    public java.util.List<com.aperture.common.peers.v1.PeerInfo.Builder>
         getPeerInfosBuilderList() {
      return getPeerInfosFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.common.peers.v1.PeerInfo, com.aperture.common.peers.v1.PeerInfo.Builder, com.aperture.common.peers.v1.PeerInfoOrBuilder>
        getPeerInfosFieldBuilder() {
      if (peerInfosBuilder_ == null) {
        peerInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.aperture.common.peers.v1.PeerInfo, com.aperture.common.peers.v1.PeerInfo.Builder, com.aperture.common.peers.v1.PeerInfoOrBuilder>(
                peerInfos_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        peerInfos_ = null;
      }
      return peerInfosBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.google.protobuf.Any> allStatuses_;
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Any>
    internalGetAllStatuses() {
      if (allStatuses_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            AllStatusesDefaultEntryHolder.defaultEntry);
      }
      return allStatuses_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.google.protobuf.Any>
    internalGetMutableAllStatuses() {
      onChanged();;
      if (allStatuses_ == null) {
        allStatuses_ = com.google.protobuf.MapField.newMapField(
            AllStatusesDefaultEntryHolder.defaultEntry);
      }
      if (!allStatuses_.isMutable()) {
        allStatuses_ = allStatuses_.copy();
      }
      return allStatuses_;
    }

    public int getAllStatusesCount() {
      return internalGetAllStatuses().getMap().size();
    }
    /**
     * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
     */

    @java.lang.Override
    public boolean containsAllStatuses(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetAllStatuses().getMap().containsKey(key);
    }
    /**
     * Use {@link #getAllStatusesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.Any> getAllStatuses() {
      return getAllStatusesMap();
    }
    /**
     * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.google.protobuf.Any> getAllStatusesMap() {
      return internalGetAllStatuses().getMap();
    }
    /**
     * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
     */
    @java.lang.Override

    public com.google.protobuf.Any getAllStatusesOrDefault(
        java.lang.String key,
        com.google.protobuf.Any defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.Any> map =
          internalGetAllStatuses().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
     */
    @java.lang.Override

    public com.google.protobuf.Any getAllStatusesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.google.protobuf.Any> map =
          internalGetAllStatuses().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearAllStatuses() {
      internalGetMutableAllStatuses().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
     */

    public Builder removeAllStatuses(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableAllStatuses().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.google.protobuf.Any>
    getMutableAllStatuses() {
      return internalGetMutableAllStatuses().getMutableMap();
    }
    /**
     * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
     */
    public Builder putAllStatuses(
        java.lang.String key,
        com.google.protobuf.Any value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableAllStatuses().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, .google.protobuf.Any&gt; all_statuses = 7 [json_name = "allStatuses"];</code>
     */

    public Builder putAllAllStatuses(
        java.util.Map<java.lang.String, com.google.protobuf.Any> values) {
      internalGetMutableAllStatuses().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.plugins.fluxninja.v1.ReportRequest)
  }

  // @@protoc_insertion_point(class_scope:aperture.plugins.fluxninja.v1.ReportRequest)
  private static final com.aperture.plugins.fluxninja.v1.ReportRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.plugins.fluxninja.v1.ReportRequest();
  }

  public static com.aperture.plugins.fluxninja.v1.ReportRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReportRequest>
      PARSER = new com.google.protobuf.AbstractParser<ReportRequest>() {
    @java.lang.Override
    public ReportRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ReportRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ReportRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ReportRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.plugins.fluxninja.v1.ReportRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
