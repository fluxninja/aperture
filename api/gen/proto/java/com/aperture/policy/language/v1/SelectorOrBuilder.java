// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/selector.proto

package com.aperture.policy.language.v1;

public interface SelectorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.Selector)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Describes where this selector applies to.
   * </pre>
   *
   * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The agentGroup.
   */
  java.lang.String getAgentGroup();
  /**
   * <pre>
   * Describes where this selector applies to.
   * </pre>
   *
   * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The bytes for agentGroup.
   */
  com.google.protobuf.ByteString
      getAgentGroupBytes();

  /**
   * <pre>
   * The service (name) of the entities.
   * In k8s, this is the FQDN of the Service object.
   * Note: Entity may belong to multiple services.
   * </pre>
   *
   * <code>string service = 2 [json_name = "service"];</code>
   * @return The service.
   */
  java.lang.String getService();
  /**
   * <pre>
   * The service (name) of the entities.
   * In k8s, this is the FQDN of the Service object.
   * Note: Entity may belong to multiple services.
   * </pre>
   *
   * <code>string service = 2 [json_name = "service"];</code>
   * @return The bytes for service.
   */
  com.google.protobuf.ByteString
      getServiceBytes();

  /**
   * <pre>
   * Describes control point within the entity where the policy should apply to.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the controlPoint field is set.
   */
  boolean hasControlPoint();
  /**
   * <pre>
   * Describes control point within the entity where the policy should apply to.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The controlPoint.
   */
  com.aperture.policy.language.v1.ControlPoint getControlPoint();
  /**
   * <pre>
   * Describes control point within the entity where the policy should apply to.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  com.aperture.policy.language.v1.ControlPointOrBuilder getControlPointOrBuilder();

  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on labels that must
   * also be satisfied (in addition to service+control point matching)
   * This matcher allows to match on flow labels and request labels.
   * (Note: For classification we can only match flow labels that were created at
   * some **previous** control point).
   * Flow labels are available with the same label key as defined in
   * classification rule.
   * Request labels are always prefixed with `request_`. Available request
   * labels are `id` (available as `request_id`), `method`, `path`, `host`,
   * `scheme`, `size`, `protocol` (mapped from fields of
   * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
   * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
   * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
   * Note: Request headers are only available for `traffic` control points.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   * @return Whether the labelMatcher field is set.
   */
  boolean hasLabelMatcher();
  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on labels that must
   * also be satisfied (in addition to service+control point matching)
   * This matcher allows to match on flow labels and request labels.
   * (Note: For classification we can only match flow labels that were created at
   * some **previous** control point).
   * Flow labels are available with the same label key as defined in
   * classification rule.
   * Request labels are always prefixed with `request_`. Available request
   * labels are `id` (available as `request_id`), `method`, `path`, `host`,
   * `scheme`, `size`, `protocol` (mapped from fields of
   * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
   * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
   * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
   * Note: Request headers are only available for `traffic` control points.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   * @return The labelMatcher.
   */
  com.aperture.policy.language.v1.LabelMatcher getLabelMatcher();
  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on labels that must
   * also be satisfied (in addition to service+control point matching)
   * This matcher allows to match on flow labels and request labels.
   * (Note: For classification we can only match flow labels that were created at
   * some **previous** control point).
   * Flow labels are available with the same label key as defined in
   * classification rule.
   * Request labels are always prefixed with `request_`. Available request
   * labels are `id` (available as `request_id`), `method`, `path`, `host`,
   * `scheme`, `size`, `protocol` (mapped from fields of
   * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
   * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
   * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
   * Note: Request headers are only available for `traffic` control points.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   */
  com.aperture.policy.language.v1.LabelMatcherOrBuilder getLabelMatcherOrBuilder();
}
