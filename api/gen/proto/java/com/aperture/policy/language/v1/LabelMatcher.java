// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/labelmatcher.proto

package com.aperture.policy.language.v1;

/**
 * <pre>
 * Allows to define rules whether a map of labels should be considered a match or not.
 * It provides three ways to define requirements:
 * - matchLabels
 * - matchExpressions
 * - arbitrary expression
 * If multiple requirements are set, they are all ANDed.
 * An empty label matcher always matches.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.LabelMatcher}
 */
public final class LabelMatcher extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.LabelMatcher)
    LabelMatcherOrBuilder {
private static final long serialVersionUID = 0L;
  // Use LabelMatcher.newBuilder() to construct.
  private LabelMatcher(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private LabelMatcher() {
    matchExpressions_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new LabelMatcher();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private LabelMatcher(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              matchLabels_ = com.google.protobuf.MapField.newMapField(
                  MatchLabelsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            matchLabels__ = input.readMessage(
                MatchLabelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            matchLabels_.getMutableMap().put(
                matchLabels__.getKey(), matchLabels__.getValue());
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              matchExpressions_ = new java.util.ArrayList<com.aperture.policy.language.v1.K8sLabelMatcherRequirement>();
              mutable_bitField0_ |= 0x00000002;
            }
            matchExpressions_.add(
                input.readMessage(com.aperture.policy.language.v1.K8sLabelMatcherRequirement.parser(), extensionRegistry));
            break;
          }
          case 26: {
            com.aperture.policy.language.v1.MatchExpression.Builder subBuilder = null;
            if (expression_ != null) {
              subBuilder = expression_.toBuilder();
            }
            expression_ = input.readMessage(com.aperture.policy.language.v1.MatchExpression.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(expression_);
              expression_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        matchExpressions_ = java.util.Collections.unmodifiableList(matchExpressions_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.policy.language.v1.LabelmatcherProto.internal_static_aperture_policy_language_v1_LabelMatcher_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetMatchLabels();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.policy.language.v1.LabelmatcherProto.internal_static_aperture_policy_language_v1_LabelMatcher_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.policy.language.v1.LabelMatcher.class, com.aperture.policy.language.v1.LabelMatcher.Builder.class);
  }

  public static final int MATCH_LABELS_FIELD_NUMBER = 1;
  private static final class MatchLabelsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.aperture.policy.language.v1.LabelmatcherProto.internal_static_aperture_policy_language_v1_LabelMatcher_MatchLabelsEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> matchLabels_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetMatchLabels() {
    if (matchLabels_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          MatchLabelsDefaultEntryHolder.defaultEntry);
    }
    return matchLabels_;
  }

  public int getMatchLabelsCount() {
    return internalGetMatchLabels().getMap().size();
  }
  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */

  @java.lang.Override
  public boolean containsMatchLabels(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetMatchLabels().getMap().containsKey(key);
  }
  /**
   * Use {@link #getMatchLabelsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getMatchLabels() {
    return getMatchLabelsMap();
  }
  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getMatchLabelsMap() {
    return internalGetMatchLabels().getMap();
  }
  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */
  @java.lang.Override

  public java.lang.String getMatchLabelsOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetMatchLabels().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */
  @java.lang.Override

  public java.lang.String getMatchLabelsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetMatchLabels().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int MATCH_EXPRESSIONS_FIELD_NUMBER = 2;
  private java.util.List<com.aperture.policy.language.v1.K8sLabelMatcherRequirement> matchExpressions_;
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  @java.lang.Override
  public java.util.List<com.aperture.policy.language.v1.K8sLabelMatcherRequirement> getMatchExpressionsList() {
    return matchExpressions_;
  }
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder>
      getMatchExpressionsOrBuilderList() {
    return matchExpressions_;
  }
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  @java.lang.Override
  public int getMatchExpressionsCount() {
    return matchExpressions_.size();
  }
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.K8sLabelMatcherRequirement getMatchExpressions(int index) {
    return matchExpressions_.get(index);
  }
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder getMatchExpressionsOrBuilder(
      int index) {
    return matchExpressions_.get(index);
  }

  public static final int EXPRESSION_FIELD_NUMBER = 3;
  private com.aperture.policy.language.v1.MatchExpression expression_;
  /**
   * <pre>
   * An arbitrary expression to be evaluated on the labels.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
   * @return Whether the expression field is set.
   */
  @java.lang.Override
  public boolean hasExpression() {
    return expression_ != null;
  }
  /**
   * <pre>
   * An arbitrary expression to be evaluated on the labels.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
   * @return The expression.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.MatchExpression getExpression() {
    return expression_ == null ? com.aperture.policy.language.v1.MatchExpression.getDefaultInstance() : expression_;
  }
  /**
   * <pre>
   * An arbitrary expression to be evaluated on the labels.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.MatchExpressionOrBuilder getExpressionOrBuilder() {
    return getExpression();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetMatchLabels(),
        MatchLabelsDefaultEntryHolder.defaultEntry,
        1);
    for (int i = 0; i < matchExpressions_.size(); i++) {
      output.writeMessage(2, matchExpressions_.get(i));
    }
    if (expression_ != null) {
      output.writeMessage(3, getExpression());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetMatchLabels().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      matchLabels__ = MatchLabelsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, matchLabels__);
    }
    for (int i = 0; i < matchExpressions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, matchExpressions_.get(i));
    }
    if (expression_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getExpression());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.policy.language.v1.LabelMatcher)) {
      return super.equals(obj);
    }
    com.aperture.policy.language.v1.LabelMatcher other = (com.aperture.policy.language.v1.LabelMatcher) obj;

    if (!internalGetMatchLabels().equals(
        other.internalGetMatchLabels())) return false;
    if (!getMatchExpressionsList()
        .equals(other.getMatchExpressionsList())) return false;
    if (hasExpression() != other.hasExpression()) return false;
    if (hasExpression()) {
      if (!getExpression()
          .equals(other.getExpression())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetMatchLabels().getMap().isEmpty()) {
      hash = (37 * hash) + MATCH_LABELS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetMatchLabels().hashCode();
    }
    if (getMatchExpressionsCount() > 0) {
      hash = (37 * hash) + MATCH_EXPRESSIONS_FIELD_NUMBER;
      hash = (53 * hash) + getMatchExpressionsList().hashCode();
    }
    if (hasExpression()) {
      hash = (37 * hash) + EXPRESSION_FIELD_NUMBER;
      hash = (53 * hash) + getExpression().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.LabelMatcher parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.policy.language.v1.LabelMatcher prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Allows to define rules whether a map of labels should be considered a match or not.
   * It provides three ways to define requirements:
   * - matchLabels
   * - matchExpressions
   * - arbitrary expression
   * If multiple requirements are set, they are all ANDed.
   * An empty label matcher always matches.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.LabelMatcher}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.LabelMatcher)
      com.aperture.policy.language.v1.LabelMatcherOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.policy.language.v1.LabelmatcherProto.internal_static_aperture_policy_language_v1_LabelMatcher_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMatchLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableMatchLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.policy.language.v1.LabelmatcherProto.internal_static_aperture_policy_language_v1_LabelMatcher_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.policy.language.v1.LabelMatcher.class, com.aperture.policy.language.v1.LabelMatcher.Builder.class);
    }

    // Construct using com.aperture.policy.language.v1.LabelMatcher.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getMatchExpressionsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      internalGetMutableMatchLabels().clear();
      if (matchExpressionsBuilder_ == null) {
        matchExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        matchExpressionsBuilder_.clear();
      }
      if (expressionBuilder_ == null) {
        expression_ = null;
      } else {
        expression_ = null;
        expressionBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.policy.language.v1.LabelmatcherProto.internal_static_aperture_policy_language_v1_LabelMatcher_descriptor;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.LabelMatcher getDefaultInstanceForType() {
      return com.aperture.policy.language.v1.LabelMatcher.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.LabelMatcher build() {
      com.aperture.policy.language.v1.LabelMatcher result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.LabelMatcher buildPartial() {
      com.aperture.policy.language.v1.LabelMatcher result = new com.aperture.policy.language.v1.LabelMatcher(this);
      int from_bitField0_ = bitField0_;
      result.matchLabels_ = internalGetMatchLabels();
      result.matchLabels_.makeImmutable();
      if (matchExpressionsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          matchExpressions_ = java.util.Collections.unmodifiableList(matchExpressions_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.matchExpressions_ = matchExpressions_;
      } else {
        result.matchExpressions_ = matchExpressionsBuilder_.build();
      }
      if (expressionBuilder_ == null) {
        result.expression_ = expression_;
      } else {
        result.expression_ = expressionBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.policy.language.v1.LabelMatcher) {
        return mergeFrom((com.aperture.policy.language.v1.LabelMatcher)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.policy.language.v1.LabelMatcher other) {
      if (other == com.aperture.policy.language.v1.LabelMatcher.getDefaultInstance()) return this;
      internalGetMutableMatchLabels().mergeFrom(
          other.internalGetMatchLabels());
      if (matchExpressionsBuilder_ == null) {
        if (!other.matchExpressions_.isEmpty()) {
          if (matchExpressions_.isEmpty()) {
            matchExpressions_ = other.matchExpressions_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureMatchExpressionsIsMutable();
            matchExpressions_.addAll(other.matchExpressions_);
          }
          onChanged();
        }
      } else {
        if (!other.matchExpressions_.isEmpty()) {
          if (matchExpressionsBuilder_.isEmpty()) {
            matchExpressionsBuilder_.dispose();
            matchExpressionsBuilder_ = null;
            matchExpressions_ = other.matchExpressions_;
            bitField0_ = (bitField0_ & ~0x00000002);
            matchExpressionsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getMatchExpressionsFieldBuilder() : null;
          } else {
            matchExpressionsBuilder_.addAllMessages(other.matchExpressions_);
          }
        }
      }
      if (other.hasExpression()) {
        mergeExpression(other.getExpression());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.policy.language.v1.LabelMatcher parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.policy.language.v1.LabelMatcher) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> matchLabels_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMatchLabels() {
      if (matchLabels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MatchLabelsDefaultEntryHolder.defaultEntry);
      }
      return matchLabels_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableMatchLabels() {
      onChanged();;
      if (matchLabels_ == null) {
        matchLabels_ = com.google.protobuf.MapField.newMapField(
            MatchLabelsDefaultEntryHolder.defaultEntry);
      }
      if (!matchLabels_.isMutable()) {
        matchLabels_ = matchLabels_.copy();
      }
      return matchLabels_;
    }

    public int getMatchLabelsCount() {
      return internalGetMatchLabels().getMap().size();
    }
    /**
     * <pre>
     * A map of {key,value} pairs representing labels to be matched.
     * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
     */

    @java.lang.Override
    public boolean containsMatchLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetMatchLabels().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMatchLabelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMatchLabels() {
      return getMatchLabelsMap();
    }
    /**
     * <pre>
     * A map of {key,value} pairs representing labels to be matched.
     * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getMatchLabelsMap() {
      return internalGetMatchLabels().getMap();
    }
    /**
     * <pre>
     * A map of {key,value} pairs representing labels to be matched.
     * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
     */
    @java.lang.Override

    public java.lang.String getMatchLabelsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMatchLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map of {key,value} pairs representing labels to be matched.
     * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
     */
    @java.lang.Override

    public java.lang.String getMatchLabelsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetMatchLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearMatchLabels() {
      internalGetMutableMatchLabels().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * A map of {key,value} pairs representing labels to be matched.
     * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
     */

    public Builder removeMatchLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableMatchLabels().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableMatchLabels() {
      return internalGetMutableMatchLabels().getMutableMap();
    }
    /**
     * <pre>
     * A map of {key,value} pairs representing labels to be matched.
     * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
     */
    public Builder putMatchLabels(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableMatchLabels().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * A map of {key,value} pairs representing labels to be matched.
     * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
     */

    public Builder putAllMatchLabels(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableMatchLabels().getMutableMap()
          .putAll(values);
      return this;
    }

    private java.util.List<com.aperture.policy.language.v1.K8sLabelMatcherRequirement> matchExpressions_ =
      java.util.Collections.emptyList();
    private void ensureMatchExpressionsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        matchExpressions_ = new java.util.ArrayList<com.aperture.policy.language.v1.K8sLabelMatcherRequirement>(matchExpressions_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.policy.language.v1.K8sLabelMatcherRequirement, com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder, com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder> matchExpressionsBuilder_;

    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public java.util.List<com.aperture.policy.language.v1.K8sLabelMatcherRequirement> getMatchExpressionsList() {
      if (matchExpressionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(matchExpressions_);
      } else {
        return matchExpressionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public int getMatchExpressionsCount() {
      if (matchExpressionsBuilder_ == null) {
        return matchExpressions_.size();
      } else {
        return matchExpressionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public com.aperture.policy.language.v1.K8sLabelMatcherRequirement getMatchExpressions(int index) {
      if (matchExpressionsBuilder_ == null) {
        return matchExpressions_.get(index);
      } else {
        return matchExpressionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder setMatchExpressions(
        int index, com.aperture.policy.language.v1.K8sLabelMatcherRequirement value) {
      if (matchExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMatchExpressionsIsMutable();
        matchExpressions_.set(index, value);
        onChanged();
      } else {
        matchExpressionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder setMatchExpressions(
        int index, com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder builderForValue) {
      if (matchExpressionsBuilder_ == null) {
        ensureMatchExpressionsIsMutable();
        matchExpressions_.set(index, builderForValue.build());
        onChanged();
      } else {
        matchExpressionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder addMatchExpressions(com.aperture.policy.language.v1.K8sLabelMatcherRequirement value) {
      if (matchExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMatchExpressionsIsMutable();
        matchExpressions_.add(value);
        onChanged();
      } else {
        matchExpressionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder addMatchExpressions(
        int index, com.aperture.policy.language.v1.K8sLabelMatcherRequirement value) {
      if (matchExpressionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureMatchExpressionsIsMutable();
        matchExpressions_.add(index, value);
        onChanged();
      } else {
        matchExpressionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder addMatchExpressions(
        com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder builderForValue) {
      if (matchExpressionsBuilder_ == null) {
        ensureMatchExpressionsIsMutable();
        matchExpressions_.add(builderForValue.build());
        onChanged();
      } else {
        matchExpressionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder addMatchExpressions(
        int index, com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder builderForValue) {
      if (matchExpressionsBuilder_ == null) {
        ensureMatchExpressionsIsMutable();
        matchExpressions_.add(index, builderForValue.build());
        onChanged();
      } else {
        matchExpressionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder addAllMatchExpressions(
        java.lang.Iterable<? extends com.aperture.policy.language.v1.K8sLabelMatcherRequirement> values) {
      if (matchExpressionsBuilder_ == null) {
        ensureMatchExpressionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, matchExpressions_);
        onChanged();
      } else {
        matchExpressionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder clearMatchExpressions() {
      if (matchExpressionsBuilder_ == null) {
        matchExpressions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        matchExpressionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public Builder removeMatchExpressions(int index) {
      if (matchExpressionsBuilder_ == null) {
        ensureMatchExpressionsIsMutable();
        matchExpressions_.remove(index);
        onChanged();
      } else {
        matchExpressionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder getMatchExpressionsBuilder(
        int index) {
      return getMatchExpressionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder getMatchExpressionsOrBuilder(
        int index) {
      if (matchExpressionsBuilder_ == null) {
        return matchExpressions_.get(index);  } else {
        return matchExpressionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public java.util.List<? extends com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder>
         getMatchExpressionsOrBuilderList() {
      if (matchExpressionsBuilder_ != null) {
        return matchExpressionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(matchExpressions_);
      }
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder addMatchExpressionsBuilder() {
      return getMatchExpressionsFieldBuilder().addBuilder(
          com.aperture.policy.language.v1.K8sLabelMatcherRequirement.getDefaultInstance());
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder addMatchExpressionsBuilder(
        int index) {
      return getMatchExpressionsFieldBuilder().addBuilder(
          index, com.aperture.policy.language.v1.K8sLabelMatcherRequirement.getDefaultInstance());
    }
    /**
     * <pre>
     * List of k8s-style label matcher requirements.
     * Note: The requirements are ANDed.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
     */
    public java.util.List<com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder>
         getMatchExpressionsBuilderList() {
      return getMatchExpressionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.policy.language.v1.K8sLabelMatcherRequirement, com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder, com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder>
        getMatchExpressionsFieldBuilder() {
      if (matchExpressionsBuilder_ == null) {
        matchExpressionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.aperture.policy.language.v1.K8sLabelMatcherRequirement, com.aperture.policy.language.v1.K8sLabelMatcherRequirement.Builder, com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder>(
                matchExpressions_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        matchExpressions_ = null;
      }
      return matchExpressionsBuilder_;
    }

    private com.aperture.policy.language.v1.MatchExpression expression_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.MatchExpression, com.aperture.policy.language.v1.MatchExpression.Builder, com.aperture.policy.language.v1.MatchExpressionOrBuilder> expressionBuilder_;
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     * @return Whether the expression field is set.
     */
    public boolean hasExpression() {
      return expressionBuilder_ != null || expression_ != null;
    }
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     * @return The expression.
     */
    public com.aperture.policy.language.v1.MatchExpression getExpression() {
      if (expressionBuilder_ == null) {
        return expression_ == null ? com.aperture.policy.language.v1.MatchExpression.getDefaultInstance() : expression_;
      } else {
        return expressionBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     */
    public Builder setExpression(com.aperture.policy.language.v1.MatchExpression value) {
      if (expressionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        expression_ = value;
        onChanged();
      } else {
        expressionBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     */
    public Builder setExpression(
        com.aperture.policy.language.v1.MatchExpression.Builder builderForValue) {
      if (expressionBuilder_ == null) {
        expression_ = builderForValue.build();
        onChanged();
      } else {
        expressionBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     */
    public Builder mergeExpression(com.aperture.policy.language.v1.MatchExpression value) {
      if (expressionBuilder_ == null) {
        if (expression_ != null) {
          expression_ =
            com.aperture.policy.language.v1.MatchExpression.newBuilder(expression_).mergeFrom(value).buildPartial();
        } else {
          expression_ = value;
        }
        onChanged();
      } else {
        expressionBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     */
    public Builder clearExpression() {
      if (expressionBuilder_ == null) {
        expression_ = null;
        onChanged();
      } else {
        expression_ = null;
        expressionBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     */
    public com.aperture.policy.language.v1.MatchExpression.Builder getExpressionBuilder() {

      onChanged();
      return getExpressionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     */
    public com.aperture.policy.language.v1.MatchExpressionOrBuilder getExpressionOrBuilder() {
      if (expressionBuilder_ != null) {
        return expressionBuilder_.getMessageOrBuilder();
      } else {
        return expression_ == null ?
            com.aperture.policy.language.v1.MatchExpression.getDefaultInstance() : expression_;
      }
    }
    /**
     * <pre>
     * An arbitrary expression to be evaluated on the labels.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.MatchExpression, com.aperture.policy.language.v1.MatchExpression.Builder, com.aperture.policy.language.v1.MatchExpressionOrBuilder>
        getExpressionFieldBuilder() {
      if (expressionBuilder_ == null) {
        expressionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.MatchExpression, com.aperture.policy.language.v1.MatchExpression.Builder, com.aperture.policy.language.v1.MatchExpressionOrBuilder>(
                getExpression(),
                getParentForChildren(),
                isClean());
        expression_ = null;
      }
      return expressionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.LabelMatcher)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.LabelMatcher)
  private static final com.aperture.policy.language.v1.LabelMatcher DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.policy.language.v1.LabelMatcher();
  }

  public static com.aperture.policy.language.v1.LabelMatcher getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<LabelMatcher>
      PARSER = new com.google.protobuf.AbstractParser<LabelMatcher>() {
    @java.lang.Override
    public LabelMatcher parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new LabelMatcher(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<LabelMatcher> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<LabelMatcher> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.policy.language.v1.LabelMatcher getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
