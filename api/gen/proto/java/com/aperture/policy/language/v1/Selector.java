// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/selector.proto

package com.aperture.policy.language.v1;

/**
 * <pre>
 * Describes where a rule or actuation component should apply to.
 * Example:
 * ```yaml
 * selector:
 *   service: service1.default.svc.cluster.local
 *   control_point:
 *     traffic: ingress # Allowed values are `ingress` and `egress`.
 *   label_matcher:
 *     match_labels:
 *       user_tier: gold
 *     match_expressions:
 *       - key: query
 *         operator: In
 *         values:
 *           - insert
 *           - delete
 *       - label: user_agent
 *         regex: ^(?!.*Chrome).*Safari
 * ```
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.Selector}
 */
public final class Selector extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.Selector)
    SelectorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Selector.newBuilder() to construct.
  private Selector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Selector() {
    agentGroup_ = "";
    service_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Selector();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Selector(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            agentGroup_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            service_ = s;
            break;
          }
          case 26: {
            com.aperture.policy.language.v1.ControlPoint.Builder subBuilder = null;
            if (controlPoint_ != null) {
              subBuilder = controlPoint_.toBuilder();
            }
            controlPoint_ = input.readMessage(com.aperture.policy.language.v1.ControlPoint.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(controlPoint_);
              controlPoint_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            com.aperture.policy.language.v1.LabelMatcher.Builder subBuilder = null;
            if (labelMatcher_ != null) {
              subBuilder = labelMatcher_.toBuilder();
            }
            labelMatcher_ = input.readMessage(com.aperture.policy.language.v1.LabelMatcher.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(labelMatcher_);
              labelMatcher_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.policy.language.v1.Selector.class, com.aperture.policy.language.v1.Selector.Builder.class);
  }

  public static final int AGENT_GROUP_FIELD_NUMBER = 1;
  private volatile java.lang.Object agentGroup_;
  /**
   * <pre>
   * Describes where this selector applies to.
   * </pre>
   *
   * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The agentGroup.
   */
  @java.lang.Override
  public java.lang.String getAgentGroup() {
    java.lang.Object ref = agentGroup_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      agentGroup_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Describes where this selector applies to.
   * </pre>
   *
   * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The bytes for agentGroup.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAgentGroupBytes() {
    java.lang.Object ref = agentGroup_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      agentGroup_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SERVICE_FIELD_NUMBER = 2;
  private volatile java.lang.Object service_;
  /**
   * <pre>
   * The service (name) of the entities.
   * In k8s, this is the FQDN of the Service object.
   * Note: Entity may belong to multiple services.
   * </pre>
   *
   * <code>string service = 2 [json_name = "service"];</code>
   * @return The service.
   */
  @java.lang.Override
  public java.lang.String getService() {
    java.lang.Object ref = service_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs =
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      service_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The service (name) of the entities.
   * In k8s, this is the FQDN of the Service object.
   * Note: Entity may belong to multiple services.
   * </pre>
   *
   * <code>string service = 2 [json_name = "service"];</code>
   * @return The bytes for service.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getServiceBytes() {
    java.lang.Object ref = service_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b =
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      service_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CONTROL_POINT_FIELD_NUMBER = 3;
  private com.aperture.policy.language.v1.ControlPoint controlPoint_;
  /**
   * <pre>
   * Describes control point within the entity where the policy should apply to.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the controlPoint field is set.
   */
  @java.lang.Override
  public boolean hasControlPoint() {
    return controlPoint_ != null;
  }
  /**
   * <pre>
   * Describes control point within the entity where the policy should apply to.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The controlPoint.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ControlPoint getControlPoint() {
    return controlPoint_ == null ? com.aperture.policy.language.v1.ControlPoint.getDefaultInstance() : controlPoint_;
  }
  /**
   * <pre>
   * Describes control point within the entity where the policy should apply to.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ControlPointOrBuilder getControlPointOrBuilder() {
    return getControlPoint();
  }

  public static final int LABEL_MATCHER_FIELD_NUMBER = 4;
  private com.aperture.policy.language.v1.LabelMatcher labelMatcher_;
  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on labels that must
   * also be satisfied (in addition to service+control point matching)
   * This matcher allows to match on flow labels and request labels.
   * (Note: For classification we can only match flow labels that were created at
   * some **previous** control point).
   * Flow labels are available with the same label key as defined in
   * classification rule.
   * Request labels are always prefixed with `request_`. Available request
   * labels are `id` (available as `request_id`), `method`, `path`, `host`,
   * `scheme`, `size`, `protocol` (mapped from fields of
   * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
   * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
   * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
   * Note: Request headers are only available for `traffic` control points.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   * @return Whether the labelMatcher field is set.
   */
  @java.lang.Override
  public boolean hasLabelMatcher() {
    return labelMatcher_ != null;
  }
  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on labels that must
   * also be satisfied (in addition to service+control point matching)
   * This matcher allows to match on flow labels and request labels.
   * (Note: For classification we can only match flow labels that were created at
   * some **previous** control point).
   * Flow labels are available with the same label key as defined in
   * classification rule.
   * Request labels are always prefixed with `request_`. Available request
   * labels are `id` (available as `request_id`), `method`, `path`, `host`,
   * `scheme`, `size`, `protocol` (mapped from fields of
   * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
   * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
   * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
   * Note: Request headers are only available for `traffic` control points.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   * @return The labelMatcher.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.LabelMatcher getLabelMatcher() {
    return labelMatcher_ == null ? com.aperture.policy.language.v1.LabelMatcher.getDefaultInstance() : labelMatcher_;
  }
  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on labels that must
   * also be satisfied (in addition to service+control point matching)
   * This matcher allows to match on flow labels and request labels.
   * (Note: For classification we can only match flow labels that were created at
   * some **previous** control point).
   * Flow labels are available with the same label key as defined in
   * classification rule.
   * Request labels are always prefixed with `request_`. Available request
   * labels are `id` (available as `request_id`), `method`, `path`, `host`,
   * `scheme`, `size`, `protocol` (mapped from fields of
   * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
   * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
   * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
   * Note: Request headers are only available for `traffic` control points.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.LabelMatcherOrBuilder getLabelMatcherOrBuilder() {
    return getLabelMatcher();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(agentGroup_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, agentGroup_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(service_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, service_);
    }
    if (controlPoint_ != null) {
      output.writeMessage(3, getControlPoint());
    }
    if (labelMatcher_ != null) {
      output.writeMessage(4, getLabelMatcher());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(agentGroup_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, agentGroup_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(service_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, service_);
    }
    if (controlPoint_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getControlPoint());
    }
    if (labelMatcher_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getLabelMatcher());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.policy.language.v1.Selector)) {
      return super.equals(obj);
    }
    com.aperture.policy.language.v1.Selector other = (com.aperture.policy.language.v1.Selector) obj;

    if (!getAgentGroup()
        .equals(other.getAgentGroup())) return false;
    if (!getService()
        .equals(other.getService())) return false;
    if (hasControlPoint() != other.hasControlPoint()) return false;
    if (hasControlPoint()) {
      if (!getControlPoint()
          .equals(other.getControlPoint())) return false;
    }
    if (hasLabelMatcher() != other.hasLabelMatcher()) return false;
    if (hasLabelMatcher()) {
      if (!getLabelMatcher()
          .equals(other.getLabelMatcher())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + AGENT_GROUP_FIELD_NUMBER;
    hash = (53 * hash) + getAgentGroup().hashCode();
    hash = (37 * hash) + SERVICE_FIELD_NUMBER;
    hash = (53 * hash) + getService().hashCode();
    if (hasControlPoint()) {
      hash = (37 * hash) + CONTROL_POINT_FIELD_NUMBER;
      hash = (53 * hash) + getControlPoint().hashCode();
    }
    if (hasLabelMatcher()) {
      hash = (37 * hash) + LABEL_MATCHER_FIELD_NUMBER;
      hash = (53 * hash) + getLabelMatcher().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.policy.language.v1.Selector parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Selector parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Selector parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Selector parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.policy.language.v1.Selector prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Describes where a rule or actuation component should apply to.
   * Example:
   * ```yaml
   * selector:
   *   service: service1.default.svc.cluster.local
   *   control_point:
   *     traffic: ingress # Allowed values are `ingress` and `egress`.
   *   label_matcher:
   *     match_labels:
   *       user_tier: gold
   *     match_expressions:
   *       - key: query
   *         operator: In
   *         values:
   *           - insert
   *           - delete
   *       - label: user_agent
   *         regex: ^(?!.*Chrome).*Safari
   * ```
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.Selector}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.Selector)
      com.aperture.policy.language.v1.SelectorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.policy.language.v1.Selector.class, com.aperture.policy.language.v1.Selector.Builder.class);
    }

    // Construct using com.aperture.policy.language.v1.Selector.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      agentGroup_ = "";

      service_ = "";

      if (controlPointBuilder_ == null) {
        controlPoint_ = null;
      } else {
        controlPoint_ = null;
        controlPointBuilder_ = null;
      }
      if (labelMatcherBuilder_ == null) {
        labelMatcher_ = null;
      } else {
        labelMatcher_ = null;
        labelMatcherBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_descriptor;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Selector getDefaultInstanceForType() {
      return com.aperture.policy.language.v1.Selector.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Selector build() {
      com.aperture.policy.language.v1.Selector result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Selector buildPartial() {
      com.aperture.policy.language.v1.Selector result = new com.aperture.policy.language.v1.Selector(this);
      result.agentGroup_ = agentGroup_;
      result.service_ = service_;
      if (controlPointBuilder_ == null) {
        result.controlPoint_ = controlPoint_;
      } else {
        result.controlPoint_ = controlPointBuilder_.build();
      }
      if (labelMatcherBuilder_ == null) {
        result.labelMatcher_ = labelMatcher_;
      } else {
        result.labelMatcher_ = labelMatcherBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.policy.language.v1.Selector) {
        return mergeFrom((com.aperture.policy.language.v1.Selector)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.policy.language.v1.Selector other) {
      if (other == com.aperture.policy.language.v1.Selector.getDefaultInstance()) return this;
      if (!other.getAgentGroup().isEmpty()) {
        agentGroup_ = other.agentGroup_;
        onChanged();
      }
      if (!other.getService().isEmpty()) {
        service_ = other.service_;
        onChanged();
      }
      if (other.hasControlPoint()) {
        mergeControlPoint(other.getControlPoint());
      }
      if (other.hasLabelMatcher()) {
        mergeLabelMatcher(other.getLabelMatcher());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.policy.language.v1.Selector parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.policy.language.v1.Selector) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object agentGroup_ = "";
    /**
     * <pre>
     * Describes where this selector applies to.
     * </pre>
     *
     * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The agentGroup.
     */
    public java.lang.String getAgentGroup() {
      java.lang.Object ref = agentGroup_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        agentGroup_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Describes where this selector applies to.
     * </pre>
     *
     * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The bytes for agentGroup.
     */
    public com.google.protobuf.ByteString
        getAgentGroupBytes() {
      java.lang.Object ref = agentGroup_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        agentGroup_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Describes where this selector applies to.
     * </pre>
     *
     * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param value The agentGroup to set.
     * @return This builder for chaining.
     */
    public Builder setAgentGroup(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      agentGroup_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes where this selector applies to.
     * </pre>
     *
     * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearAgentGroup() {

      agentGroup_ = getDefaultInstance().getAgentGroup();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes where this selector applies to.
     * </pre>
     *
     * <code>string agent_group = 1 [json_name = "agentGroup", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param value The bytes for agentGroup to set.
     * @return This builder for chaining.
     */
    public Builder setAgentGroupBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      agentGroup_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object service_ = "";
    /**
     * <pre>
     * The service (name) of the entities.
     * In k8s, this is the FQDN of the Service object.
     * Note: Entity may belong to multiple services.
     * </pre>
     *
     * <code>string service = 2 [json_name = "service"];</code>
     * @return The service.
     */
    public java.lang.String getService() {
      java.lang.Object ref = service_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        service_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The service (name) of the entities.
     * In k8s, this is the FQDN of the Service object.
     * Note: Entity may belong to multiple services.
     * </pre>
     *
     * <code>string service = 2 [json_name = "service"];</code>
     * @return The bytes for service.
     */
    public com.google.protobuf.ByteString
        getServiceBytes() {
      java.lang.Object ref = service_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b =
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        service_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The service (name) of the entities.
     * In k8s, this is the FQDN of the Service object.
     * Note: Entity may belong to multiple services.
     * </pre>
     *
     * <code>string service = 2 [json_name = "service"];</code>
     * @param value The service to set.
     * @return This builder for chaining.
     */
    public Builder setService(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }

      service_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The service (name) of the entities.
     * In k8s, this is the FQDN of the Service object.
     * Note: Entity may belong to multiple services.
     * </pre>
     *
     * <code>string service = 2 [json_name = "service"];</code>
     * @return This builder for chaining.
     */
    public Builder clearService() {

      service_ = getDefaultInstance().getService();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The service (name) of the entities.
     * In k8s, this is the FQDN of the Service object.
     * Note: Entity may belong to multiple services.
     * </pre>
     *
     * <code>string service = 2 [json_name = "service"];</code>
     * @param value The bytes for service to set.
     * @return This builder for chaining.
     */
    public Builder setServiceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);

      service_ = value;
      onChanged();
      return this;
    }

    private com.aperture.policy.language.v1.ControlPoint controlPoint_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.ControlPoint, com.aperture.policy.language.v1.ControlPoint.Builder, com.aperture.policy.language.v1.ControlPointOrBuilder> controlPointBuilder_;
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return Whether the controlPoint field is set.
     */
    public boolean hasControlPoint() {
      return controlPointBuilder_ != null || controlPoint_ != null;
    }
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The controlPoint.
     */
    public com.aperture.policy.language.v1.ControlPoint getControlPoint() {
      if (controlPointBuilder_ == null) {
        return controlPoint_ == null ? com.aperture.policy.language.v1.ControlPoint.getDefaultInstance() : controlPoint_;
      } else {
        return controlPointBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setControlPoint(com.aperture.policy.language.v1.ControlPoint value) {
      if (controlPointBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        controlPoint_ = value;
        onChanged();
      } else {
        controlPointBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setControlPoint(
        com.aperture.policy.language.v1.ControlPoint.Builder builderForValue) {
      if (controlPointBuilder_ == null) {
        controlPoint_ = builderForValue.build();
        onChanged();
      } else {
        controlPointBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder mergeControlPoint(com.aperture.policy.language.v1.ControlPoint value) {
      if (controlPointBuilder_ == null) {
        if (controlPoint_ != null) {
          controlPoint_ =
            com.aperture.policy.language.v1.ControlPoint.newBuilder(controlPoint_).mergeFrom(value).buildPartial();
        } else {
          controlPoint_ = value;
        }
        onChanged();
      } else {
        controlPointBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder clearControlPoint() {
      if (controlPointBuilder_ == null) {
        controlPoint_ = null;
        onChanged();
      } else {
        controlPoint_ = null;
        controlPointBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.aperture.policy.language.v1.ControlPoint.Builder getControlPointBuilder() {

      onChanged();
      return getControlPointFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.aperture.policy.language.v1.ControlPointOrBuilder getControlPointOrBuilder() {
      if (controlPointBuilder_ != null) {
        return controlPointBuilder_.getMessageOrBuilder();
      } else {
        return controlPoint_ == null ?
            com.aperture.policy.language.v1.ControlPoint.getDefaultInstance() : controlPoint_;
      }
    }
    /**
     * <pre>
     * Describes control point within the entity where the policy should apply to.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ControlPoint control_point = 3 [json_name = "controlPoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.ControlPoint, com.aperture.policy.language.v1.ControlPoint.Builder, com.aperture.policy.language.v1.ControlPointOrBuilder>
        getControlPointFieldBuilder() {
      if (controlPointBuilder_ == null) {
        controlPointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.ControlPoint, com.aperture.policy.language.v1.ControlPoint.Builder, com.aperture.policy.language.v1.ControlPointOrBuilder>(
                getControlPoint(),
                getParentForChildren(),
                isClean());
        controlPoint_ = null;
      }
      return controlPointBuilder_;
    }

    private com.aperture.policy.language.v1.LabelMatcher labelMatcher_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.LabelMatcher, com.aperture.policy.language.v1.LabelMatcher.Builder, com.aperture.policy.language.v1.LabelMatcherOrBuilder> labelMatcherBuilder_;
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     * @return Whether the labelMatcher field is set.
     */
    public boolean hasLabelMatcher() {
      return labelMatcherBuilder_ != null || labelMatcher_ != null;
    }
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     * @return The labelMatcher.
     */
    public com.aperture.policy.language.v1.LabelMatcher getLabelMatcher() {
      if (labelMatcherBuilder_ == null) {
        return labelMatcher_ == null ? com.aperture.policy.language.v1.LabelMatcher.getDefaultInstance() : labelMatcher_;
      } else {
        return labelMatcherBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     */
    public Builder setLabelMatcher(com.aperture.policy.language.v1.LabelMatcher value) {
      if (labelMatcherBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        labelMatcher_ = value;
        onChanged();
      } else {
        labelMatcherBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     */
    public Builder setLabelMatcher(
        com.aperture.policy.language.v1.LabelMatcher.Builder builderForValue) {
      if (labelMatcherBuilder_ == null) {
        labelMatcher_ = builderForValue.build();
        onChanged();
      } else {
        labelMatcherBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     */
    public Builder mergeLabelMatcher(com.aperture.policy.language.v1.LabelMatcher value) {
      if (labelMatcherBuilder_ == null) {
        if (labelMatcher_ != null) {
          labelMatcher_ =
            com.aperture.policy.language.v1.LabelMatcher.newBuilder(labelMatcher_).mergeFrom(value).buildPartial();
        } else {
          labelMatcher_ = value;
        }
        onChanged();
      } else {
        labelMatcherBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     */
    public Builder clearLabelMatcher() {
      if (labelMatcherBuilder_ == null) {
        labelMatcher_ = null;
        onChanged();
      } else {
        labelMatcher_ = null;
        labelMatcherBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     */
    public com.aperture.policy.language.v1.LabelMatcher.Builder getLabelMatcherBuilder() {

      onChanged();
      return getLabelMatcherFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     */
    public com.aperture.policy.language.v1.LabelMatcherOrBuilder getLabelMatcherOrBuilder() {
      if (labelMatcherBuilder_ != null) {
        return labelMatcherBuilder_.getMessageOrBuilder();
      } else {
        return labelMatcher_ == null ?
            com.aperture.policy.language.v1.LabelMatcher.getDefaultInstance() : labelMatcher_;
      }
    }
    /**
     * <pre>
     * Label matcher allows to add _additional_ condition on labels that must
     * also be satisfied (in addition to service+control point matching)
     * This matcher allows to match on flow labels and request labels.
     * (Note: For classification we can only match flow labels that were created at
     * some **previous** control point).
     * Flow labels are available with the same label key as defined in
     * classification rule.
     * Request labels are always prefixed with `request_`. Available request
     * labels are `id` (available as `request_id`), `method`, `path`, `host`,
     * `scheme`, `size`, `protocol` (mapped from fields of
     * [HttpRequest](https://github.com/envoyproxy/envoy/blob/637a92a56e2739b5f78441c337171968f18b46ee/api/envoy/service/auth/v3/attribute_context.proto#L102)).
     * Also, (non-pseudo) headers are available as `request_header_&lt;headername&gt;`, where
     * `&lt;headername&gt;` is a headername normalised to lowercase, eg. `request_header_user-agent`.
     * Note: Request headers are only available for `traffic` control points.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.LabelMatcher, com.aperture.policy.language.v1.LabelMatcher.Builder, com.aperture.policy.language.v1.LabelMatcherOrBuilder>
        getLabelMatcherFieldBuilder() {
      if (labelMatcherBuilder_ == null) {
        labelMatcherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.LabelMatcher, com.aperture.policy.language.v1.LabelMatcher.Builder, com.aperture.policy.language.v1.LabelMatcherOrBuilder>(
                getLabelMatcher(),
                getParentForChildren(),
                isClean());
        labelMatcher_ = null;
      }
      return labelMatcherBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.Selector)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.Selector)
  private static final com.aperture.policy.language.v1.Selector DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.policy.language.v1.Selector();
  }

  public static com.aperture.policy.language.v1.Selector getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Selector>
      PARSER = new com.google.protobuf.AbstractParser<Selector>() {
    @java.lang.Override
    public Selector parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Selector(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Selector> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Selector> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.policy.language.v1.Selector getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
