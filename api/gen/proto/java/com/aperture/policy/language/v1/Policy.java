// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.aperture.policy.language.v1;

/**
 * <pre>
 * Policy is defined as a dataflow graph (circuit) of inter-connected components.
 * Signals flow between components via ports.
 * As signals traverse the circuit, they get processed, stored within components or get acted upon (e.g. load shed, rate-limit, auto-scale etc.).
 * Policies are evaluated periodically in order to respond to changes in signal readings.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.Policy}
 */
public final class Policy extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.Policy)
    PolicyOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Policy.newBuilder() to construct.
  private Policy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Policy() {
    circuit_ = java.util.Collections.emptyList();
    fluxMeters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Policy();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Policy(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              circuit_ = new java.util.ArrayList<com.aperture.policy.language.v1.Component>();
              mutable_bitField0_ |= 0x00000001;
            }
            circuit_.add(
                input.readMessage(com.aperture.policy.language.v1.Component.parser(), extensionRegistry));
            break;
          }
          case 18: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (evaluationInterval_ != null) {
              subBuilder = evaluationInterval_.toBuilder();
            }
            evaluationInterval_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(evaluationInterval_);
              evaluationInterval_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              fluxMeters_ = new java.util.ArrayList<com.aperture.policy.language.v1.FluxMeter>();
              mutable_bitField0_ |= 0x00000002;
            }
            fluxMeters_.add(
                input.readMessage(com.aperture.policy.language.v1.FluxMeter.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        circuit_ = java.util.Collections.unmodifiableList(circuit_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        fluxMeters_ = java.util.Collections.unmodifiableList(fluxMeters_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.policy.language.v1.Policy.class, com.aperture.policy.language.v1.Policy.Builder.class);
  }

  public static final int CIRCUIT_FIELD_NUMBER = 1;
  private java.util.List<com.aperture.policy.language.v1.Component> circuit_;
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  @java.lang.Override
  public java.util.List<com.aperture.policy.language.v1.Component> getCircuitList() {
    return circuit_;
  }
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.aperture.policy.language.v1.ComponentOrBuilder>
      getCircuitOrBuilderList() {
    return circuit_;
  }
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  @java.lang.Override
  public int getCircuitCount() {
    return circuit_.size();
  }
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Component getCircuit(int index) {
    return circuit_.get(index);
  }
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ComponentOrBuilder getCircuitOrBuilder(
      int index) {
    return circuit_.get(index);
  }

  public static final int EVALUATION_INTERVAL_FIELD_NUMBER = 2;
  private com.google.protobuf.Duration evaluationInterval_;
  /**
   * <pre>
   * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the evaluationInterval field is set.
   */
  @java.lang.Override
  public boolean hasEvaluationInterval() {
    return evaluationInterval_ != null;
  }
  /**
   * <pre>
   * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The evaluationInterval.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getEvaluationInterval() {
    return evaluationInterval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : evaluationInterval_;
  }
  /**
   * <pre>
   * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getEvaluationIntervalOrBuilder() {
    return getEvaluationInterval();
  }

  public static final int FLUX_METERS_FIELD_NUMBER = 3;
  private java.util.List<com.aperture.policy.language.v1.FluxMeter> fluxMeters_;
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public java.util.List<com.aperture.policy.language.v1.FluxMeter> getFluxMetersList() {
    return fluxMeters_;
  }
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.aperture.policy.language.v1.FluxMeterOrBuilder>
      getFluxMetersOrBuilderList() {
    return fluxMeters_;
  }
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public int getFluxMetersCount() {
    return fluxMeters_.size();
  }
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.FluxMeter getFluxMeters(int index) {
    return fluxMeters_.get(index);
  }
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.FluxMeterOrBuilder getFluxMetersOrBuilder(
      int index) {
    return fluxMeters_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < circuit_.size(); i++) {
      output.writeMessage(1, circuit_.get(i));
    }
    if (evaluationInterval_ != null) {
      output.writeMessage(2, getEvaluationInterval());
    }
    for (int i = 0; i < fluxMeters_.size(); i++) {
      output.writeMessage(3, fluxMeters_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < circuit_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, circuit_.get(i));
    }
    if (evaluationInterval_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getEvaluationInterval());
    }
    for (int i = 0; i < fluxMeters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, fluxMeters_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.policy.language.v1.Policy)) {
      return super.equals(obj);
    }
    com.aperture.policy.language.v1.Policy other = (com.aperture.policy.language.v1.Policy) obj;

    if (!getCircuitList()
        .equals(other.getCircuitList())) return false;
    if (hasEvaluationInterval() != other.hasEvaluationInterval()) return false;
    if (hasEvaluationInterval()) {
      if (!getEvaluationInterval()
          .equals(other.getEvaluationInterval())) return false;
    }
    if (!getFluxMetersList()
        .equals(other.getFluxMetersList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getCircuitCount() > 0) {
      hash = (37 * hash) + CIRCUIT_FIELD_NUMBER;
      hash = (53 * hash) + getCircuitList().hashCode();
    }
    if (hasEvaluationInterval()) {
      hash = (37 * hash) + EVALUATION_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getEvaluationInterval().hashCode();
    }
    if (getFluxMetersCount() > 0) {
      hash = (37 * hash) + FLUX_METERS_FIELD_NUMBER;
      hash = (53 * hash) + getFluxMetersList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.policy.language.v1.Policy parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Policy parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Policy parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Policy parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.policy.language.v1.Policy prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Policy is defined as a dataflow graph (circuit) of inter-connected components.
   * Signals flow between components via ports.
   * As signals traverse the circuit, they get processed, stored within components or get acted upon (e.g. load shed, rate-limit, auto-scale etc.).
   * Policies are evaluated periodically in order to respond to changes in signal readings.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.Policy}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.Policy)
      com.aperture.policy.language.v1.PolicyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.policy.language.v1.Policy.class, com.aperture.policy.language.v1.Policy.Builder.class);
    }

    // Construct using com.aperture.policy.language.v1.Policy.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getCircuitFieldBuilder();
        getFluxMetersFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (circuitBuilder_ == null) {
        circuit_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        circuitBuilder_.clear();
      }
      if (evaluationIntervalBuilder_ == null) {
        evaluationInterval_ = null;
      } else {
        evaluationInterval_ = null;
        evaluationIntervalBuilder_ = null;
      }
      if (fluxMetersBuilder_ == null) {
        fluxMeters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        fluxMetersBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_descriptor;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Policy getDefaultInstanceForType() {
      return com.aperture.policy.language.v1.Policy.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Policy build() {
      com.aperture.policy.language.v1.Policy result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Policy buildPartial() {
      com.aperture.policy.language.v1.Policy result = new com.aperture.policy.language.v1.Policy(this);
      int from_bitField0_ = bitField0_;
      if (circuitBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          circuit_ = java.util.Collections.unmodifiableList(circuit_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.circuit_ = circuit_;
      } else {
        result.circuit_ = circuitBuilder_.build();
      }
      if (evaluationIntervalBuilder_ == null) {
        result.evaluationInterval_ = evaluationInterval_;
      } else {
        result.evaluationInterval_ = evaluationIntervalBuilder_.build();
      }
      if (fluxMetersBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          fluxMeters_ = java.util.Collections.unmodifiableList(fluxMeters_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.fluxMeters_ = fluxMeters_;
      } else {
        result.fluxMeters_ = fluxMetersBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.policy.language.v1.Policy) {
        return mergeFrom((com.aperture.policy.language.v1.Policy)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.policy.language.v1.Policy other) {
      if (other == com.aperture.policy.language.v1.Policy.getDefaultInstance()) return this;
      if (circuitBuilder_ == null) {
        if (!other.circuit_.isEmpty()) {
          if (circuit_.isEmpty()) {
            circuit_ = other.circuit_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCircuitIsMutable();
            circuit_.addAll(other.circuit_);
          }
          onChanged();
        }
      } else {
        if (!other.circuit_.isEmpty()) {
          if (circuitBuilder_.isEmpty()) {
            circuitBuilder_.dispose();
            circuitBuilder_ = null;
            circuit_ = other.circuit_;
            bitField0_ = (bitField0_ & ~0x00000001);
            circuitBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCircuitFieldBuilder() : null;
          } else {
            circuitBuilder_.addAllMessages(other.circuit_);
          }
        }
      }
      if (other.hasEvaluationInterval()) {
        mergeEvaluationInterval(other.getEvaluationInterval());
      }
      if (fluxMetersBuilder_ == null) {
        if (!other.fluxMeters_.isEmpty()) {
          if (fluxMeters_.isEmpty()) {
            fluxMeters_ = other.fluxMeters_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureFluxMetersIsMutable();
            fluxMeters_.addAll(other.fluxMeters_);
          }
          onChanged();
        }
      } else {
        if (!other.fluxMeters_.isEmpty()) {
          if (fluxMetersBuilder_.isEmpty()) {
            fluxMetersBuilder_.dispose();
            fluxMetersBuilder_ = null;
            fluxMeters_ = other.fluxMeters_;
            bitField0_ = (bitField0_ & ~0x00000002);
            fluxMetersBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFluxMetersFieldBuilder() : null;
          } else {
            fluxMetersBuilder_.addAllMessages(other.fluxMeters_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.policy.language.v1.Policy parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.policy.language.v1.Policy) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.aperture.policy.language.v1.Component> circuit_ =
      java.util.Collections.emptyList();
    private void ensureCircuitIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        circuit_ = new java.util.ArrayList<com.aperture.policy.language.v1.Component>(circuit_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.policy.language.v1.Component, com.aperture.policy.language.v1.Component.Builder, com.aperture.policy.language.v1.ComponentOrBuilder> circuitBuilder_;

    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public java.util.List<com.aperture.policy.language.v1.Component> getCircuitList() {
      if (circuitBuilder_ == null) {
        return java.util.Collections.unmodifiableList(circuit_);
      } else {
        return circuitBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public int getCircuitCount() {
      if (circuitBuilder_ == null) {
        return circuit_.size();
      } else {
        return circuitBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public com.aperture.policy.language.v1.Component getCircuit(int index) {
      if (circuitBuilder_ == null) {
        return circuit_.get(index);
      } else {
        return circuitBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder setCircuit(
        int index, com.aperture.policy.language.v1.Component value) {
      if (circuitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCircuitIsMutable();
        circuit_.set(index, value);
        onChanged();
      } else {
        circuitBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder setCircuit(
        int index, com.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (circuitBuilder_ == null) {
        ensureCircuitIsMutable();
        circuit_.set(index, builderForValue.build());
        onChanged();
      } else {
        circuitBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder addCircuit(com.aperture.policy.language.v1.Component value) {
      if (circuitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCircuitIsMutable();
        circuit_.add(value);
        onChanged();
      } else {
        circuitBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder addCircuit(
        int index, com.aperture.policy.language.v1.Component value) {
      if (circuitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCircuitIsMutable();
        circuit_.add(index, value);
        onChanged();
      } else {
        circuitBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder addCircuit(
        com.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (circuitBuilder_ == null) {
        ensureCircuitIsMutable();
        circuit_.add(builderForValue.build());
        onChanged();
      } else {
        circuitBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder addCircuit(
        int index, com.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (circuitBuilder_ == null) {
        ensureCircuitIsMutable();
        circuit_.add(index, builderForValue.build());
        onChanged();
      } else {
        circuitBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder addAllCircuit(
        java.lang.Iterable<? extends com.aperture.policy.language.v1.Component> values) {
      if (circuitBuilder_ == null) {
        ensureCircuitIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, circuit_);
        onChanged();
      } else {
        circuitBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder clearCircuit() {
      if (circuitBuilder_ == null) {
        circuit_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        circuitBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder removeCircuit(int index) {
      if (circuitBuilder_ == null) {
        ensureCircuitIsMutable();
        circuit_.remove(index);
        onChanged();
      } else {
        circuitBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public com.aperture.policy.language.v1.Component.Builder getCircuitBuilder(
        int index) {
      return getCircuitFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public com.aperture.policy.language.v1.ComponentOrBuilder getCircuitOrBuilder(
        int index) {
      if (circuitBuilder_ == null) {
        return circuit_.get(index);  } else {
        return circuitBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public java.util.List<? extends com.aperture.policy.language.v1.ComponentOrBuilder>
         getCircuitOrBuilderList() {
      if (circuitBuilder_ != null) {
        return circuitBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(circuit_);
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public com.aperture.policy.language.v1.Component.Builder addCircuitBuilder() {
      return getCircuitFieldBuilder().addBuilder(
          com.aperture.policy.language.v1.Component.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public com.aperture.policy.language.v1.Component.Builder addCircuitBuilder(
        int index) {
      return getCircuitFieldBuilder().addBuilder(
          index, com.aperture.policy.language.v1.Component.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
     */
    public java.util.List<com.aperture.policy.language.v1.Component.Builder>
         getCircuitBuilderList() {
      return getCircuitFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.policy.language.v1.Component, com.aperture.policy.language.v1.Component.Builder, com.aperture.policy.language.v1.ComponentOrBuilder>
        getCircuitFieldBuilder() {
      if (circuitBuilder_ == null) {
        circuitBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.aperture.policy.language.v1.Component, com.aperture.policy.language.v1.Component.Builder, com.aperture.policy.language.v1.ComponentOrBuilder>(
                circuit_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        circuit_ = null;
      }
      return circuitBuilder_;
    }

    private com.google.protobuf.Duration evaluationInterval_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> evaluationIntervalBuilder_;
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return Whether the evaluationInterval field is set.
     */
    public boolean hasEvaluationInterval() {
      return evaluationIntervalBuilder_ != null || evaluationInterval_ != null;
    }
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The evaluationInterval.
     */
    public com.google.protobuf.Duration getEvaluationInterval() {
      if (evaluationIntervalBuilder_ == null) {
        return evaluationInterval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : evaluationInterval_;
      } else {
        return evaluationIntervalBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setEvaluationInterval(com.google.protobuf.Duration value) {
      if (evaluationIntervalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        evaluationInterval_ = value;
        onChanged();
      } else {
        evaluationIntervalBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setEvaluationInterval(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (evaluationIntervalBuilder_ == null) {
        evaluationInterval_ = builderForValue.build();
        onChanged();
      } else {
        evaluationIntervalBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder mergeEvaluationInterval(com.google.protobuf.Duration value) {
      if (evaluationIntervalBuilder_ == null) {
        if (evaluationInterval_ != null) {
          evaluationInterval_ =
            com.google.protobuf.Duration.newBuilder(evaluationInterval_).mergeFrom(value).buildPartial();
        } else {
          evaluationInterval_ = value;
        }
        onChanged();
      } else {
        evaluationIntervalBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder clearEvaluationInterval() {
      if (evaluationIntervalBuilder_ == null) {
        evaluationInterval_ = null;
        onChanged();
      } else {
        evaluationInterval_ = null;
        evaluationIntervalBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getEvaluationIntervalBuilder() {

      onChanged();
      return getEvaluationIntervalFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getEvaluationIntervalOrBuilder() {
      if (evaluationIntervalBuilder_ != null) {
        return evaluationIntervalBuilder_.getMessageOrBuilder();
      } else {
        return evaluationInterval_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : evaluationInterval_;
      }
    }
    /**
     * <pre>
     * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>
        getEvaluationIntervalFieldBuilder() {
      if (evaluationIntervalBuilder_ == null) {
        evaluationIntervalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getEvaluationInterval(),
                getParentForChildren(),
                isClean());
        evaluationInterval_ = null;
      }
      return evaluationIntervalBuilder_;
    }

    private java.util.List<com.aperture.policy.language.v1.FluxMeter> fluxMeters_ =
      java.util.Collections.emptyList();
    private void ensureFluxMetersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        fluxMeters_ = new java.util.ArrayList<com.aperture.policy.language.v1.FluxMeter>(fluxMeters_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.policy.language.v1.FluxMeter, com.aperture.policy.language.v1.FluxMeter.Builder, com.aperture.policy.language.v1.FluxMeterOrBuilder> fluxMetersBuilder_;

    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public java.util.List<com.aperture.policy.language.v1.FluxMeter> getFluxMetersList() {
      if (fluxMetersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(fluxMeters_);
      } else {
        return fluxMetersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public int getFluxMetersCount() {
      if (fluxMetersBuilder_ == null) {
        return fluxMeters_.size();
      } else {
        return fluxMetersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.policy.language.v1.FluxMeter getFluxMeters(int index) {
      if (fluxMetersBuilder_ == null) {
        return fluxMeters_.get(index);
      } else {
        return fluxMetersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder setFluxMeters(
        int index, com.aperture.policy.language.v1.FluxMeter value) {
      if (fluxMetersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMetersIsMutable();
        fluxMeters_.set(index, value);
        onChanged();
      } else {
        fluxMetersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder setFluxMeters(
        int index, com.aperture.policy.language.v1.FluxMeter.Builder builderForValue) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        fluxMeters_.set(index, builderForValue.build());
        onChanged();
      } else {
        fluxMetersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder addFluxMeters(com.aperture.policy.language.v1.FluxMeter value) {
      if (fluxMetersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMetersIsMutable();
        fluxMeters_.add(value);
        onChanged();
      } else {
        fluxMetersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder addFluxMeters(
        int index, com.aperture.policy.language.v1.FluxMeter value) {
      if (fluxMetersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMetersIsMutable();
        fluxMeters_.add(index, value);
        onChanged();
      } else {
        fluxMetersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder addFluxMeters(
        com.aperture.policy.language.v1.FluxMeter.Builder builderForValue) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        fluxMeters_.add(builderForValue.build());
        onChanged();
      } else {
        fluxMetersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder addFluxMeters(
        int index, com.aperture.policy.language.v1.FluxMeter.Builder builderForValue) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        fluxMeters_.add(index, builderForValue.build());
        onChanged();
      } else {
        fluxMetersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder addAllFluxMeters(
        java.lang.Iterable<? extends com.aperture.policy.language.v1.FluxMeter> values) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fluxMeters_);
        onChanged();
      } else {
        fluxMetersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder clearFluxMeters() {
      if (fluxMetersBuilder_ == null) {
        fluxMeters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        fluxMetersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public Builder removeFluxMeters(int index) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        fluxMeters_.remove(index);
        onChanged();
      } else {
        fluxMetersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.policy.language.v1.FluxMeter.Builder getFluxMetersBuilder(
        int index) {
      return getFluxMetersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.policy.language.v1.FluxMeterOrBuilder getFluxMetersOrBuilder(
        int index) {
      if (fluxMetersBuilder_ == null) {
        return fluxMeters_.get(index);  } else {
        return fluxMetersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public java.util.List<? extends com.aperture.policy.language.v1.FluxMeterOrBuilder>
         getFluxMetersOrBuilderList() {
      if (fluxMetersBuilder_ != null) {
        return fluxMetersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(fluxMeters_);
      }
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.policy.language.v1.FluxMeter.Builder addFluxMetersBuilder() {
      return getFluxMetersFieldBuilder().addBuilder(
          com.aperture.policy.language.v1.FluxMeter.getDefaultInstance());
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.policy.language.v1.FluxMeter.Builder addFluxMetersBuilder(
        int index) {
      return getFluxMetersFieldBuilder().addBuilder(
          index, com.aperture.policy.language.v1.FluxMeter.getDefaultInstance());
    }
    /**
     * <pre>
     * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
     */
    public java.util.List<com.aperture.policy.language.v1.FluxMeter.Builder>
         getFluxMetersBuilderList() {
      return getFluxMetersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.policy.language.v1.FluxMeter, com.aperture.policy.language.v1.FluxMeter.Builder, com.aperture.policy.language.v1.FluxMeterOrBuilder>
        getFluxMetersFieldBuilder() {
      if (fluxMetersBuilder_ == null) {
        fluxMetersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.aperture.policy.language.v1.FluxMeter, com.aperture.policy.language.v1.FluxMeter.Builder, com.aperture.policy.language.v1.FluxMeterOrBuilder>(
                fluxMeters_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        fluxMeters_ = null;
      }
      return fluxMetersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.Policy)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.Policy)
  private static final com.aperture.policy.language.v1.Policy DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.policy.language.v1.Policy();
  }

  public static com.aperture.policy.language.v1.Policy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Policy>
      PARSER = new com.google.protobuf.AbstractParser<Policy>() {
    @java.lang.Override
    public Policy parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Policy(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Policy> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Policy> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.policy.language.v1.Policy getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
