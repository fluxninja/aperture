// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/labelmatcher.proto

package com.aperture.policy.language.v1;

public interface LabelMatcherOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.LabelMatcher)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */
  int getMatchLabelsCount();
  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */
  boolean containsMatchLabels(
      java.lang.String key);
  /**
   * Use {@link #getMatchLabelsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getMatchLabels();
  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getMatchLabelsMap();
  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */

  /* nullable */
java.lang.String getMatchLabelsOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * A map of {key,value} pairs representing labels to be matched.
   * A single {key,value} in the matchLabels requires that the label "key" is present and equal to "value".
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>map&lt;string, string&gt; match_labels = 1 [json_name = "matchLabels"];</code>
   */

  java.lang.String getMatchLabelsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  java.util.List<com.aperture.policy.language.v1.K8sLabelMatcherRequirement>
      getMatchExpressionsList();
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  com.aperture.policy.language.v1.K8sLabelMatcherRequirement getMatchExpressions(int index);
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  int getMatchExpressionsCount();
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  java.util.List<? extends com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder>
      getMatchExpressionsOrBuilderList();
  /**
   * <pre>
   * List of k8s-style label matcher requirements.
   * Note: The requirements are ANDed.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.K8sLabelMatcherRequirement match_expressions = 2 [json_name = "matchExpressions"];</code>
   */
  com.aperture.policy.language.v1.K8sLabelMatcherRequirementOrBuilder getMatchExpressionsOrBuilder(
      int index);

  /**
   * <pre>
   * An arbitrary expression to be evaluated on the labels.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
   * @return Whether the expression field is set.
   */
  boolean hasExpression();
  /**
   * <pre>
   * An arbitrary expression to be evaluated on the labels.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
   * @return The expression.
   */
  com.aperture.policy.language.v1.MatchExpression getExpression();
  /**
   * <pre>
   * An arbitrary expression to be evaluated on the labels.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression expression = 3 [json_name = "expression"];</code>
   */
  com.aperture.policy.language.v1.MatchExpressionOrBuilder getExpressionOrBuilder();
}
