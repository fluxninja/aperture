// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.aperture.policy.language.v1;

public interface SchedulerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.Scheduler)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Output ports for the Scheduler component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Outs out_ports = 1 [json_name = "outPorts"];</code>
   * @return Whether the outPorts field is set.
   */
  boolean hasOutPorts();
  /**
   * <pre>
   * Output ports for the Scheduler component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Outs out_ports = 1 [json_name = "outPorts"];</code>
   * @return The outPorts.
   */
  com.aperture.policy.language.v1.Scheduler.Outs getOutPorts();
  /**
   * <pre>
   * Output ports for the Scheduler component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Outs out_ports = 1 [json_name = "outPorts"];</code>
   */
  com.aperture.policy.language.v1.Scheduler.OutsOrBuilder getOutPortsOrBuilder();

  /**
   * <pre>
   * Selector decides for which service or flows the scheduler will be applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 2 [json_name = "selector"];</code>
   * @return Whether the selector field is set.
   */
  boolean hasSelector();
  /**
   * <pre>
   * Selector decides for which service or flows the scheduler will be applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 2 [json_name = "selector"];</code>
   * @return The selector.
   */
  com.aperture.policy.language.v1.Selector getSelector();
  /**
   * <pre>
   * Selector decides for which service or flows the scheduler will be applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 2 [json_name = "selector"];</code>
   */
  com.aperture.policy.language.v1.SelectorOrBuilder getSelectorOrBuilder();

  /**
   * <pre>
   * &#64;gotags: default:"true"
   * </pre>
   *
   * <code>bool auto_tokens = 3 [json_name = "autoTokens", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The autoTokens.
   */
  boolean getAutoTokens();

  /**
   * <code>.aperture.policy.language.v1.Scheduler.Workload default_workload = 4 [json_name = "defaultWorkload"];</code>
   * @return Whether the defaultWorkload field is set.
   */
  boolean hasDefaultWorkload();
  /**
   * <code>.aperture.policy.language.v1.Scheduler.Workload default_workload = 4 [json_name = "defaultWorkload"];</code>
   * @return The defaultWorkload.
   */
  com.aperture.policy.language.v1.Scheduler.Workload getDefaultWorkload();
  /**
   * <code>.aperture.policy.language.v1.Scheduler.Workload default_workload = 4 [json_name = "defaultWorkload"];</code>
   */
  com.aperture.policy.language.v1.Scheduler.WorkloadOrBuilder getDefaultWorkloadOrBuilder();

  /**
   * <pre>
   * list of workloads
   * workload can describe priority, tokens (if auto_tokens are set to false) and timeout
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcher workloads = 5 [json_name = "workloads"];</code>
   */
  java.util.List<com.aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcher>
      getWorkloadsList();
  /**
   * <pre>
   * list of workloads
   * workload can describe priority, tokens (if auto_tokens are set to false) and timeout
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcher workloads = 5 [json_name = "workloads"];</code>
   */
  com.aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcher getWorkloads(int index);
  /**
   * <pre>
   * list of workloads
   * workload can describe priority, tokens (if auto_tokens are set to false) and timeout
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcher workloads = 5 [json_name = "workloads"];</code>
   */
  int getWorkloadsCount();
  /**
   * <pre>
   * list of workloads
   * workload can describe priority, tokens (if auto_tokens are set to false) and timeout
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcher workloads = 5 [json_name = "workloads"];</code>
   */
  java.util.List<? extends com.aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcherOrBuilder>
      getWorkloadsOrBuilderList();
  /**
   * <pre>
   * list of workloads
   * workload can describe priority, tokens (if auto_tokens are set to false) and timeout
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcher workloads = 5 [json_name = "workloads"];</code>
   */
  com.aperture.policy.language.v1.Scheduler.WorkloadAndLabelMatcherOrBuilder getWorkloadsOrBuilder(
      int index);
}
