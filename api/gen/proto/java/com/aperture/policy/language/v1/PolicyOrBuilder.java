// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.aperture.policy.language.v1;

public interface PolicyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.Policy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  java.util.List<com.aperture.policy.language.v1.Component>
      getCircuitList();
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  com.aperture.policy.language.v1.Component getCircuit(int index);
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  int getCircuitCount();
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  java.util.List<? extends com.aperture.policy.language.v1.ComponentOrBuilder>
      getCircuitOrBuilderList();
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component circuit = 1 [json_name = "circuit"];</code>
   */
  com.aperture.policy.language.v1.ComponentOrBuilder getCircuitOrBuilder(
      int index);

  /**
   * <pre>
   * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the evaluationInterval field is set.
   */
  boolean hasEvaluationInterval();
  /**
   * <pre>
   * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The evaluationInterval.
   */
  com.google.protobuf.Duration getEvaluationInterval();
  /**
   * <pre>
   * Evaluation interval (ticks) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 2 [json_name = "evaluationInterval", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  com.google.protobuf.DurationOrBuilder getEvaluationIntervalOrBuilder();

  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  java.util.List<com.aperture.policy.language.v1.FluxMeter>
      getFluxMetersList();
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  com.aperture.policy.language.v1.FluxMeter getFluxMeters(int index);
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  int getFluxMetersCount();
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  java.util.List<? extends com.aperture.policy.language.v1.FluxMeterOrBuilder>
      getFluxMetersOrBuilderList();
  /**
   * <pre>
   * FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.FluxMeter flux_meters = 3 [json_name = "fluxMeters"];</code>
   */
  com.aperture.policy.language.v1.FluxMeterOrBuilder getFluxMetersOrBuilder(
      int index);
}
