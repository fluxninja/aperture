// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.aperture.policy.language.v1;

/**
 * <pre>
 * Exponential Moving Average (EMA) is a type of moving average that applies exponenially more weight to recent signal readings.
 * At any time EMA component operates in one of the following states:
 * 1. Warm up state: The first warm_up_window samples are used to compute the initial EMA.
 * If an invalid reading is received during the warm_up_window, the last good average is emitted and the state gets reset back to beginning of Warm up state.
 * 2. Normal state: The EMA is computed using following formula.
 * If an invalid reading is received continuously for ema_window during the EMA stage, the last good EMA is emitted and the state gets reset back to Warm up state.
 * The EMA for a series Y is calculated recursively as:
 * EMAt = Y0 , t = 0
 * EMAt = alpha &#92;* Yt + (1 - alpha) &#92;* EMAt-1 , t &gt; 0
 * The coefficient alpha represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
 * A higher alpha discounts older observations faster.
 * The alpha is computed using ema_window: alpha = 2 / (N + 1). Where, N = ema_window / evalutation_period.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.EMA}
 */
public final class EMA extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.EMA)
    EMAOrBuilder {
private static final long serialVersionUID = 0L;
  // Use EMA.newBuilder() to construct.
  private EMA(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private EMA() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new EMA();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private EMA(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.aperture.policy.language.v1.EMA.Ins.Builder subBuilder = null;
            if (inPorts_ != null) {
              subBuilder = inPorts_.toBuilder();
            }
            inPorts_ = input.readMessage(com.aperture.policy.language.v1.EMA.Ins.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(inPorts_);
              inPorts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.aperture.policy.language.v1.EMA.Outs.Builder subBuilder = null;
            if (outPorts_ != null) {
              subBuilder = outPorts_.toBuilder();
            }
            outPorts_ = input.readMessage(com.aperture.policy.language.v1.EMA.Outs.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(outPorts_);
              outPorts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (emaWindow_ != null) {
              subBuilder = emaWindow_.toBuilder();
            }
            emaWindow_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(emaWindow_);
              emaWindow_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (warmUpWindow_ != null) {
              subBuilder = warmUpWindow_.toBuilder();
            }
            warmUpWindow_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(warmUpWindow_);
              warmUpWindow_ = subBuilder.buildPartial();
            }

            break;
          }
          case 41: {

            correctionFactorOnMinEnvelopeViolation_ = input.readDouble();
            break;
          }
          case 49: {

            correctionFactorOnMaxEnvelopeViolation_ = input.readDouble();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.policy.language.v1.EMA.class, com.aperture.policy.language.v1.EMA.Builder.class);
  }

  public interface InsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.EMA.Ins)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Input signal to be used for the EMA computation.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
     * @return Whether the input field is set.
     */
    boolean hasInput();
    /**
     * <pre>
     * Input signal to be used for the EMA computation.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
     * @return The input.
     */
    com.aperture.policy.language.v1.Port getInput();
    /**
     * <pre>
     * Input signal to be used for the EMA computation.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
     */
    com.aperture.policy.language.v1.PortOrBuilder getInputOrBuilder();

    /**
     * <pre>
     * Upper bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
     * @return Whether the maxEnvelope field is set.
     */
    boolean hasMaxEnvelope();
    /**
     * <pre>
     * Upper bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
     * @return The maxEnvelope.
     */
    com.aperture.policy.language.v1.Port getMaxEnvelope();
    /**
     * <pre>
     * Upper bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
     */
    com.aperture.policy.language.v1.PortOrBuilder getMaxEnvelopeOrBuilder();

    /**
     * <pre>
     * Lower bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
     * @return Whether the minEnvelope field is set.
     */
    boolean hasMinEnvelope();
    /**
     * <pre>
     * Lower bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
     * @return The minEnvelope.
     */
    com.aperture.policy.language.v1.Port getMinEnvelope();
    /**
     * <pre>
     * Lower bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
     */
    com.aperture.policy.language.v1.PortOrBuilder getMinEnvelopeOrBuilder();
  }
  /**
   * <pre>
   * Inputs for the EMA component.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.EMA.Ins}
   */
  public static final class Ins extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.EMA.Ins)
      InsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Ins.newBuilder() to construct.
    private Ins(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Ins() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Ins();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Ins(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.aperture.policy.language.v1.Port.Builder subBuilder = null;
              if (input_ != null) {
                subBuilder = input_.toBuilder();
              }
              input_ = input.readMessage(com.aperture.policy.language.v1.Port.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(input_);
                input_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.aperture.policy.language.v1.Port.Builder subBuilder = null;
              if (maxEnvelope_ != null) {
                subBuilder = maxEnvelope_.toBuilder();
              }
              maxEnvelope_ = input.readMessage(com.aperture.policy.language.v1.Port.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(maxEnvelope_);
                maxEnvelope_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.aperture.policy.language.v1.Port.Builder subBuilder = null;
              if (minEnvelope_ != null) {
                subBuilder = minEnvelope_.toBuilder();
              }
              minEnvelope_ = input.readMessage(com.aperture.policy.language.v1.Port.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minEnvelope_);
                minEnvelope_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Ins_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Ins_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.policy.language.v1.EMA.Ins.class, com.aperture.policy.language.v1.EMA.Ins.Builder.class);
    }

    public static final int INPUT_FIELD_NUMBER = 1;
    private com.aperture.policy.language.v1.Port input_;
    /**
     * <pre>
     * Input signal to be used for the EMA computation.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
     * @return Whether the input field is set.
     */
    @java.lang.Override
    public boolean hasInput() {
      return input_ != null;
    }
    /**
     * <pre>
     * Input signal to be used for the EMA computation.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
     * @return The input.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Port getInput() {
      return input_ == null ? com.aperture.policy.language.v1.Port.getDefaultInstance() : input_;
    }
    /**
     * <pre>
     * Input signal to be used for the EMA computation.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.PortOrBuilder getInputOrBuilder() {
      return getInput();
    }

    public static final int MAX_ENVELOPE_FIELD_NUMBER = 2;
    private com.aperture.policy.language.v1.Port maxEnvelope_;
    /**
     * <pre>
     * Upper bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
     * @return Whether the maxEnvelope field is set.
     */
    @java.lang.Override
    public boolean hasMaxEnvelope() {
      return maxEnvelope_ != null;
    }
    /**
     * <pre>
     * Upper bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
     * @return The maxEnvelope.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Port getMaxEnvelope() {
      return maxEnvelope_ == null ? com.aperture.policy.language.v1.Port.getDefaultInstance() : maxEnvelope_;
    }
    /**
     * <pre>
     * Upper bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.PortOrBuilder getMaxEnvelopeOrBuilder() {
      return getMaxEnvelope();
    }

    public static final int MIN_ENVELOPE_FIELD_NUMBER = 3;
    private com.aperture.policy.language.v1.Port minEnvelope_;
    /**
     * <pre>
     * Lower bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
     * @return Whether the minEnvelope field is set.
     */
    @java.lang.Override
    public boolean hasMinEnvelope() {
      return minEnvelope_ != null;
    }
    /**
     * <pre>
     * Lower bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
     * @return The minEnvelope.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Port getMinEnvelope() {
      return minEnvelope_ == null ? com.aperture.policy.language.v1.Port.getDefaultInstance() : minEnvelope_;
    }
    /**
     * <pre>
     * Lower bound of the moving average.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.PortOrBuilder getMinEnvelopeOrBuilder() {
      return getMinEnvelope();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (input_ != null) {
        output.writeMessage(1, getInput());
      }
      if (maxEnvelope_ != null) {
        output.writeMessage(2, getMaxEnvelope());
      }
      if (minEnvelope_ != null) {
        output.writeMessage(3, getMinEnvelope());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (input_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getInput());
      }
      if (maxEnvelope_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMaxEnvelope());
      }
      if (minEnvelope_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getMinEnvelope());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.aperture.policy.language.v1.EMA.Ins)) {
        return super.equals(obj);
      }
      com.aperture.policy.language.v1.EMA.Ins other = (com.aperture.policy.language.v1.EMA.Ins) obj;

      if (hasInput() != other.hasInput()) return false;
      if (hasInput()) {
        if (!getInput()
            .equals(other.getInput())) return false;
      }
      if (hasMaxEnvelope() != other.hasMaxEnvelope()) return false;
      if (hasMaxEnvelope()) {
        if (!getMaxEnvelope()
            .equals(other.getMaxEnvelope())) return false;
      }
      if (hasMinEnvelope() != other.hasMinEnvelope()) return false;
      if (hasMinEnvelope()) {
        if (!getMinEnvelope()
            .equals(other.getMinEnvelope())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInput()) {
        hash = (37 * hash) + INPUT_FIELD_NUMBER;
        hash = (53 * hash) + getInput().hashCode();
      }
      if (hasMaxEnvelope()) {
        hash = (37 * hash) + MAX_ENVELOPE_FIELD_NUMBER;
        hash = (53 * hash) + getMaxEnvelope().hashCode();
      }
      if (hasMinEnvelope()) {
        hash = (37 * hash) + MIN_ENVELOPE_FIELD_NUMBER;
        hash = (53 * hash) + getMinEnvelope().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.aperture.policy.language.v1.EMA.Ins parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.aperture.policy.language.v1.EMA.Ins prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Inputs for the EMA component.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.EMA.Ins}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.EMA.Ins)
        com.aperture.policy.language.v1.EMA.InsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Ins_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Ins_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.aperture.policy.language.v1.EMA.Ins.class, com.aperture.policy.language.v1.EMA.Ins.Builder.class);
      }

      // Construct using com.aperture.policy.language.v1.EMA.Ins.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (inputBuilder_ == null) {
          input_ = null;
        } else {
          input_ = null;
          inputBuilder_ = null;
        }
        if (maxEnvelopeBuilder_ == null) {
          maxEnvelope_ = null;
        } else {
          maxEnvelope_ = null;
          maxEnvelopeBuilder_ = null;
        }
        if (minEnvelopeBuilder_ == null) {
          minEnvelope_ = null;
        } else {
          minEnvelope_ = null;
          minEnvelopeBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Ins_descriptor;
      }

      @java.lang.Override
      public com.aperture.policy.language.v1.EMA.Ins getDefaultInstanceForType() {
        return com.aperture.policy.language.v1.EMA.Ins.getDefaultInstance();
      }

      @java.lang.Override
      public com.aperture.policy.language.v1.EMA.Ins build() {
        com.aperture.policy.language.v1.EMA.Ins result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.aperture.policy.language.v1.EMA.Ins buildPartial() {
        com.aperture.policy.language.v1.EMA.Ins result = new com.aperture.policy.language.v1.EMA.Ins(this);
        if (inputBuilder_ == null) {
          result.input_ = input_;
        } else {
          result.input_ = inputBuilder_.build();
        }
        if (maxEnvelopeBuilder_ == null) {
          result.maxEnvelope_ = maxEnvelope_;
        } else {
          result.maxEnvelope_ = maxEnvelopeBuilder_.build();
        }
        if (minEnvelopeBuilder_ == null) {
          result.minEnvelope_ = minEnvelope_;
        } else {
          result.minEnvelope_ = minEnvelopeBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.aperture.policy.language.v1.EMA.Ins) {
          return mergeFrom((com.aperture.policy.language.v1.EMA.Ins)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.aperture.policy.language.v1.EMA.Ins other) {
        if (other == com.aperture.policy.language.v1.EMA.Ins.getDefaultInstance()) return this;
        if (other.hasInput()) {
          mergeInput(other.getInput());
        }
        if (other.hasMaxEnvelope()) {
          mergeMaxEnvelope(other.getMaxEnvelope());
        }
        if (other.hasMinEnvelope()) {
          mergeMinEnvelope(other.getMinEnvelope());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.aperture.policy.language.v1.EMA.Ins parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.aperture.policy.language.v1.EMA.Ins) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.aperture.policy.language.v1.Port input_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder> inputBuilder_;
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       * @return Whether the input field is set.
       */
      public boolean hasInput() {
        return inputBuilder_ != null || input_ != null;
      }
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       * @return The input.
       */
      public com.aperture.policy.language.v1.Port getInput() {
        if (inputBuilder_ == null) {
          return input_ == null ? com.aperture.policy.language.v1.Port.getDefaultInstance() : input_;
        } else {
          return inputBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       */
      public Builder setInput(com.aperture.policy.language.v1.Port value) {
        if (inputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          input_ = value;
          onChanged();
        } else {
          inputBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       */
      public Builder setInput(
          com.aperture.policy.language.v1.Port.Builder builderForValue) {
        if (inputBuilder_ == null) {
          input_ = builderForValue.build();
          onChanged();
        } else {
          inputBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       */
      public Builder mergeInput(com.aperture.policy.language.v1.Port value) {
        if (inputBuilder_ == null) {
          if (input_ != null) {
            input_ =
              com.aperture.policy.language.v1.Port.newBuilder(input_).mergeFrom(value).buildPartial();
          } else {
            input_ = value;
          }
          onChanged();
        } else {
          inputBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       */
      public Builder clearInput() {
        if (inputBuilder_ == null) {
          input_ = null;
          onChanged();
        } else {
          input_ = null;
          inputBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       */
      public com.aperture.policy.language.v1.Port.Builder getInputBuilder() {

        onChanged();
        return getInputFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       */
      public com.aperture.policy.language.v1.PortOrBuilder getInputOrBuilder() {
        if (inputBuilder_ != null) {
          return inputBuilder_.getMessageOrBuilder();
        } else {
          return input_ == null ?
              com.aperture.policy.language.v1.Port.getDefaultInstance() : input_;
        }
      }
      /**
       * <pre>
       * Input signal to be used for the EMA computation.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port input = 1 [json_name = "input"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder>
          getInputFieldBuilder() {
        if (inputBuilder_ == null) {
          inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder>(
                  getInput(),
                  getParentForChildren(),
                  isClean());
          input_ = null;
        }
        return inputBuilder_;
      }

      private com.aperture.policy.language.v1.Port maxEnvelope_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder> maxEnvelopeBuilder_;
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       * @return Whether the maxEnvelope field is set.
       */
      public boolean hasMaxEnvelope() {
        return maxEnvelopeBuilder_ != null || maxEnvelope_ != null;
      }
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       * @return The maxEnvelope.
       */
      public com.aperture.policy.language.v1.Port getMaxEnvelope() {
        if (maxEnvelopeBuilder_ == null) {
          return maxEnvelope_ == null ? com.aperture.policy.language.v1.Port.getDefaultInstance() : maxEnvelope_;
        } else {
          return maxEnvelopeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       */
      public Builder setMaxEnvelope(com.aperture.policy.language.v1.Port value) {
        if (maxEnvelopeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          maxEnvelope_ = value;
          onChanged();
        } else {
          maxEnvelopeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       */
      public Builder setMaxEnvelope(
          com.aperture.policy.language.v1.Port.Builder builderForValue) {
        if (maxEnvelopeBuilder_ == null) {
          maxEnvelope_ = builderForValue.build();
          onChanged();
        } else {
          maxEnvelopeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       */
      public Builder mergeMaxEnvelope(com.aperture.policy.language.v1.Port value) {
        if (maxEnvelopeBuilder_ == null) {
          if (maxEnvelope_ != null) {
            maxEnvelope_ =
              com.aperture.policy.language.v1.Port.newBuilder(maxEnvelope_).mergeFrom(value).buildPartial();
          } else {
            maxEnvelope_ = value;
          }
          onChanged();
        } else {
          maxEnvelopeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       */
      public Builder clearMaxEnvelope() {
        if (maxEnvelopeBuilder_ == null) {
          maxEnvelope_ = null;
          onChanged();
        } else {
          maxEnvelope_ = null;
          maxEnvelopeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       */
      public com.aperture.policy.language.v1.Port.Builder getMaxEnvelopeBuilder() {

        onChanged();
        return getMaxEnvelopeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       */
      public com.aperture.policy.language.v1.PortOrBuilder getMaxEnvelopeOrBuilder() {
        if (maxEnvelopeBuilder_ != null) {
          return maxEnvelopeBuilder_.getMessageOrBuilder();
        } else {
          return maxEnvelope_ == null ?
              com.aperture.policy.language.v1.Port.getDefaultInstance() : maxEnvelope_;
        }
      }
      /**
       * <pre>
       * Upper bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port max_envelope = 2 [json_name = "maxEnvelope"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder>
          getMaxEnvelopeFieldBuilder() {
        if (maxEnvelopeBuilder_ == null) {
          maxEnvelopeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder>(
                  getMaxEnvelope(),
                  getParentForChildren(),
                  isClean());
          maxEnvelope_ = null;
        }
        return maxEnvelopeBuilder_;
      }

      private com.aperture.policy.language.v1.Port minEnvelope_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder> minEnvelopeBuilder_;
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       * @return Whether the minEnvelope field is set.
       */
      public boolean hasMinEnvelope() {
        return minEnvelopeBuilder_ != null || minEnvelope_ != null;
      }
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       * @return The minEnvelope.
       */
      public com.aperture.policy.language.v1.Port getMinEnvelope() {
        if (minEnvelopeBuilder_ == null) {
          return minEnvelope_ == null ? com.aperture.policy.language.v1.Port.getDefaultInstance() : minEnvelope_;
        } else {
          return minEnvelopeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       */
      public Builder setMinEnvelope(com.aperture.policy.language.v1.Port value) {
        if (minEnvelopeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minEnvelope_ = value;
          onChanged();
        } else {
          minEnvelopeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       */
      public Builder setMinEnvelope(
          com.aperture.policy.language.v1.Port.Builder builderForValue) {
        if (minEnvelopeBuilder_ == null) {
          minEnvelope_ = builderForValue.build();
          onChanged();
        } else {
          minEnvelopeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       */
      public Builder mergeMinEnvelope(com.aperture.policy.language.v1.Port value) {
        if (minEnvelopeBuilder_ == null) {
          if (minEnvelope_ != null) {
            minEnvelope_ =
              com.aperture.policy.language.v1.Port.newBuilder(minEnvelope_).mergeFrom(value).buildPartial();
          } else {
            minEnvelope_ = value;
          }
          onChanged();
        } else {
          minEnvelopeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       */
      public Builder clearMinEnvelope() {
        if (minEnvelopeBuilder_ == null) {
          minEnvelope_ = null;
          onChanged();
        } else {
          minEnvelope_ = null;
          minEnvelopeBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       */
      public com.aperture.policy.language.v1.Port.Builder getMinEnvelopeBuilder() {

        onChanged();
        return getMinEnvelopeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       */
      public com.aperture.policy.language.v1.PortOrBuilder getMinEnvelopeOrBuilder() {
        if (minEnvelopeBuilder_ != null) {
          return minEnvelopeBuilder_.getMessageOrBuilder();
        } else {
          return minEnvelope_ == null ?
              com.aperture.policy.language.v1.Port.getDefaultInstance() : minEnvelope_;
        }
      }
      /**
       * <pre>
       * Lower bound of the moving average.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port min_envelope = 3 [json_name = "minEnvelope"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder>
          getMinEnvelopeFieldBuilder() {
        if (minEnvelopeBuilder_ == null) {
          minEnvelopeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder>(
                  getMinEnvelope(),
                  getParentForChildren(),
                  isClean());
          minEnvelope_ = null;
        }
        return minEnvelopeBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.EMA.Ins)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.EMA.Ins)
    private static final com.aperture.policy.language.v1.EMA.Ins DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.aperture.policy.language.v1.EMA.Ins();
    }

    public static com.aperture.policy.language.v1.EMA.Ins getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Ins>
        PARSER = new com.google.protobuf.AbstractParser<Ins>() {
      @java.lang.Override
      public Ins parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ins(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Ins> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Ins> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.EMA.Ins getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OutsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.EMA.Outs)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Exponential moving average of the series of reading as an output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
     * @return Whether the output field is set.
     */
    boolean hasOutput();
    /**
     * <pre>
     * Exponential moving average of the series of reading as an output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
     * @return The output.
     */
    com.aperture.policy.language.v1.Port getOutput();
    /**
     * <pre>
     * Exponential moving average of the series of reading as an output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
     */
    com.aperture.policy.language.v1.PortOrBuilder getOutputOrBuilder();
  }
  /**
   * <pre>
   * Outputs for the EMA component.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.EMA.Outs}
   */
  public static final class Outs extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.EMA.Outs)
      OutsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Outs.newBuilder() to construct.
    private Outs(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Outs() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Outs();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Outs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.aperture.policy.language.v1.Port.Builder subBuilder = null;
              if (output_ != null) {
                subBuilder = output_.toBuilder();
              }
              output_ = input.readMessage(com.aperture.policy.language.v1.Port.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(output_);
                output_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Outs_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Outs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.policy.language.v1.EMA.Outs.class, com.aperture.policy.language.v1.EMA.Outs.Builder.class);
    }

    public static final int OUTPUT_FIELD_NUMBER = 1;
    private com.aperture.policy.language.v1.Port output_;
    /**
     * <pre>
     * Exponential moving average of the series of reading as an output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
     * @return Whether the output field is set.
     */
    @java.lang.Override
    public boolean hasOutput() {
      return output_ != null;
    }
    /**
     * <pre>
     * Exponential moving average of the series of reading as an output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
     * @return The output.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Port getOutput() {
      return output_ == null ? com.aperture.policy.language.v1.Port.getDefaultInstance() : output_;
    }
    /**
     * <pre>
     * Exponential moving average of the series of reading as an output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.PortOrBuilder getOutputOrBuilder() {
      return getOutput();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (output_ != null) {
        output.writeMessage(1, getOutput());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (output_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOutput());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.aperture.policy.language.v1.EMA.Outs)) {
        return super.equals(obj);
      }
      com.aperture.policy.language.v1.EMA.Outs other = (com.aperture.policy.language.v1.EMA.Outs) obj;

      if (hasOutput() != other.hasOutput()) return false;
      if (hasOutput()) {
        if (!getOutput()
            .equals(other.getOutput())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOutput()) {
        hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
        hash = (53 * hash) + getOutput().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.aperture.policy.language.v1.EMA.Outs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.aperture.policy.language.v1.EMA.Outs prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Outputs for the EMA component.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.EMA.Outs}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.EMA.Outs)
        com.aperture.policy.language.v1.EMA.OutsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Outs_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Outs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.aperture.policy.language.v1.EMA.Outs.class, com.aperture.policy.language.v1.EMA.Outs.Builder.class);
      }

      // Construct using com.aperture.policy.language.v1.EMA.Outs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (outputBuilder_ == null) {
          output_ = null;
        } else {
          output_ = null;
          outputBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_Outs_descriptor;
      }

      @java.lang.Override
      public com.aperture.policy.language.v1.EMA.Outs getDefaultInstanceForType() {
        return com.aperture.policy.language.v1.EMA.Outs.getDefaultInstance();
      }

      @java.lang.Override
      public com.aperture.policy.language.v1.EMA.Outs build() {
        com.aperture.policy.language.v1.EMA.Outs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.aperture.policy.language.v1.EMA.Outs buildPartial() {
        com.aperture.policy.language.v1.EMA.Outs result = new com.aperture.policy.language.v1.EMA.Outs(this);
        if (outputBuilder_ == null) {
          result.output_ = output_;
        } else {
          result.output_ = outputBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.aperture.policy.language.v1.EMA.Outs) {
          return mergeFrom((com.aperture.policy.language.v1.EMA.Outs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.aperture.policy.language.v1.EMA.Outs other) {
        if (other == com.aperture.policy.language.v1.EMA.Outs.getDefaultInstance()) return this;
        if (other.hasOutput()) {
          mergeOutput(other.getOutput());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.aperture.policy.language.v1.EMA.Outs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.aperture.policy.language.v1.EMA.Outs) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.aperture.policy.language.v1.Port output_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder> outputBuilder_;
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       * @return Whether the output field is set.
       */
      public boolean hasOutput() {
        return outputBuilder_ != null || output_ != null;
      }
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       * @return The output.
       */
      public com.aperture.policy.language.v1.Port getOutput() {
        if (outputBuilder_ == null) {
          return output_ == null ? com.aperture.policy.language.v1.Port.getDefaultInstance() : output_;
        } else {
          return outputBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       */
      public Builder setOutput(com.aperture.policy.language.v1.Port value) {
        if (outputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          output_ = value;
          onChanged();
        } else {
          outputBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       */
      public Builder setOutput(
          com.aperture.policy.language.v1.Port.Builder builderForValue) {
        if (outputBuilder_ == null) {
          output_ = builderForValue.build();
          onChanged();
        } else {
          outputBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       */
      public Builder mergeOutput(com.aperture.policy.language.v1.Port value) {
        if (outputBuilder_ == null) {
          if (output_ != null) {
            output_ =
              com.aperture.policy.language.v1.Port.newBuilder(output_).mergeFrom(value).buildPartial();
          } else {
            output_ = value;
          }
          onChanged();
        } else {
          outputBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       */
      public Builder clearOutput() {
        if (outputBuilder_ == null) {
          output_ = null;
          onChanged();
        } else {
          output_ = null;
          outputBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       */
      public com.aperture.policy.language.v1.Port.Builder getOutputBuilder() {

        onChanged();
        return getOutputFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       */
      public com.aperture.policy.language.v1.PortOrBuilder getOutputOrBuilder() {
        if (outputBuilder_ != null) {
          return outputBuilder_.getMessageOrBuilder();
        } else {
          return output_ == null ?
              com.aperture.policy.language.v1.Port.getDefaultInstance() : output_;
        }
      }
      /**
       * <pre>
       * Exponential moving average of the series of reading as an output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.Port output = 1 [json_name = "output"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder>
          getOutputFieldBuilder() {
        if (outputBuilder_ == null) {
          outputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.aperture.policy.language.v1.Port, com.aperture.policy.language.v1.Port.Builder, com.aperture.policy.language.v1.PortOrBuilder>(
                  getOutput(),
                  getParentForChildren(),
                  isClean());
          output_ = null;
        }
        return outputBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.EMA.Outs)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.EMA.Outs)
    private static final com.aperture.policy.language.v1.EMA.Outs DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.aperture.policy.language.v1.EMA.Outs();
    }

    public static com.aperture.policy.language.v1.EMA.Outs getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Outs>
        PARSER = new com.google.protobuf.AbstractParser<Outs>() {
      @java.lang.Override
      public Outs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Outs(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Outs> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Outs> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.EMA.Outs getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int IN_PORTS_FIELD_NUMBER = 1;
  private com.aperture.policy.language.v1.EMA.Ins inPorts_;
  /**
   * <pre>
   * Input ports for the EMA component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return Whether the inPorts field is set.
   */
  @java.lang.Override
  public boolean hasInPorts() {
    return inPorts_ != null;
  }
  /**
   * <pre>
   * Input ports for the EMA component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return The inPorts.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.EMA.Ins getInPorts() {
    return inPorts_ == null ? com.aperture.policy.language.v1.EMA.Ins.getDefaultInstance() : inPorts_;
  }
  /**
   * <pre>
   * Input ports for the EMA component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.EMA.InsOrBuilder getInPortsOrBuilder() {
    return getInPorts();
  }

  public static final int OUT_PORTS_FIELD_NUMBER = 2;
  private com.aperture.policy.language.v1.EMA.Outs outPorts_;
  /**
   * <pre>
   * Output ports for the EMA component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return Whether the outPorts field is set.
   */
  @java.lang.Override
  public boolean hasOutPorts() {
    return outPorts_ != null;
  }
  /**
   * <pre>
   * Output ports for the EMA component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return The outPorts.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.EMA.Outs getOutPorts() {
    return outPorts_ == null ? com.aperture.policy.language.v1.EMA.Outs.getDefaultInstance() : outPorts_;
  }
  /**
   * <pre>
   * Output ports for the EMA component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.EMA.OutsOrBuilder getOutPortsOrBuilder() {
    return getOutPorts();
  }

  public static final int EMA_WINDOW_FIELD_NUMBER = 3;
  private com.google.protobuf.Duration emaWindow_;
  /**
   * <pre>
   * Duration of EMA sampling window.
   * </pre>
   *
   * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the emaWindow field is set.
   */
  @java.lang.Override
  public boolean hasEmaWindow() {
    return emaWindow_ != null;
  }
  /**
   * <pre>
   * Duration of EMA sampling window.
   * </pre>
   *
   * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The emaWindow.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getEmaWindow() {
    return emaWindow_ == null ? com.google.protobuf.Duration.getDefaultInstance() : emaWindow_;
  }
  /**
   * <pre>
   * Duration of EMA sampling window.
   * </pre>
   *
   * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getEmaWindowOrBuilder() {
    return getEmaWindow();
  }

  public static final int WARM_UP_WINDOW_FIELD_NUMBER = 4;
  private com.google.protobuf.Duration warmUpWindow_;
  /**
   * <pre>
   * Duration of EMA warming up window.
   * The initial value of the EMA is the average of signal readings received during the warm up window.
   * </pre>
   *
   * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the warmUpWindow field is set.
   */
  @java.lang.Override
  public boolean hasWarmUpWindow() {
    return warmUpWindow_ != null;
  }
  /**
   * <pre>
   * Duration of EMA warming up window.
   * The initial value of the EMA is the average of signal readings received during the warm up window.
   * </pre>
   *
   * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The warmUpWindow.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getWarmUpWindow() {
    return warmUpWindow_ == null ? com.google.protobuf.Duration.getDefaultInstance() : warmUpWindow_;
  }
  /**
   * <pre>
   * Duration of EMA warming up window.
   * The initial value of the EMA is the average of signal readings received during the warm up window.
   * </pre>
   *
   * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getWarmUpWindowOrBuilder() {
    return getWarmUpWindow();
  }

  public static final int CORRECTION_FACTOR_ON_MIN_ENVELOPE_VIOLATION_FIELD_NUMBER = 5;
  private double correctionFactorOnMinEnvelopeViolation_;
  /**
   * <pre>
   * Correction factor to apply on the output value if its in violation of the min envelope.
   * </pre>
   *
   * <code>double correction_factor_on_min_envelope_violation = 5 [json_name = "correctionFactorOnMinEnvelopeViolation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The correctionFactorOnMinEnvelopeViolation.
   */
  @java.lang.Override
  public double getCorrectionFactorOnMinEnvelopeViolation() {
    return correctionFactorOnMinEnvelopeViolation_;
  }

  public static final int CORRECTION_FACTOR_ON_MAX_ENVELOPE_VIOLATION_FIELD_NUMBER = 6;
  private double correctionFactorOnMaxEnvelopeViolation_;
  /**
   * <pre>
   * Correction factor to apply on the output value if its in violation of the max envelope.
   * </pre>
   *
   * <code>double correction_factor_on_max_envelope_violation = 6 [json_name = "correctionFactorOnMaxEnvelopeViolation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The correctionFactorOnMaxEnvelopeViolation.
   */
  @java.lang.Override
  public double getCorrectionFactorOnMaxEnvelopeViolation() {
    return correctionFactorOnMaxEnvelopeViolation_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (inPorts_ != null) {
      output.writeMessage(1, getInPorts());
    }
    if (outPorts_ != null) {
      output.writeMessage(2, getOutPorts());
    }
    if (emaWindow_ != null) {
      output.writeMessage(3, getEmaWindow());
    }
    if (warmUpWindow_ != null) {
      output.writeMessage(4, getWarmUpWindow());
    }
    if (java.lang.Double.doubleToRawLongBits(correctionFactorOnMinEnvelopeViolation_) != 0) {
      output.writeDouble(5, correctionFactorOnMinEnvelopeViolation_);
    }
    if (java.lang.Double.doubleToRawLongBits(correctionFactorOnMaxEnvelopeViolation_) != 0) {
      output.writeDouble(6, correctionFactorOnMaxEnvelopeViolation_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (inPorts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInPorts());
    }
    if (outPorts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getOutPorts());
    }
    if (emaWindow_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getEmaWindow());
    }
    if (warmUpWindow_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getWarmUpWindow());
    }
    if (java.lang.Double.doubleToRawLongBits(correctionFactorOnMinEnvelopeViolation_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(5, correctionFactorOnMinEnvelopeViolation_);
    }
    if (java.lang.Double.doubleToRawLongBits(correctionFactorOnMaxEnvelopeViolation_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(6, correctionFactorOnMaxEnvelopeViolation_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.policy.language.v1.EMA)) {
      return super.equals(obj);
    }
    com.aperture.policy.language.v1.EMA other = (com.aperture.policy.language.v1.EMA) obj;

    if (hasInPorts() != other.hasInPorts()) return false;
    if (hasInPorts()) {
      if (!getInPorts()
          .equals(other.getInPorts())) return false;
    }
    if (hasOutPorts() != other.hasOutPorts()) return false;
    if (hasOutPorts()) {
      if (!getOutPorts()
          .equals(other.getOutPorts())) return false;
    }
    if (hasEmaWindow() != other.hasEmaWindow()) return false;
    if (hasEmaWindow()) {
      if (!getEmaWindow()
          .equals(other.getEmaWindow())) return false;
    }
    if (hasWarmUpWindow() != other.hasWarmUpWindow()) return false;
    if (hasWarmUpWindow()) {
      if (!getWarmUpWindow()
          .equals(other.getWarmUpWindow())) return false;
    }
    if (java.lang.Double.doubleToLongBits(getCorrectionFactorOnMinEnvelopeViolation())
        != java.lang.Double.doubleToLongBits(
            other.getCorrectionFactorOnMinEnvelopeViolation())) return false;
    if (java.lang.Double.doubleToLongBits(getCorrectionFactorOnMaxEnvelopeViolation())
        != java.lang.Double.doubleToLongBits(
            other.getCorrectionFactorOnMaxEnvelopeViolation())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInPorts()) {
      hash = (37 * hash) + IN_PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getInPorts().hashCode();
    }
    if (hasOutPorts()) {
      hash = (37 * hash) + OUT_PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getOutPorts().hashCode();
    }
    if (hasEmaWindow()) {
      hash = (37 * hash) + EMA_WINDOW_FIELD_NUMBER;
      hash = (53 * hash) + getEmaWindow().hashCode();
    }
    if (hasWarmUpWindow()) {
      hash = (37 * hash) + WARM_UP_WINDOW_FIELD_NUMBER;
      hash = (53 * hash) + getWarmUpWindow().hashCode();
    }
    hash = (37 * hash) + CORRECTION_FACTOR_ON_MIN_ENVELOPE_VIOLATION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getCorrectionFactorOnMinEnvelopeViolation()));
    hash = (37 * hash) + CORRECTION_FACTOR_ON_MAX_ENVELOPE_VIOLATION_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getCorrectionFactorOnMaxEnvelopeViolation()));
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.policy.language.v1.EMA parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.EMA parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.EMA parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.EMA parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.policy.language.v1.EMA prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Exponential Moving Average (EMA) is a type of moving average that applies exponenially more weight to recent signal readings.
   * At any time EMA component operates in one of the following states:
   * 1. Warm up state: The first warm_up_window samples are used to compute the initial EMA.
   * If an invalid reading is received during the warm_up_window, the last good average is emitted and the state gets reset back to beginning of Warm up state.
   * 2. Normal state: The EMA is computed using following formula.
   * If an invalid reading is received continuously for ema_window during the EMA stage, the last good EMA is emitted and the state gets reset back to Warm up state.
   * The EMA for a series Y is calculated recursively as:
   * EMAt = Y0 , t = 0
   * EMAt = alpha &#92;* Yt + (1 - alpha) &#92;* EMAt-1 , t &gt; 0
   * The coefficient alpha represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
   * A higher alpha discounts older observations faster.
   * The alpha is computed using ema_window: alpha = 2 / (N + 1). Where, N = ema_window / evalutation_period.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.EMA}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.EMA)
      com.aperture.policy.language.v1.EMAOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.policy.language.v1.EMA.class, com.aperture.policy.language.v1.EMA.Builder.class);
    }

    // Construct using com.aperture.policy.language.v1.EMA.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inPortsBuilder_ == null) {
        inPorts_ = null;
      } else {
        inPorts_ = null;
        inPortsBuilder_ = null;
      }
      if (outPortsBuilder_ == null) {
        outPorts_ = null;
      } else {
        outPorts_ = null;
        outPortsBuilder_ = null;
      }
      if (emaWindowBuilder_ == null) {
        emaWindow_ = null;
      } else {
        emaWindow_ = null;
        emaWindowBuilder_ = null;
      }
      if (warmUpWindowBuilder_ == null) {
        warmUpWindow_ = null;
      } else {
        warmUpWindow_ = null;
        warmUpWindowBuilder_ = null;
      }
      correctionFactorOnMinEnvelopeViolation_ = 0D;

      correctionFactorOnMaxEnvelopeViolation_ = 0D;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_EMA_descriptor;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.EMA getDefaultInstanceForType() {
      return com.aperture.policy.language.v1.EMA.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.EMA build() {
      com.aperture.policy.language.v1.EMA result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.EMA buildPartial() {
      com.aperture.policy.language.v1.EMA result = new com.aperture.policy.language.v1.EMA(this);
      if (inPortsBuilder_ == null) {
        result.inPorts_ = inPorts_;
      } else {
        result.inPorts_ = inPortsBuilder_.build();
      }
      if (outPortsBuilder_ == null) {
        result.outPorts_ = outPorts_;
      } else {
        result.outPorts_ = outPortsBuilder_.build();
      }
      if (emaWindowBuilder_ == null) {
        result.emaWindow_ = emaWindow_;
      } else {
        result.emaWindow_ = emaWindowBuilder_.build();
      }
      if (warmUpWindowBuilder_ == null) {
        result.warmUpWindow_ = warmUpWindow_;
      } else {
        result.warmUpWindow_ = warmUpWindowBuilder_.build();
      }
      result.correctionFactorOnMinEnvelopeViolation_ = correctionFactorOnMinEnvelopeViolation_;
      result.correctionFactorOnMaxEnvelopeViolation_ = correctionFactorOnMaxEnvelopeViolation_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.policy.language.v1.EMA) {
        return mergeFrom((com.aperture.policy.language.v1.EMA)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.policy.language.v1.EMA other) {
      if (other == com.aperture.policy.language.v1.EMA.getDefaultInstance()) return this;
      if (other.hasInPorts()) {
        mergeInPorts(other.getInPorts());
      }
      if (other.hasOutPorts()) {
        mergeOutPorts(other.getOutPorts());
      }
      if (other.hasEmaWindow()) {
        mergeEmaWindow(other.getEmaWindow());
      }
      if (other.hasWarmUpWindow()) {
        mergeWarmUpWindow(other.getWarmUpWindow());
      }
      if (other.getCorrectionFactorOnMinEnvelopeViolation() != 0D) {
        setCorrectionFactorOnMinEnvelopeViolation(other.getCorrectionFactorOnMinEnvelopeViolation());
      }
      if (other.getCorrectionFactorOnMaxEnvelopeViolation() != 0D) {
        setCorrectionFactorOnMaxEnvelopeViolation(other.getCorrectionFactorOnMaxEnvelopeViolation());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.policy.language.v1.EMA parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.policy.language.v1.EMA) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.aperture.policy.language.v1.EMA.Ins inPorts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.EMA.Ins, com.aperture.policy.language.v1.EMA.Ins.Builder, com.aperture.policy.language.v1.EMA.InsOrBuilder> inPortsBuilder_;
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     * @return Whether the inPorts field is set.
     */
    public boolean hasInPorts() {
      return inPortsBuilder_ != null || inPorts_ != null;
    }
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     * @return The inPorts.
     */
    public com.aperture.policy.language.v1.EMA.Ins getInPorts() {
      if (inPortsBuilder_ == null) {
        return inPorts_ == null ? com.aperture.policy.language.v1.EMA.Ins.getDefaultInstance() : inPorts_;
      } else {
        return inPortsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder setInPorts(com.aperture.policy.language.v1.EMA.Ins value) {
      if (inPortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        inPorts_ = value;
        onChanged();
      } else {
        inPortsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder setInPorts(
        com.aperture.policy.language.v1.EMA.Ins.Builder builderForValue) {
      if (inPortsBuilder_ == null) {
        inPorts_ = builderForValue.build();
        onChanged();
      } else {
        inPortsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder mergeInPorts(com.aperture.policy.language.v1.EMA.Ins value) {
      if (inPortsBuilder_ == null) {
        if (inPorts_ != null) {
          inPorts_ =
            com.aperture.policy.language.v1.EMA.Ins.newBuilder(inPorts_).mergeFrom(value).buildPartial();
        } else {
          inPorts_ = value;
        }
        onChanged();
      } else {
        inPortsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder clearInPorts() {
      if (inPortsBuilder_ == null) {
        inPorts_ = null;
        onChanged();
      } else {
        inPorts_ = null;
        inPortsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public com.aperture.policy.language.v1.EMA.Ins.Builder getInPortsBuilder() {

      onChanged();
      return getInPortsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public com.aperture.policy.language.v1.EMA.InsOrBuilder getInPortsOrBuilder() {
      if (inPortsBuilder_ != null) {
        return inPortsBuilder_.getMessageOrBuilder();
      } else {
        return inPorts_ == null ?
            com.aperture.policy.language.v1.EMA.Ins.getDefaultInstance() : inPorts_;
      }
    }
    /**
     * <pre>
     * Input ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.EMA.Ins, com.aperture.policy.language.v1.EMA.Ins.Builder, com.aperture.policy.language.v1.EMA.InsOrBuilder>
        getInPortsFieldBuilder() {
      if (inPortsBuilder_ == null) {
        inPortsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.EMA.Ins, com.aperture.policy.language.v1.EMA.Ins.Builder, com.aperture.policy.language.v1.EMA.InsOrBuilder>(
                getInPorts(),
                getParentForChildren(),
                isClean());
        inPorts_ = null;
      }
      return inPortsBuilder_;
    }

    private com.aperture.policy.language.v1.EMA.Outs outPorts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.EMA.Outs, com.aperture.policy.language.v1.EMA.Outs.Builder, com.aperture.policy.language.v1.EMA.OutsOrBuilder> outPortsBuilder_;
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     * @return Whether the outPorts field is set.
     */
    public boolean hasOutPorts() {
      return outPortsBuilder_ != null || outPorts_ != null;
    }
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     * @return The outPorts.
     */
    public com.aperture.policy.language.v1.EMA.Outs getOutPorts() {
      if (outPortsBuilder_ == null) {
        return outPorts_ == null ? com.aperture.policy.language.v1.EMA.Outs.getDefaultInstance() : outPorts_;
      } else {
        return outPortsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder setOutPorts(com.aperture.policy.language.v1.EMA.Outs value) {
      if (outPortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outPorts_ = value;
        onChanged();
      } else {
        outPortsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder setOutPorts(
        com.aperture.policy.language.v1.EMA.Outs.Builder builderForValue) {
      if (outPortsBuilder_ == null) {
        outPorts_ = builderForValue.build();
        onChanged();
      } else {
        outPortsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder mergeOutPorts(com.aperture.policy.language.v1.EMA.Outs value) {
      if (outPortsBuilder_ == null) {
        if (outPorts_ != null) {
          outPorts_ =
            com.aperture.policy.language.v1.EMA.Outs.newBuilder(outPorts_).mergeFrom(value).buildPartial();
        } else {
          outPorts_ = value;
        }
        onChanged();
      } else {
        outPortsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder clearOutPorts() {
      if (outPortsBuilder_ == null) {
        outPorts_ = null;
        onChanged();
      } else {
        outPorts_ = null;
        outPortsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public com.aperture.policy.language.v1.EMA.Outs.Builder getOutPortsBuilder() {

      onChanged();
      return getOutPortsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public com.aperture.policy.language.v1.EMA.OutsOrBuilder getOutPortsOrBuilder() {
      if (outPortsBuilder_ != null) {
        return outPortsBuilder_.getMessageOrBuilder();
      } else {
        return outPorts_ == null ?
            com.aperture.policy.language.v1.EMA.Outs.getDefaultInstance() : outPorts_;
      }
    }
    /**
     * <pre>
     * Output ports for the EMA component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.EMA.Outs, com.aperture.policy.language.v1.EMA.Outs.Builder, com.aperture.policy.language.v1.EMA.OutsOrBuilder>
        getOutPortsFieldBuilder() {
      if (outPortsBuilder_ == null) {
        outPortsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.EMA.Outs, com.aperture.policy.language.v1.EMA.Outs.Builder, com.aperture.policy.language.v1.EMA.OutsOrBuilder>(
                getOutPorts(),
                getParentForChildren(),
                isClean());
        outPorts_ = null;
      }
      return outPortsBuilder_;
    }

    private com.google.protobuf.Duration emaWindow_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> emaWindowBuilder_;
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return Whether the emaWindow field is set.
     */
    public boolean hasEmaWindow() {
      return emaWindowBuilder_ != null || emaWindow_ != null;
    }
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The emaWindow.
     */
    public com.google.protobuf.Duration getEmaWindow() {
      if (emaWindowBuilder_ == null) {
        return emaWindow_ == null ? com.google.protobuf.Duration.getDefaultInstance() : emaWindow_;
      } else {
        return emaWindowBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setEmaWindow(com.google.protobuf.Duration value) {
      if (emaWindowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        emaWindow_ = value;
        onChanged();
      } else {
        emaWindowBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setEmaWindow(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (emaWindowBuilder_ == null) {
        emaWindow_ = builderForValue.build();
        onChanged();
      } else {
        emaWindowBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder mergeEmaWindow(com.google.protobuf.Duration value) {
      if (emaWindowBuilder_ == null) {
        if (emaWindow_ != null) {
          emaWindow_ =
            com.google.protobuf.Duration.newBuilder(emaWindow_).mergeFrom(value).buildPartial();
        } else {
          emaWindow_ = value;
        }
        onChanged();
      } else {
        emaWindowBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder clearEmaWindow() {
      if (emaWindowBuilder_ == null) {
        emaWindow_ = null;
        onChanged();
      } else {
        emaWindow_ = null;
        emaWindowBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getEmaWindowBuilder() {

      onChanged();
      return getEmaWindowFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getEmaWindowOrBuilder() {
      if (emaWindowBuilder_ != null) {
        return emaWindowBuilder_.getMessageOrBuilder();
      } else {
        return emaWindow_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : emaWindow_;
      }
    }
    /**
     * <pre>
     * Duration of EMA sampling window.
     * </pre>
     *
     * <code>.google.protobuf.Duration ema_window = 3 [json_name = "emaWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>
        getEmaWindowFieldBuilder() {
      if (emaWindowBuilder_ == null) {
        emaWindowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getEmaWindow(),
                getParentForChildren(),
                isClean());
        emaWindow_ = null;
      }
      return emaWindowBuilder_;
    }

    private com.google.protobuf.Duration warmUpWindow_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> warmUpWindowBuilder_;
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return Whether the warmUpWindow field is set.
     */
    public boolean hasWarmUpWindow() {
      return warmUpWindowBuilder_ != null || warmUpWindow_ != null;
    }
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The warmUpWindow.
     */
    public com.google.protobuf.Duration getWarmUpWindow() {
      if (warmUpWindowBuilder_ == null) {
        return warmUpWindow_ == null ? com.google.protobuf.Duration.getDefaultInstance() : warmUpWindow_;
      } else {
        return warmUpWindowBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setWarmUpWindow(com.google.protobuf.Duration value) {
      if (warmUpWindowBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        warmUpWindow_ = value;
        onChanged();
      } else {
        warmUpWindowBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setWarmUpWindow(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (warmUpWindowBuilder_ == null) {
        warmUpWindow_ = builderForValue.build();
        onChanged();
      } else {
        warmUpWindowBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder mergeWarmUpWindow(com.google.protobuf.Duration value) {
      if (warmUpWindowBuilder_ == null) {
        if (warmUpWindow_ != null) {
          warmUpWindow_ =
            com.google.protobuf.Duration.newBuilder(warmUpWindow_).mergeFrom(value).buildPartial();
        } else {
          warmUpWindow_ = value;
        }
        onChanged();
      } else {
        warmUpWindowBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder clearWarmUpWindow() {
      if (warmUpWindowBuilder_ == null) {
        warmUpWindow_ = null;
        onChanged();
      } else {
        warmUpWindow_ = null;
        warmUpWindowBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.google.protobuf.Duration.Builder getWarmUpWindowBuilder() {

      onChanged();
      return getWarmUpWindowFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.google.protobuf.DurationOrBuilder getWarmUpWindowOrBuilder() {
      if (warmUpWindowBuilder_ != null) {
        return warmUpWindowBuilder_.getMessageOrBuilder();
      } else {
        return warmUpWindow_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : warmUpWindow_;
      }
    }
    /**
     * <pre>
     * Duration of EMA warming up window.
     * The initial value of the EMA is the average of signal readings received during the warm up window.
     * </pre>
     *
     * <code>.google.protobuf.Duration warm_up_window = 4 [json_name = "warmUpWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>
        getWarmUpWindowFieldBuilder() {
      if (warmUpWindowBuilder_ == null) {
        warmUpWindowBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getWarmUpWindow(),
                getParentForChildren(),
                isClean());
        warmUpWindow_ = null;
      }
      return warmUpWindowBuilder_;
    }

    private double correctionFactorOnMinEnvelopeViolation_ ;
    /**
     * <pre>
     * Correction factor to apply on the output value if its in violation of the min envelope.
     * </pre>
     *
     * <code>double correction_factor_on_min_envelope_violation = 5 [json_name = "correctionFactorOnMinEnvelopeViolation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The correctionFactorOnMinEnvelopeViolation.
     */
    @java.lang.Override
    public double getCorrectionFactorOnMinEnvelopeViolation() {
      return correctionFactorOnMinEnvelopeViolation_;
    }
    /**
     * <pre>
     * Correction factor to apply on the output value if its in violation of the min envelope.
     * </pre>
     *
     * <code>double correction_factor_on_min_envelope_violation = 5 [json_name = "correctionFactorOnMinEnvelopeViolation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param value The correctionFactorOnMinEnvelopeViolation to set.
     * @return This builder for chaining.
     */
    public Builder setCorrectionFactorOnMinEnvelopeViolation(double value) {

      correctionFactorOnMinEnvelopeViolation_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Correction factor to apply on the output value if its in violation of the min envelope.
     * </pre>
     *
     * <code>double correction_factor_on_min_envelope_violation = 5 [json_name = "correctionFactorOnMinEnvelopeViolation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearCorrectionFactorOnMinEnvelopeViolation() {

      correctionFactorOnMinEnvelopeViolation_ = 0D;
      onChanged();
      return this;
    }

    private double correctionFactorOnMaxEnvelopeViolation_ ;
    /**
     * <pre>
     * Correction factor to apply on the output value if its in violation of the max envelope.
     * </pre>
     *
     * <code>double correction_factor_on_max_envelope_violation = 6 [json_name = "correctionFactorOnMaxEnvelopeViolation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The correctionFactorOnMaxEnvelopeViolation.
     */
    @java.lang.Override
    public double getCorrectionFactorOnMaxEnvelopeViolation() {
      return correctionFactorOnMaxEnvelopeViolation_;
    }
    /**
     * <pre>
     * Correction factor to apply on the output value if its in violation of the max envelope.
     * </pre>
     *
     * <code>double correction_factor_on_max_envelope_violation = 6 [json_name = "correctionFactorOnMaxEnvelopeViolation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param value The correctionFactorOnMaxEnvelopeViolation to set.
     * @return This builder for chaining.
     */
    public Builder setCorrectionFactorOnMaxEnvelopeViolation(double value) {

      correctionFactorOnMaxEnvelopeViolation_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Correction factor to apply on the output value if its in violation of the max envelope.
     * </pre>
     *
     * <code>double correction_factor_on_max_envelope_violation = 6 [json_name = "correctionFactorOnMaxEnvelopeViolation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearCorrectionFactorOnMaxEnvelopeViolation() {

      correctionFactorOnMaxEnvelopeViolation_ = 0D;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.EMA)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.EMA)
  private static final com.aperture.policy.language.v1.EMA DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.policy.language.v1.EMA();
  }

  public static com.aperture.policy.language.v1.EMA getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<EMA>
      PARSER = new com.google.protobuf.AbstractParser<EMA>() {
    @java.lang.Override
    public EMA parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new EMA(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<EMA> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<EMA> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.policy.language.v1.EMA getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
