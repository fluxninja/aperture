// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.aperture.policy.language.v1;

/**
 * <pre>
 * Concurrency Limiter is an actuator component that regulates flows in order to provide active service protection.
 * It is based on the actuation strategy (e.g. load shed) and workload scheduling which is based on Weighted Fair Queuing principles.
 * Concurrency is calculated in terms of total tokens which translate to (avg. latency * inflight requests), i.e. Little's Law.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.ConcurrencyLimiter}
 */
public final class ConcurrencyLimiter extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.ConcurrencyLimiter)
    ConcurrencyLimiterOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConcurrencyLimiter.newBuilder() to construct.
  private ConcurrencyLimiter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConcurrencyLimiter() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConcurrencyLimiter();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ConcurrencyLimiter(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.aperture.policy.language.v1.Scheduler.Builder subBuilder = null;
            if (scheduler_ != null) {
              subBuilder = scheduler_.toBuilder();
            }
            scheduler_ = input.readMessage(com.aperture.policy.language.v1.Scheduler.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(scheduler_);
              scheduler_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.aperture.policy.language.v1.LoadShedActuator.Builder subBuilder = null;
            if (actuationStrategyCase_ == 2) {
              subBuilder = ((com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_).toBuilder();
            }
            actuationStrategy_ =
                input.readMessage(com.aperture.policy.language.v1.LoadShedActuator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_);
              actuationStrategy_ = subBuilder.buildPartial();
            }
            actuationStrategyCase_ = 2;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_ConcurrencyLimiter_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_ConcurrencyLimiter_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.policy.language.v1.ConcurrencyLimiter.class, com.aperture.policy.language.v1.ConcurrencyLimiter.Builder.class);
  }

  private int actuationStrategyCase_ = 0;
  private java.lang.Object actuationStrategy_;
  public enum ActuationStrategyCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    LOAD_SHED_ACTUATOR(2),
    ACTUATIONSTRATEGY_NOT_SET(0);
    private final int value;
    private ActuationStrategyCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ActuationStrategyCase valueOf(int value) {
      return forNumber(value);
    }

    public static ActuationStrategyCase forNumber(int value) {
      switch (value) {
        case 2: return LOAD_SHED_ACTUATOR;
        case 0: return ACTUATIONSTRATEGY_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ActuationStrategyCase
  getActuationStrategyCase() {
    return ActuationStrategyCase.forNumber(
        actuationStrategyCase_);
  }

  public static final int SCHEDULER_FIELD_NUMBER = 1;
  private com.aperture.policy.language.v1.Scheduler scheduler_;
  /**
   * <pre>
   * Weighted Fair Queuing based workfload scheduler.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the scheduler field is set.
   */
  @java.lang.Override
  public boolean hasScheduler() {
    return scheduler_ != null;
  }
  /**
   * <pre>
   * Weighted Fair Queuing based workfload scheduler.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The scheduler.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Scheduler getScheduler() {
    return scheduler_ == null ? com.aperture.policy.language.v1.Scheduler.getDefaultInstance() : scheduler_;
  }
  /**
   * <pre>
   * Weighted Fair Queuing based workfload scheduler.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.SchedulerOrBuilder getSchedulerOrBuilder() {
    return getScheduler();
  }

  public static final int LOAD_SHED_ACTUATOR_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Actuator based on load shedding a portion of requests.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
   * @return Whether the loadShedActuator field is set.
   */
  @java.lang.Override
  public boolean hasLoadShedActuator() {
    return actuationStrategyCase_ == 2;
  }
  /**
   * <pre>
   * Actuator based on load shedding a portion of requests.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
   * @return The loadShedActuator.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.LoadShedActuator getLoadShedActuator() {
    if (actuationStrategyCase_ == 2) {
       return (com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_;
    }
    return com.aperture.policy.language.v1.LoadShedActuator.getDefaultInstance();
  }
  /**
   * <pre>
   * Actuator based on load shedding a portion of requests.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.LoadShedActuatorOrBuilder getLoadShedActuatorOrBuilder() {
    if (actuationStrategyCase_ == 2) {
       return (com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_;
    }
    return com.aperture.policy.language.v1.LoadShedActuator.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (scheduler_ != null) {
      output.writeMessage(1, getScheduler());
    }
    if (actuationStrategyCase_ == 2) {
      output.writeMessage(2, (com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (scheduler_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getScheduler());
    }
    if (actuationStrategyCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.policy.language.v1.ConcurrencyLimiter)) {
      return super.equals(obj);
    }
    com.aperture.policy.language.v1.ConcurrencyLimiter other = (com.aperture.policy.language.v1.ConcurrencyLimiter) obj;

    if (hasScheduler() != other.hasScheduler()) return false;
    if (hasScheduler()) {
      if (!getScheduler()
          .equals(other.getScheduler())) return false;
    }
    if (!getActuationStrategyCase().equals(other.getActuationStrategyCase())) return false;
    switch (actuationStrategyCase_) {
      case 2:
        if (!getLoadShedActuator()
            .equals(other.getLoadShedActuator())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasScheduler()) {
      hash = (37 * hash) + SCHEDULER_FIELD_NUMBER;
      hash = (53 * hash) + getScheduler().hashCode();
    }
    switch (actuationStrategyCase_) {
      case 2:
        hash = (37 * hash) + LOAD_SHED_ACTUATOR_FIELD_NUMBER;
        hash = (53 * hash) + getLoadShedActuator().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.ConcurrencyLimiter parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.policy.language.v1.ConcurrencyLimiter prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Concurrency Limiter is an actuator component that regulates flows in order to provide active service protection.
   * It is based on the actuation strategy (e.g. load shed) and workload scheduling which is based on Weighted Fair Queuing principles.
   * Concurrency is calculated in terms of total tokens which translate to (avg. latency * inflight requests), i.e. Little's Law.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.ConcurrencyLimiter}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.ConcurrencyLimiter)
      com.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_ConcurrencyLimiter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_ConcurrencyLimiter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.policy.language.v1.ConcurrencyLimiter.class, com.aperture.policy.language.v1.ConcurrencyLimiter.Builder.class);
    }

    // Construct using com.aperture.policy.language.v1.ConcurrencyLimiter.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (schedulerBuilder_ == null) {
        scheduler_ = null;
      } else {
        scheduler_ = null;
        schedulerBuilder_ = null;
      }
      actuationStrategyCase_ = 0;
      actuationStrategy_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_ConcurrencyLimiter_descriptor;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.ConcurrencyLimiter getDefaultInstanceForType() {
      return com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.ConcurrencyLimiter build() {
      com.aperture.policy.language.v1.ConcurrencyLimiter result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.ConcurrencyLimiter buildPartial() {
      com.aperture.policy.language.v1.ConcurrencyLimiter result = new com.aperture.policy.language.v1.ConcurrencyLimiter(this);
      if (schedulerBuilder_ == null) {
        result.scheduler_ = scheduler_;
      } else {
        result.scheduler_ = schedulerBuilder_.build();
      }
      if (actuationStrategyCase_ == 2) {
        if (loadShedActuatorBuilder_ == null) {
          result.actuationStrategy_ = actuationStrategy_;
        } else {
          result.actuationStrategy_ = loadShedActuatorBuilder_.build();
        }
      }
      result.actuationStrategyCase_ = actuationStrategyCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.policy.language.v1.ConcurrencyLimiter) {
        return mergeFrom((com.aperture.policy.language.v1.ConcurrencyLimiter)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.policy.language.v1.ConcurrencyLimiter other) {
      if (other == com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance()) return this;
      if (other.hasScheduler()) {
        mergeScheduler(other.getScheduler());
      }
      switch (other.getActuationStrategyCase()) {
        case LOAD_SHED_ACTUATOR: {
          mergeLoadShedActuator(other.getLoadShedActuator());
          break;
        }
        case ACTUATIONSTRATEGY_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.policy.language.v1.ConcurrencyLimiter parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.policy.language.v1.ConcurrencyLimiter) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int actuationStrategyCase_ = 0;
    private java.lang.Object actuationStrategy_;
    public ActuationStrategyCase
        getActuationStrategyCase() {
      return ActuationStrategyCase.forNumber(
          actuationStrategyCase_);
    }

    public Builder clearActuationStrategy() {
      actuationStrategyCase_ = 0;
      actuationStrategy_ = null;
      onChanged();
      return this;
    }


    private com.aperture.policy.language.v1.Scheduler scheduler_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Scheduler, com.aperture.policy.language.v1.Scheduler.Builder, com.aperture.policy.language.v1.SchedulerOrBuilder> schedulerBuilder_;
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return Whether the scheduler field is set.
     */
    public boolean hasScheduler() {
      return schedulerBuilder_ != null || scheduler_ != null;
    }
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The scheduler.
     */
    public com.aperture.policy.language.v1.Scheduler getScheduler() {
      if (schedulerBuilder_ == null) {
        return scheduler_ == null ? com.aperture.policy.language.v1.Scheduler.getDefaultInstance() : scheduler_;
      } else {
        return schedulerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setScheduler(com.aperture.policy.language.v1.Scheduler value) {
      if (schedulerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        scheduler_ = value;
        onChanged();
      } else {
        schedulerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setScheduler(
        com.aperture.policy.language.v1.Scheduler.Builder builderForValue) {
      if (schedulerBuilder_ == null) {
        scheduler_ = builderForValue.build();
        onChanged();
      } else {
        schedulerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder mergeScheduler(com.aperture.policy.language.v1.Scheduler value) {
      if (schedulerBuilder_ == null) {
        if (scheduler_ != null) {
          scheduler_ =
            com.aperture.policy.language.v1.Scheduler.newBuilder(scheduler_).mergeFrom(value).buildPartial();
        } else {
          scheduler_ = value;
        }
        onChanged();
      } else {
        schedulerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder clearScheduler() {
      if (schedulerBuilder_ == null) {
        scheduler_ = null;
        onChanged();
      } else {
        scheduler_ = null;
        schedulerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.aperture.policy.language.v1.Scheduler.Builder getSchedulerBuilder() {

      onChanged();
      return getSchedulerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.aperture.policy.language.v1.SchedulerOrBuilder getSchedulerOrBuilder() {
      if (schedulerBuilder_ != null) {
        return schedulerBuilder_.getMessageOrBuilder();
      } else {
        return scheduler_ == null ?
            com.aperture.policy.language.v1.Scheduler.getDefaultInstance() : scheduler_;
      }
    }
    /**
     * <pre>
     * Weighted Fair Queuing based workfload scheduler.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler scheduler = 1 [json_name = "scheduler", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Scheduler, com.aperture.policy.language.v1.Scheduler.Builder, com.aperture.policy.language.v1.SchedulerOrBuilder>
        getSchedulerFieldBuilder() {
      if (schedulerBuilder_ == null) {
        schedulerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.Scheduler, com.aperture.policy.language.v1.Scheduler.Builder, com.aperture.policy.language.v1.SchedulerOrBuilder>(
                getScheduler(),
                getParentForChildren(),
                isClean());
        scheduler_ = null;
      }
      return schedulerBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.LoadShedActuator, com.aperture.policy.language.v1.LoadShedActuator.Builder, com.aperture.policy.language.v1.LoadShedActuatorOrBuilder> loadShedActuatorBuilder_;
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     * @return Whether the loadShedActuator field is set.
     */
    @java.lang.Override
    public boolean hasLoadShedActuator() {
      return actuationStrategyCase_ == 2;
    }
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     * @return The loadShedActuator.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.LoadShedActuator getLoadShedActuator() {
      if (loadShedActuatorBuilder_ == null) {
        if (actuationStrategyCase_ == 2) {
          return (com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_;
        }
        return com.aperture.policy.language.v1.LoadShedActuator.getDefaultInstance();
      } else {
        if (actuationStrategyCase_ == 2) {
          return loadShedActuatorBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.LoadShedActuator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     */
    public Builder setLoadShedActuator(com.aperture.policy.language.v1.LoadShedActuator value) {
      if (loadShedActuatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        actuationStrategy_ = value;
        onChanged();
      } else {
        loadShedActuatorBuilder_.setMessage(value);
      }
      actuationStrategyCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     */
    public Builder setLoadShedActuator(
        com.aperture.policy.language.v1.LoadShedActuator.Builder builderForValue) {
      if (loadShedActuatorBuilder_ == null) {
        actuationStrategy_ = builderForValue.build();
        onChanged();
      } else {
        loadShedActuatorBuilder_.setMessage(builderForValue.build());
      }
      actuationStrategyCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     */
    public Builder mergeLoadShedActuator(com.aperture.policy.language.v1.LoadShedActuator value) {
      if (loadShedActuatorBuilder_ == null) {
        if (actuationStrategyCase_ == 2 &&
            actuationStrategy_ != com.aperture.policy.language.v1.LoadShedActuator.getDefaultInstance()) {
          actuationStrategy_ = com.aperture.policy.language.v1.LoadShedActuator.newBuilder((com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_)
              .mergeFrom(value).buildPartial();
        } else {
          actuationStrategy_ = value;
        }
        onChanged();
      } else {
        if (actuationStrategyCase_ == 2) {
          loadShedActuatorBuilder_.mergeFrom(value);
        } else {
          loadShedActuatorBuilder_.setMessage(value);
        }
      }
      actuationStrategyCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     */
    public Builder clearLoadShedActuator() {
      if (loadShedActuatorBuilder_ == null) {
        if (actuationStrategyCase_ == 2) {
          actuationStrategyCase_ = 0;
          actuationStrategy_ = null;
          onChanged();
        }
      } else {
        if (actuationStrategyCase_ == 2) {
          actuationStrategyCase_ = 0;
          actuationStrategy_ = null;
        }
        loadShedActuatorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     */
    public com.aperture.policy.language.v1.LoadShedActuator.Builder getLoadShedActuatorBuilder() {
      return getLoadShedActuatorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.LoadShedActuatorOrBuilder getLoadShedActuatorOrBuilder() {
      if ((actuationStrategyCase_ == 2) && (loadShedActuatorBuilder_ != null)) {
        return loadShedActuatorBuilder_.getMessageOrBuilder();
      } else {
        if (actuationStrategyCase_ == 2) {
          return (com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_;
        }
        return com.aperture.policy.language.v1.LoadShedActuator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Actuator based on load shedding a portion of requests.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadShedActuator load_shed_actuator = 2 [json_name = "loadShedActuator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.LoadShedActuator, com.aperture.policy.language.v1.LoadShedActuator.Builder, com.aperture.policy.language.v1.LoadShedActuatorOrBuilder>
        getLoadShedActuatorFieldBuilder() {
      if (loadShedActuatorBuilder_ == null) {
        if (!(actuationStrategyCase_ == 2)) {
          actuationStrategy_ = com.aperture.policy.language.v1.LoadShedActuator.getDefaultInstance();
        }
        loadShedActuatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.LoadShedActuator, com.aperture.policy.language.v1.LoadShedActuator.Builder, com.aperture.policy.language.v1.LoadShedActuatorOrBuilder>(
                (com.aperture.policy.language.v1.LoadShedActuator) actuationStrategy_,
                getParentForChildren(),
                isClean());
        actuationStrategy_ = null;
      }
      actuationStrategyCase_ = 2;
      onChanged();;
      return loadShedActuatorBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.ConcurrencyLimiter)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.ConcurrencyLimiter)
  private static final com.aperture.policy.language.v1.ConcurrencyLimiter DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.policy.language.v1.ConcurrencyLimiter();
  }

  public static com.aperture.policy.language.v1.ConcurrencyLimiter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConcurrencyLimiter>
      PARSER = new com.google.protobuf.AbstractParser<ConcurrencyLimiter>() {
    @java.lang.Override
    public ConcurrencyLimiter parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ConcurrencyLimiter(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ConcurrencyLimiter> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConcurrencyLimiter> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.policy.language.v1.ConcurrencyLimiter getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
