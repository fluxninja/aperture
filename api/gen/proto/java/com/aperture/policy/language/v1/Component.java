// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.aperture.policy.language.v1;

/**
 * <pre>
 * Computational blocks that form the circuit.
 * Signals flow into the components via input ports and results are emitted on output ports.
 * Components are wired to each other based on signal names forming an execution graph of the circuit.
 * Loops are broken by the runtime at the earliest component index that is part of the loop.
 * The looped signals are saved in the tick they are generated and served in the subsequent tick.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.Component}
 */
public final class Component extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.Component)
    ComponentOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Component.newBuilder() to construct.
  private Component(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Component() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Component();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Component(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.aperture.policy.language.v1.GradientController.Builder subBuilder = null;
            if (componentCase_ == 1) {
              subBuilder = ((com.aperture.policy.language.v1.GradientController) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.GradientController.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.GradientController) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 1;
            break;
          }
          case 18: {
            com.aperture.policy.language.v1.EMA.Builder subBuilder = null;
            if (componentCase_ == 2) {
              subBuilder = ((com.aperture.policy.language.v1.EMA) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.EMA.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.EMA) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 2;
            break;
          }
          case 26: {
            com.aperture.policy.language.v1.ArithmeticCombinator.Builder subBuilder = null;
            if (componentCase_ == 3) {
              subBuilder = ((com.aperture.policy.language.v1.ArithmeticCombinator) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.ArithmeticCombinator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.ArithmeticCombinator) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 3;
            break;
          }
          case 34: {
            com.aperture.policy.language.v1.Decider.Builder subBuilder = null;
            if (componentCase_ == 4) {
              subBuilder = ((com.aperture.policy.language.v1.Decider) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.Decider.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.Decider) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 4;
            break;
          }
          case 42: {
            com.aperture.policy.language.v1.ConcurrencyLimiter.Builder subBuilder = null;
            if (componentCase_ == 5) {
              subBuilder = ((com.aperture.policy.language.v1.ConcurrencyLimiter) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.ConcurrencyLimiter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.ConcurrencyLimiter) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 5;
            break;
          }
          case 50: {
            com.aperture.policy.language.v1.RateLimiter.Builder subBuilder = null;
            if (componentCase_ == 6) {
              subBuilder = ((com.aperture.policy.language.v1.RateLimiter) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.RateLimiter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.RateLimiter) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 6;
            break;
          }
          case 58: {
            com.aperture.policy.language.v1.PromQL.Builder subBuilder = null;
            if (componentCase_ == 7) {
              subBuilder = ((com.aperture.policy.language.v1.PromQL) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.PromQL.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.PromQL) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 7;
            break;
          }
          case 66: {
            com.aperture.policy.language.v1.Constant.Builder subBuilder = null;
            if (componentCase_ == 8) {
              subBuilder = ((com.aperture.policy.language.v1.Constant) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.Constant.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.Constant) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 8;
            break;
          }
          case 74: {
            com.aperture.policy.language.v1.Sqrt.Builder subBuilder = null;
            if (componentCase_ == 9) {
              subBuilder = ((com.aperture.policy.language.v1.Sqrt) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.Sqrt.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.Sqrt) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 9;
            break;
          }
          case 82: {
            com.aperture.policy.language.v1.Extrapolator.Builder subBuilder = null;
            if (componentCase_ == 10) {
              subBuilder = ((com.aperture.policy.language.v1.Extrapolator) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.Extrapolator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.Extrapolator) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 10;
            break;
          }
          case 90: {
            com.aperture.policy.language.v1.Max.Builder subBuilder = null;
            if (componentCase_ == 11) {
              subBuilder = ((com.aperture.policy.language.v1.Max) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.Max.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.Max) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 11;
            break;
          }
          case 98: {
            com.aperture.policy.language.v1.Min.Builder subBuilder = null;
            if (componentCase_ == 12) {
              subBuilder = ((com.aperture.policy.language.v1.Min) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.aperture.policy.language.v1.Min.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.aperture.policy.language.v1.Min) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 12;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.policy.language.v1.Component.class, com.aperture.policy.language.v1.Component.Builder.class);
  }

  private int componentCase_ = 0;
  private java.lang.Object component_;
  public enum ComponentCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    GRADIENT_CONTROLLER(1),
    EMA(2),
    ARITHMETIC_COMBINATOR(3),
    DECIDER(4),
    CONCURRENCY_LIMITER(5),
    RATE_LIMITER(6),
    PROMQL(7),
    CONSTANT(8),
    SQRT(9),
    EXTRAPOLATOR(10),
    MAX(11),
    MIN(12),
    COMPONENT_NOT_SET(0);
    private final int value;
    private ComponentCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ComponentCase valueOf(int value) {
      return forNumber(value);
    }

    public static ComponentCase forNumber(int value) {
      switch (value) {
        case 1: return GRADIENT_CONTROLLER;
        case 2: return EMA;
        case 3: return ARITHMETIC_COMBINATOR;
        case 4: return DECIDER;
        case 5: return CONCURRENCY_LIMITER;
        case 6: return RATE_LIMITER;
        case 7: return PROMQL;
        case 8: return CONSTANT;
        case 9: return SQRT;
        case 10: return EXTRAPOLATOR;
        case 11: return MAX;
        case 12: return MIN;
        case 0: return COMPONENT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ComponentCase
  getComponentCase() {
    return ComponentCase.forNumber(
        componentCase_);
  }

  public static final int GRADIENT_CONTROLLER_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   * @return Whether the gradientController field is set.
   */
  @java.lang.Override
  public boolean hasGradientController() {
    return componentCase_ == 1;
  }
  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   * @return The gradientController.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.GradientController getGradientController() {
    if (componentCase_ == 1) {
       return (com.aperture.policy.language.v1.GradientController) component_;
    }
    return com.aperture.policy.language.v1.GradientController.getDefaultInstance();
  }
  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.GradientControllerOrBuilder getGradientControllerOrBuilder() {
    if (componentCase_ == 1) {
       return (com.aperture.policy.language.v1.GradientController) component_;
    }
    return com.aperture.policy.language.v1.GradientController.getDefaultInstance();
  }

  public static final int EMA_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   * @return Whether the ema field is set.
   */
  @java.lang.Override
  public boolean hasEma() {
    return componentCase_ == 2;
  }
  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   * @return The ema.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.EMA getEma() {
    if (componentCase_ == 2) {
       return (com.aperture.policy.language.v1.EMA) component_;
    }
    return com.aperture.policy.language.v1.EMA.getDefaultInstance();
  }
  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.EMAOrBuilder getEmaOrBuilder() {
    if (componentCase_ == 2) {
       return (com.aperture.policy.language.v1.EMA) component_;
    }
    return com.aperture.policy.language.v1.EMA.getDefaultInstance();
  }

  public static final int ARITHMETIC_COMBINATOR_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   * @return Whether the arithmeticCombinator field is set.
   */
  @java.lang.Override
  public boolean hasArithmeticCombinator() {
    return componentCase_ == 3;
  }
  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   * @return The arithmeticCombinator.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ArithmeticCombinator getArithmeticCombinator() {
    if (componentCase_ == 3) {
       return (com.aperture.policy.language.v1.ArithmeticCombinator) component_;
    }
    return com.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
  }
  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder getArithmeticCombinatorOrBuilder() {
    if (componentCase_ == 3) {
       return (com.aperture.policy.language.v1.ArithmeticCombinator) component_;
    }
    return com.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
  }

  public static final int DECIDER_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   * @return Whether the decider field is set.
   */
  @java.lang.Override
  public boolean hasDecider() {
    return componentCase_ == 4;
  }
  /**
   * <pre>
   * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   * @return The decider.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Decider getDecider() {
    if (componentCase_ == 4) {
       return (com.aperture.policy.language.v1.Decider) component_;
    }
    return com.aperture.policy.language.v1.Decider.getDefaultInstance();
  }
  /**
   * <pre>
   * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.DeciderOrBuilder getDeciderOrBuilder() {
    if (componentCase_ == 4) {
       return (com.aperture.policy.language.v1.Decider) component_;
    }
    return com.aperture.policy.language.v1.Decider.getDefaultInstance();
  }

  public static final int CONCURRENCY_LIMITER_FIELD_NUMBER = 5;
  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
   * @return Whether the concurrencyLimiter field is set.
   */
  @java.lang.Override
  public boolean hasConcurrencyLimiter() {
    return componentCase_ == 5;
  }
  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
   * @return The concurrencyLimiter.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ConcurrencyLimiter getConcurrencyLimiter() {
    if (componentCase_ == 5) {
       return (com.aperture.policy.language.v1.ConcurrencyLimiter) component_;
    }
    return com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
  }
  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder getConcurrencyLimiterOrBuilder() {
    if (componentCase_ == 5) {
       return (com.aperture.policy.language.v1.ConcurrencyLimiter) component_;
    }
    return com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
  }

  public static final int RATE_LIMITER_FIELD_NUMBER = 6;
  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
   * @return Whether the rateLimiter field is set.
   */
  @java.lang.Override
  public boolean hasRateLimiter() {
    return componentCase_ == 6;
  }
  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
   * @return The rateLimiter.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.RateLimiter getRateLimiter() {
    if (componentCase_ == 6) {
       return (com.aperture.policy.language.v1.RateLimiter) component_;
    }
    return com.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
  }
  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.RateLimiterOrBuilder getRateLimiterOrBuilder() {
    if (componentCase_ == 6) {
       return (com.aperture.policy.language.v1.RateLimiter) component_;
    }
    return com.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
  }

  public static final int PROMQL_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Periodically runs a Prometheus query in the background and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
   * @return Whether the promql field is set.
   */
  @java.lang.Override
  public boolean hasPromql() {
    return componentCase_ == 7;
  }
  /**
   * <pre>
   * Periodically runs a Prometheus query in the background and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
   * @return The promql.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.PromQL getPromql() {
    if (componentCase_ == 7) {
       return (com.aperture.policy.language.v1.PromQL) component_;
    }
    return com.aperture.policy.language.v1.PromQL.getDefaultInstance();
  }
  /**
   * <pre>
   * Periodically runs a Prometheus query in the background and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.PromQLOrBuilder getPromqlOrBuilder() {
    if (componentCase_ == 7) {
       return (com.aperture.policy.language.v1.PromQL) component_;
    }
    return com.aperture.policy.language.v1.PromQL.getDefaultInstance();
  }

  public static final int CONSTANT_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Emits a constant signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
   * @return Whether the constant field is set.
   */
  @java.lang.Override
  public boolean hasConstant() {
    return componentCase_ == 8;
  }
  /**
   * <pre>
   * Emits a constant signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
   * @return The constant.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Constant getConstant() {
    if (componentCase_ == 8) {
       return (com.aperture.policy.language.v1.Constant) component_;
    }
    return com.aperture.policy.language.v1.Constant.getDefaultInstance();
  }
  /**
   * <pre>
   * Emits a constant signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ConstantOrBuilder getConstantOrBuilder() {
    if (componentCase_ == 8) {
       return (com.aperture.policy.language.v1.Constant) component_;
    }
    return com.aperture.policy.language.v1.Constant.getDefaultInstance();
  }

  public static final int SQRT_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
   * @return Whether the sqrt field is set.
   */
  @java.lang.Override
  public boolean hasSqrt() {
    return componentCase_ == 9;
  }
  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
   * @return The sqrt.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Sqrt getSqrt() {
    if (componentCase_ == 9) {
       return (com.aperture.policy.language.v1.Sqrt) component_;
    }
    return com.aperture.policy.language.v1.Sqrt.getDefaultInstance();
  }
  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.SqrtOrBuilder getSqrtOrBuilder() {
    if (componentCase_ == 9) {
       return (com.aperture.policy.language.v1.Sqrt) component_;
    }
    return com.aperture.policy.language.v1.Sqrt.getDefaultInstance();
  }

  public static final int EXTRAPOLATOR_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
   * @return Whether the extrapolator field is set.
   */
  @java.lang.Override
  public boolean hasExtrapolator() {
    return componentCase_ == 10;
  }
  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
   * @return The extrapolator.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Extrapolator getExtrapolator() {
    if (componentCase_ == 10) {
       return (com.aperture.policy.language.v1.Extrapolator) component_;
    }
    return com.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
  }
  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.ExtrapolatorOrBuilder getExtrapolatorOrBuilder() {
    if (componentCase_ == 10) {
       return (com.aperture.policy.language.v1.Extrapolator) component_;
    }
    return com.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
  }

  public static final int MAX_FIELD_NUMBER = 11;
  /**
   * <pre>
   * Emits the maximum of the input siganls.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
   * @return Whether the max field is set.
   */
  @java.lang.Override
  public boolean hasMax() {
    return componentCase_ == 11;
  }
  /**
   * <pre>
   * Emits the maximum of the input siganls.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
   * @return The max.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Max getMax() {
    if (componentCase_ == 11) {
       return (com.aperture.policy.language.v1.Max) component_;
    }
    return com.aperture.policy.language.v1.Max.getDefaultInstance();
  }
  /**
   * <pre>
   * Emits the maximum of the input siganls.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.MaxOrBuilder getMaxOrBuilder() {
    if (componentCase_ == 11) {
       return (com.aperture.policy.language.v1.Max) component_;
    }
    return com.aperture.policy.language.v1.Max.getDefaultInstance();
  }

  public static final int MIN_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
   * @return Whether the min field is set.
   */
  @java.lang.Override
  public boolean hasMin() {
    return componentCase_ == 12;
  }
  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
   * @return The min.
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.Min getMin() {
    if (componentCase_ == 12) {
       return (com.aperture.policy.language.v1.Min) component_;
    }
    return com.aperture.policy.language.v1.Min.getDefaultInstance();
  }
  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
   */
  @java.lang.Override
  public com.aperture.policy.language.v1.MinOrBuilder getMinOrBuilder() {
    if (componentCase_ == 12) {
       return (com.aperture.policy.language.v1.Min) component_;
    }
    return com.aperture.policy.language.v1.Min.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (componentCase_ == 1) {
      output.writeMessage(1, (com.aperture.policy.language.v1.GradientController) component_);
    }
    if (componentCase_ == 2) {
      output.writeMessage(2, (com.aperture.policy.language.v1.EMA) component_);
    }
    if (componentCase_ == 3) {
      output.writeMessage(3, (com.aperture.policy.language.v1.ArithmeticCombinator) component_);
    }
    if (componentCase_ == 4) {
      output.writeMessage(4, (com.aperture.policy.language.v1.Decider) component_);
    }
    if (componentCase_ == 5) {
      output.writeMessage(5, (com.aperture.policy.language.v1.ConcurrencyLimiter) component_);
    }
    if (componentCase_ == 6) {
      output.writeMessage(6, (com.aperture.policy.language.v1.RateLimiter) component_);
    }
    if (componentCase_ == 7) {
      output.writeMessage(7, (com.aperture.policy.language.v1.PromQL) component_);
    }
    if (componentCase_ == 8) {
      output.writeMessage(8, (com.aperture.policy.language.v1.Constant) component_);
    }
    if (componentCase_ == 9) {
      output.writeMessage(9, (com.aperture.policy.language.v1.Sqrt) component_);
    }
    if (componentCase_ == 10) {
      output.writeMessage(10, (com.aperture.policy.language.v1.Extrapolator) component_);
    }
    if (componentCase_ == 11) {
      output.writeMessage(11, (com.aperture.policy.language.v1.Max) component_);
    }
    if (componentCase_ == 12) {
      output.writeMessage(12, (com.aperture.policy.language.v1.Min) component_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (componentCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.aperture.policy.language.v1.GradientController) component_);
    }
    if (componentCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.aperture.policy.language.v1.EMA) component_);
    }
    if (componentCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.aperture.policy.language.v1.ArithmeticCombinator) component_);
    }
    if (componentCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.aperture.policy.language.v1.Decider) component_);
    }
    if (componentCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.aperture.policy.language.v1.ConcurrencyLimiter) component_);
    }
    if (componentCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (com.aperture.policy.language.v1.RateLimiter) component_);
    }
    if (componentCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (com.aperture.policy.language.v1.PromQL) component_);
    }
    if (componentCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.aperture.policy.language.v1.Constant) component_);
    }
    if (componentCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (com.aperture.policy.language.v1.Sqrt) component_);
    }
    if (componentCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (com.aperture.policy.language.v1.Extrapolator) component_);
    }
    if (componentCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (com.aperture.policy.language.v1.Max) component_);
    }
    if (componentCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (com.aperture.policy.language.v1.Min) component_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.policy.language.v1.Component)) {
      return super.equals(obj);
    }
    com.aperture.policy.language.v1.Component other = (com.aperture.policy.language.v1.Component) obj;

    if (!getComponentCase().equals(other.getComponentCase())) return false;
    switch (componentCase_) {
      case 1:
        if (!getGradientController()
            .equals(other.getGradientController())) return false;
        break;
      case 2:
        if (!getEma()
            .equals(other.getEma())) return false;
        break;
      case 3:
        if (!getArithmeticCombinator()
            .equals(other.getArithmeticCombinator())) return false;
        break;
      case 4:
        if (!getDecider()
            .equals(other.getDecider())) return false;
        break;
      case 5:
        if (!getConcurrencyLimiter()
            .equals(other.getConcurrencyLimiter())) return false;
        break;
      case 6:
        if (!getRateLimiter()
            .equals(other.getRateLimiter())) return false;
        break;
      case 7:
        if (!getPromql()
            .equals(other.getPromql())) return false;
        break;
      case 8:
        if (!getConstant()
            .equals(other.getConstant())) return false;
        break;
      case 9:
        if (!getSqrt()
            .equals(other.getSqrt())) return false;
        break;
      case 10:
        if (!getExtrapolator()
            .equals(other.getExtrapolator())) return false;
        break;
      case 11:
        if (!getMax()
            .equals(other.getMax())) return false;
        break;
      case 12:
        if (!getMin()
            .equals(other.getMin())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (componentCase_) {
      case 1:
        hash = (37 * hash) + GRADIENT_CONTROLLER_FIELD_NUMBER;
        hash = (53 * hash) + getGradientController().hashCode();
        break;
      case 2:
        hash = (37 * hash) + EMA_FIELD_NUMBER;
        hash = (53 * hash) + getEma().hashCode();
        break;
      case 3:
        hash = (37 * hash) + ARITHMETIC_COMBINATOR_FIELD_NUMBER;
        hash = (53 * hash) + getArithmeticCombinator().hashCode();
        break;
      case 4:
        hash = (37 * hash) + DECIDER_FIELD_NUMBER;
        hash = (53 * hash) + getDecider().hashCode();
        break;
      case 5:
        hash = (37 * hash) + CONCURRENCY_LIMITER_FIELD_NUMBER;
        hash = (53 * hash) + getConcurrencyLimiter().hashCode();
        break;
      case 6:
        hash = (37 * hash) + RATE_LIMITER_FIELD_NUMBER;
        hash = (53 * hash) + getRateLimiter().hashCode();
        break;
      case 7:
        hash = (37 * hash) + PROMQL_FIELD_NUMBER;
        hash = (53 * hash) + getPromql().hashCode();
        break;
      case 8:
        hash = (37 * hash) + CONSTANT_FIELD_NUMBER;
        hash = (53 * hash) + getConstant().hashCode();
        break;
      case 9:
        hash = (37 * hash) + SQRT_FIELD_NUMBER;
        hash = (53 * hash) + getSqrt().hashCode();
        break;
      case 10:
        hash = (37 * hash) + EXTRAPOLATOR_FIELD_NUMBER;
        hash = (53 * hash) + getExtrapolator().hashCode();
        break;
      case 11:
        hash = (37 * hash) + MAX_FIELD_NUMBER;
        hash = (53 * hash) + getMax().hashCode();
        break;
      case 12:
        hash = (37 * hash) + MIN_FIELD_NUMBER;
        hash = (53 * hash) + getMin().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.policy.language.v1.Component parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Component parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Component parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.policy.language.v1.Component parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.policy.language.v1.Component prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Computational blocks that form the circuit.
   * Signals flow into the components via input ports and results are emitted on output ports.
   * Components are wired to each other based on signal names forming an execution graph of the circuit.
   * Loops are broken by the runtime at the earliest component index that is part of the loop.
   * The looped signals are saved in the tick they are generated and served in the subsequent tick.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.Component}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.Component)
      com.aperture.policy.language.v1.ComponentOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.policy.language.v1.Component.class, com.aperture.policy.language.v1.Component.Builder.class);
    }

    // Construct using com.aperture.policy.language.v1.Component.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      componentCase_ = 0;
      component_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_descriptor;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Component getDefaultInstanceForType() {
      return com.aperture.policy.language.v1.Component.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Component build() {
      com.aperture.policy.language.v1.Component result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.policy.language.v1.Component buildPartial() {
      com.aperture.policy.language.v1.Component result = new com.aperture.policy.language.v1.Component(this);
      if (componentCase_ == 1) {
        if (gradientControllerBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = gradientControllerBuilder_.build();
        }
      }
      if (componentCase_ == 2) {
        if (emaBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = emaBuilder_.build();
        }
      }
      if (componentCase_ == 3) {
        if (arithmeticCombinatorBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = arithmeticCombinatorBuilder_.build();
        }
      }
      if (componentCase_ == 4) {
        if (deciderBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = deciderBuilder_.build();
        }
      }
      if (componentCase_ == 5) {
        if (concurrencyLimiterBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = concurrencyLimiterBuilder_.build();
        }
      }
      if (componentCase_ == 6) {
        if (rateLimiterBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = rateLimiterBuilder_.build();
        }
      }
      if (componentCase_ == 7) {
        if (promqlBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = promqlBuilder_.build();
        }
      }
      if (componentCase_ == 8) {
        if (constantBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = constantBuilder_.build();
        }
      }
      if (componentCase_ == 9) {
        if (sqrtBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = sqrtBuilder_.build();
        }
      }
      if (componentCase_ == 10) {
        if (extrapolatorBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = extrapolatorBuilder_.build();
        }
      }
      if (componentCase_ == 11) {
        if (maxBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = maxBuilder_.build();
        }
      }
      if (componentCase_ == 12) {
        if (minBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = minBuilder_.build();
        }
      }
      result.componentCase_ = componentCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.policy.language.v1.Component) {
        return mergeFrom((com.aperture.policy.language.v1.Component)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.policy.language.v1.Component other) {
      if (other == com.aperture.policy.language.v1.Component.getDefaultInstance()) return this;
      switch (other.getComponentCase()) {
        case GRADIENT_CONTROLLER: {
          mergeGradientController(other.getGradientController());
          break;
        }
        case EMA: {
          mergeEma(other.getEma());
          break;
        }
        case ARITHMETIC_COMBINATOR: {
          mergeArithmeticCombinator(other.getArithmeticCombinator());
          break;
        }
        case DECIDER: {
          mergeDecider(other.getDecider());
          break;
        }
        case CONCURRENCY_LIMITER: {
          mergeConcurrencyLimiter(other.getConcurrencyLimiter());
          break;
        }
        case RATE_LIMITER: {
          mergeRateLimiter(other.getRateLimiter());
          break;
        }
        case PROMQL: {
          mergePromql(other.getPromql());
          break;
        }
        case CONSTANT: {
          mergeConstant(other.getConstant());
          break;
        }
        case SQRT: {
          mergeSqrt(other.getSqrt());
          break;
        }
        case EXTRAPOLATOR: {
          mergeExtrapolator(other.getExtrapolator());
          break;
        }
        case MAX: {
          mergeMax(other.getMax());
          break;
        }
        case MIN: {
          mergeMin(other.getMin());
          break;
        }
        case COMPONENT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.policy.language.v1.Component parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.policy.language.v1.Component) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int componentCase_ = 0;
    private java.lang.Object component_;
    public ComponentCase
        getComponentCase() {
      return ComponentCase.forNumber(
          componentCase_);
    }

    public Builder clearComponent() {
      componentCase_ = 0;
      component_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.GradientController, com.aperture.policy.language.v1.GradientController.Builder, com.aperture.policy.language.v1.GradientControllerOrBuilder> gradientControllerBuilder_;
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     * @return Whether the gradientController field is set.
     */
    @java.lang.Override
    public boolean hasGradientController() {
      return componentCase_ == 1;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     * @return The gradientController.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.GradientController getGradientController() {
      if (gradientControllerBuilder_ == null) {
        if (componentCase_ == 1) {
          return (com.aperture.policy.language.v1.GradientController) component_;
        }
        return com.aperture.policy.language.v1.GradientController.getDefaultInstance();
      } else {
        if (componentCase_ == 1) {
          return gradientControllerBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.GradientController.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public Builder setGradientController(com.aperture.policy.language.v1.GradientController value) {
      if (gradientControllerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        gradientControllerBuilder_.setMessage(value);
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public Builder setGradientController(
        com.aperture.policy.language.v1.GradientController.Builder builderForValue) {
      if (gradientControllerBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        gradientControllerBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public Builder mergeGradientController(com.aperture.policy.language.v1.GradientController value) {
      if (gradientControllerBuilder_ == null) {
        if (componentCase_ == 1 &&
            component_ != com.aperture.policy.language.v1.GradientController.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.GradientController.newBuilder((com.aperture.policy.language.v1.GradientController) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 1) {
          gradientControllerBuilder_.mergeFrom(value);
        } else {
          gradientControllerBuilder_.setMessage(value);
        }
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public Builder clearGradientController() {
      if (gradientControllerBuilder_ == null) {
        if (componentCase_ == 1) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 1) {
          componentCase_ = 0;
          component_ = null;
        }
        gradientControllerBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public com.aperture.policy.language.v1.GradientController.Builder getGradientControllerBuilder() {
      return getGradientControllerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.GradientControllerOrBuilder getGradientControllerOrBuilder() {
      if ((componentCase_ == 1) && (gradientControllerBuilder_ != null)) {
        return gradientControllerBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 1) {
          return (com.aperture.policy.language.v1.GradientController) component_;
        }
        return com.aperture.policy.language.v1.GradientController.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.GradientController, com.aperture.policy.language.v1.GradientController.Builder, com.aperture.policy.language.v1.GradientControllerOrBuilder>
        getGradientControllerFieldBuilder() {
      if (gradientControllerBuilder_ == null) {
        if (!(componentCase_ == 1)) {
          component_ = com.aperture.policy.language.v1.GradientController.getDefaultInstance();
        }
        gradientControllerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.GradientController, com.aperture.policy.language.v1.GradientController.Builder, com.aperture.policy.language.v1.GradientControllerOrBuilder>(
                (com.aperture.policy.language.v1.GradientController) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 1;
      onChanged();;
      return gradientControllerBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.EMA, com.aperture.policy.language.v1.EMA.Builder, com.aperture.policy.language.v1.EMAOrBuilder> emaBuilder_;
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     * @return Whether the ema field is set.
     */
    @java.lang.Override
    public boolean hasEma() {
      return componentCase_ == 2;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     * @return The ema.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.EMA getEma() {
      if (emaBuilder_ == null) {
        if (componentCase_ == 2) {
          return (com.aperture.policy.language.v1.EMA) component_;
        }
        return com.aperture.policy.language.v1.EMA.getDefaultInstance();
      } else {
        if (componentCase_ == 2) {
          return emaBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.EMA.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public Builder setEma(com.aperture.policy.language.v1.EMA value) {
      if (emaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        emaBuilder_.setMessage(value);
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public Builder setEma(
        com.aperture.policy.language.v1.EMA.Builder builderForValue) {
      if (emaBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        emaBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public Builder mergeEma(com.aperture.policy.language.v1.EMA value) {
      if (emaBuilder_ == null) {
        if (componentCase_ == 2 &&
            component_ != com.aperture.policy.language.v1.EMA.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.EMA.newBuilder((com.aperture.policy.language.v1.EMA) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 2) {
          emaBuilder_.mergeFrom(value);
        } else {
          emaBuilder_.setMessage(value);
        }
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public Builder clearEma() {
      if (emaBuilder_ == null) {
        if (componentCase_ == 2) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 2) {
          componentCase_ = 0;
          component_ = null;
        }
        emaBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public com.aperture.policy.language.v1.EMA.Builder getEmaBuilder() {
      return getEmaFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.EMAOrBuilder getEmaOrBuilder() {
      if ((componentCase_ == 2) && (emaBuilder_ != null)) {
        return emaBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 2) {
          return (com.aperture.policy.language.v1.EMA) component_;
        }
        return com.aperture.policy.language.v1.EMA.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.EMA, com.aperture.policy.language.v1.EMA.Builder, com.aperture.policy.language.v1.EMAOrBuilder>
        getEmaFieldBuilder() {
      if (emaBuilder_ == null) {
        if (!(componentCase_ == 2)) {
          component_ = com.aperture.policy.language.v1.EMA.getDefaultInstance();
        }
        emaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.EMA, com.aperture.policy.language.v1.EMA.Builder, com.aperture.policy.language.v1.EMAOrBuilder>(
                (com.aperture.policy.language.v1.EMA) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 2;
      onChanged();;
      return emaBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.ArithmeticCombinator, com.aperture.policy.language.v1.ArithmeticCombinator.Builder, com.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder> arithmeticCombinatorBuilder_;
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     * @return Whether the arithmeticCombinator field is set.
     */
    @java.lang.Override
    public boolean hasArithmeticCombinator() {
      return componentCase_ == 3;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     * @return The arithmeticCombinator.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.ArithmeticCombinator getArithmeticCombinator() {
      if (arithmeticCombinatorBuilder_ == null) {
        if (componentCase_ == 3) {
          return (com.aperture.policy.language.v1.ArithmeticCombinator) component_;
        }
        return com.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
      } else {
        if (componentCase_ == 3) {
          return arithmeticCombinatorBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public Builder setArithmeticCombinator(com.aperture.policy.language.v1.ArithmeticCombinator value) {
      if (arithmeticCombinatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        arithmeticCombinatorBuilder_.setMessage(value);
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public Builder setArithmeticCombinator(
        com.aperture.policy.language.v1.ArithmeticCombinator.Builder builderForValue) {
      if (arithmeticCombinatorBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        arithmeticCombinatorBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public Builder mergeArithmeticCombinator(com.aperture.policy.language.v1.ArithmeticCombinator value) {
      if (arithmeticCombinatorBuilder_ == null) {
        if (componentCase_ == 3 &&
            component_ != com.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.ArithmeticCombinator.newBuilder((com.aperture.policy.language.v1.ArithmeticCombinator) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 3) {
          arithmeticCombinatorBuilder_.mergeFrom(value);
        } else {
          arithmeticCombinatorBuilder_.setMessage(value);
        }
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public Builder clearArithmeticCombinator() {
      if (arithmeticCombinatorBuilder_ == null) {
        if (componentCase_ == 3) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 3) {
          componentCase_ = 0;
          component_ = null;
        }
        arithmeticCombinatorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public com.aperture.policy.language.v1.ArithmeticCombinator.Builder getArithmeticCombinatorBuilder() {
      return getArithmeticCombinatorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder getArithmeticCombinatorOrBuilder() {
      if ((componentCase_ == 3) && (arithmeticCombinatorBuilder_ != null)) {
        return arithmeticCombinatorBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 3) {
          return (com.aperture.policy.language.v1.ArithmeticCombinator) component_;
        }
        return com.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.ArithmeticCombinator, com.aperture.policy.language.v1.ArithmeticCombinator.Builder, com.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder>
        getArithmeticCombinatorFieldBuilder() {
      if (arithmeticCombinatorBuilder_ == null) {
        if (!(componentCase_ == 3)) {
          component_ = com.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
        }
        arithmeticCombinatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.ArithmeticCombinator, com.aperture.policy.language.v1.ArithmeticCombinator.Builder, com.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder>(
                (com.aperture.policy.language.v1.ArithmeticCombinator) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 3;
      onChanged();;
      return arithmeticCombinatorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Decider, com.aperture.policy.language.v1.Decider.Builder, com.aperture.policy.language.v1.DeciderOrBuilder> deciderBuilder_;
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     * @return Whether the decider field is set.
     */
    @java.lang.Override
    public boolean hasDecider() {
      return componentCase_ == 4;
    }
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     * @return The decider.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Decider getDecider() {
      if (deciderBuilder_ == null) {
        if (componentCase_ == 4) {
          return (com.aperture.policy.language.v1.Decider) component_;
        }
        return com.aperture.policy.language.v1.Decider.getDefaultInstance();
      } else {
        if (componentCase_ == 4) {
          return deciderBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.Decider.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public Builder setDecider(com.aperture.policy.language.v1.Decider value) {
      if (deciderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        deciderBuilder_.setMessage(value);
      }
      componentCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public Builder setDecider(
        com.aperture.policy.language.v1.Decider.Builder builderForValue) {
      if (deciderBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        deciderBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public Builder mergeDecider(com.aperture.policy.language.v1.Decider value) {
      if (deciderBuilder_ == null) {
        if (componentCase_ == 4 &&
            component_ != com.aperture.policy.language.v1.Decider.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.Decider.newBuilder((com.aperture.policy.language.v1.Decider) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 4) {
          deciderBuilder_.mergeFrom(value);
        } else {
          deciderBuilder_.setMessage(value);
        }
      }
      componentCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public Builder clearDecider() {
      if (deciderBuilder_ == null) {
        if (componentCase_ == 4) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 4) {
          componentCase_ = 0;
          component_ = null;
        }
        deciderBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public com.aperture.policy.language.v1.Decider.Builder getDeciderBuilder() {
      return getDeciderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.DeciderOrBuilder getDeciderOrBuilder() {
      if ((componentCase_ == 4) && (deciderBuilder_ != null)) {
        return deciderBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 4) {
          return (com.aperture.policy.language.v1.Decider) component_;
        }
        return com.aperture.policy.language.v1.Decider.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Decider acts as a switch that emits one of the two signals based on the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Decider, com.aperture.policy.language.v1.Decider.Builder, com.aperture.policy.language.v1.DeciderOrBuilder>
        getDeciderFieldBuilder() {
      if (deciderBuilder_ == null) {
        if (!(componentCase_ == 4)) {
          component_ = com.aperture.policy.language.v1.Decider.getDefaultInstance();
        }
        deciderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.Decider, com.aperture.policy.language.v1.Decider.Builder, com.aperture.policy.language.v1.DeciderOrBuilder>(
                (com.aperture.policy.language.v1.Decider) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 4;
      onChanged();;
      return deciderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.ConcurrencyLimiter, com.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder> concurrencyLimiterBuilder_;
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     * @return Whether the concurrencyLimiter field is set.
     */
    @java.lang.Override
    public boolean hasConcurrencyLimiter() {
      return componentCase_ == 5;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     * @return The concurrencyLimiter.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.ConcurrencyLimiter getConcurrencyLimiter() {
      if (concurrencyLimiterBuilder_ == null) {
        if (componentCase_ == 5) {
          return (com.aperture.policy.language.v1.ConcurrencyLimiter) component_;
        }
        return com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
      } else {
        if (componentCase_ == 5) {
          return concurrencyLimiterBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder setConcurrencyLimiter(com.aperture.policy.language.v1.ConcurrencyLimiter value) {
      if (concurrencyLimiterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        concurrencyLimiterBuilder_.setMessage(value);
      }
      componentCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder setConcurrencyLimiter(
        com.aperture.policy.language.v1.ConcurrencyLimiter.Builder builderForValue) {
      if (concurrencyLimiterBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        concurrencyLimiterBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder mergeConcurrencyLimiter(com.aperture.policy.language.v1.ConcurrencyLimiter value) {
      if (concurrencyLimiterBuilder_ == null) {
        if (componentCase_ == 5 &&
            component_ != com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.ConcurrencyLimiter.newBuilder((com.aperture.policy.language.v1.ConcurrencyLimiter) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 5) {
          concurrencyLimiterBuilder_.mergeFrom(value);
        } else {
          concurrencyLimiterBuilder_.setMessage(value);
        }
      }
      componentCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder clearConcurrencyLimiter() {
      if (concurrencyLimiterBuilder_ == null) {
        if (componentCase_ == 5) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 5) {
          componentCase_ = 0;
          component_ = null;
        }
        concurrencyLimiterBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     */
    public com.aperture.policy.language.v1.ConcurrencyLimiter.Builder getConcurrencyLimiterBuilder() {
      return getConcurrencyLimiterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder getConcurrencyLimiterOrBuilder() {
      if ((componentCase_ == 5) && (concurrencyLimiterBuilder_ != null)) {
        return concurrencyLimiterBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 5) {
          return (com.aperture.policy.language.v1.ConcurrencyLimiter) component_;
        }
        return com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 5 [json_name = "concurrencyLimiter"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.ConcurrencyLimiter, com.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder>
        getConcurrencyLimiterFieldBuilder() {
      if (concurrencyLimiterBuilder_ == null) {
        if (!(componentCase_ == 5)) {
          component_ = com.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
        }
        concurrencyLimiterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.ConcurrencyLimiter, com.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder>(
                (com.aperture.policy.language.v1.ConcurrencyLimiter) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 5;
      onChanged();;
      return concurrencyLimiterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.RateLimiter, com.aperture.policy.language.v1.RateLimiter.Builder, com.aperture.policy.language.v1.RateLimiterOrBuilder> rateLimiterBuilder_;
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     * @return Whether the rateLimiter field is set.
     */
    @java.lang.Override
    public boolean hasRateLimiter() {
      return componentCase_ == 6;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     * @return The rateLimiter.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.RateLimiter getRateLimiter() {
      if (rateLimiterBuilder_ == null) {
        if (componentCase_ == 6) {
          return (com.aperture.policy.language.v1.RateLimiter) component_;
        }
        return com.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
      } else {
        if (componentCase_ == 6) {
          return rateLimiterBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     */
    public Builder setRateLimiter(com.aperture.policy.language.v1.RateLimiter value) {
      if (rateLimiterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        rateLimiterBuilder_.setMessage(value);
      }
      componentCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     */
    public Builder setRateLimiter(
        com.aperture.policy.language.v1.RateLimiter.Builder builderForValue) {
      if (rateLimiterBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        rateLimiterBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     */
    public Builder mergeRateLimiter(com.aperture.policy.language.v1.RateLimiter value) {
      if (rateLimiterBuilder_ == null) {
        if (componentCase_ == 6 &&
            component_ != com.aperture.policy.language.v1.RateLimiter.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.RateLimiter.newBuilder((com.aperture.policy.language.v1.RateLimiter) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 6) {
          rateLimiterBuilder_.mergeFrom(value);
        } else {
          rateLimiterBuilder_.setMessage(value);
        }
      }
      componentCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     */
    public Builder clearRateLimiter() {
      if (rateLimiterBuilder_ == null) {
        if (componentCase_ == 6) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 6) {
          componentCase_ = 0;
          component_ = null;
        }
        rateLimiterBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     */
    public com.aperture.policy.language.v1.RateLimiter.Builder getRateLimiterBuilder() {
      return getRateLimiterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.RateLimiterOrBuilder getRateLimiterOrBuilder() {
      if ((componentCase_ == 6) && (rateLimiterBuilder_ != null)) {
        return rateLimiterBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 6) {
          return (com.aperture.policy.language.v1.RateLimiter) component_;
        }
        return com.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 6 [json_name = "rateLimiter"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.RateLimiter, com.aperture.policy.language.v1.RateLimiter.Builder, com.aperture.policy.language.v1.RateLimiterOrBuilder>
        getRateLimiterFieldBuilder() {
      if (rateLimiterBuilder_ == null) {
        if (!(componentCase_ == 6)) {
          component_ = com.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
        }
        rateLimiterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.RateLimiter, com.aperture.policy.language.v1.RateLimiter.Builder, com.aperture.policy.language.v1.RateLimiterOrBuilder>(
                (com.aperture.policy.language.v1.RateLimiter) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 6;
      onChanged();;
      return rateLimiterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.PromQL, com.aperture.policy.language.v1.PromQL.Builder, com.aperture.policy.language.v1.PromQLOrBuilder> promqlBuilder_;
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     * @return Whether the promql field is set.
     */
    @java.lang.Override
    public boolean hasPromql() {
      return componentCase_ == 7;
    }
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     * @return The promql.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.PromQL getPromql() {
      if (promqlBuilder_ == null) {
        if (componentCase_ == 7) {
          return (com.aperture.policy.language.v1.PromQL) component_;
        }
        return com.aperture.policy.language.v1.PromQL.getDefaultInstance();
      } else {
        if (componentCase_ == 7) {
          return promqlBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.PromQL.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     */
    public Builder setPromql(com.aperture.policy.language.v1.PromQL value) {
      if (promqlBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        promqlBuilder_.setMessage(value);
      }
      componentCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     */
    public Builder setPromql(
        com.aperture.policy.language.v1.PromQL.Builder builderForValue) {
      if (promqlBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        promqlBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     */
    public Builder mergePromql(com.aperture.policy.language.v1.PromQL value) {
      if (promqlBuilder_ == null) {
        if (componentCase_ == 7 &&
            component_ != com.aperture.policy.language.v1.PromQL.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.PromQL.newBuilder((com.aperture.policy.language.v1.PromQL) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 7) {
          promqlBuilder_.mergeFrom(value);
        } else {
          promqlBuilder_.setMessage(value);
        }
      }
      componentCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     */
    public Builder clearPromql() {
      if (promqlBuilder_ == null) {
        if (componentCase_ == 7) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 7) {
          componentCase_ = 0;
          component_ = null;
        }
        promqlBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     */
    public com.aperture.policy.language.v1.PromQL.Builder getPromqlBuilder() {
      return getPromqlFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.PromQLOrBuilder getPromqlOrBuilder() {
      if ((componentCase_ == 7) && (promqlBuilder_ != null)) {
        return promqlBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 7) {
          return (com.aperture.policy.language.v1.PromQL) component_;
        }
        return com.aperture.policy.language.v1.PromQL.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Periodically runs a Prometheus query in the background and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PromQL promql = 7 [json_name = "promql"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.PromQL, com.aperture.policy.language.v1.PromQL.Builder, com.aperture.policy.language.v1.PromQLOrBuilder>
        getPromqlFieldBuilder() {
      if (promqlBuilder_ == null) {
        if (!(componentCase_ == 7)) {
          component_ = com.aperture.policy.language.v1.PromQL.getDefaultInstance();
        }
        promqlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.PromQL, com.aperture.policy.language.v1.PromQL.Builder, com.aperture.policy.language.v1.PromQLOrBuilder>(
                (com.aperture.policy.language.v1.PromQL) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 7;
      onChanged();;
      return promqlBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Constant, com.aperture.policy.language.v1.Constant.Builder, com.aperture.policy.language.v1.ConstantOrBuilder> constantBuilder_;
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     * @return Whether the constant field is set.
     */
    @java.lang.Override
    public boolean hasConstant() {
      return componentCase_ == 8;
    }
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     * @return The constant.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Constant getConstant() {
      if (constantBuilder_ == null) {
        if (componentCase_ == 8) {
          return (com.aperture.policy.language.v1.Constant) component_;
        }
        return com.aperture.policy.language.v1.Constant.getDefaultInstance();
      } else {
        if (componentCase_ == 8) {
          return constantBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.Constant.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     */
    public Builder setConstant(com.aperture.policy.language.v1.Constant value) {
      if (constantBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        constantBuilder_.setMessage(value);
      }
      componentCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     */
    public Builder setConstant(
        com.aperture.policy.language.v1.Constant.Builder builderForValue) {
      if (constantBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        constantBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     */
    public Builder mergeConstant(com.aperture.policy.language.v1.Constant value) {
      if (constantBuilder_ == null) {
        if (componentCase_ == 8 &&
            component_ != com.aperture.policy.language.v1.Constant.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.Constant.newBuilder((com.aperture.policy.language.v1.Constant) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 8) {
          constantBuilder_.mergeFrom(value);
        } else {
          constantBuilder_.setMessage(value);
        }
      }
      componentCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     */
    public Builder clearConstant() {
      if (constantBuilder_ == null) {
        if (componentCase_ == 8) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 8) {
          componentCase_ = 0;
          component_ = null;
        }
        constantBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     */
    public com.aperture.policy.language.v1.Constant.Builder getConstantBuilder() {
      return getConstantFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.ConstantOrBuilder getConstantOrBuilder() {
      if ((componentCase_ == 8) && (constantBuilder_ != null)) {
        return constantBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 8) {
          return (com.aperture.policy.language.v1.Constant) component_;
        }
        return com.aperture.policy.language.v1.Constant.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits a constant signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Constant constant = 8 [json_name = "constant"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Constant, com.aperture.policy.language.v1.Constant.Builder, com.aperture.policy.language.v1.ConstantOrBuilder>
        getConstantFieldBuilder() {
      if (constantBuilder_ == null) {
        if (!(componentCase_ == 8)) {
          component_ = com.aperture.policy.language.v1.Constant.getDefaultInstance();
        }
        constantBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.Constant, com.aperture.policy.language.v1.Constant.Builder, com.aperture.policy.language.v1.ConstantOrBuilder>(
                (com.aperture.policy.language.v1.Constant) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 8;
      onChanged();;
      return constantBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Sqrt, com.aperture.policy.language.v1.Sqrt.Builder, com.aperture.policy.language.v1.SqrtOrBuilder> sqrtBuilder_;
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     * @return Whether the sqrt field is set.
     */
    @java.lang.Override
    public boolean hasSqrt() {
      return componentCase_ == 9;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     * @return The sqrt.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Sqrt getSqrt() {
      if (sqrtBuilder_ == null) {
        if (componentCase_ == 9) {
          return (com.aperture.policy.language.v1.Sqrt) component_;
        }
        return com.aperture.policy.language.v1.Sqrt.getDefaultInstance();
      } else {
        if (componentCase_ == 9) {
          return sqrtBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.Sqrt.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     */
    public Builder setSqrt(com.aperture.policy.language.v1.Sqrt value) {
      if (sqrtBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        sqrtBuilder_.setMessage(value);
      }
      componentCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     */
    public Builder setSqrt(
        com.aperture.policy.language.v1.Sqrt.Builder builderForValue) {
      if (sqrtBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        sqrtBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     */
    public Builder mergeSqrt(com.aperture.policy.language.v1.Sqrt value) {
      if (sqrtBuilder_ == null) {
        if (componentCase_ == 9 &&
            component_ != com.aperture.policy.language.v1.Sqrt.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.Sqrt.newBuilder((com.aperture.policy.language.v1.Sqrt) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 9) {
          sqrtBuilder_.mergeFrom(value);
        } else {
          sqrtBuilder_.setMessage(value);
        }
      }
      componentCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     */
    public Builder clearSqrt() {
      if (sqrtBuilder_ == null) {
        if (componentCase_ == 9) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 9) {
          componentCase_ = 0;
          component_ = null;
        }
        sqrtBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     */
    public com.aperture.policy.language.v1.Sqrt.Builder getSqrtBuilder() {
      return getSqrtFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.SqrtOrBuilder getSqrtOrBuilder() {
      if ((componentCase_ == 9) && (sqrtBuilder_ != null)) {
        return sqrtBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 9) {
          return (com.aperture.policy.language.v1.Sqrt) component_;
        }
        return com.aperture.policy.language.v1.Sqrt.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Sqrt sqrt = 9 [json_name = "sqrt"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Sqrt, com.aperture.policy.language.v1.Sqrt.Builder, com.aperture.policy.language.v1.SqrtOrBuilder>
        getSqrtFieldBuilder() {
      if (sqrtBuilder_ == null) {
        if (!(componentCase_ == 9)) {
          component_ = com.aperture.policy.language.v1.Sqrt.getDefaultInstance();
        }
        sqrtBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.Sqrt, com.aperture.policy.language.v1.Sqrt.Builder, com.aperture.policy.language.v1.SqrtOrBuilder>(
                (com.aperture.policy.language.v1.Sqrt) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 9;
      onChanged();;
      return sqrtBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Extrapolator, com.aperture.policy.language.v1.Extrapolator.Builder, com.aperture.policy.language.v1.ExtrapolatorOrBuilder> extrapolatorBuilder_;
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     * @return Whether the extrapolator field is set.
     */
    @java.lang.Override
    public boolean hasExtrapolator() {
      return componentCase_ == 10;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     * @return The extrapolator.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Extrapolator getExtrapolator() {
      if (extrapolatorBuilder_ == null) {
        if (componentCase_ == 10) {
          return (com.aperture.policy.language.v1.Extrapolator) component_;
        }
        return com.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
      } else {
        if (componentCase_ == 10) {
          return extrapolatorBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     */
    public Builder setExtrapolator(com.aperture.policy.language.v1.Extrapolator value) {
      if (extrapolatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        extrapolatorBuilder_.setMessage(value);
      }
      componentCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     */
    public Builder setExtrapolator(
        com.aperture.policy.language.v1.Extrapolator.Builder builderForValue) {
      if (extrapolatorBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        extrapolatorBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     */
    public Builder mergeExtrapolator(com.aperture.policy.language.v1.Extrapolator value) {
      if (extrapolatorBuilder_ == null) {
        if (componentCase_ == 10 &&
            component_ != com.aperture.policy.language.v1.Extrapolator.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.Extrapolator.newBuilder((com.aperture.policy.language.v1.Extrapolator) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 10) {
          extrapolatorBuilder_.mergeFrom(value);
        } else {
          extrapolatorBuilder_.setMessage(value);
        }
      }
      componentCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     */
    public Builder clearExtrapolator() {
      if (extrapolatorBuilder_ == null) {
        if (componentCase_ == 10) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 10) {
          componentCase_ = 0;
          component_ = null;
        }
        extrapolatorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     */
    public com.aperture.policy.language.v1.Extrapolator.Builder getExtrapolatorBuilder() {
      return getExtrapolatorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.ExtrapolatorOrBuilder getExtrapolatorOrBuilder() {
      if ((componentCase_ == 10) && (extrapolatorBuilder_ != null)) {
        return extrapolatorBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 10) {
          return (com.aperture.policy.language.v1.Extrapolator) component_;
        }
        return com.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 10 [json_name = "extrapolator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Extrapolator, com.aperture.policy.language.v1.Extrapolator.Builder, com.aperture.policy.language.v1.ExtrapolatorOrBuilder>
        getExtrapolatorFieldBuilder() {
      if (extrapolatorBuilder_ == null) {
        if (!(componentCase_ == 10)) {
          component_ = com.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
        }
        extrapolatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.Extrapolator, com.aperture.policy.language.v1.Extrapolator.Builder, com.aperture.policy.language.v1.ExtrapolatorOrBuilder>(
                (com.aperture.policy.language.v1.Extrapolator) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 10;
      onChanged();;
      return extrapolatorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Max, com.aperture.policy.language.v1.Max.Builder, com.aperture.policy.language.v1.MaxOrBuilder> maxBuilder_;
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     * @return Whether the max field is set.
     */
    @java.lang.Override
    public boolean hasMax() {
      return componentCase_ == 11;
    }
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     * @return The max.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Max getMax() {
      if (maxBuilder_ == null) {
        if (componentCase_ == 11) {
          return (com.aperture.policy.language.v1.Max) component_;
        }
        return com.aperture.policy.language.v1.Max.getDefaultInstance();
      } else {
        if (componentCase_ == 11) {
          return maxBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.Max.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     */
    public Builder setMax(com.aperture.policy.language.v1.Max value) {
      if (maxBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        maxBuilder_.setMessage(value);
      }
      componentCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     */
    public Builder setMax(
        com.aperture.policy.language.v1.Max.Builder builderForValue) {
      if (maxBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        maxBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     */
    public Builder mergeMax(com.aperture.policy.language.v1.Max value) {
      if (maxBuilder_ == null) {
        if (componentCase_ == 11 &&
            component_ != com.aperture.policy.language.v1.Max.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.Max.newBuilder((com.aperture.policy.language.v1.Max) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 11) {
          maxBuilder_.mergeFrom(value);
        } else {
          maxBuilder_.setMessage(value);
        }
      }
      componentCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     */
    public Builder clearMax() {
      if (maxBuilder_ == null) {
        if (componentCase_ == 11) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 11) {
          componentCase_ = 0;
          component_ = null;
        }
        maxBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     */
    public com.aperture.policy.language.v1.Max.Builder getMaxBuilder() {
      return getMaxFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.MaxOrBuilder getMaxOrBuilder() {
      if ((componentCase_ == 11) && (maxBuilder_ != null)) {
        return maxBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 11) {
          return (com.aperture.policy.language.v1.Max) component_;
        }
        return com.aperture.policy.language.v1.Max.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits the maximum of the input siganls.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 11 [json_name = "max"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Max, com.aperture.policy.language.v1.Max.Builder, com.aperture.policy.language.v1.MaxOrBuilder>
        getMaxFieldBuilder() {
      if (maxBuilder_ == null) {
        if (!(componentCase_ == 11)) {
          component_ = com.aperture.policy.language.v1.Max.getDefaultInstance();
        }
        maxBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.Max, com.aperture.policy.language.v1.Max.Builder, com.aperture.policy.language.v1.MaxOrBuilder>(
                (com.aperture.policy.language.v1.Max) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 11;
      onChanged();;
      return maxBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Min, com.aperture.policy.language.v1.Min.Builder, com.aperture.policy.language.v1.MinOrBuilder> minBuilder_;
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     * @return Whether the min field is set.
     */
    @java.lang.Override
    public boolean hasMin() {
      return componentCase_ == 12;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     * @return The min.
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.Min getMin() {
      if (minBuilder_ == null) {
        if (componentCase_ == 12) {
          return (com.aperture.policy.language.v1.Min) component_;
        }
        return com.aperture.policy.language.v1.Min.getDefaultInstance();
      } else {
        if (componentCase_ == 12) {
          return minBuilder_.getMessage();
        }
        return com.aperture.policy.language.v1.Min.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     */
    public Builder setMin(com.aperture.policy.language.v1.Min value) {
      if (minBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        minBuilder_.setMessage(value);
      }
      componentCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     */
    public Builder setMin(
        com.aperture.policy.language.v1.Min.Builder builderForValue) {
      if (minBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        minBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     */
    public Builder mergeMin(com.aperture.policy.language.v1.Min value) {
      if (minBuilder_ == null) {
        if (componentCase_ == 12 &&
            component_ != com.aperture.policy.language.v1.Min.getDefaultInstance()) {
          component_ = com.aperture.policy.language.v1.Min.newBuilder((com.aperture.policy.language.v1.Min) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 12) {
          minBuilder_.mergeFrom(value);
        } else {
          minBuilder_.setMessage(value);
        }
      }
      componentCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     */
    public Builder clearMin() {
      if (minBuilder_ == null) {
        if (componentCase_ == 12) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 12) {
          componentCase_ = 0;
          component_ = null;
        }
        minBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     */
    public com.aperture.policy.language.v1.Min.Builder getMinBuilder() {
      return getMinFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     */
    @java.lang.Override
    public com.aperture.policy.language.v1.MinOrBuilder getMinOrBuilder() {
      if ((componentCase_ == 12) && (minBuilder_ != null)) {
        return minBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 12) {
          return (com.aperture.policy.language.v1.Min) component_;
        }
        return com.aperture.policy.language.v1.Min.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 12 [json_name = "min"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.policy.language.v1.Min, com.aperture.policy.language.v1.Min.Builder, com.aperture.policy.language.v1.MinOrBuilder>
        getMinFieldBuilder() {
      if (minBuilder_ == null) {
        if (!(componentCase_ == 12)) {
          component_ = com.aperture.policy.language.v1.Min.getDefaultInstance();
        }
        minBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.policy.language.v1.Min, com.aperture.policy.language.v1.Min.Builder, com.aperture.policy.language.v1.MinOrBuilder>(
                (com.aperture.policy.language.v1.Min) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 12;
      onChanged();;
      return minBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.Component)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.Component)
  private static final com.aperture.policy.language.v1.Component DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.policy.language.v1.Component();
  }

  public static com.aperture.policy.language.v1.Component getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Component>
      PARSER = new com.google.protobuf.AbstractParser<Component>() {
    @java.lang.Override
    public Component parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Component(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Component> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Component> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.policy.language.v1.Component getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
