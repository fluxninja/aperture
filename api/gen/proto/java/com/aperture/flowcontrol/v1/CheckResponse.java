// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/v1/flowcontrol.proto

package com.aperture.flowcontrol.v1;

/**
 * <pre>
 * CheckResponse contains fields that represent decision made by Check call.
 * </pre>
 *
 * Protobuf type {@code aperture.flowcontrol.v1.CheckResponse}
 */
public final class CheckResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.flowcontrol.v1.CheckResponse)
    CheckResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CheckResponse.newBuilder() to construct.
  private CheckResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CheckResponse() {
    decisionType_ = 0;
    limiterDecisions_ = java.util.Collections.emptyList();
    fluxMeters_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CheckResponse();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CheckResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            decisionType_ = rawValue;
            break;
          }
          case 18: {
            com.aperture.flowcontrol.v1.DecisionReason.Builder subBuilder = null;
            if (decisionReason_ != null) {
              subBuilder = decisionReason_.toBuilder();
            }
            decisionReason_ = input.readMessage(com.aperture.flowcontrol.v1.DecisionReason.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(decisionReason_);
              decisionReason_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              limiterDecisions_ = new java.util.ArrayList<com.aperture.flowcontrol.v1.LimiterDecision>();
              mutable_bitField0_ |= 0x00000001;
            }
            limiterDecisions_.add(
                input.readMessage(com.aperture.flowcontrol.v1.LimiterDecision.parser(), extensionRegistry));
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              fluxMeters_ = new java.util.ArrayList<com.aperture.flowcontrol.v1.FluxMeter>();
              mutable_bitField0_ |= 0x00000002;
            }
            fluxMeters_.add(
                input.readMessage(com.aperture.flowcontrol.v1.FluxMeter.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        limiterDecisions_ = java.util.Collections.unmodifiableList(limiterDecisions_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        fluxMeters_ = java.util.Collections.unmodifiableList(fluxMeters_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.flowcontrol.v1.FlowcontrolProto.internal_static_aperture_flowcontrol_v1_CheckResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.flowcontrol.v1.FlowcontrolProto.internal_static_aperture_flowcontrol_v1_CheckResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.flowcontrol.v1.CheckResponse.class, com.aperture.flowcontrol.v1.CheckResponse.Builder.class);
  }

  public static final int DECISION_TYPE_FIELD_NUMBER = 1;
  private int decisionType_;
  /**
   * <pre>
   * decision_type contains what the decision was.
   * </pre>
   *
   * <code>.aperture.flowcontrol.v1.DecisionType decision_type = 1 [json_name = "decisionType"];</code>
   * @return The enum numeric value on the wire for decisionType.
   */
  @java.lang.Override public int getDecisionTypeValue() {
    return decisionType_;
  }
  /**
   * <pre>
   * decision_type contains what the decision was.
   * </pre>
   *
   * <code>.aperture.flowcontrol.v1.DecisionType decision_type = 1 [json_name = "decisionType"];</code>
   * @return The decisionType.
   */
  @java.lang.Override public com.aperture.flowcontrol.v1.DecisionType getDecisionType() {
    @SuppressWarnings("deprecation")
    com.aperture.flowcontrol.v1.DecisionType result = com.aperture.flowcontrol.v1.DecisionType.valueOf(decisionType_);
    return result == null ? com.aperture.flowcontrol.v1.DecisionType.UNRECOGNIZED : result;
  }

  public static final int DECISION_REASON_FIELD_NUMBER = 2;
  private com.aperture.flowcontrol.v1.DecisionReason decisionReason_;
  /**
   * <pre>
   * reason contains information in the case of an error or rejection.
   * </pre>
   *
   * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
   * @return Whether the decisionReason field is set.
   */
  @java.lang.Override
  public boolean hasDecisionReason() {
    return decisionReason_ != null;
  }
  /**
   * <pre>
   * reason contains information in the case of an error or rejection.
   * </pre>
   *
   * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
   * @return The decisionReason.
   */
  @java.lang.Override
  public com.aperture.flowcontrol.v1.DecisionReason getDecisionReason() {
    return decisionReason_ == null ? com.aperture.flowcontrol.v1.DecisionReason.getDefaultInstance() : decisionReason_;
  }
  /**
   * <pre>
   * reason contains information in the case of an error or rejection.
   * </pre>
   *
   * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
   */
  @java.lang.Override
  public com.aperture.flowcontrol.v1.DecisionReasonOrBuilder getDecisionReasonOrBuilder() {
    return getDecisionReason();
  }

  public static final int LIMITER_DECISIONS_FIELD_NUMBER = 3;
  private java.util.List<com.aperture.flowcontrol.v1.LimiterDecision> limiterDecisions_;
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public java.util.List<com.aperture.flowcontrol.v1.LimiterDecision> getLimiterDecisionsList() {
    return limiterDecisions_;
  }
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.aperture.flowcontrol.v1.LimiterDecisionOrBuilder>
      getLimiterDecisionsOrBuilderList() {
    return limiterDecisions_;
  }
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public int getLimiterDecisionsCount() {
    return limiterDecisions_.size();
  }
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public com.aperture.flowcontrol.v1.LimiterDecision getLimiterDecisions(int index) {
    return limiterDecisions_.get(index);
  }
  /**
   * <pre>
   * limiter_decisions contains information about decision made by each limiter.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
   */
  @java.lang.Override
  public com.aperture.flowcontrol.v1.LimiterDecisionOrBuilder getLimiterDecisionsOrBuilder(
      int index) {
    return limiterDecisions_.get(index);
  }

  public static final int FLUX_METERS_FIELD_NUMBER = 4;
  private java.util.List<com.aperture.flowcontrol.v1.FluxMeter> fluxMeters_;
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public java.util.List<com.aperture.flowcontrol.v1.FluxMeter> getFluxMetersList() {
    return fluxMeters_;
  }
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.aperture.flowcontrol.v1.FluxMeterOrBuilder>
      getFluxMetersOrBuilderList() {
    return fluxMeters_;
  }
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public int getFluxMetersCount() {
    return fluxMeters_.size();
  }
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public com.aperture.flowcontrol.v1.FluxMeter getFluxMeters(int index) {
    return fluxMeters_.get(index);
  }
  /**
   * <pre>
   * flux meters that were matched for this request.
   * </pre>
   *
   * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override
  public com.aperture.flowcontrol.v1.FluxMeterOrBuilder getFluxMetersOrBuilder(
      int index) {
    return fluxMeters_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (decisionType_ != com.aperture.flowcontrol.v1.DecisionType.DECISION_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(1, decisionType_);
    }
    if (decisionReason_ != null) {
      output.writeMessage(2, getDecisionReason());
    }
    for (int i = 0; i < limiterDecisions_.size(); i++) {
      output.writeMessage(3, limiterDecisions_.get(i));
    }
    for (int i = 0; i < fluxMeters_.size(); i++) {
      output.writeMessage(4, fluxMeters_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (decisionType_ != com.aperture.flowcontrol.v1.DecisionType.DECISION_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, decisionType_);
    }
    if (decisionReason_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getDecisionReason());
    }
    for (int i = 0; i < limiterDecisions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, limiterDecisions_.get(i));
    }
    for (int i = 0; i < fluxMeters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, fluxMeters_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.flowcontrol.v1.CheckResponse)) {
      return super.equals(obj);
    }
    com.aperture.flowcontrol.v1.CheckResponse other = (com.aperture.flowcontrol.v1.CheckResponse) obj;

    if (decisionType_ != other.decisionType_) return false;
    if (hasDecisionReason() != other.hasDecisionReason()) return false;
    if (hasDecisionReason()) {
      if (!getDecisionReason()
          .equals(other.getDecisionReason())) return false;
    }
    if (!getLimiterDecisionsList()
        .equals(other.getLimiterDecisionsList())) return false;
    if (!getFluxMetersList()
        .equals(other.getFluxMetersList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + DECISION_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + decisionType_;
    if (hasDecisionReason()) {
      hash = (37 * hash) + DECISION_REASON_FIELD_NUMBER;
      hash = (53 * hash) + getDecisionReason().hashCode();
    }
    if (getLimiterDecisionsCount() > 0) {
      hash = (37 * hash) + LIMITER_DECISIONS_FIELD_NUMBER;
      hash = (53 * hash) + getLimiterDecisionsList().hashCode();
    }
    if (getFluxMetersCount() > 0) {
      hash = (37 * hash) + FLUX_METERS_FIELD_NUMBER;
      hash = (53 * hash) + getFluxMetersList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.flowcontrol.v1.CheckResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.flowcontrol.v1.CheckResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * CheckResponse contains fields that represent decision made by Check call.
   * </pre>
   *
   * Protobuf type {@code aperture.flowcontrol.v1.CheckResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.v1.CheckResponse)
      com.aperture.flowcontrol.v1.CheckResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.flowcontrol.v1.FlowcontrolProto.internal_static_aperture_flowcontrol_v1_CheckResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.flowcontrol.v1.FlowcontrolProto.internal_static_aperture_flowcontrol_v1_CheckResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.flowcontrol.v1.CheckResponse.class, com.aperture.flowcontrol.v1.CheckResponse.Builder.class);
    }

    // Construct using com.aperture.flowcontrol.v1.CheckResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getLimiterDecisionsFieldBuilder();
        getFluxMetersFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      decisionType_ = 0;

      if (decisionReasonBuilder_ == null) {
        decisionReason_ = null;
      } else {
        decisionReason_ = null;
        decisionReasonBuilder_ = null;
      }
      if (limiterDecisionsBuilder_ == null) {
        limiterDecisions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        limiterDecisionsBuilder_.clear();
      }
      if (fluxMetersBuilder_ == null) {
        fluxMeters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        fluxMetersBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.flowcontrol.v1.FlowcontrolProto.internal_static_aperture_flowcontrol_v1_CheckResponse_descriptor;
    }

    @java.lang.Override
    public com.aperture.flowcontrol.v1.CheckResponse getDefaultInstanceForType() {
      return com.aperture.flowcontrol.v1.CheckResponse.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.flowcontrol.v1.CheckResponse build() {
      com.aperture.flowcontrol.v1.CheckResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.flowcontrol.v1.CheckResponse buildPartial() {
      com.aperture.flowcontrol.v1.CheckResponse result = new com.aperture.flowcontrol.v1.CheckResponse(this);
      int from_bitField0_ = bitField0_;
      result.decisionType_ = decisionType_;
      if (decisionReasonBuilder_ == null) {
        result.decisionReason_ = decisionReason_;
      } else {
        result.decisionReason_ = decisionReasonBuilder_.build();
      }
      if (limiterDecisionsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          limiterDecisions_ = java.util.Collections.unmodifiableList(limiterDecisions_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.limiterDecisions_ = limiterDecisions_;
      } else {
        result.limiterDecisions_ = limiterDecisionsBuilder_.build();
      }
      if (fluxMetersBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          fluxMeters_ = java.util.Collections.unmodifiableList(fluxMeters_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.fluxMeters_ = fluxMeters_;
      } else {
        result.fluxMeters_ = fluxMetersBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.flowcontrol.v1.CheckResponse) {
        return mergeFrom((com.aperture.flowcontrol.v1.CheckResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.flowcontrol.v1.CheckResponse other) {
      if (other == com.aperture.flowcontrol.v1.CheckResponse.getDefaultInstance()) return this;
      if (other.decisionType_ != 0) {
        setDecisionTypeValue(other.getDecisionTypeValue());
      }
      if (other.hasDecisionReason()) {
        mergeDecisionReason(other.getDecisionReason());
      }
      if (limiterDecisionsBuilder_ == null) {
        if (!other.limiterDecisions_.isEmpty()) {
          if (limiterDecisions_.isEmpty()) {
            limiterDecisions_ = other.limiterDecisions_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureLimiterDecisionsIsMutable();
            limiterDecisions_.addAll(other.limiterDecisions_);
          }
          onChanged();
        }
      } else {
        if (!other.limiterDecisions_.isEmpty()) {
          if (limiterDecisionsBuilder_.isEmpty()) {
            limiterDecisionsBuilder_.dispose();
            limiterDecisionsBuilder_ = null;
            limiterDecisions_ = other.limiterDecisions_;
            bitField0_ = (bitField0_ & ~0x00000001);
            limiterDecisionsBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getLimiterDecisionsFieldBuilder() : null;
          } else {
            limiterDecisionsBuilder_.addAllMessages(other.limiterDecisions_);
          }
        }
      }
      if (fluxMetersBuilder_ == null) {
        if (!other.fluxMeters_.isEmpty()) {
          if (fluxMeters_.isEmpty()) {
            fluxMeters_ = other.fluxMeters_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureFluxMetersIsMutable();
            fluxMeters_.addAll(other.fluxMeters_);
          }
          onChanged();
        }
      } else {
        if (!other.fluxMeters_.isEmpty()) {
          if (fluxMetersBuilder_.isEmpty()) {
            fluxMetersBuilder_.dispose();
            fluxMetersBuilder_ = null;
            fluxMeters_ = other.fluxMeters_;
            bitField0_ = (bitField0_ & ~0x00000002);
            fluxMetersBuilder_ =
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFluxMetersFieldBuilder() : null;
          } else {
            fluxMetersBuilder_.addAllMessages(other.fluxMeters_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.flowcontrol.v1.CheckResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.flowcontrol.v1.CheckResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int decisionType_ = 0;
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionType decision_type = 1 [json_name = "decisionType"];</code>
     * @return The enum numeric value on the wire for decisionType.
     */
    @java.lang.Override public int getDecisionTypeValue() {
      return decisionType_;
    }
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionType decision_type = 1 [json_name = "decisionType"];</code>
     * @param value The enum numeric value on the wire for decisionType to set.
     * @return This builder for chaining.
     */
    public Builder setDecisionTypeValue(int value) {

      decisionType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionType decision_type = 1 [json_name = "decisionType"];</code>
     * @return The decisionType.
     */
    @java.lang.Override
    public com.aperture.flowcontrol.v1.DecisionType getDecisionType() {
      @SuppressWarnings("deprecation")
      com.aperture.flowcontrol.v1.DecisionType result = com.aperture.flowcontrol.v1.DecisionType.valueOf(decisionType_);
      return result == null ? com.aperture.flowcontrol.v1.DecisionType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionType decision_type = 1 [json_name = "decisionType"];</code>
     * @param value The decisionType to set.
     * @return This builder for chaining.
     */
    public Builder setDecisionType(com.aperture.flowcontrol.v1.DecisionType value) {
      if (value == null) {
        throw new NullPointerException();
      }

      decisionType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * decision_type contains what the decision was.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionType decision_type = 1 [json_name = "decisionType"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDecisionType() {

      decisionType_ = 0;
      onChanged();
      return this;
    }

    private com.aperture.flowcontrol.v1.DecisionReason decisionReason_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.flowcontrol.v1.DecisionReason, com.aperture.flowcontrol.v1.DecisionReason.Builder, com.aperture.flowcontrol.v1.DecisionReasonOrBuilder> decisionReasonBuilder_;
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     * @return Whether the decisionReason field is set.
     */
    public boolean hasDecisionReason() {
      return decisionReasonBuilder_ != null || decisionReason_ != null;
    }
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     * @return The decisionReason.
     */
    public com.aperture.flowcontrol.v1.DecisionReason getDecisionReason() {
      if (decisionReasonBuilder_ == null) {
        return decisionReason_ == null ? com.aperture.flowcontrol.v1.DecisionReason.getDefaultInstance() : decisionReason_;
      } else {
        return decisionReasonBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     */
    public Builder setDecisionReason(com.aperture.flowcontrol.v1.DecisionReason value) {
      if (decisionReasonBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        decisionReason_ = value;
        onChanged();
      } else {
        decisionReasonBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     */
    public Builder setDecisionReason(
        com.aperture.flowcontrol.v1.DecisionReason.Builder builderForValue) {
      if (decisionReasonBuilder_ == null) {
        decisionReason_ = builderForValue.build();
        onChanged();
      } else {
        decisionReasonBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     */
    public Builder mergeDecisionReason(com.aperture.flowcontrol.v1.DecisionReason value) {
      if (decisionReasonBuilder_ == null) {
        if (decisionReason_ != null) {
          decisionReason_ =
            com.aperture.flowcontrol.v1.DecisionReason.newBuilder(decisionReason_).mergeFrom(value).buildPartial();
        } else {
          decisionReason_ = value;
        }
        onChanged();
      } else {
        decisionReasonBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     */
    public Builder clearDecisionReason() {
      if (decisionReasonBuilder_ == null) {
        decisionReason_ = null;
        onChanged();
      } else {
        decisionReason_ = null;
        decisionReasonBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     */
    public com.aperture.flowcontrol.v1.DecisionReason.Builder getDecisionReasonBuilder() {

      onChanged();
      return getDecisionReasonFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     */
    public com.aperture.flowcontrol.v1.DecisionReasonOrBuilder getDecisionReasonOrBuilder() {
      if (decisionReasonBuilder_ != null) {
        return decisionReasonBuilder_.getMessageOrBuilder();
      } else {
        return decisionReason_ == null ?
            com.aperture.flowcontrol.v1.DecisionReason.getDefaultInstance() : decisionReason_;
      }
    }
    /**
     * <pre>
     * reason contains information in the case of an error or rejection.
     * </pre>
     *
     * <code>.aperture.flowcontrol.v1.DecisionReason decision_reason = 2 [json_name = "decisionReason"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.flowcontrol.v1.DecisionReason, com.aperture.flowcontrol.v1.DecisionReason.Builder, com.aperture.flowcontrol.v1.DecisionReasonOrBuilder>
        getDecisionReasonFieldBuilder() {
      if (decisionReasonBuilder_ == null) {
        decisionReasonBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.flowcontrol.v1.DecisionReason, com.aperture.flowcontrol.v1.DecisionReason.Builder, com.aperture.flowcontrol.v1.DecisionReasonOrBuilder>(
                getDecisionReason(),
                getParentForChildren(),
                isClean());
        decisionReason_ = null;
      }
      return decisionReasonBuilder_;
    }

    private java.util.List<com.aperture.flowcontrol.v1.LimiterDecision> limiterDecisions_ =
      java.util.Collections.emptyList();
    private void ensureLimiterDecisionsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        limiterDecisions_ = new java.util.ArrayList<com.aperture.flowcontrol.v1.LimiterDecision>(limiterDecisions_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.flowcontrol.v1.LimiterDecision, com.aperture.flowcontrol.v1.LimiterDecision.Builder, com.aperture.flowcontrol.v1.LimiterDecisionOrBuilder> limiterDecisionsBuilder_;

    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public java.util.List<com.aperture.flowcontrol.v1.LimiterDecision> getLimiterDecisionsList() {
      if (limiterDecisionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(limiterDecisions_);
      } else {
        return limiterDecisionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public int getLimiterDecisionsCount() {
      if (limiterDecisionsBuilder_ == null) {
        return limiterDecisions_.size();
      } else {
        return limiterDecisionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public com.aperture.flowcontrol.v1.LimiterDecision getLimiterDecisions(int index) {
      if (limiterDecisionsBuilder_ == null) {
        return limiterDecisions_.get(index);
      } else {
        return limiterDecisionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder setLimiterDecisions(
        int index, com.aperture.flowcontrol.v1.LimiterDecision value) {
      if (limiterDecisionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.set(index, value);
        onChanged();
      } else {
        limiterDecisionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder setLimiterDecisions(
        int index, com.aperture.flowcontrol.v1.LimiterDecision.Builder builderForValue) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.set(index, builderForValue.build());
        onChanged();
      } else {
        limiterDecisionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder addLimiterDecisions(com.aperture.flowcontrol.v1.LimiterDecision value) {
      if (limiterDecisionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.add(value);
        onChanged();
      } else {
        limiterDecisionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder addLimiterDecisions(
        int index, com.aperture.flowcontrol.v1.LimiterDecision value) {
      if (limiterDecisionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.add(index, value);
        onChanged();
      } else {
        limiterDecisionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder addLimiterDecisions(
        com.aperture.flowcontrol.v1.LimiterDecision.Builder builderForValue) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.add(builderForValue.build());
        onChanged();
      } else {
        limiterDecisionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder addLimiterDecisions(
        int index, com.aperture.flowcontrol.v1.LimiterDecision.Builder builderForValue) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.add(index, builderForValue.build());
        onChanged();
      } else {
        limiterDecisionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder addAllLimiterDecisions(
        java.lang.Iterable<? extends com.aperture.flowcontrol.v1.LimiterDecision> values) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, limiterDecisions_);
        onChanged();
      } else {
        limiterDecisionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder clearLimiterDecisions() {
      if (limiterDecisionsBuilder_ == null) {
        limiterDecisions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        limiterDecisionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public Builder removeLimiterDecisions(int index) {
      if (limiterDecisionsBuilder_ == null) {
        ensureLimiterDecisionsIsMutable();
        limiterDecisions_.remove(index);
        onChanged();
      } else {
        limiterDecisionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public com.aperture.flowcontrol.v1.LimiterDecision.Builder getLimiterDecisionsBuilder(
        int index) {
      return getLimiterDecisionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public com.aperture.flowcontrol.v1.LimiterDecisionOrBuilder getLimiterDecisionsOrBuilder(
        int index) {
      if (limiterDecisionsBuilder_ == null) {
        return limiterDecisions_.get(index);  } else {
        return limiterDecisionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public java.util.List<? extends com.aperture.flowcontrol.v1.LimiterDecisionOrBuilder>
         getLimiterDecisionsOrBuilderList() {
      if (limiterDecisionsBuilder_ != null) {
        return limiterDecisionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(limiterDecisions_);
      }
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public com.aperture.flowcontrol.v1.LimiterDecision.Builder addLimiterDecisionsBuilder() {
      return getLimiterDecisionsFieldBuilder().addBuilder(
          com.aperture.flowcontrol.v1.LimiterDecision.getDefaultInstance());
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public com.aperture.flowcontrol.v1.LimiterDecision.Builder addLimiterDecisionsBuilder(
        int index) {
      return getLimiterDecisionsFieldBuilder().addBuilder(
          index, com.aperture.flowcontrol.v1.LimiterDecision.getDefaultInstance());
    }
    /**
     * <pre>
     * limiter_decisions contains information about decision made by each limiter.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.LimiterDecision limiter_decisions = 3 [json_name = "limiterDecisions"];</code>
     */
    public java.util.List<com.aperture.flowcontrol.v1.LimiterDecision.Builder>
         getLimiterDecisionsBuilderList() {
      return getLimiterDecisionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.flowcontrol.v1.LimiterDecision, com.aperture.flowcontrol.v1.LimiterDecision.Builder, com.aperture.flowcontrol.v1.LimiterDecisionOrBuilder>
        getLimiterDecisionsFieldBuilder() {
      if (limiterDecisionsBuilder_ == null) {
        limiterDecisionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.aperture.flowcontrol.v1.LimiterDecision, com.aperture.flowcontrol.v1.LimiterDecision.Builder, com.aperture.flowcontrol.v1.LimiterDecisionOrBuilder>(
                limiterDecisions_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        limiterDecisions_ = null;
      }
      return limiterDecisionsBuilder_;
    }

    private java.util.List<com.aperture.flowcontrol.v1.FluxMeter> fluxMeters_ =
      java.util.Collections.emptyList();
    private void ensureFluxMetersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        fluxMeters_ = new java.util.ArrayList<com.aperture.flowcontrol.v1.FluxMeter>(fluxMeters_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.flowcontrol.v1.FluxMeter, com.aperture.flowcontrol.v1.FluxMeter.Builder, com.aperture.flowcontrol.v1.FluxMeterOrBuilder> fluxMetersBuilder_;

    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public java.util.List<com.aperture.flowcontrol.v1.FluxMeter> getFluxMetersList() {
      if (fluxMetersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(fluxMeters_);
      } else {
        return fluxMetersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public int getFluxMetersCount() {
      if (fluxMetersBuilder_ == null) {
        return fluxMeters_.size();
      } else {
        return fluxMetersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.flowcontrol.v1.FluxMeter getFluxMeters(int index) {
      if (fluxMetersBuilder_ == null) {
        return fluxMeters_.get(index);
      } else {
        return fluxMetersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder setFluxMeters(
        int index, com.aperture.flowcontrol.v1.FluxMeter value) {
      if (fluxMetersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMetersIsMutable();
        fluxMeters_.set(index, value);
        onChanged();
      } else {
        fluxMetersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder setFluxMeters(
        int index, com.aperture.flowcontrol.v1.FluxMeter.Builder builderForValue) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        fluxMeters_.set(index, builderForValue.build());
        onChanged();
      } else {
        fluxMetersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder addFluxMeters(com.aperture.flowcontrol.v1.FluxMeter value) {
      if (fluxMetersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMetersIsMutable();
        fluxMeters_.add(value);
        onChanged();
      } else {
        fluxMetersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder addFluxMeters(
        int index, com.aperture.flowcontrol.v1.FluxMeter value) {
      if (fluxMetersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFluxMetersIsMutable();
        fluxMeters_.add(index, value);
        onChanged();
      } else {
        fluxMetersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder addFluxMeters(
        com.aperture.flowcontrol.v1.FluxMeter.Builder builderForValue) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        fluxMeters_.add(builderForValue.build());
        onChanged();
      } else {
        fluxMetersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder addFluxMeters(
        int index, com.aperture.flowcontrol.v1.FluxMeter.Builder builderForValue) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        fluxMeters_.add(index, builderForValue.build());
        onChanged();
      } else {
        fluxMetersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder addAllFluxMeters(
        java.lang.Iterable<? extends com.aperture.flowcontrol.v1.FluxMeter> values) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fluxMeters_);
        onChanged();
      } else {
        fluxMetersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder clearFluxMeters() {
      if (fluxMetersBuilder_ == null) {
        fluxMeters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        fluxMetersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public Builder removeFluxMeters(int index) {
      if (fluxMetersBuilder_ == null) {
        ensureFluxMetersIsMutable();
        fluxMeters_.remove(index);
        onChanged();
      } else {
        fluxMetersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.flowcontrol.v1.FluxMeter.Builder getFluxMetersBuilder(
        int index) {
      return getFluxMetersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.flowcontrol.v1.FluxMeterOrBuilder getFluxMetersOrBuilder(
        int index) {
      if (fluxMetersBuilder_ == null) {
        return fluxMeters_.get(index);  } else {
        return fluxMetersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public java.util.List<? extends com.aperture.flowcontrol.v1.FluxMeterOrBuilder>
         getFluxMetersOrBuilderList() {
      if (fluxMetersBuilder_ != null) {
        return fluxMetersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(fluxMeters_);
      }
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.flowcontrol.v1.FluxMeter.Builder addFluxMetersBuilder() {
      return getFluxMetersFieldBuilder().addBuilder(
          com.aperture.flowcontrol.v1.FluxMeter.getDefaultInstance());
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public com.aperture.flowcontrol.v1.FluxMeter.Builder addFluxMetersBuilder(
        int index) {
      return getFluxMetersFieldBuilder().addBuilder(
          index, com.aperture.flowcontrol.v1.FluxMeter.getDefaultInstance());
    }
    /**
     * <pre>
     * flux meters that were matched for this request.
     * </pre>
     *
     * <code>repeated .aperture.flowcontrol.v1.FluxMeter flux_meters = 4 [json_name = "fluxMeters"];</code>
     */
    public java.util.List<com.aperture.flowcontrol.v1.FluxMeter.Builder>
         getFluxMetersBuilderList() {
      return getFluxMetersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.aperture.flowcontrol.v1.FluxMeter, com.aperture.flowcontrol.v1.FluxMeter.Builder, com.aperture.flowcontrol.v1.FluxMeterOrBuilder>
        getFluxMetersFieldBuilder() {
      if (fluxMetersBuilder_ == null) {
        fluxMetersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.aperture.flowcontrol.v1.FluxMeter, com.aperture.flowcontrol.v1.FluxMeter.Builder, com.aperture.flowcontrol.v1.FluxMeterOrBuilder>(
                fluxMeters_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        fluxMeters_ = null;
      }
      return fluxMetersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.v1.CheckResponse)
  }

  // @@protoc_insertion_point(class_scope:aperture.flowcontrol.v1.CheckResponse)
  private static final com.aperture.flowcontrol.v1.CheckResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.flowcontrol.v1.CheckResponse();
  }

  public static com.aperture.flowcontrol.v1.CheckResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CheckResponse>
      PARSER = new com.google.protobuf.AbstractParser<CheckResponse>() {
    @java.lang.Override
    public CheckResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new CheckResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CheckResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CheckResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.flowcontrol.v1.CheckResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
