// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/v1/flowcontrol.proto

package com.aperture.flowcontrol.v1;

public final class FlowcontrolProto {
  private FlowcontrolProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_v1_CheckRequest_descriptor;
  static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_v1_CheckRequest_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_v1_CheckRequest_LabelsEntry_descriptor;
  static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_v1_CheckRequest_LabelsEntry_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_v1_CheckResponse_descriptor;
  static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_v1_CheckResponse_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_v1_DecisionReason_descriptor;
  static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_v1_DecisionReason_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_v1_LimiterDecision_descriptor;
  static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_v1_LimiterDecision_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_v1_LimiterDecision_RateLimiter_descriptor;
  static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_v1_LimiterDecision_RateLimiter_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_v1_LimiterDecision_ConcurrencyLimiter_descriptor;
  static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_v1_LimiterDecision_ConcurrencyLimiter_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_flowcontrol_v1_FluxMeter_descriptor;
  static final
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_flowcontrol_v1_FluxMeter_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)aperture/flowcontrol/v1/flowcontrol.pr" +
      "oto\022\027aperture.flowcontrol.v1\"\256\001\n\014CheckRe" +
      "quest\022\030\n\007feature\030\001 \001(\tR\007feature\022I\n\006label" +
      "s\030\002 \003(\01321.aperture.flowcontrol.v1.CheckR" +
      "equest.LabelsEntryR\006labels\0329\n\013LabelsEntr" +
      "y\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005valu" +
      "e:\0028\001\"\311\002\n\rCheckResponse\022J\n\rdecision_type" +
      "\030\001 \001(\0162%.aperture.flowcontrol.v1.Decisio" +
      "nTypeR\014decisionType\022P\n\017decision_reason\030\002" +
      " \001(\0132\'.aperture.flowcontrol.v1.DecisionR" +
      "easonR\016decisionReason\022U\n\021limiter_decisio" +
      "ns\030\003 \003(\0132(.aperture.flowcontrol.v1.Limit" +
      "erDecisionR\020limiterDecisions\022C\n\013flux_met" +
      "ers\030\004 \003(\0132\".aperture.flowcontrol.v1.Flux" +
      "MeterR\nfluxMeters\"\346\002\n\016DecisionReason\022V\n\014" +
      "error_reason\030\001 \001(\01623.aperture.flowcontro" +
      "l.v1.DecisionReason.ErrorReasonR\013errorRe" +
      "ason\022Y\n\rreject_reason\030\002 \001(\01624.aperture.f" +
      "lowcontrol.v1.DecisionReason.RejectReaso" +
      "nR\014rejectReason\"+\n\013ErrorReason\022\034\n\030ERROR_" +
      "REASON_UNSPECIFIED\020\000\"t\n\014RejectReason\022\035\n\031" +
      "REJECT_REASON_UNSPECIFIED\020\000\022\036\n\032REJECT_RE" +
      "ASON_RATE_LIMITED\020\001\022%\n!REJECT_REASON_CON" +
      "CURRENCY_LIMITED\020\002\"\251\005\n\017LimiterDecision\022\037" +
      "\n\013policy_name\030\001 \001(\tR\npolicyName\022\037\n\013polic" +
      "y_hash\030\002 \001(\tR\npolicyHash\022\'\n\017component_in" +
      "dex\030\003 \001(\003R\016componentIndex\022\030\n\007dropped\030\004 \001" +
      "(\010R\007dropped\022N\n\006reason\030\005 \001(\01626.aperture.f" +
      "lowcontrol.v1.LimiterDecision.LimiterRea" +
      "sonR\006reason\022Y\n\014rate_limiter\030\006 \001(\01324.aper" +
      "ture.flowcontrol.v1.LimiterDecision.Rate" +
      "LimiterH\000R\013rateLimiter\022n\n\023concurrency_li" +
      "miter\030\007 \001(\0132;.aperture.flowcontrol.v1.Li" +
      "miterDecision.ConcurrencyLimiterH\000R\022conc" +
      "urrencyLimiter\032[\n\013RateLimiter\022\034\n\tremaini" +
      "ng\030\001 \001(\003R\tremaining\022\030\n\007current\030\002 \001(\003R\007cu" +
      "rrent\022\024\n\005label\030\003 \001(\tR\005label\032;\n\022Concurren" +
      "cyLimiter\022%\n\016workload_index\030\001 \001(\tR\rworkl" +
      "oadIndex\"Q\n\rLimiterReason\022\036\n\032LIMITER_REA" +
      "SON_UNSPECIFIED\020\000\022 \n\034LIMITER_REASON_KEY_" +
      "NOT_FOUND\020\001B\t\n\007details\"\226\001\n\tFluxMeter\022\037\n\013" +
      "agent_group\030\001 \001(\tR\nagentGroup\022\037\n\013policy_" +
      "name\030\002 \001(\tR\npolicyName\022\037\n\013policy_hash\030\003 " +
      "\001(\tR\npolicyHash\022&\n\017flux_meter_name\030\004 \001(\t" +
      "R\rfluxMeterName*e\n\014DecisionType\022\035\n\031DECIS" +
      "ION_TYPE_UNSPECIFIED\020\000\022\032\n\026DECISION_TYPE_" +
      "ACCEPTED\020\001\022\032\n\026DECISION_TYPE_REJECTED\020\0022n" +
      "\n\022FlowControlService\022X\n\005Check\022%.aperture" +
      ".flowcontrol.v1.CheckRequest\032&.aperture." +
      "flowcontrol.v1.CheckResponse\"\000B\203\002\n\033com.a" +
      "perture.flowcontrol.v1B\020FlowcontrolProto" +
      "P\001ZTgithub.com/fluxninja/aperture/api/ge" +
      "n/proto/go/aperture/flowcontrol/v1;flowc" +
      "ontrolv1\242\002\003AFX\252\002\027Aperture.Flowcontrol.V1" +
      "\312\002\027Aperture\\Flowcontrol\\V1\342\002#Aperture\\Fl" +
      "owcontrol\\V1\\GPBMetadata\352\002\031Aperture::Flo" +
      "wcontrol::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_aperture_flowcontrol_v1_CheckRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_aperture_flowcontrol_v1_CheckRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_v1_CheckRequest_descriptor,
        new java.lang.String[] { "Feature", "Labels", });
    internal_static_aperture_flowcontrol_v1_CheckRequest_LabelsEntry_descriptor =
      internal_static_aperture_flowcontrol_v1_CheckRequest_descriptor.getNestedTypes().get(0);
    internal_static_aperture_flowcontrol_v1_CheckRequest_LabelsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_v1_CheckRequest_LabelsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    internal_static_aperture_flowcontrol_v1_CheckResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_aperture_flowcontrol_v1_CheckResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_v1_CheckResponse_descriptor,
        new java.lang.String[] { "DecisionType", "DecisionReason", "LimiterDecisions", "FluxMeters", });
    internal_static_aperture_flowcontrol_v1_DecisionReason_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_aperture_flowcontrol_v1_DecisionReason_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_v1_DecisionReason_descriptor,
        new java.lang.String[] { "ErrorReason", "RejectReason", });
    internal_static_aperture_flowcontrol_v1_LimiterDecision_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_aperture_flowcontrol_v1_LimiterDecision_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_v1_LimiterDecision_descriptor,
        new java.lang.String[] { "PolicyName", "PolicyHash", "ComponentIndex", "Dropped", "Reason", "RateLimiter", "ConcurrencyLimiter", "Details", });
    internal_static_aperture_flowcontrol_v1_LimiterDecision_RateLimiter_descriptor =
      internal_static_aperture_flowcontrol_v1_LimiterDecision_descriptor.getNestedTypes().get(0);
    internal_static_aperture_flowcontrol_v1_LimiterDecision_RateLimiter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_v1_LimiterDecision_RateLimiter_descriptor,
        new java.lang.String[] { "Remaining", "Current", "Label", });
    internal_static_aperture_flowcontrol_v1_LimiterDecision_ConcurrencyLimiter_descriptor =
      internal_static_aperture_flowcontrol_v1_LimiterDecision_descriptor.getNestedTypes().get(1);
    internal_static_aperture_flowcontrol_v1_LimiterDecision_ConcurrencyLimiter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_v1_LimiterDecision_ConcurrencyLimiter_descriptor,
        new java.lang.String[] { "WorkloadIndex", });
    internal_static_aperture_flowcontrol_v1_FluxMeter_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_aperture_flowcontrol_v1_FluxMeter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_flowcontrol_v1_FluxMeter_descriptor,
        new java.lang.String[] { "AgentGroup", "PolicyName", "PolicyHash", "FluxMeterName", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
