// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/common/status/v1/status.proto

package com.aperture.common.status.v1;

/**
 * <pre>
 * Groups is nested structure that holds status information about the node and a
 * pointer to the next node.
 * </pre>
 *
 * Protobuf type {@code aperture.common.status.v1.GroupStatus}
 */
public final class GroupStatus extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.common.status.v1.GroupStatus)
    GroupStatusOrBuilder {
private static final long serialVersionUID = 0L;
  // Use GroupStatus.newBuilder() to construct.
  private GroupStatus(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private GroupStatus() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new GroupStatus();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private GroupStatus(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.aperture.common.status.v1.Status.Builder subBuilder = null;
            if (status_ != null) {
              subBuilder = status_.toBuilder();
            }
            status_ = input.readMessage(com.aperture.common.status.v1.Status.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(status_);
              status_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              groups_ = com.google.protobuf.MapField.newMapField(
                  GroupsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.aperture.common.status.v1.GroupStatus>
            groups__ = input.readMessage(
                GroupsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            groups_.getMutableMap().put(
                groups__.getKey(), groups__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.aperture.common.status.v1.StatusProto.internal_static_aperture_common_status_v1_GroupStatus_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetGroups();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.aperture.common.status.v1.StatusProto.internal_static_aperture_common_status_v1_GroupStatus_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.aperture.common.status.v1.GroupStatus.class, com.aperture.common.status.v1.GroupStatus.Builder.class);
  }

  public static final int STATUS_FIELD_NUMBER = 1;
  private com.aperture.common.status.v1.Status status_;
  /**
   * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
   * @return Whether the status field is set.
   */
  @java.lang.Override
  public boolean hasStatus() {
    return status_ != null;
  }
  /**
   * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
   * @return The status.
   */
  @java.lang.Override
  public com.aperture.common.status.v1.Status getStatus() {
    return status_ == null ? com.aperture.common.status.v1.Status.getDefaultInstance() : status_;
  }
  /**
   * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
   */
  @java.lang.Override
  public com.aperture.common.status.v1.StatusOrBuilder getStatusOrBuilder() {
    return getStatus();
  }

  public static final int GROUPS_FIELD_NUMBER = 2;
  private static final class GroupsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.aperture.common.status.v1.GroupStatus> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.aperture.common.status.v1.GroupStatus>newDefaultInstance(
                com.aperture.common.status.v1.StatusProto.internal_static_aperture_common_status_v1_GroupStatus_GroupsEntry_descriptor,
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.aperture.common.status.v1.GroupStatus.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.aperture.common.status.v1.GroupStatus> groups_;
  private com.google.protobuf.MapField<java.lang.String, com.aperture.common.status.v1.GroupStatus>
  internalGetGroups() {
    if (groups_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          GroupsDefaultEntryHolder.defaultEntry);
    }
    return groups_;
  }

  public int getGroupsCount() {
    return internalGetGroups().getMap().size();
  }
  /**
   * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
   */

  @java.lang.Override
  public boolean containsGroups(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetGroups().getMap().containsKey(key);
  }
  /**
   * Use {@link #getGroupsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> getGroups() {
    return getGroupsMap();
  }
  /**
   * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> getGroupsMap() {
    return internalGetGroups().getMap();
  }
  /**
   * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
   */
  @java.lang.Override

  public com.aperture.common.status.v1.GroupStatus getGroupsOrDefault(
      java.lang.String key,
      com.aperture.common.status.v1.GroupStatus defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> map =
        internalGetGroups().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
   */
  @java.lang.Override

  public com.aperture.common.status.v1.GroupStatus getGroupsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> map =
        internalGetGroups().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (status_ != null) {
      output.writeMessage(1, getStatus());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetGroups(),
        GroupsDefaultEntryHolder.defaultEntry,
        2);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (status_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getStatus());
    }
    for (java.util.Map.Entry<java.lang.String, com.aperture.common.status.v1.GroupStatus> entry
         : internalGetGroups().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.aperture.common.status.v1.GroupStatus>
      groups__ = GroupsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, groups__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.aperture.common.status.v1.GroupStatus)) {
      return super.equals(obj);
    }
    com.aperture.common.status.v1.GroupStatus other = (com.aperture.common.status.v1.GroupStatus) obj;

    if (hasStatus() != other.hasStatus()) return false;
    if (hasStatus()) {
      if (!getStatus()
          .equals(other.getStatus())) return false;
    }
    if (!internalGetGroups().equals(
        other.internalGetGroups())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasStatus()) {
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus().hashCode();
    }
    if (!internalGetGroups().getMap().isEmpty()) {
      hash = (37 * hash) + GROUPS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetGroups().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.aperture.common.status.v1.GroupStatus parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.common.status.v1.GroupStatus parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.aperture.common.status.v1.GroupStatus parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.aperture.common.status.v1.GroupStatus parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.aperture.common.status.v1.GroupStatus prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Groups is nested structure that holds status information about the node and a
   * pointer to the next node.
   * </pre>
   *
   * Protobuf type {@code aperture.common.status.v1.GroupStatus}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.common.status.v1.GroupStatus)
      com.aperture.common.status.v1.GroupStatusOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.aperture.common.status.v1.StatusProto.internal_static_aperture_common_status_v1_GroupStatus_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetGroups();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableGroups();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.aperture.common.status.v1.StatusProto.internal_static_aperture_common_status_v1_GroupStatus_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.aperture.common.status.v1.GroupStatus.class, com.aperture.common.status.v1.GroupStatus.Builder.class);
    }

    // Construct using com.aperture.common.status.v1.GroupStatus.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (statusBuilder_ == null) {
        status_ = null;
      } else {
        status_ = null;
        statusBuilder_ = null;
      }
      internalGetMutableGroups().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.aperture.common.status.v1.StatusProto.internal_static_aperture_common_status_v1_GroupStatus_descriptor;
    }

    @java.lang.Override
    public com.aperture.common.status.v1.GroupStatus getDefaultInstanceForType() {
      return com.aperture.common.status.v1.GroupStatus.getDefaultInstance();
    }

    @java.lang.Override
    public com.aperture.common.status.v1.GroupStatus build() {
      com.aperture.common.status.v1.GroupStatus result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.aperture.common.status.v1.GroupStatus buildPartial() {
      com.aperture.common.status.v1.GroupStatus result = new com.aperture.common.status.v1.GroupStatus(this);
      int from_bitField0_ = bitField0_;
      if (statusBuilder_ == null) {
        result.status_ = status_;
      } else {
        result.status_ = statusBuilder_.build();
      }
      result.groups_ = internalGetGroups();
      result.groups_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.aperture.common.status.v1.GroupStatus) {
        return mergeFrom((com.aperture.common.status.v1.GroupStatus)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.aperture.common.status.v1.GroupStatus other) {
      if (other == com.aperture.common.status.v1.GroupStatus.getDefaultInstance()) return this;
      if (other.hasStatus()) {
        mergeStatus(other.getStatus());
      }
      internalGetMutableGroups().mergeFrom(
          other.internalGetGroups());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.aperture.common.status.v1.GroupStatus parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.aperture.common.status.v1.GroupStatus) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.aperture.common.status.v1.Status status_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.common.status.v1.Status, com.aperture.common.status.v1.Status.Builder, com.aperture.common.status.v1.StatusOrBuilder> statusBuilder_;
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     * @return Whether the status field is set.
     */
    public boolean hasStatus() {
      return statusBuilder_ != null || status_ != null;
    }
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     * @return The status.
     */
    public com.aperture.common.status.v1.Status getStatus() {
      if (statusBuilder_ == null) {
        return status_ == null ? com.aperture.common.status.v1.Status.getDefaultInstance() : status_;
      } else {
        return statusBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     */
    public Builder setStatus(com.aperture.common.status.v1.Status value) {
      if (statusBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        status_ = value;
        onChanged();
      } else {
        statusBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     */
    public Builder setStatus(
        com.aperture.common.status.v1.Status.Builder builderForValue) {
      if (statusBuilder_ == null) {
        status_ = builderForValue.build();
        onChanged();
      } else {
        statusBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     */
    public Builder mergeStatus(com.aperture.common.status.v1.Status value) {
      if (statusBuilder_ == null) {
        if (status_ != null) {
          status_ =
            com.aperture.common.status.v1.Status.newBuilder(status_).mergeFrom(value).buildPartial();
        } else {
          status_ = value;
        }
        onChanged();
      } else {
        statusBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     */
    public Builder clearStatus() {
      if (statusBuilder_ == null) {
        status_ = null;
        onChanged();
      } else {
        status_ = null;
        statusBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     */
    public com.aperture.common.status.v1.Status.Builder getStatusBuilder() {

      onChanged();
      return getStatusFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     */
    public com.aperture.common.status.v1.StatusOrBuilder getStatusOrBuilder() {
      if (statusBuilder_ != null) {
        return statusBuilder_.getMessageOrBuilder();
      } else {
        return status_ == null ?
            com.aperture.common.status.v1.Status.getDefaultInstance() : status_;
      }
    }
    /**
     * <code>.aperture.common.status.v1.Status status = 1 [json_name = "status"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.aperture.common.status.v1.Status, com.aperture.common.status.v1.Status.Builder, com.aperture.common.status.v1.StatusOrBuilder>
        getStatusFieldBuilder() {
      if (statusBuilder_ == null) {
        statusBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.aperture.common.status.v1.Status, com.aperture.common.status.v1.Status.Builder, com.aperture.common.status.v1.StatusOrBuilder>(
                getStatus(),
                getParentForChildren(),
                isClean());
        status_ = null;
      }
      return statusBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.aperture.common.status.v1.GroupStatus> groups_;
    private com.google.protobuf.MapField<java.lang.String, com.aperture.common.status.v1.GroupStatus>
    internalGetGroups() {
      if (groups_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            GroupsDefaultEntryHolder.defaultEntry);
      }
      return groups_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.aperture.common.status.v1.GroupStatus>
    internalGetMutableGroups() {
      onChanged();;
      if (groups_ == null) {
        groups_ = com.google.protobuf.MapField.newMapField(
            GroupsDefaultEntryHolder.defaultEntry);
      }
      if (!groups_.isMutable()) {
        groups_ = groups_.copy();
      }
      return groups_;
    }

    public int getGroupsCount() {
      return internalGetGroups().getMap().size();
    }
    /**
     * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
     */

    @java.lang.Override
    public boolean containsGroups(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetGroups().getMap().containsKey(key);
    }
    /**
     * Use {@link #getGroupsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> getGroups() {
      return getGroupsMap();
    }
    /**
     * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> getGroupsMap() {
      return internalGetGroups().getMap();
    }
    /**
     * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
     */
    @java.lang.Override

    public com.aperture.common.status.v1.GroupStatus getGroupsOrDefault(
        java.lang.String key,
        com.aperture.common.status.v1.GroupStatus defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> map =
          internalGetGroups().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
     */
    @java.lang.Override

    public com.aperture.common.status.v1.GroupStatus getGroupsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> map =
          internalGetGroups().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearGroups() {
      internalGetMutableGroups().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
     */

    public Builder removeGroups(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableGroups().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus>
    getMutableGroups() {
      return internalGetMutableGroups().getMutableMap();
    }
    /**
     * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
     */
    public Builder putGroups(
        java.lang.String key,
        com.aperture.common.status.v1.GroupStatus value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableGroups().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.common.status.v1.GroupStatus&gt; groups = 2 [json_name = "groups"];</code>
     */

    public Builder putAllGroups(
        java.util.Map<java.lang.String, com.aperture.common.status.v1.GroupStatus> values) {
      internalGetMutableGroups().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.common.status.v1.GroupStatus)
  }

  // @@protoc_insertion_point(class_scope:aperture.common.status.v1.GroupStatus)
  private static final com.aperture.common.status.v1.GroupStatus DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.aperture.common.status.v1.GroupStatus();
  }

  public static com.aperture.common.status.v1.GroupStatus getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<GroupStatus>
      PARSER = new com.google.protobuf.AbstractParser<GroupStatus>() {
    @java.lang.Override
    public GroupStatus parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new GroupStatus(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<GroupStatus> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<GroupStatus> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.aperture.common.status.v1.GroupStatus getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}
