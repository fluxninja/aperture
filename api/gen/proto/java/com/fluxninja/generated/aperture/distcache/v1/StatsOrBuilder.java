// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/distcache/v1/stats.proto

package com.fluxninja.generated.aperture.distcache.v1;

public interface StatsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.distcache.v1.Stats)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>repeated string cmdline = 1 [json_name = "Cmdline"];</code>
   * @return A list containing the cmdline.
   */
  java.util.List<java.lang.String>
      getCmdlineList();
  /**
   * <code>repeated string cmdline = 1 [json_name = "Cmdline"];</code>
   * @return The count of cmdline.
   */
  int getCmdlineCount();
  /**
   * <code>repeated string cmdline = 1 [json_name = "Cmdline"];</code>
   * @param index The index of the element to return.
   * @return The cmdline at the given index.
   */
  java.lang.String getCmdline(int index);
  /**
   * <code>repeated string cmdline = 1 [json_name = "Cmdline"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the cmdline at the given index.
   */
  com.google.protobuf.ByteString
      getCmdlineBytes(int index);

  /**
   * <code>string release_version = 2 [json_name = "ReleaseVersion"];</code>
   * @return The releaseVersion.
   */
  java.lang.String getReleaseVersion();
  /**
   * <code>string release_version = 2 [json_name = "ReleaseVersion"];</code>
   * @return The bytes for releaseVersion.
   */
  com.google.protobuf.ByteString
      getReleaseVersionBytes();

  /**
   * <code>int64 uptime_seconds = 3 [json_name = "UptimeSeconds"];</code>
   * @return The uptimeSeconds.
   */
  long getUptimeSeconds();

  /**
   * <code>.google.protobuf.Struct runtime = 4 [json_name = "Runtime"];</code>
   * @return Whether the runtime field is set.
   */
  boolean hasRuntime();
  /**
   * <code>.google.protobuf.Struct runtime = 4 [json_name = "Runtime"];</code>
   * @return The runtime.
   */
  com.google.protobuf.Struct getRuntime();
  /**
   * <code>.google.protobuf.Struct runtime = 4 [json_name = "Runtime"];</code>
   */
  com.google.protobuf.StructOrBuilder getRuntimeOrBuilder();

  /**
   * <code>.aperture.distcache.v1.Member cluster_coordinator = 5 [json_name = "ClusterCoordinator"];</code>
   * @return Whether the clusterCoordinator field is set.
   */
  boolean hasClusterCoordinator();
  /**
   * <code>.aperture.distcache.v1.Member cluster_coordinator = 5 [json_name = "ClusterCoordinator"];</code>
   * @return The clusterCoordinator.
   */
  com.fluxninja.generated.aperture.distcache.v1.Member getClusterCoordinator();
  /**
   * <code>.aperture.distcache.v1.Member cluster_coordinator = 5 [json_name = "ClusterCoordinator"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder getClusterCoordinatorOrBuilder();

  /**
   * <code>.aperture.distcache.v1.Member member = 6 [json_name = "Member"];</code>
   * @return Whether the member field is set.
   */
  boolean hasMember();
  /**
   * <code>.aperture.distcache.v1.Member member = 6 [json_name = "Member"];</code>
   * @return The member.
   */
  com.fluxninja.generated.aperture.distcache.v1.Member getMember();
  /**
   * <code>.aperture.distcache.v1.Member member = 6 [json_name = "Member"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder getMemberOrBuilder();

  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; partitions = 7 [json_name = "Partitions"];</code>
   */
  int getPartitionsCount();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; partitions = 7 [json_name = "Partitions"];</code>
   */
  boolean containsPartitions(
      long key);
  /**
   * Use {@link #getPartitionsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Long, com.fluxninja.generated.aperture.distcache.v1.Partition>
  getPartitions();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; partitions = 7 [json_name = "Partitions"];</code>
   */
  java.util.Map<java.lang.Long, com.fluxninja.generated.aperture.distcache.v1.Partition>
  getPartitionsMap();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; partitions = 7 [json_name = "Partitions"];</code>
   */

  /* nullable */
com.fluxninja.generated.aperture.distcache.v1.Partition getPartitionsOrDefault(
      long key,
      /* nullable */
com.fluxninja.generated.aperture.distcache.v1.Partition defaultValue);
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; partitions = 7 [json_name = "Partitions"];</code>
   */

  com.fluxninja.generated.aperture.distcache.v1.Partition getPartitionsOrThrow(
      long key);

  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; backups = 8 [json_name = "Backups"];</code>
   */
  int getBackupsCount();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; backups = 8 [json_name = "Backups"];</code>
   */
  boolean containsBackups(
      long key);
  /**
   * Use {@link #getBackupsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Long, com.fluxninja.generated.aperture.distcache.v1.Partition>
  getBackups();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; backups = 8 [json_name = "Backups"];</code>
   */
  java.util.Map<java.lang.Long, com.fluxninja.generated.aperture.distcache.v1.Partition>
  getBackupsMap();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; backups = 8 [json_name = "Backups"];</code>
   */

  /* nullable */
com.fluxninja.generated.aperture.distcache.v1.Partition getBackupsOrDefault(
      long key,
      /* nullable */
com.fluxninja.generated.aperture.distcache.v1.Partition defaultValue);
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Partition&gt; backups = 8 [json_name = "Backups"];</code>
   */

  com.fluxninja.generated.aperture.distcache.v1.Partition getBackupsOrThrow(
      long key);

  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Member&gt; cluster_members = 9 [json_name = "ClusterMembers"];</code>
   */
  int getClusterMembersCount();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Member&gt; cluster_members = 9 [json_name = "ClusterMembers"];</code>
   */
  boolean containsClusterMembers(
      long key);
  /**
   * Use {@link #getClusterMembersMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.Long, com.fluxninja.generated.aperture.distcache.v1.Member>
  getClusterMembers();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Member&gt; cluster_members = 9 [json_name = "ClusterMembers"];</code>
   */
  java.util.Map<java.lang.Long, com.fluxninja.generated.aperture.distcache.v1.Member>
  getClusterMembersMap();
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Member&gt; cluster_members = 9 [json_name = "ClusterMembers"];</code>
   */

  /* nullable */
com.fluxninja.generated.aperture.distcache.v1.Member getClusterMembersOrDefault(
      long key,
      /* nullable */
com.fluxninja.generated.aperture.distcache.v1.Member defaultValue);
  /**
   * <code>map&lt;uint64, .aperture.distcache.v1.Member&gt; cluster_members = 9 [json_name = "ClusterMembers"];</code>
   */

  com.fluxninja.generated.aperture.distcache.v1.Member getClusterMembersOrThrow(
      long key);

  /**
   * <code>.aperture.distcache.v1.Network network = 10 [json_name = "Network"];</code>
   * @return Whether the network field is set.
   */
  boolean hasNetwork();
  /**
   * <code>.aperture.distcache.v1.Network network = 10 [json_name = "Network"];</code>
   * @return The network.
   */
  com.fluxninja.generated.aperture.distcache.v1.Network getNetwork();
  /**
   * <code>.aperture.distcache.v1.Network network = 10 [json_name = "Network"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.NetworkOrBuilder getNetworkOrBuilder();

  /**
   * <code>.aperture.distcache.v1.DMaps d_maps = 11 [json_name = "DMaps"];</code>
   * @return Whether the dMaps field is set.
   */
  boolean hasDMaps();
  /**
   * <code>.aperture.distcache.v1.DMaps d_maps = 11 [json_name = "DMaps"];</code>
   * @return The dMaps.
   */
  com.fluxninja.generated.aperture.distcache.v1.DMaps getDMaps();
  /**
   * <code>.aperture.distcache.v1.DMaps d_maps = 11 [json_name = "DMaps"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.DMapsOrBuilder getDMapsOrBuilder();

  /**
   * <code>.aperture.distcache.v1.DTopics d_topics = 12 [json_name = "DTopics"];</code>
   * @return Whether the dTopics field is set.
   */
  boolean hasDTopics();
  /**
   * <code>.aperture.distcache.v1.DTopics d_topics = 12 [json_name = "DTopics"];</code>
   * @return The dTopics.
   */
  com.fluxninja.generated.aperture.distcache.v1.DTopics getDTopics();
  /**
   * <code>.aperture.distcache.v1.DTopics d_topics = 12 [json_name = "DTopics"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.DTopicsOrBuilder getDTopicsOrBuilder();
}
