// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/std_components.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface UnaryOperatorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.UnaryOperator)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Input ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return Whether the inPorts field is set.
   */
  boolean hasInPorts();
  /**
   * <pre>
   * Input ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return The inPorts.
   */
  com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins getInPorts();
  /**
   * <pre>
   * Input ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.InsOrBuilder getInPortsOrBuilder();

  /**
   * <pre>
   * Output ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return Whether the outPorts field is set.
   */
  boolean hasOutPorts();
  /**
   * <pre>
   * Output ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return The outPorts.
   */
  com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs getOutPorts();
  /**
   * <pre>
   * Output ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.OutsOrBuilder getOutPortsOrBuilder();

  /**
   * <pre>
   * Unary Operator to apply.
   * The unary operator can be one of the following:
   * * abs: Absolute value with the sign removed.
   * * acos: arccosine, in radians.
   * * acosh: Inverse hyperbolic cosine.
   * * asin: arcsine, in radians.
   * * asinh: Inverse hyperbolic sine.
   * * atan: arctangent, in radians.
   * * atanh: Inverse hyperbolic tangent.
   * * cbrt: Cube root.
   * * ceil: Least integer value greater than or equal to input signal.
   * * cos: cosine, in radians.
   * * cosh: Hyperbolic cosine.
   * * erf: Error function.
   * * erfc: Complementary error function.
   * * erfcinv: Inverse complementary error function.
   * * erfinv: Inverse error function.
   * * exp: The base-e exponential of input signal.
   * * exp2: The base-2 exponential of input signal.
   * * expm1: The base-e exponential of input signal minus 1.
   * * floor: Greatest integer value less than or equal to input signal.
   * * gamma: Gamma function.
   * * j0: Bessel function of the first kind of order 0.
   * * j1: Bessel function of the first kind of order 1.
   * * lgamma: Natural logarithm of the absolute value of the gamma function.
   * * log: Natural logarithm of input signal.
   * * log10: Base-10 logarithm of input signal.
   * * log1p: Natural logarithm of input signal plus 1.
   * * log2: Base-2 logarithm of input signal.
   * * round: Round to nearest integer.
   * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
   * * sin: sine, in radians.
   * * sinh: Hyperbolic sine.
   * * sqrt: Square root.
   * * tan: tangent, in radians.
   * * tanh: Hyperbolic tangent.
   * * trunc: Truncate to integer.
   * * y0: Bessel function of the second kind of order 0.
   * * y1: Bessel function of the second kind of order 1.
   * </pre>
   *
   * <code>string operator = 3 [json_name = "operator"];</code>
   * @return The operator.
   */
  java.lang.String getOperator();
  /**
   * <pre>
   * Unary Operator to apply.
   * The unary operator can be one of the following:
   * * abs: Absolute value with the sign removed.
   * * acos: arccosine, in radians.
   * * acosh: Inverse hyperbolic cosine.
   * * asin: arcsine, in radians.
   * * asinh: Inverse hyperbolic sine.
   * * atan: arctangent, in radians.
   * * atanh: Inverse hyperbolic tangent.
   * * cbrt: Cube root.
   * * ceil: Least integer value greater than or equal to input signal.
   * * cos: cosine, in radians.
   * * cosh: Hyperbolic cosine.
   * * erf: Error function.
   * * erfc: Complementary error function.
   * * erfcinv: Inverse complementary error function.
   * * erfinv: Inverse error function.
   * * exp: The base-e exponential of input signal.
   * * exp2: The base-2 exponential of input signal.
   * * expm1: The base-e exponential of input signal minus 1.
   * * floor: Greatest integer value less than or equal to input signal.
   * * gamma: Gamma function.
   * * j0: Bessel function of the first kind of order 0.
   * * j1: Bessel function of the first kind of order 1.
   * * lgamma: Natural logarithm of the absolute value of the gamma function.
   * * log: Natural logarithm of input signal.
   * * log10: Base-10 logarithm of input signal.
   * * log1p: Natural logarithm of input signal plus 1.
   * * log2: Base-2 logarithm of input signal.
   * * round: Round to nearest integer.
   * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
   * * sin: sine, in radians.
   * * sinh: Hyperbolic sine.
   * * sqrt: Square root.
   * * tan: tangent, in radians.
   * * tanh: Hyperbolic tangent.
   * * trunc: Truncate to integer.
   * * y0: Bessel function of the second kind of order 0.
   * * y1: Bessel function of the second kind of order 1.
   * </pre>
   *
   * <code>string operator = 3 [json_name = "operator"];</code>
   * @return The bytes for operator.
   */
  com.google.protobuf.ByteString
      getOperatorBytes();
}
