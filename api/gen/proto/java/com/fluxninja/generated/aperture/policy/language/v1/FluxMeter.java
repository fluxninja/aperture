// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/fluxmeter.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Flux Meter gathers metrics for the traffic that matches its selector
 * :::info
 * See also [Flux Meter overview](/concepts/flow-control/flux-meter.md).
 * :::
 * Example of a selector that creates a histogram metric for all HTTP requests
 * to particular service:
 * ```yaml
 * selector:
 *   service_selector:
 *     service: myservice.mynamespace.svc.cluster.local
 *   flow_selector:
 *     control_point:
 *       traffic: ingress
 * ```
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.FluxMeter}
 */
public final class FluxMeter extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.FluxMeter)
    FluxMeterOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FluxMeter.newBuilder() to construct.
  private FluxMeter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FluxMeter() {
    attributeKey_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FluxMeter();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private FluxMeter(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.Selector.Builder subBuilder = null;
            if (selector_ != null) {
              subBuilder = selector_.toBuilder();
            }
            selector_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Selector.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(selector_);
              selector_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.Builder subBuilder = null;
            if (histogramBucketsCase_ == 2) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_).toBuilder();
            }
            histogramBuckets_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_);
              histogramBuckets_ = subBuilder.buildPartial();
            }
            histogramBucketsCase_ = 2;
            break;
          }
          case 26: {
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.Builder subBuilder = null;
            if (histogramBucketsCase_ == 3) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_).toBuilder();
            }
            histogramBuckets_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_);
              histogramBuckets_ = subBuilder.buildPartial();
            }
            histogramBucketsCase_ = 3;
            break;
          }
          case 34: {
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.Builder subBuilder = null;
            if (histogramBucketsCase_ == 4) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_).toBuilder();
            }
            histogramBuckets_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_);
              histogramBuckets_ = subBuilder.buildPartial();
            }
            histogramBucketsCase_ = 4;
            break;
          }
          case 42: {
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.Builder subBuilder = null;
            if (histogramBucketsCase_ == 5) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_).toBuilder();
            }
            histogramBuckets_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_);
              histogramBuckets_ = subBuilder.buildPartial();
            }
            histogramBucketsCase_ = 5;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            attributeKey_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.Builder.class);
  }

  public interface StaticBucketsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.FluxMeter.StaticBuckets)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
     * </pre>
     *
     * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return A list containing the buckets.
     */
    java.util.List<java.lang.Double> getBucketsList();
    /**
     * <pre>
     * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
     * </pre>
     *
     * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count of buckets.
     */
    int getBucketsCount();
    /**
     * <pre>
     * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
     * </pre>
     *
     * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The buckets at the given index.
     */
    double getBuckets(int index);
  }
  /**
   * <pre>
   * StaticBuckets holds the static value of the buckets where latency histogram will be stored.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.FluxMeter.StaticBuckets}
   */
  public static final class StaticBuckets extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.FluxMeter.StaticBuckets)
      StaticBucketsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StaticBuckets.newBuilder() to construct.
    private StaticBuckets(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StaticBuckets() {
      buckets_ = emptyDoubleList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StaticBuckets();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StaticBuckets(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                buckets_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              buckets_.addDouble(input.readDouble());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) != 0) && input.getBytesUntilLimit() > 0) {
                buckets_ = newDoubleList();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                buckets_.addDouble(input.readDouble());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          buckets_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_StaticBuckets_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_StaticBuckets_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.Builder.class);
    }

    public static final int BUCKETS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.DoubleList buckets_;
    /**
     * <pre>
     * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
     * </pre>
     *
     * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return A list containing the buckets.
     */
    @java.lang.Override
    public java.util.List<java.lang.Double>
        getBucketsList() {
      return buckets_;
    }
    /**
     * <pre>
     * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
     * </pre>
     *
     * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count of buckets.
     */
    public int getBucketsCount() {
      return buckets_.size();
    }
    /**
     * <pre>
     * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
     * </pre>
     *
     * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The buckets at the given index.
     */
    public double getBuckets(int index) {
      return buckets_.getDouble(index);
    }
    private int bucketsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getBucketsList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(bucketsMemoizedSerializedSize);
      }
      for (int i = 0; i < buckets_.size(); i++) {
        output.writeDoubleNoTag(buckets_.getDouble(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        dataSize = 8 * getBucketsList().size();
        size += dataSize;
        if (!getBucketsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bucketsMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets other = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) obj;

      if (!getBucketsList()
          .equals(other.getBucketsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getBucketsCount() > 0) {
        hash = (37 * hash) + BUCKETS_FIELD_NUMBER;
        hash = (53 * hash) + getBucketsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * StaticBuckets holds the static value of the buckets where latency histogram will be stored.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.FluxMeter.StaticBuckets}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.FluxMeter.StaticBuckets)
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBucketsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_StaticBuckets_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_StaticBuckets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        buckets_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_StaticBuckets_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets build() {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets result = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) != 0)) {
          buckets_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.buckets_ = buckets_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance()) return this;
        if (!other.buckets_.isEmpty()) {
          if (buckets_.isEmpty()) {
            buckets_ = other.buckets_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBucketsIsMutable();
            buckets_.addAll(other.buckets_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.DoubleList buckets_ = emptyDoubleList();
      private void ensureBucketsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          buckets_ = mutableCopy(buckets_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
       * </pre>
       *
       * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return A list containing the buckets.
       */
      public java.util.List<java.lang.Double>
          getBucketsList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(buckets_) : buckets_;
      }
      /**
       * <pre>
       * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
       * </pre>
       *
       * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return The count of buckets.
       */
      public int getBucketsCount() {
        return buckets_.size();
      }
      /**
       * <pre>
       * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
       * </pre>
       *
       * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param index The index of the element to return.
       * @return The buckets at the given index.
       */
      public double getBuckets(int index) {
        return buckets_.getDouble(index);
      }
      /**
       * <pre>
       * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
       * </pre>
       *
       * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param index The index to set the value at.
       * @param value The buckets to set.
       * @return This builder for chaining.
       */
      public Builder setBuckets(
          int index, double value) {
        ensureBucketsIsMutable();
        buckets_.setDouble(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
       * </pre>
       *
       * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The buckets to add.
       * @return This builder for chaining.
       */
      public Builder addBuckets(double value) {
        ensureBucketsIsMutable();
        buckets_.addDouble(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
       * </pre>
       *
       * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param values The buckets to add.
       * @return This builder for chaining.
       */
      public Builder addAllBuckets(
          java.lang.Iterable<? extends java.lang.Double> values) {
        ensureBucketsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, buckets_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * &#64;gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
       * </pre>
       *
       * <code>repeated double buckets = 1 [json_name = "buckets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearBuckets() {
        buckets_ = emptyDoubleList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.FluxMeter.StaticBuckets)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.FluxMeter.StaticBuckets)
    private static final com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StaticBuckets>
        PARSER = new com.google.protobuf.AbstractParser<StaticBuckets>() {
      @java.lang.Override
      public StaticBuckets parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StaticBuckets(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StaticBuckets> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StaticBuckets> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LinearBucketsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.FluxMeter.LinearBuckets)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Upper bound of the lowest bucket.
     * </pre>
     *
     * <code>double start = 1 [json_name = "start"];</code>
     * @return The start.
     */
    double getStart();

    /**
     * <pre>
     * Width of each bucket.
     * </pre>
     *
     * <code>double width = 2 [json_name = "width"];</code>
     * @return The width.
     */
    double getWidth();

    /**
     * <pre>
     * Number of buckets.
     * </pre>
     *
     * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count.
     */
    int getCount();
  }
  /**
   * <pre>
   * LinearBuckets creates `count` number of buckets, each `width` wide, where the lowest bucket has an
   * upper bound of `start`. The final +inf bucket is not counted.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.FluxMeter.LinearBuckets}
   */
  public static final class LinearBuckets extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.FluxMeter.LinearBuckets)
      LinearBucketsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LinearBuckets.newBuilder() to construct.
    private LinearBuckets(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LinearBuckets() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LinearBuckets();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LinearBuckets(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              start_ = input.readDouble();
              break;
            }
            case 17: {

              width_ = input.readDouble();
              break;
            }
            case 24: {

              count_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_LinearBuckets_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_LinearBuckets_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.Builder.class);
    }

    public static final int START_FIELD_NUMBER = 1;
    private double start_;
    /**
     * <pre>
     * Upper bound of the lowest bucket.
     * </pre>
     *
     * <code>double start = 1 [json_name = "start"];</code>
     * @return The start.
     */
    @java.lang.Override
    public double getStart() {
      return start_;
    }

    public static final int WIDTH_FIELD_NUMBER = 2;
    private double width_;
    /**
     * <pre>
     * Width of each bucket.
     * </pre>
     *
     * <code>double width = 2 [json_name = "width"];</code>
     * @return The width.
     */
    @java.lang.Override
    public double getWidth() {
      return width_;
    }

    public static final int COUNT_FIELD_NUMBER = 3;
    private int count_;
    /**
     * <pre>
     * Number of buckets.
     * </pre>
     *
     * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count.
     */
    @java.lang.Override
    public int getCount() {
      return count_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(start_) != 0) {
        output.writeDouble(1, start_);
      }
      if (java.lang.Double.doubleToRawLongBits(width_) != 0) {
        output.writeDouble(2, width_);
      }
      if (count_ != 0) {
        output.writeInt32(3, count_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(start_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, start_);
      }
      if (java.lang.Double.doubleToRawLongBits(width_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, width_);
      }
      if (count_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, count_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets other = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) obj;

      if (java.lang.Double.doubleToLongBits(getStart())
          != java.lang.Double.doubleToLongBits(
              other.getStart())) return false;
      if (java.lang.Double.doubleToLongBits(getWidth())
          != java.lang.Double.doubleToLongBits(
              other.getWidth())) return false;
      if (getCount()
          != other.getCount()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + START_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getStart()));
      hash = (37 * hash) + WIDTH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getWidth()));
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * LinearBuckets creates `count` number of buckets, each `width` wide, where the lowest bucket has an
     * upper bound of `start`. The final +inf bucket is not counted.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.FluxMeter.LinearBuckets}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.FluxMeter.LinearBuckets)
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBucketsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_LinearBuckets_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_LinearBuckets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        start_ = 0D;

        width_ = 0D;

        count_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_LinearBuckets_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets build() {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets result = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets(this);
        result.start_ = start_;
        result.width_ = width_;
        result.count_ = count_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance()) return this;
        if (other.getStart() != 0D) {
          setStart(other.getStart());
        }
        if (other.getWidth() != 0D) {
          setWidth(other.getWidth());
        }
        if (other.getCount() != 0) {
          setCount(other.getCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double start_ ;
      /**
       * <pre>
       * Upper bound of the lowest bucket.
       * </pre>
       *
       * <code>double start = 1 [json_name = "start"];</code>
       * @return The start.
       */
      @java.lang.Override
      public double getStart() {
        return start_;
      }
      /**
       * <pre>
       * Upper bound of the lowest bucket.
       * </pre>
       *
       * <code>double start = 1 [json_name = "start"];</code>
       * @param value The start to set.
       * @return This builder for chaining.
       */
      public Builder setStart(double value) {
        
        start_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Upper bound of the lowest bucket.
       * </pre>
       *
       * <code>double start = 1 [json_name = "start"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStart() {
        
        start_ = 0D;
        onChanged();
        return this;
      }

      private double width_ ;
      /**
       * <pre>
       * Width of each bucket.
       * </pre>
       *
       * <code>double width = 2 [json_name = "width"];</code>
       * @return The width.
       */
      @java.lang.Override
      public double getWidth() {
        return width_;
      }
      /**
       * <pre>
       * Width of each bucket.
       * </pre>
       *
       * <code>double width = 2 [json_name = "width"];</code>
       * @param value The width to set.
       * @return This builder for chaining.
       */
      public Builder setWidth(double value) {
        
        width_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Width of each bucket.
       * </pre>
       *
       * <code>double width = 2 [json_name = "width"];</code>
       * @return This builder for chaining.
       */
      public Builder clearWidth() {
        
        width_ = 0D;
        onChanged();
        return this;
      }

      private int count_ ;
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return The count.
       */
      @java.lang.Override
      public int getCount() {
        return count_;
      }
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(int value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        
        count_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.FluxMeter.LinearBuckets)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.FluxMeter.LinearBuckets)
    private static final com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LinearBuckets>
        PARSER = new com.google.protobuf.AbstractParser<LinearBuckets>() {
      @java.lang.Override
      public LinearBuckets parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LinearBuckets(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LinearBuckets> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LinearBuckets> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExponentialBucketsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.FluxMeter.ExponentialBuckets)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Upper bound of the lowest bucket.
     * </pre>
     *
     * <code>double start = 1 [json_name = "start", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The start.
     */
    double getStart();

    /**
     * <pre>
     * Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.
     * </pre>
     *
     * <code>double factor = 2 [json_name = "factor", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The factor.
     */
    double getFactor();

    /**
     * <pre>
     * Number of buckets.
     * </pre>
     *
     * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count.
     */
    int getCount();
  }
  /**
   * <pre>
   * ExponentialBuckets creates `count` number of buckets where the lowest bucket has an upper bound of `start`
   * and each following bucket's upper bound is `factor` times the previous bucket's upper bound. The final +inf
   * bucket is not counted.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.FluxMeter.ExponentialBuckets}
   */
  public static final class ExponentialBuckets extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.FluxMeter.ExponentialBuckets)
      ExponentialBucketsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExponentialBuckets.newBuilder() to construct.
    private ExponentialBuckets(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExponentialBuckets() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExponentialBuckets();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExponentialBuckets(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              start_ = input.readDouble();
              break;
            }
            case 17: {

              factor_ = input.readDouble();
              break;
            }
            case 24: {

              count_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBuckets_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBuckets_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.Builder.class);
    }

    public static final int START_FIELD_NUMBER = 1;
    private double start_;
    /**
     * <pre>
     * Upper bound of the lowest bucket.
     * </pre>
     *
     * <code>double start = 1 [json_name = "start", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The start.
     */
    @java.lang.Override
    public double getStart() {
      return start_;
    }

    public static final int FACTOR_FIELD_NUMBER = 2;
    private double factor_;
    /**
     * <pre>
     * Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.
     * </pre>
     *
     * <code>double factor = 2 [json_name = "factor", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The factor.
     */
    @java.lang.Override
    public double getFactor() {
      return factor_;
    }

    public static final int COUNT_FIELD_NUMBER = 3;
    private int count_;
    /**
     * <pre>
     * Number of buckets.
     * </pre>
     *
     * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count.
     */
    @java.lang.Override
    public int getCount() {
      return count_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(start_) != 0) {
        output.writeDouble(1, start_);
      }
      if (java.lang.Double.doubleToRawLongBits(factor_) != 0) {
        output.writeDouble(2, factor_);
      }
      if (count_ != 0) {
        output.writeInt32(3, count_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(start_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, start_);
      }
      if (java.lang.Double.doubleToRawLongBits(factor_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, factor_);
      }
      if (count_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, count_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets other = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) obj;

      if (java.lang.Double.doubleToLongBits(getStart())
          != java.lang.Double.doubleToLongBits(
              other.getStart())) return false;
      if (java.lang.Double.doubleToLongBits(getFactor())
          != java.lang.Double.doubleToLongBits(
              other.getFactor())) return false;
      if (getCount()
          != other.getCount()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + START_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getStart()));
      hash = (37 * hash) + FACTOR_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getFactor()));
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ExponentialBuckets creates `count` number of buckets where the lowest bucket has an upper bound of `start`
     * and each following bucket's upper bound is `factor` times the previous bucket's upper bound. The final +inf
     * bucket is not counted.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.FluxMeter.ExponentialBuckets}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.FluxMeter.ExponentialBuckets)
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBuckets_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBuckets_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        start_ = 0D;

        factor_ = 0D;

        count_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBuckets_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets build() {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets result = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets(this);
        result.start_ = start_;
        result.factor_ = factor_;
        result.count_ = count_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance()) return this;
        if (other.getStart() != 0D) {
          setStart(other.getStart());
        }
        if (other.getFactor() != 0D) {
          setFactor(other.getFactor());
        }
        if (other.getCount() != 0) {
          setCount(other.getCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double start_ ;
      /**
       * <pre>
       * Upper bound of the lowest bucket.
       * </pre>
       *
       * <code>double start = 1 [json_name = "start", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return The start.
       */
      @java.lang.Override
      public double getStart() {
        return start_;
      }
      /**
       * <pre>
       * Upper bound of the lowest bucket.
       * </pre>
       *
       * <code>double start = 1 [json_name = "start", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The start to set.
       * @return This builder for chaining.
       */
      public Builder setStart(double value) {
        
        start_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Upper bound of the lowest bucket.
       * </pre>
       *
       * <code>double start = 1 [json_name = "start", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearStart() {
        
        start_ = 0D;
        onChanged();
        return this;
      }

      private double factor_ ;
      /**
       * <pre>
       * Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.
       * </pre>
       *
       * <code>double factor = 2 [json_name = "factor", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return The factor.
       */
      @java.lang.Override
      public double getFactor() {
        return factor_;
      }
      /**
       * <pre>
       * Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.
       * </pre>
       *
       * <code>double factor = 2 [json_name = "factor", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The factor to set.
       * @return This builder for chaining.
       */
      public Builder setFactor(double value) {
        
        factor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.
       * </pre>
       *
       * <code>double factor = 2 [json_name = "factor", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearFactor() {
        
        factor_ = 0D;
        onChanged();
        return this;
      }

      private int count_ ;
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return The count.
       */
      @java.lang.Override
      public int getCount() {
        return count_;
      }
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(int value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        
        count_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.FluxMeter.ExponentialBuckets)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.FluxMeter.ExponentialBuckets)
    private static final com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExponentialBuckets>
        PARSER = new com.google.protobuf.AbstractParser<ExponentialBuckets>() {
      @java.lang.Override
      public ExponentialBuckets parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExponentialBuckets(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExponentialBuckets> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExponentialBuckets> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ExponentialBucketsRangeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Lowest bucket.
     * </pre>
     *
     * <code>double min = 1 [json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The min.
     */
    double getMin();

    /**
     * <pre>
     * Highest bucket.
     * </pre>
     *
     * <code>double max = 2 [json_name = "max"];</code>
     * @return The max.
     */
    double getMax();

    /**
     * <pre>
     * Number of buckets.
     * </pre>
     *
     * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count.
     */
    int getCount();
  }
  /**
   * <pre>
   * ExponentialBucketsRange creates `count` number of buckets where the lowest bucket is `min` and the highest
   * bucket is `max`. The final +inf bucket is not counted.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange}
   */
  public static final class ExponentialBucketsRange extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange)
      ExponentialBucketsRangeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExponentialBucketsRange.newBuilder() to construct.
    private ExponentialBucketsRange(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExponentialBucketsRange() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExponentialBucketsRange();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ExponentialBucketsRange(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              min_ = input.readDouble();
              break;
            }
            case 17: {

              max_ = input.readDouble();
              break;
            }
            case 24: {

              count_ = input.readInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBucketsRange_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBucketsRange_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.Builder.class);
    }

    public static final int MIN_FIELD_NUMBER = 1;
    private double min_;
    /**
     * <pre>
     * Lowest bucket.
     * </pre>
     *
     * <code>double min = 1 [json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The min.
     */
    @java.lang.Override
    public double getMin() {
      return min_;
    }

    public static final int MAX_FIELD_NUMBER = 2;
    private double max_;
    /**
     * <pre>
     * Highest bucket.
     * </pre>
     *
     * <code>double max = 2 [json_name = "max"];</code>
     * @return The max.
     */
    @java.lang.Override
    public double getMax() {
      return max_;
    }

    public static final int COUNT_FIELD_NUMBER = 3;
    private int count_;
    /**
     * <pre>
     * Number of buckets.
     * </pre>
     *
     * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count.
     */
    @java.lang.Override
    public int getCount() {
      return count_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (java.lang.Double.doubleToRawLongBits(min_) != 0) {
        output.writeDouble(1, min_);
      }
      if (java.lang.Double.doubleToRawLongBits(max_) != 0) {
        output.writeDouble(2, max_);
      }
      if (count_ != 0) {
        output.writeInt32(3, count_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (java.lang.Double.doubleToRawLongBits(min_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(1, min_);
      }
      if (java.lang.Double.doubleToRawLongBits(max_) != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(2, max_);
      }
      if (count_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, count_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange other = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) obj;

      if (java.lang.Double.doubleToLongBits(getMin())
          != java.lang.Double.doubleToLongBits(
              other.getMin())) return false;
      if (java.lang.Double.doubleToLongBits(getMax())
          != java.lang.Double.doubleToLongBits(
              other.getMax())) return false;
      if (getCount()
          != other.getCount()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + MIN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMin()));
      hash = (37 * hash) + MAX_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          java.lang.Double.doubleToLongBits(getMax()));
      hash = (37 * hash) + COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getCount();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ExponentialBucketsRange creates `count` number of buckets where the lowest bucket is `min` and the highest
     * bucket is `max`. The final +inf bucket is not counted.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange)
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRangeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBucketsRange_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBucketsRange_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        min_ = 0D;

        max_ = 0D;

        count_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_ExponentialBucketsRange_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange build() {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange result = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange(this);
        result.min_ = min_;
        result.max_ = max_;
        result.count_ = count_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance()) return this;
        if (other.getMin() != 0D) {
          setMin(other.getMin());
        }
        if (other.getMax() != 0D) {
          setMax(other.getMax());
        }
        if (other.getCount() != 0) {
          setCount(other.getCount());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private double min_ ;
      /**
       * <pre>
       * Lowest bucket.
       * </pre>
       *
       * <code>double min = 1 [json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return The min.
       */
      @java.lang.Override
      public double getMin() {
        return min_;
      }
      /**
       * <pre>
       * Lowest bucket.
       * </pre>
       *
       * <code>double min = 1 [json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The min to set.
       * @return This builder for chaining.
       */
      public Builder setMin(double value) {
        
        min_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Lowest bucket.
       * </pre>
       *
       * <code>double min = 1 [json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearMin() {
        
        min_ = 0D;
        onChanged();
        return this;
      }

      private double max_ ;
      /**
       * <pre>
       * Highest bucket.
       * </pre>
       *
       * <code>double max = 2 [json_name = "max"];</code>
       * @return The max.
       */
      @java.lang.Override
      public double getMax() {
        return max_;
      }
      /**
       * <pre>
       * Highest bucket.
       * </pre>
       *
       * <code>double max = 2 [json_name = "max"];</code>
       * @param value The max to set.
       * @return This builder for chaining.
       */
      public Builder setMax(double value) {
        
        max_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Highest bucket.
       * </pre>
       *
       * <code>double max = 2 [json_name = "max"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMax() {
        
        max_ = 0D;
        onChanged();
        return this;
      }

      private int count_ ;
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return The count.
       */
      @java.lang.Override
      public int getCount() {
        return count_;
      }
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The count to set.
       * @return This builder for chaining.
       */
      public Builder setCount(int value) {
        
        count_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of buckets.
       * </pre>
       *
       * <code>int32 count = 3 [json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearCount() {
        
        count_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange)
    private static final com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExponentialBucketsRange>
        PARSER = new com.google.protobuf.AbstractParser<ExponentialBucketsRange>() {
      @java.lang.Override
      public ExponentialBucketsRange parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ExponentialBucketsRange(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ExponentialBucketsRange> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExponentialBucketsRange> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int histogramBucketsCase_ = 0;
  private java.lang.Object histogramBuckets_;
  public enum HistogramBucketsCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    STATIC_BUCKETS(2),
    LINEAR_BUCKETS(3),
    EXPONENTIAL_BUCKETS(4),
    EXPONENTIAL_BUCKETS_RANGE(5),
    HISTOGRAMBUCKETS_NOT_SET(0);
    private final int value;
    private HistogramBucketsCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HistogramBucketsCase valueOf(int value) {
      return forNumber(value);
    }

    public static HistogramBucketsCase forNumber(int value) {
      switch (value) {
        case 2: return STATIC_BUCKETS;
        case 3: return LINEAR_BUCKETS;
        case 4: return EXPONENTIAL_BUCKETS;
        case 5: return EXPONENTIAL_BUCKETS_RANGE;
        case 0: return HISTOGRAMBUCKETS_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public HistogramBucketsCase
  getHistogramBucketsCase() {
    return HistogramBucketsCase.forNumber(
        histogramBucketsCase_);
  }

  public static final int SELECTOR_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.language.v1.Selector selector_;
  /**
   * <pre>
   * What latency should we measure in the histogram created by this Flux Meter.
   * * For traffic control points, fluxmeter will measure the duration of the
   *   whole http transaction (including sending request and receiving
   *   response).
   * * For feature control points, fluxmeter will measure execution of the span
   *   associated with particular feature. What contributes to the span's
   *   duration is entirely up to the user code that uses Aperture SDK.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
   * @return Whether the selector field is set.
   */
  @java.lang.Override
  public boolean hasSelector() {
    return selector_ != null;
  }
  /**
   * <pre>
   * What latency should we measure in the histogram created by this Flux Meter.
   * * For traffic control points, fluxmeter will measure the duration of the
   *   whole http transaction (including sending request and receiving
   *   response).
   * * For feature control points, fluxmeter will measure execution of the span
   *   associated with particular feature. What contributes to the span's
   *   duration is entirely up to the user code that uses Aperture SDK.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
   * @return The selector.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Selector getSelector() {
    return selector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Selector.getDefaultInstance() : selector_;
  }
  /**
   * <pre>
   * What latency should we measure in the histogram created by this Flux Meter.
   * * For traffic control points, fluxmeter will measure the duration of the
   *   whole http transaction (including sending request and receiving
   *   response).
   * * For feature control points, fluxmeter will measure execution of the span
   *   associated with particular feature. What contributes to the span's
   *   duration is entirely up to the user code that uses Aperture SDK.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.SelectorOrBuilder getSelectorOrBuilder() {
    return getSelector();
  }

  public static final int STATIC_BUCKETS_FIELD_NUMBER = 2;
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
   * @return Whether the staticBuckets field is set.
   */
  @java.lang.Override
  public boolean hasStaticBuckets() {
    return histogramBucketsCase_ == 2;
  }
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
   * @return The staticBuckets.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets getStaticBuckets() {
    if (histogramBucketsCase_ == 2) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance();
  }
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBucketsOrBuilder getStaticBucketsOrBuilder() {
    if (histogramBucketsCase_ == 2) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance();
  }

  public static final int LINEAR_BUCKETS_FIELD_NUMBER = 3;
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
   * @return Whether the linearBuckets field is set.
   */
  @java.lang.Override
  public boolean hasLinearBuckets() {
    return histogramBucketsCase_ == 3;
  }
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
   * @return The linearBuckets.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets getLinearBuckets() {
    if (histogramBucketsCase_ == 3) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance();
  }
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBucketsOrBuilder getLinearBucketsOrBuilder() {
    if (histogramBucketsCase_ == 3) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance();
  }

  public static final int EXPONENTIAL_BUCKETS_FIELD_NUMBER = 4;
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
   * @return Whether the exponentialBuckets field is set.
   */
  @java.lang.Override
  public boolean hasExponentialBuckets() {
    return histogramBucketsCase_ == 4;
  }
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
   * @return The exponentialBuckets.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets getExponentialBuckets() {
    if (histogramBucketsCase_ == 4) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance();
  }
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsOrBuilder getExponentialBucketsOrBuilder() {
    if (histogramBucketsCase_ == 4) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance();
  }

  public static final int EXPONENTIAL_BUCKETS_RANGE_FIELD_NUMBER = 5;
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
   * @return Whether the exponentialBucketsRange field is set.
   */
  @java.lang.Override
  public boolean hasExponentialBucketsRange() {
    return histogramBucketsCase_ == 5;
  }
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
   * @return The exponentialBucketsRange.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange getExponentialBucketsRange() {
    if (histogramBucketsCase_ == 5) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance();
  }
  /**
   * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRangeOrBuilder getExponentialBucketsRangeOrBuilder() {
    if (histogramBucketsCase_ == 5) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance();
  }

  public static final int ATTRIBUTE_KEY_FIELD_NUMBER = 6;
  private volatile java.lang.Object attributeKey_;
  /**
   * <pre>
   * Key of the attribute in access log or span from which the metric for this flux meter is read.
   * :::info
   * For list of available attributes in Envoy access logs, refer
   * [Envoy Filter](/get-started/installation/agent/envoy/istio.md#envoy-filter)
   * :::
   * </pre>
   *
   * <code>string attribute_key = 6 [json_name = "attributeKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The attributeKey.
   */
  @java.lang.Override
  public java.lang.String getAttributeKey() {
    java.lang.Object ref = attributeKey_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      attributeKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Key of the attribute in access log or span from which the metric for this flux meter is read.
   * :::info
   * For list of available attributes in Envoy access logs, refer
   * [Envoy Filter](/get-started/installation/agent/envoy/istio.md#envoy-filter)
   * :::
   * </pre>
   *
   * <code>string attribute_key = 6 [json_name = "attributeKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The bytes for attributeKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAttributeKeyBytes() {
    java.lang.Object ref = attributeKey_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      attributeKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (selector_ != null) {
      output.writeMessage(1, getSelector());
    }
    if (histogramBucketsCase_ == 2) {
      output.writeMessage(2, (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_);
    }
    if (histogramBucketsCase_ == 3) {
      output.writeMessage(3, (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_);
    }
    if (histogramBucketsCase_ == 4) {
      output.writeMessage(4, (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_);
    }
    if (histogramBucketsCase_ == 5) {
      output.writeMessage(5, (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(attributeKey_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, attributeKey_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (selector_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getSelector());
    }
    if (histogramBucketsCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_);
    }
    if (histogramBucketsCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_);
    }
    if (histogramBucketsCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_);
    }
    if (histogramBucketsCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(attributeKey_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, attributeKey_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.FluxMeter other = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter) obj;

    if (hasSelector() != other.hasSelector()) return false;
    if (hasSelector()) {
      if (!getSelector()
          .equals(other.getSelector())) return false;
    }
    if (!getAttributeKey()
        .equals(other.getAttributeKey())) return false;
    if (!getHistogramBucketsCase().equals(other.getHistogramBucketsCase())) return false;
    switch (histogramBucketsCase_) {
      case 2:
        if (!getStaticBuckets()
            .equals(other.getStaticBuckets())) return false;
        break;
      case 3:
        if (!getLinearBuckets()
            .equals(other.getLinearBuckets())) return false;
        break;
      case 4:
        if (!getExponentialBuckets()
            .equals(other.getExponentialBuckets())) return false;
        break;
      case 5:
        if (!getExponentialBucketsRange()
            .equals(other.getExponentialBucketsRange())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSelector()) {
      hash = (37 * hash) + SELECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getSelector().hashCode();
    }
    hash = (37 * hash) + ATTRIBUTE_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getAttributeKey().hashCode();
    switch (histogramBucketsCase_) {
      case 2:
        hash = (37 * hash) + STATIC_BUCKETS_FIELD_NUMBER;
        hash = (53 * hash) + getStaticBuckets().hashCode();
        break;
      case 3:
        hash = (37 * hash) + LINEAR_BUCKETS_FIELD_NUMBER;
        hash = (53 * hash) + getLinearBuckets().hashCode();
        break;
      case 4:
        hash = (37 * hash) + EXPONENTIAL_BUCKETS_FIELD_NUMBER;
        hash = (53 * hash) + getExponentialBuckets().hashCode();
        break;
      case 5:
        hash = (37 * hash) + EXPONENTIAL_BUCKETS_RANGE_FIELD_NUMBER;
        hash = (53 * hash) + getExponentialBucketsRange().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Flux Meter gathers metrics for the traffic that matches its selector
   * :::info
   * See also [Flux Meter overview](/concepts/flow-control/flux-meter.md).
   * :::
   * Example of a selector that creates a histogram metric for all HTTP requests
   * to particular service:
   * ```yaml
   * selector:
   *   service_selector:
   *     service: myservice.mynamespace.svc.cluster.local
   *   flow_selector:
   *     control_point:
   *       traffic: ingress
   * ```
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.FluxMeter}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.FluxMeter)
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeterOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.class, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (selectorBuilder_ == null) {
        selector_ = null;
      } else {
        selector_ = null;
        selectorBuilder_ = null;
      }
      attributeKey_ = "";

      histogramBucketsCase_ = 0;
      histogramBuckets_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxmeterProto.internal_static_aperture_policy_language_v1_FluxMeter_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter build() {
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeter result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeter result = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter(this);
      if (selectorBuilder_ == null) {
        result.selector_ = selector_;
      } else {
        result.selector_ = selectorBuilder_.build();
      }
      if (histogramBucketsCase_ == 2) {
        if (staticBucketsBuilder_ == null) {
          result.histogramBuckets_ = histogramBuckets_;
        } else {
          result.histogramBuckets_ = staticBucketsBuilder_.build();
        }
      }
      if (histogramBucketsCase_ == 3) {
        if (linearBucketsBuilder_ == null) {
          result.histogramBuckets_ = histogramBuckets_;
        } else {
          result.histogramBuckets_ = linearBucketsBuilder_.build();
        }
      }
      if (histogramBucketsCase_ == 4) {
        if (exponentialBucketsBuilder_ == null) {
          result.histogramBuckets_ = histogramBuckets_;
        } else {
          result.histogramBuckets_ = exponentialBucketsBuilder_.build();
        }
      }
      if (histogramBucketsCase_ == 5) {
        if (exponentialBucketsRangeBuilder_ == null) {
          result.histogramBuckets_ = histogramBuckets_;
        } else {
          result.histogramBuckets_ = exponentialBucketsRangeBuilder_.build();
        }
      }
      result.attributeKey_ = attributeKey_;
      result.histogramBucketsCase_ = histogramBucketsCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.FluxMeter) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.getDefaultInstance()) return this;
      if (other.hasSelector()) {
        mergeSelector(other.getSelector());
      }
      if (!other.getAttributeKey().isEmpty()) {
        attributeKey_ = other.attributeKey_;
        onChanged();
      }
      switch (other.getHistogramBucketsCase()) {
        case STATIC_BUCKETS: {
          mergeStaticBuckets(other.getStaticBuckets());
          break;
        }
        case LINEAR_BUCKETS: {
          mergeLinearBuckets(other.getLinearBuckets());
          break;
        }
        case EXPONENTIAL_BUCKETS: {
          mergeExponentialBuckets(other.getExponentialBuckets());
          break;
        }
        case EXPONENTIAL_BUCKETS_RANGE: {
          mergeExponentialBucketsRange(other.getExponentialBucketsRange());
          break;
        }
        case HISTOGRAMBUCKETS_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeter parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int histogramBucketsCase_ = 0;
    private java.lang.Object histogramBuckets_;
    public HistogramBucketsCase
        getHistogramBucketsCase() {
      return HistogramBucketsCase.forNumber(
          histogramBucketsCase_);
    }

    public Builder clearHistogramBuckets() {
      histogramBucketsCase_ = 0;
      histogramBuckets_ = null;
      onChanged();
      return this;
    }


    private com.fluxninja.generated.aperture.policy.language.v1.Selector selector_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Selector, com.fluxninja.generated.aperture.policy.language.v1.Selector.Builder, com.fluxninja.generated.aperture.policy.language.v1.SelectorOrBuilder> selectorBuilder_;
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     * @return Whether the selector field is set.
     */
    public boolean hasSelector() {
      return selectorBuilder_ != null || selector_ != null;
    }
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     * @return The selector.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Selector getSelector() {
      if (selectorBuilder_ == null) {
        return selector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Selector.getDefaultInstance() : selector_;
      } else {
        return selectorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public Builder setSelector(com.fluxninja.generated.aperture.policy.language.v1.Selector value) {
      if (selectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        selector_ = value;
        onChanged();
      } else {
        selectorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public Builder setSelector(
        com.fluxninja.generated.aperture.policy.language.v1.Selector.Builder builderForValue) {
      if (selectorBuilder_ == null) {
        selector_ = builderForValue.build();
        onChanged();
      } else {
        selectorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public Builder mergeSelector(com.fluxninja.generated.aperture.policy.language.v1.Selector value) {
      if (selectorBuilder_ == null) {
        if (selector_ != null) {
          selector_ =
            com.fluxninja.generated.aperture.policy.language.v1.Selector.newBuilder(selector_).mergeFrom(value).buildPartial();
        } else {
          selector_ = value;
        }
        onChanged();
      } else {
        selectorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public Builder clearSelector() {
      if (selectorBuilder_ == null) {
        selector_ = null;
        onChanged();
      } else {
        selector_ = null;
        selectorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Selector.Builder getSelectorBuilder() {
      
      onChanged();
      return getSelectorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.SelectorOrBuilder getSelectorOrBuilder() {
      if (selectorBuilder_ != null) {
        return selectorBuilder_.getMessageOrBuilder();
      } else {
        return selector_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.Selector.getDefaultInstance() : selector_;
      }
    }
    /**
     * <pre>
     * What latency should we measure in the histogram created by this Flux Meter.
     * * For traffic control points, fluxmeter will measure the duration of the
     *   whole http transaction (including sending request and receiving
     *   response).
     * * For feature control points, fluxmeter will measure execution of the span
     *   associated with particular feature. What contributes to the span's
     *   duration is entirely up to the user code that uses Aperture SDK.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Selector selector = 1 [json_name = "selector"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Selector, com.fluxninja.generated.aperture.policy.language.v1.Selector.Builder, com.fluxninja.generated.aperture.policy.language.v1.SelectorOrBuilder> 
        getSelectorFieldBuilder() {
      if (selectorBuilder_ == null) {
        selectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Selector, com.fluxninja.generated.aperture.policy.language.v1.Selector.Builder, com.fluxninja.generated.aperture.policy.language.v1.SelectorOrBuilder>(
                getSelector(),
                getParentForChildren(),
                isClean());
        selector_ = null;
      }
      return selectorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBucketsOrBuilder> staticBucketsBuilder_;
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     * @return Whether the staticBuckets field is set.
     */
    @java.lang.Override
    public boolean hasStaticBuckets() {
      return histogramBucketsCase_ == 2;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     * @return The staticBuckets.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets getStaticBuckets() {
      if (staticBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 2) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance();
      } else {
        if (histogramBucketsCase_ == 2) {
          return staticBucketsBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance();
      }
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     */
    public Builder setStaticBuckets(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets value) {
      if (staticBucketsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        histogramBuckets_ = value;
        onChanged();
      } else {
        staticBucketsBuilder_.setMessage(value);
      }
      histogramBucketsCase_ = 2;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     */
    public Builder setStaticBuckets(
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.Builder builderForValue) {
      if (staticBucketsBuilder_ == null) {
        histogramBuckets_ = builderForValue.build();
        onChanged();
      } else {
        staticBucketsBuilder_.setMessage(builderForValue.build());
      }
      histogramBucketsCase_ = 2;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     */
    public Builder mergeStaticBuckets(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets value) {
      if (staticBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 2 &&
            histogramBuckets_ != com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance()) {
          histogramBuckets_ = com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_)
              .mergeFrom(value).buildPartial();
        } else {
          histogramBuckets_ = value;
        }
        onChanged();
      } else {
        if (histogramBucketsCase_ == 2) {
          staticBucketsBuilder_.mergeFrom(value);
        } else {
          staticBucketsBuilder_.setMessage(value);
        }
      }
      histogramBucketsCase_ = 2;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     */
    public Builder clearStaticBuckets() {
      if (staticBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 2) {
          histogramBucketsCase_ = 0;
          histogramBuckets_ = null;
          onChanged();
        }
      } else {
        if (histogramBucketsCase_ == 2) {
          histogramBucketsCase_ = 0;
          histogramBuckets_ = null;
        }
        staticBucketsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.Builder getStaticBucketsBuilder() {
      return getStaticBucketsFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBucketsOrBuilder getStaticBucketsOrBuilder() {
      if ((histogramBucketsCase_ == 2) && (staticBucketsBuilder_ != null)) {
        return staticBucketsBuilder_.getMessageOrBuilder();
      } else {
        if (histogramBucketsCase_ == 2) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance();
      }
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.StaticBuckets static_buckets = 2 [json_name = "staticBuckets"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBucketsOrBuilder> 
        getStaticBucketsFieldBuilder() {
      if (staticBucketsBuilder_ == null) {
        if (!(histogramBucketsCase_ == 2)) {
          histogramBuckets_ = com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.getDefaultInstance();
        }
        staticBucketsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBucketsOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.StaticBuckets) histogramBuckets_,
                getParentForChildren(),
                isClean());
        histogramBuckets_ = null;
      }
      histogramBucketsCase_ = 2;
      onChanged();;
      return staticBucketsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBucketsOrBuilder> linearBucketsBuilder_;
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     * @return Whether the linearBuckets field is set.
     */
    @java.lang.Override
    public boolean hasLinearBuckets() {
      return histogramBucketsCase_ == 3;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     * @return The linearBuckets.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets getLinearBuckets() {
      if (linearBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 3) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance();
      } else {
        if (histogramBucketsCase_ == 3) {
          return linearBucketsBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance();
      }
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     */
    public Builder setLinearBuckets(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets value) {
      if (linearBucketsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        histogramBuckets_ = value;
        onChanged();
      } else {
        linearBucketsBuilder_.setMessage(value);
      }
      histogramBucketsCase_ = 3;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     */
    public Builder setLinearBuckets(
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.Builder builderForValue) {
      if (linearBucketsBuilder_ == null) {
        histogramBuckets_ = builderForValue.build();
        onChanged();
      } else {
        linearBucketsBuilder_.setMessage(builderForValue.build());
      }
      histogramBucketsCase_ = 3;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     */
    public Builder mergeLinearBuckets(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets value) {
      if (linearBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 3 &&
            histogramBuckets_ != com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance()) {
          histogramBuckets_ = com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_)
              .mergeFrom(value).buildPartial();
        } else {
          histogramBuckets_ = value;
        }
        onChanged();
      } else {
        if (histogramBucketsCase_ == 3) {
          linearBucketsBuilder_.mergeFrom(value);
        } else {
          linearBucketsBuilder_.setMessage(value);
        }
      }
      histogramBucketsCase_ = 3;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     */
    public Builder clearLinearBuckets() {
      if (linearBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 3) {
          histogramBucketsCase_ = 0;
          histogramBuckets_ = null;
          onChanged();
        }
      } else {
        if (histogramBucketsCase_ == 3) {
          histogramBucketsCase_ = 0;
          histogramBuckets_ = null;
        }
        linearBucketsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.Builder getLinearBucketsBuilder() {
      return getLinearBucketsFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBucketsOrBuilder getLinearBucketsOrBuilder() {
      if ((histogramBucketsCase_ == 3) && (linearBucketsBuilder_ != null)) {
        return linearBucketsBuilder_.getMessageOrBuilder();
      } else {
        if (histogramBucketsCase_ == 3) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance();
      }
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.LinearBuckets linear_buckets = 3 [json_name = "linearBuckets"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBucketsOrBuilder> 
        getLinearBucketsFieldBuilder() {
      if (linearBucketsBuilder_ == null) {
        if (!(histogramBucketsCase_ == 3)) {
          histogramBuckets_ = com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.getDefaultInstance();
        }
        linearBucketsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBucketsOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.LinearBuckets) histogramBuckets_,
                getParentForChildren(),
                isClean());
        histogramBuckets_ = null;
      }
      histogramBucketsCase_ = 3;
      onChanged();;
      return linearBucketsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsOrBuilder> exponentialBucketsBuilder_;
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     * @return Whether the exponentialBuckets field is set.
     */
    @java.lang.Override
    public boolean hasExponentialBuckets() {
      return histogramBucketsCase_ == 4;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     * @return The exponentialBuckets.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets getExponentialBuckets() {
      if (exponentialBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 4) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance();
      } else {
        if (histogramBucketsCase_ == 4) {
          return exponentialBucketsBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance();
      }
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     */
    public Builder setExponentialBuckets(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets value) {
      if (exponentialBucketsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        histogramBuckets_ = value;
        onChanged();
      } else {
        exponentialBucketsBuilder_.setMessage(value);
      }
      histogramBucketsCase_ = 4;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     */
    public Builder setExponentialBuckets(
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.Builder builderForValue) {
      if (exponentialBucketsBuilder_ == null) {
        histogramBuckets_ = builderForValue.build();
        onChanged();
      } else {
        exponentialBucketsBuilder_.setMessage(builderForValue.build());
      }
      histogramBucketsCase_ = 4;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     */
    public Builder mergeExponentialBuckets(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets value) {
      if (exponentialBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 4 &&
            histogramBuckets_ != com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance()) {
          histogramBuckets_ = com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_)
              .mergeFrom(value).buildPartial();
        } else {
          histogramBuckets_ = value;
        }
        onChanged();
      } else {
        if (histogramBucketsCase_ == 4) {
          exponentialBucketsBuilder_.mergeFrom(value);
        } else {
          exponentialBucketsBuilder_.setMessage(value);
        }
      }
      histogramBucketsCase_ = 4;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     */
    public Builder clearExponentialBuckets() {
      if (exponentialBucketsBuilder_ == null) {
        if (histogramBucketsCase_ == 4) {
          histogramBucketsCase_ = 0;
          histogramBuckets_ = null;
          onChanged();
        }
      } else {
        if (histogramBucketsCase_ == 4) {
          histogramBucketsCase_ = 0;
          histogramBuckets_ = null;
        }
        exponentialBucketsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.Builder getExponentialBucketsBuilder() {
      return getExponentialBucketsFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsOrBuilder getExponentialBucketsOrBuilder() {
      if ((histogramBucketsCase_ == 4) && (exponentialBucketsBuilder_ != null)) {
        return exponentialBucketsBuilder_.getMessageOrBuilder();
      } else {
        if (histogramBucketsCase_ == 4) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance();
      }
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBuckets exponential_buckets = 4 [json_name = "exponentialBuckets"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsOrBuilder> 
        getExponentialBucketsFieldBuilder() {
      if (exponentialBucketsBuilder_ == null) {
        if (!(histogramBucketsCase_ == 4)) {
          histogramBuckets_ = com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.getDefaultInstance();
        }
        exponentialBucketsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBuckets) histogramBuckets_,
                getParentForChildren(),
                isClean());
        histogramBuckets_ = null;
      }
      histogramBucketsCase_ = 4;
      onChanged();;
      return exponentialBucketsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRangeOrBuilder> exponentialBucketsRangeBuilder_;
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     * @return Whether the exponentialBucketsRange field is set.
     */
    @java.lang.Override
    public boolean hasExponentialBucketsRange() {
      return histogramBucketsCase_ == 5;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     * @return The exponentialBucketsRange.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange getExponentialBucketsRange() {
      if (exponentialBucketsRangeBuilder_ == null) {
        if (histogramBucketsCase_ == 5) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance();
      } else {
        if (histogramBucketsCase_ == 5) {
          return exponentialBucketsRangeBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance();
      }
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     */
    public Builder setExponentialBucketsRange(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange value) {
      if (exponentialBucketsRangeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        histogramBuckets_ = value;
        onChanged();
      } else {
        exponentialBucketsRangeBuilder_.setMessage(value);
      }
      histogramBucketsCase_ = 5;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     */
    public Builder setExponentialBucketsRange(
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.Builder builderForValue) {
      if (exponentialBucketsRangeBuilder_ == null) {
        histogramBuckets_ = builderForValue.build();
        onChanged();
      } else {
        exponentialBucketsRangeBuilder_.setMessage(builderForValue.build());
      }
      histogramBucketsCase_ = 5;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     */
    public Builder mergeExponentialBucketsRange(com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange value) {
      if (exponentialBucketsRangeBuilder_ == null) {
        if (histogramBucketsCase_ == 5 &&
            histogramBuckets_ != com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance()) {
          histogramBuckets_ = com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_)
              .mergeFrom(value).buildPartial();
        } else {
          histogramBuckets_ = value;
        }
        onChanged();
      } else {
        if (histogramBucketsCase_ == 5) {
          exponentialBucketsRangeBuilder_.mergeFrom(value);
        } else {
          exponentialBucketsRangeBuilder_.setMessage(value);
        }
      }
      histogramBucketsCase_ = 5;
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     */
    public Builder clearExponentialBucketsRange() {
      if (exponentialBucketsRangeBuilder_ == null) {
        if (histogramBucketsCase_ == 5) {
          histogramBucketsCase_ = 0;
          histogramBuckets_ = null;
          onChanged();
        }
      } else {
        if (histogramBucketsCase_ == 5) {
          histogramBucketsCase_ = 0;
          histogramBuckets_ = null;
        }
        exponentialBucketsRangeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.Builder getExponentialBucketsRangeBuilder() {
      return getExponentialBucketsRangeFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRangeOrBuilder getExponentialBucketsRangeOrBuilder() {
      if ((histogramBucketsCase_ == 5) && (exponentialBucketsRangeBuilder_ != null)) {
        return exponentialBucketsRangeBuilder_.getMessageOrBuilder();
      } else {
        if (histogramBucketsCase_ == 5) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance();
      }
    }
    /**
     * <code>.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange exponential_buckets_range = 5 [json_name = "exponentialBucketsRange"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRangeOrBuilder> 
        getExponentialBucketsRangeFieldBuilder() {
      if (exponentialBucketsRangeBuilder_ == null) {
        if (!(histogramBucketsCase_ == 5)) {
          histogramBuckets_ = com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.getDefaultInstance();
        }
        exponentialBucketsRangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange.Builder, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRangeOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange) histogramBuckets_,
                getParentForChildren(),
                isClean());
        histogramBuckets_ = null;
      }
      histogramBucketsCase_ = 5;
      onChanged();;
      return exponentialBucketsRangeBuilder_;
    }

    private java.lang.Object attributeKey_ = "";
    /**
     * <pre>
     * Key of the attribute in access log or span from which the metric for this flux meter is read.
     * :::info
     * For list of available attributes in Envoy access logs, refer
     * [Envoy Filter](/get-started/installation/agent/envoy/istio.md#envoy-filter)
     * :::
     * </pre>
     *
     * <code>string attribute_key = 6 [json_name = "attributeKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The attributeKey.
     */
    public java.lang.String getAttributeKey() {
      java.lang.Object ref = attributeKey_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        attributeKey_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Key of the attribute in access log or span from which the metric for this flux meter is read.
     * :::info
     * For list of available attributes in Envoy access logs, refer
     * [Envoy Filter](/get-started/installation/agent/envoy/istio.md#envoy-filter)
     * :::
     * </pre>
     *
     * <code>string attribute_key = 6 [json_name = "attributeKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The bytes for attributeKey.
     */
    public com.google.protobuf.ByteString
        getAttributeKeyBytes() {
      java.lang.Object ref = attributeKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        attributeKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Key of the attribute in access log or span from which the metric for this flux meter is read.
     * :::info
     * For list of available attributes in Envoy access logs, refer
     * [Envoy Filter](/get-started/installation/agent/envoy/istio.md#envoy-filter)
     * :::
     * </pre>
     *
     * <code>string attribute_key = 6 [json_name = "attributeKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param value The attributeKey to set.
     * @return This builder for chaining.
     */
    public Builder setAttributeKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      attributeKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Key of the attribute in access log or span from which the metric for this flux meter is read.
     * :::info
     * For list of available attributes in Envoy access logs, refer
     * [Envoy Filter](/get-started/installation/agent/envoy/istio.md#envoy-filter)
     * :::
     * </pre>
     *
     * <code>string attribute_key = 6 [json_name = "attributeKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearAttributeKey() {
      
      attributeKey_ = getDefaultInstance().getAttributeKey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Key of the attribute in access log or span from which the metric for this flux meter is read.
     * :::info
     * For list of available attributes in Envoy access logs, refer
     * [Envoy Filter](/get-started/installation/agent/envoy/istio.md#envoy-filter)
     * :::
     * </pre>
     *
     * <code>string attribute_key = 6 [json_name = "attributeKey", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param value The bytes for attributeKey to set.
     * @return This builder for chaining.
     */
    public Builder setAttributeKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      attributeKey_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.FluxMeter)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.FluxMeter)
  private static final com.fluxninja.generated.aperture.policy.language.v1.FluxMeter DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.FluxMeter();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.FluxMeter getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FluxMeter>
      PARSER = new com.google.protobuf.AbstractParser<FluxMeter>() {
    @java.lang.Override
    public FluxMeter parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new FluxMeter(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<FluxMeter> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FluxMeter> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

