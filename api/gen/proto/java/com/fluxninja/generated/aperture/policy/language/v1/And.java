// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/std_components.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Logical AND.
 * Signals are mapped to boolean values as follows:
 * * Zero is treated as false.
 * * Any non-zero is treated as true.
 * * Invalid inputs are considered unknown.
 *   :::note
 *   Treating invalid inputs as "unknowns" has a consequence that the result
 *   might end up being valid even when some inputs are invalid. Eg. `unknown &amp;&amp; false == false`,
 *   because the result would end up false no matter if
 *   first signal was true or false. On the other hand, `unknown &amp;&amp; true == unknown`.
 *   :::
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.And}
 */
public final class And extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.And)
    AndOrBuilder {
private static final long serialVersionUID = 0L;
  // Use And.newBuilder() to construct.
  private And(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private And() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new And();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private And(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.And.Ins.Builder subBuilder = null;
            if (inPorts_ != null) {
              subBuilder = inPorts_.toBuilder();
            }
            inPorts_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.And.Ins.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(inPorts_);
              inPorts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.And.Outs.Builder subBuilder = null;
            if (outPorts_ != null) {
              subBuilder = outPorts_.toBuilder();
            }
            outPorts_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.And.Outs.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(outPorts_);
              outPorts_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.And.class, com.fluxninja.generated.aperture.policy.language.v1.And.Builder.class);
  }

  public interface InsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.And.Ins)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    java.util.List<com.fluxninja.generated.aperture.policy.language.v1.InPort> 
        getInputsList();
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.InPort getInputs(int index);
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    int getInputsCount();
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> 
        getInputsOrBuilderList();
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getInputsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Inputs for the And component.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.And.Ins}
   */
  public static final class Ins extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.And.Ins)
      InsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Ins.newBuilder() to construct.
    private Ins(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Ins() {
      inputs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Ins();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Ins(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                inputs_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.InPort>();
                mutable_bitField0_ |= 0x00000001;
              }
              inputs_.add(
                  input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.InPort.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          inputs_ = java.util.Collections.unmodifiableList(inputs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Ins_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Ins_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.And.Ins.class, com.fluxninja.generated.aperture.policy.language.v1.And.Ins.Builder.class);
    }

    public static final int INPUTS_FIELD_NUMBER = 1;
    private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.InPort> inputs_;
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    @java.lang.Override
    public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.InPort> getInputsList() {
      return inputs_;
    }
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> 
        getInputsOrBuilderList() {
      return inputs_;
    }
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    @java.lang.Override
    public int getInputsCount() {
      return inputs_.size();
    }
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InPort getInputs(int index) {
      return inputs_.get(index);
    }
    /**
     * <pre>
     * Array of input signals.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getInputsOrBuilder(
        int index) {
      return inputs_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < inputs_.size(); i++) {
        output.writeMessage(1, inputs_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < inputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, inputs_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.And.Ins)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.And.Ins other = (com.fluxninja.generated.aperture.policy.language.v1.And.Ins) obj;

      if (!getInputsList()
          .equals(other.getInputsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getInputsCount() > 0) {
        hash = (37 * hash) + INPUTS_FIELD_NUMBER;
        hash = (53 * hash) + getInputsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.And.Ins prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Inputs for the And component.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.And.Ins}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.And.Ins)
        com.fluxninja.generated.aperture.policy.language.v1.And.InsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Ins_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Ins_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.And.Ins.class, com.fluxninja.generated.aperture.policy.language.v1.And.Ins.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.And.Ins.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInputsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          inputsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Ins_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.And.Ins getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.And.Ins.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.And.Ins build() {
        com.fluxninja.generated.aperture.policy.language.v1.And.Ins result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.And.Ins buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.And.Ins result = new com.fluxninja.generated.aperture.policy.language.v1.And.Ins(this);
        int from_bitField0_ = bitField0_;
        if (inputsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            inputs_ = java.util.Collections.unmodifiableList(inputs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.inputs_ = inputs_;
        } else {
          result.inputs_ = inputsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.And.Ins) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.And.Ins)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.And.Ins other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.And.Ins.getDefaultInstance()) return this;
        if (inputsBuilder_ == null) {
          if (!other.inputs_.isEmpty()) {
            if (inputs_.isEmpty()) {
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureInputsIsMutable();
              inputs_.addAll(other.inputs_);
            }
            onChanged();
          }
        } else {
          if (!other.inputs_.isEmpty()) {
            if (inputsBuilder_.isEmpty()) {
              inputsBuilder_.dispose();
              inputsBuilder_ = null;
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              inputsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInputsFieldBuilder() : null;
            } else {
              inputsBuilder_.addAllMessages(other.inputs_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.And.Ins parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.And.Ins) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.InPort> inputs_ =
        java.util.Collections.emptyList();
      private void ensureInputsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          inputs_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.InPort>(inputs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> inputsBuilder_;

      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.InPort> getInputsList() {
        if (inputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputs_);
        } else {
          return inputsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public int getInputsCount() {
        if (inputsBuilder_ == null) {
          return inputs_.size();
        } else {
          return inputsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort getInputs(int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);
        } else {
          return inputsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder setInputs(
          int index, com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.set(index, value);
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder setInputs(
          int index, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder addInputs(com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder addInputs(
          int index, com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(index, value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder addInputs(
          com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder addInputs(
          int index, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder addAllInputs(
          java.lang.Iterable<? extends com.fluxninja.generated.aperture.policy.language.v1.InPort> values) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inputs_);
          onChanged();
        } else {
          inputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder clearInputs() {
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          inputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public Builder removeInputs(int index) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.remove(index);
          onChanged();
        } else {
          inputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder getInputsBuilder(
          int index) {
        return getInputsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getInputsOrBuilder(
          int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);  } else {
          return inputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> 
           getInputsOrBuilderList() {
        if (inputsBuilder_ != null) {
          return inputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputs_);
        }
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder addInputsBuilder() {
        return getInputsFieldBuilder().addBuilder(
            com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance());
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder addInputsBuilder(
          int index) {
        return getInputsFieldBuilder().addBuilder(
            index, com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance());
      }
      /**
       * <pre>
       * Array of input signals.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.InPort inputs = 1 [json_name = "inputs"];</code>
       */
      public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder> 
           getInputsBuilderList() {
        return getInputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> 
          getInputsFieldBuilder() {
        if (inputsBuilder_ == null) {
          inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder>(
                  inputs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          inputs_ = null;
        }
        return inputsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.And.Ins)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.And.Ins)
    private static final com.fluxninja.generated.aperture.policy.language.v1.And.Ins DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.And.Ins();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.And.Ins getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Ins>
        PARSER = new com.google.protobuf.AbstractParser<Ins>() {
      @java.lang.Override
      public Ins parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ins(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Ins> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Ins> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.And.Ins getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OutsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.And.Outs)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Result of logical AND of all the input signals.
     * Will always be 0 (false), 1 (true) or invalid (unknown).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     * @return Whether the output field is set.
     */
    boolean hasOutput();
    /**
     * <pre>
     * Result of logical AND of all the input signals.
     * Will always be 0 (false), 1 (true) or invalid (unknown).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     * @return The output.
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutput();
    /**
     * <pre>
     * Result of logical AND of all the input signals.
     * Will always be 0 (false), 1 (true) or invalid (unknown).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getOutputOrBuilder();
  }
  /**
   * <pre>
   * Output ports for the And component.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.And.Outs}
   */
  public static final class Outs extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.And.Outs)
      OutsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Outs.newBuilder() to construct.
    private Outs(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Outs() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Outs();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Outs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder subBuilder = null;
              if (output_ != null) {
                subBuilder = output_.toBuilder();
              }
              output_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.OutPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(output_);
                output_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Outs_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Outs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.And.Outs.class, com.fluxninja.generated.aperture.policy.language.v1.And.Outs.Builder.class);
    }

    public static final int OUTPUT_FIELD_NUMBER = 1;
    private com.fluxninja.generated.aperture.policy.language.v1.OutPort output_;
    /**
     * <pre>
     * Result of logical AND of all the input signals.
     * Will always be 0 (false), 1 (true) or invalid (unknown).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     * @return Whether the output field is set.
     */
    @java.lang.Override
    public boolean hasOutput() {
      return output_ != null;
    }
    /**
     * <pre>
     * Result of logical AND of all the input signals.
     * Will always be 0 (false), 1 (true) or invalid (unknown).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     * @return The output.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutput() {
      return output_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : output_;
    }
    /**
     * <pre>
     * Result of logical AND of all the input signals.
     * Will always be 0 (false), 1 (true) or invalid (unknown).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getOutputOrBuilder() {
      return getOutput();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (output_ != null) {
        output.writeMessage(1, getOutput());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (output_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOutput());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.And.Outs)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.And.Outs other = (com.fluxninja.generated.aperture.policy.language.v1.And.Outs) obj;

      if (hasOutput() != other.hasOutput()) return false;
      if (hasOutput()) {
        if (!getOutput()
            .equals(other.getOutput())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOutput()) {
        hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
        hash = (53 * hash) + getOutput().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.And.Outs prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.And.Outs}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.And.Outs)
        com.fluxninja.generated.aperture.policy.language.v1.And.OutsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Outs_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Outs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.And.Outs.class, com.fluxninja.generated.aperture.policy.language.v1.And.Outs.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.And.Outs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (outputBuilder_ == null) {
          output_ = null;
        } else {
          output_ = null;
          outputBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_Outs_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.And.Outs getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.And.Outs.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.And.Outs build() {
        com.fluxninja.generated.aperture.policy.language.v1.And.Outs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.And.Outs buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.And.Outs result = new com.fluxninja.generated.aperture.policy.language.v1.And.Outs(this);
        if (outputBuilder_ == null) {
          result.output_ = output_;
        } else {
          result.output_ = outputBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.And.Outs) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.And.Outs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.And.Outs other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.And.Outs.getDefaultInstance()) return this;
        if (other.hasOutput()) {
          mergeOutput(other.getOutput());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.And.Outs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.And.Outs) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.OutPort output_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> outputBuilder_;
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       * @return Whether the output field is set.
       */
      public boolean hasOutput() {
        return outputBuilder_ != null || output_ != null;
      }
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       * @return The output.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutput() {
        if (outputBuilder_ == null) {
          return output_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : output_;
        } else {
          return outputBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public Builder setOutput(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (outputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          output_ = value;
          onChanged();
        } else {
          outputBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public Builder setOutput(
          com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder builderForValue) {
        if (outputBuilder_ == null) {
          output_ = builderForValue.build();
          onChanged();
        } else {
          outputBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public Builder mergeOutput(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (outputBuilder_ == null) {
          if (output_ != null) {
            output_ =
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.newBuilder(output_).mergeFrom(value).buildPartial();
          } else {
            output_ = value;
          }
          onChanged();
        } else {
          outputBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public Builder clearOutput() {
        if (outputBuilder_ == null) {
          output_ = null;
          onChanged();
        } else {
          output_ = null;
          outputBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder getOutputBuilder() {
        
        onChanged();
        return getOutputFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getOutputOrBuilder() {
        if (outputBuilder_ != null) {
          return outputBuilder_.getMessageOrBuilder();
        } else {
          return output_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : output_;
        }
      }
      /**
       * <pre>
       * Result of logical AND of all the input signals.
       * Will always be 0 (false), 1 (true) or invalid (unknown).
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> 
          getOutputFieldBuilder() {
        if (outputBuilder_ == null) {
          outputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder>(
                  getOutput(),
                  getParentForChildren(),
                  isClean());
          output_ = null;
        }
        return outputBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.And.Outs)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.And.Outs)
    private static final com.fluxninja.generated.aperture.policy.language.v1.And.Outs DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.And.Outs();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.And.Outs getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Outs>
        PARSER = new com.google.protobuf.AbstractParser<Outs>() {
      @java.lang.Override
      public Outs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Outs(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Outs> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Outs> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.And.Outs getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int IN_PORTS_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.language.v1.And.Ins inPorts_;
  /**
   * <pre>
   * Input ports for the And component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return Whether the inPorts field is set.
   */
  @java.lang.Override
  public boolean hasInPorts() {
    return inPorts_ != null;
  }
  /**
   * <pre>
   * Input ports for the And component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return The inPorts.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.And.Ins getInPorts() {
    return inPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.And.Ins.getDefaultInstance() : inPorts_;
  }
  /**
   * <pre>
   * Input ports for the And component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.And.InsOrBuilder getInPortsOrBuilder() {
    return getInPorts();
  }

  public static final int OUT_PORTS_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.policy.language.v1.And.Outs outPorts_;
  /**
   * <pre>
   * Output ports for the And component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return Whether the outPorts field is set.
   */
  @java.lang.Override
  public boolean hasOutPorts() {
    return outPorts_ != null;
  }
  /**
   * <pre>
   * Output ports for the And component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return The outPorts.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.And.Outs getOutPorts() {
    return outPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.And.Outs.getDefaultInstance() : outPorts_;
  }
  /**
   * <pre>
   * Output ports for the And component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.And.OutsOrBuilder getOutPortsOrBuilder() {
    return getOutPorts();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (inPorts_ != null) {
      output.writeMessage(1, getInPorts());
    }
    if (outPorts_ != null) {
      output.writeMessage(2, getOutPorts());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (inPorts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInPorts());
    }
    if (outPorts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getOutPorts());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.And)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.And other = (com.fluxninja.generated.aperture.policy.language.v1.And) obj;

    if (hasInPorts() != other.hasInPorts()) return false;
    if (hasInPorts()) {
      if (!getInPorts()
          .equals(other.getInPorts())) return false;
    }
    if (hasOutPorts() != other.hasOutPorts()) return false;
    if (hasOutPorts()) {
      if (!getOutPorts()
          .equals(other.getOutPorts())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInPorts()) {
      hash = (37 * hash) + IN_PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getInPorts().hashCode();
    }
    if (hasOutPorts()) {
      hash = (37 * hash) + OUT_PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getOutPorts().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.And parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.And prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Logical AND.
   * Signals are mapped to boolean values as follows:
   * * Zero is treated as false.
   * * Any non-zero is treated as true.
   * * Invalid inputs are considered unknown.
   *   :::note
   *   Treating invalid inputs as "unknowns" has a consequence that the result
   *   might end up being valid even when some inputs are invalid. Eg. `unknown &amp;&amp; false == false`,
   *   because the result would end up false no matter if
   *   first signal was true or false. On the other hand, `unknown &amp;&amp; true == unknown`.
   *   :::
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.And}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.And)
      com.fluxninja.generated.aperture.policy.language.v1.AndOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.And.class, com.fluxninja.generated.aperture.policy.language.v1.And.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.And.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inPortsBuilder_ == null) {
        inPorts_ = null;
      } else {
        inPorts_ = null;
        inPortsBuilder_ = null;
      }
      if (outPortsBuilder_ == null) {
        outPorts_ = null;
      } else {
        outPorts_ = null;
        outPortsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_And_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.And getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.And build() {
      com.fluxninja.generated.aperture.policy.language.v1.And result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.And buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.And result = new com.fluxninja.generated.aperture.policy.language.v1.And(this);
      if (inPortsBuilder_ == null) {
        result.inPorts_ = inPorts_;
      } else {
        result.inPorts_ = inPortsBuilder_.build();
      }
      if (outPortsBuilder_ == null) {
        result.outPorts_ = outPorts_;
      } else {
        result.outPorts_ = outPortsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.And) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.And)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.And other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance()) return this;
      if (other.hasInPorts()) {
        mergeInPorts(other.getInPorts());
      }
      if (other.hasOutPorts()) {
        mergeOutPorts(other.getOutPorts());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.And parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.And) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.And.Ins inPorts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.And.Ins, com.fluxninja.generated.aperture.policy.language.v1.And.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.And.InsOrBuilder> inPortsBuilder_;
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     * @return Whether the inPorts field is set.
     */
    public boolean hasInPorts() {
      return inPortsBuilder_ != null || inPorts_ != null;
    }
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     * @return The inPorts.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.And.Ins getInPorts() {
      if (inPortsBuilder_ == null) {
        return inPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.And.Ins.getDefaultInstance() : inPorts_;
      } else {
        return inPortsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder setInPorts(com.fluxninja.generated.aperture.policy.language.v1.And.Ins value) {
      if (inPortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        inPorts_ = value;
        onChanged();
      } else {
        inPortsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder setInPorts(
        com.fluxninja.generated.aperture.policy.language.v1.And.Ins.Builder builderForValue) {
      if (inPortsBuilder_ == null) {
        inPorts_ = builderForValue.build();
        onChanged();
      } else {
        inPortsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder mergeInPorts(com.fluxninja.generated.aperture.policy.language.v1.And.Ins value) {
      if (inPortsBuilder_ == null) {
        if (inPorts_ != null) {
          inPorts_ =
            com.fluxninja.generated.aperture.policy.language.v1.And.Ins.newBuilder(inPorts_).mergeFrom(value).buildPartial();
        } else {
          inPorts_ = value;
        }
        onChanged();
      } else {
        inPortsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder clearInPorts() {
      if (inPortsBuilder_ == null) {
        inPorts_ = null;
        onChanged();
      } else {
        inPorts_ = null;
        inPortsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.And.Ins.Builder getInPortsBuilder() {
      
      onChanged();
      return getInPortsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.And.InsOrBuilder getInPortsOrBuilder() {
      if (inPortsBuilder_ != null) {
        return inPortsBuilder_.getMessageOrBuilder();
      } else {
        return inPorts_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.And.Ins.getDefaultInstance() : inPorts_;
      }
    }
    /**
     * <pre>
     * Input ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.And.Ins, com.fluxninja.generated.aperture.policy.language.v1.And.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.And.InsOrBuilder> 
        getInPortsFieldBuilder() {
      if (inPortsBuilder_ == null) {
        inPortsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.And.Ins, com.fluxninja.generated.aperture.policy.language.v1.And.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.And.InsOrBuilder>(
                getInPorts(),
                getParentForChildren(),
                isClean());
        inPorts_ = null;
      }
      return inPortsBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.And.Outs outPorts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.And.Outs, com.fluxninja.generated.aperture.policy.language.v1.And.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.And.OutsOrBuilder> outPortsBuilder_;
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     * @return Whether the outPorts field is set.
     */
    public boolean hasOutPorts() {
      return outPortsBuilder_ != null || outPorts_ != null;
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     * @return The outPorts.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.And.Outs getOutPorts() {
      if (outPortsBuilder_ == null) {
        return outPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.And.Outs.getDefaultInstance() : outPorts_;
      } else {
        return outPortsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder setOutPorts(com.fluxninja.generated.aperture.policy.language.v1.And.Outs value) {
      if (outPortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outPorts_ = value;
        onChanged();
      } else {
        outPortsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder setOutPorts(
        com.fluxninja.generated.aperture.policy.language.v1.And.Outs.Builder builderForValue) {
      if (outPortsBuilder_ == null) {
        outPorts_ = builderForValue.build();
        onChanged();
      } else {
        outPortsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder mergeOutPorts(com.fluxninja.generated.aperture.policy.language.v1.And.Outs value) {
      if (outPortsBuilder_ == null) {
        if (outPorts_ != null) {
          outPorts_ =
            com.fluxninja.generated.aperture.policy.language.v1.And.Outs.newBuilder(outPorts_).mergeFrom(value).buildPartial();
        } else {
          outPorts_ = value;
        }
        onChanged();
      } else {
        outPortsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder clearOutPorts() {
      if (outPortsBuilder_ == null) {
        outPorts_ = null;
        onChanged();
      } else {
        outPorts_ = null;
        outPortsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.And.Outs.Builder getOutPortsBuilder() {
      
      onChanged();
      return getOutPortsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.And.OutsOrBuilder getOutPortsOrBuilder() {
      if (outPortsBuilder_ != null) {
        return outPortsBuilder_.getMessageOrBuilder();
      } else {
        return outPorts_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.And.Outs.getDefaultInstance() : outPorts_;
      }
    }
    /**
     * <pre>
     * Output ports for the And component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.And.Outs, com.fluxninja.generated.aperture.policy.language.v1.And.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.And.OutsOrBuilder> 
        getOutPortsFieldBuilder() {
      if (outPortsBuilder_ == null) {
        outPortsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.And.Outs, com.fluxninja.generated.aperture.policy.language.v1.And.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.And.OutsOrBuilder>(
                getOutPorts(),
                getParentForChildren(),
                isClean());
        outPorts_ = null;
      }
      return outPortsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.And)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.And)
  private static final com.fluxninja.generated.aperture.policy.language.v1.And DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.And();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.And getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<And>
      PARSER = new com.google.protobuf.AbstractParser<And>() {
    @java.lang.Override
    public And parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new And(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<And> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<And> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.And getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

