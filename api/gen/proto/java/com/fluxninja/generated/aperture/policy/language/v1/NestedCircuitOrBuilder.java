// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface NestedCircuitOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.NestedCircuit)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */
  int getInPortsMapCount();
  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */
  boolean containsInPortsMap(
      java.lang.String key);
  /**
   * Use {@link #getInPortsMapMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>
  getInPortsMap();
  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>
  getInPortsMapMap();
  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */

  /* nullable */
com.fluxninja.generated.aperture.policy.language.v1.InPort getInPortsMapOrDefault(
      java.lang.String key,
      /* nullable */
com.fluxninja.generated.aperture.policy.language.v1.InPort defaultValue);
  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */

  com.fluxninja.generated.aperture.policy.language.v1.InPort getInPortsMapOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */
  int getOutPortsMapCount();
  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */
  boolean containsOutPortsMap(
      java.lang.String key);
  /**
   * Use {@link #getOutPortsMapMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>
  getOutPortsMap();
  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>
  getOutPortsMapMap();
  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */

  /* nullable */
com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutPortsMapOrDefault(
      java.lang.String key,
      /* nullable */
com.fluxninja.generated.aperture.policy.language.v1.OutPort defaultValue);
  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */

  com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutPortsMapOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> 
      getComponentsList();
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.Component getComponents(int index);
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  int getComponentsCount();
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> 
      getComponentsOrBuilderList();
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder getComponentsOrBuilder(
      int index);

  /**
   * <pre>
   * Name of the nested circuit component. This name is displayed by graph visualization tools.
   * </pre>
   *
   * <code>string name = 4 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * Name of the nested circuit component. This name is displayed by graph visualization tools.
   * </pre>
   *
   * <code>string name = 4 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Short description of the nested circuit component. This description is displayed by graph visualization tools.
   * </pre>
   *
   * <code>string short_description = 5 [json_name = "shortDescription"];</code>
   * @return The shortDescription.
   */
  java.lang.String getShortDescription();
  /**
   * <pre>
   * Short description of the nested circuit component. This description is displayed by graph visualization tools.
   * </pre>
   *
   * <code>string short_description = 5 [json_name = "shortDescription"];</code>
   * @return The bytes for shortDescription.
   */
  com.google.protobuf.ByteString
      getShortDescriptionBytes();
}
