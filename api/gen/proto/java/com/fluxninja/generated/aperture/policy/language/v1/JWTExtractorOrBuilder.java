// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface JWTExtractorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.JWTExtractor)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Jwt token can be pulled from any input attribute, but most likely you'd want to use "request.http.bearer".
   * </pre>
   *
   * <code>string from = 1 [json_name = "from"];</code>
   * @return The from.
   */
  java.lang.String getFrom();
  /**
   * <pre>
   * Jwt token can be pulled from any input attribute, but most likely you'd want to use "request.http.bearer".
   * </pre>
   *
   * <code>string from = 1 [json_name = "from"];</code>
   * @return The bytes for from.
   */
  com.google.protobuf.ByteString
      getFromBytes();

  /**
   * <pre>
   * Json pointer allowing to select a specified field from the json payload.
   * Note: Uses [json pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
   * eg. `/foo/bar`. If the pointer points into an object, it'd be stringified.
   * </pre>
   *
   * <code>string json_pointer = 2 [json_name = "jsonPointer"];</code>
   * @return The jsonPointer.
   */
  java.lang.String getJsonPointer();
  /**
   * <pre>
   * Json pointer allowing to select a specified field from the json payload.
   * Note: Uses [json pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
   * eg. `/foo/bar`. If the pointer points into an object, it'd be stringified.
   * </pre>
   *
   * <code>string json_pointer = 2 [json_name = "jsonPointer"];</code>
   * @return The bytes for jsonPointer.
   */
  com.google.protobuf.ByteString
      getJsonPointerBytes();
}
