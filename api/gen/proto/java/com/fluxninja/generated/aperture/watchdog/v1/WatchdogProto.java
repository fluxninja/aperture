// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/watchdog/v1/watchdog.proto

package com.fluxninja.generated.aperture.watchdog.v1;

public final class WatchdogProto {
  private WatchdogProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_watchdog_v1_HeapResult_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_watchdog_v1_HeapResult_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_watchdog_v1_WatchdogResult_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_watchdog_v1_WatchdogResult_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#aperture/watchdog/v1/watchdog.proto\022\024a" +
      "perture.watchdog.v1\032\036google/protobuf/dur" +
      "ation.proto\"\327\004\n\nHeapResult\022\024\n\005limit\030\001 \001(" +
      "\004R\005limit\022\037\n\013heap_marked\030\002 \001(\004R\nheapMarke" +
      "d\022\034\n\tthreshold\030\003 \001(\004R\tthreshold\022\033\n\tcurr_" +
      "gogc\030\004 \001(\005R\010currGogc\022#\n\roriginal_gogc\030\005 " +
      "\001(\005R\014originalGogc\022\037\n\013total_alloc\030\006 \001(\004R\n" +
      "totalAlloc\022\020\n\003sys\030\007 \001(\004R\003sys\022\030\n\007mallocs\030" +
      "\010 \001(\004R\007mallocs\022\024\n\005frees\030\t \001(\004R\005frees\022\035\n\n" +
      "heap_alloc\030\n \001(\004R\theapAlloc\022\031\n\010heap_sys\030" +
      "\013 \001(\004R\007heapSys\022\033\n\theap_idle\030\014 \001(\004R\010heapI" +
      "dle\022\035\n\nheap_inuse\030\r \001(\004R\theapInuse\022#\n\rhe" +
      "ap_released\030\016 \001(\004R\014heapReleased\022!\n\014heap_" +
      "objects\030\017 \001(\004R\013heapObjects\022\027\n\007next_gc\030\020 " +
      "\001(\004R\006nextGc\022\027\n\007last_gc\030\021 \001(\004R\006lastGc\022$\n\016" +
      "pause_total_ns\030\022 \001(\004R\014pauseTotalNs\022\025\n\006nu" +
      "m_gc\030\023 \001(\rR\005numGc\022\"\n\rnum_forced_gc\030\024 \001(\r" +
      "R\013numForcedGc\"\227\001\n\016WatchdogResult\022\024\n\005tota" +
      "l\030\001 \001(\004R\005total\022\022\n\004used\030\002 \001(\004R\004used\022\034\n\tth" +
      "reshold\030\003 \001(\004R\tthreshold\022=\n\rforce_gc_too" +
      "k\030\004 \001(\0132\031.google.protobuf.DurationR\013forc" +
      "eGcTookB\377\001\n,com.fluxninja.generated.aper" +
      "ture.watchdog.v1B\rWatchdogProtoP\001ZNgithu" +
      "b.com/fluxninja/aperture/api/gen/proto/g" +
      "o/aperture/watchdog/v1;watchdogv1\242\002\003AWX\252" +
      "\002\024Aperture.Watchdog.V1\312\002\024Aperture\\Watchd" +
      "og\\V1\342\002 Aperture\\Watchdog\\V1\\GPBMetadata" +
      "\352\002\026Aperture::Watchdog::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.DurationProto.getDescriptor(),
        });
    internal_static_aperture_watchdog_v1_HeapResult_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_aperture_watchdog_v1_HeapResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_watchdog_v1_HeapResult_descriptor,
        new java.lang.String[] { "Limit", "HeapMarked", "Threshold", "CurrGogc", "OriginalGogc", "TotalAlloc", "Sys", "Mallocs", "Frees", "HeapAlloc", "HeapSys", "HeapIdle", "HeapInuse", "HeapReleased", "HeapObjects", "NextGc", "LastGc", "PauseTotalNs", "NumGc", "NumForcedGc", });
    internal_static_aperture_watchdog_v1_WatchdogResult_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_aperture_watchdog_v1_WatchdogResult_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_watchdog_v1_WatchdogResult_descriptor,
        new java.lang.String[] { "Total", "Used", "Threshold", "ForceGcTook", });
    com.google.protobuf.DurationProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
