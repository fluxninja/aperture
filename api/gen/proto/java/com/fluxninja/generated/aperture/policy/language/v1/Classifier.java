// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Set of classification rules sharing a common selector
 * :::info
 * See also [Classifier overview](/concepts/flow-control/resources/classifier.md).
 * :::
 * Example
 * ```yaml
 * flow_selector:
 *   service_selector:
 *      agent_group: demoapp
 *      service: service1-demo-app.demoapp.svc.cluster.local
 *   flow_matcher:
 *      control_point: ingress
 *      label_matcher:
 *         match_labels:
 *           user_tier: gold
 *         match_expressions:
 *           - key: user_type
 *             operator: In
 * rules:
 *   user:
 *    extractor:
 *      from: request.http.headers.user-agent
 *   telemetry: false
 * ```
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.Classifier}
 */
public final class Classifier extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.Classifier)
    ClassifierOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Classifier.newBuilder() to construct.
  private Classifier(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Classifier() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Classifier();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Classifier(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder subBuilder = null;
            if (flowSelector_ != null) {
              subBuilder = flowSelector_.toBuilder();
            }
            flowSelector_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(flowSelector_);
              flowSelector_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              rules_ = com.google.protobuf.MapField.newMapField(
                  RulesDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>
            rules__ = input.readMessage(
                RulesDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            rules_.getMutableMap().put(
                rules__.getKey(), rules__.getValue());
            break;
          }
          case 26: {
            com.fluxninja.generated.aperture.policy.language.v1.Rego.Builder subBuilder = null;
            if (rego_ != null) {
              subBuilder = rego_.toBuilder();
            }
            rego_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Rego.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(rego_);
              rego_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_Classifier_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetRules();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_Classifier_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.Classifier.class, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder.class);
  }

  public static final int FLOW_SELECTOR_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.language.v1.FlowSelector flowSelector_;
  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
   * @return Whether the flowSelector field is set.
   */
  @java.lang.Override
  public boolean hasFlowSelector() {
    return flowSelector_ != null;
  }
  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
   * @return The flowSelector.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector getFlowSelector() {
    return flowSelector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
  }
  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder getFlowSelectorOrBuilder() {
    return getFlowSelector();
  }

  public static final int RULES_FIELD_NUMBER = 2;
  private static final class RulesDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>newDefaultInstance(
                com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_Classifier_RulesEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.fluxninja.generated.aperture.policy.language.v1.Rule.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> rules_;
  private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>
  internalGetRules() {
    if (rules_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          RulesDefaultEntryHolder.defaultEntry);
    }
    return rules_;
  }

  public int getRulesCount() {
    return internalGetRules().getMap().size();
  }
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */

  @java.lang.Override
  public boolean containsRules(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetRules().getMap().containsKey(key);
  }
  /**
   * Use {@link #getRulesMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> getRules() {
    return getRulesMap();
  }
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> getRulesMap() {
    return internalGetRules().getMap();
  }
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.policy.language.v1.Rule getRulesOrDefault(
      java.lang.String key,
      com.fluxninja.generated.aperture.policy.language.v1.Rule defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> map =
        internalGetRules().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.policy.language.v1.Rule getRulesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> map =
        internalGetRules().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int REGO_FIELD_NUMBER = 3;
  private com.fluxninja.generated.aperture.policy.language.v1.Rego rego_;
  /**
   * <pre>
   * Rego based classification
   * Rego is a policy language used to express complex policies in a concise and declarative way.
   * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
   * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
   * @return Whether the rego field is set.
   */
  @java.lang.Override
  public boolean hasRego() {
    return rego_ != null;
  }
  /**
   * <pre>
   * Rego based classification
   * Rego is a policy language used to express complex policies in a concise and declarative way.
   * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
   * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
   * @return The rego.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Rego getRego() {
    return rego_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Rego.getDefaultInstance() : rego_;
  }
  /**
   * <pre>
   * Rego based classification
   * Rego is a policy language used to express complex policies in a concise and declarative way.
   * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
   * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.RegoOrBuilder getRegoOrBuilder() {
    return getRego();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (flowSelector_ != null) {
      output.writeMessage(1, getFlowSelector());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetRules(),
        RulesDefaultEntryHolder.defaultEntry,
        2);
    if (rego_ != null) {
      output.writeMessage(3, getRego());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (flowSelector_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getFlowSelector());
    }
    for (java.util.Map.Entry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> entry
         : internalGetRules().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>
      rules__ = RulesDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, rules__);
    }
    if (rego_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getRego());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.Classifier)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.Classifier other = (com.fluxninja.generated.aperture.policy.language.v1.Classifier) obj;

    if (hasFlowSelector() != other.hasFlowSelector()) return false;
    if (hasFlowSelector()) {
      if (!getFlowSelector()
          .equals(other.getFlowSelector())) return false;
    }
    if (!internalGetRules().equals(
        other.internalGetRules())) return false;
    if (hasRego() != other.hasRego()) return false;
    if (hasRego()) {
      if (!getRego()
          .equals(other.getRego())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasFlowSelector()) {
      hash = (37 * hash) + FLOW_SELECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getFlowSelector().hashCode();
    }
    if (!internalGetRules().getMap().isEmpty()) {
      hash = (37 * hash) + RULES_FIELD_NUMBER;
      hash = (53 * hash) + internalGetRules().hashCode();
    }
    if (hasRego()) {
      hash = (37 * hash) + REGO_FIELD_NUMBER;
      hash = (53 * hash) + getRego().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.Classifier prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Set of classification rules sharing a common selector
   * :::info
   * See also [Classifier overview](/concepts/flow-control/resources/classifier.md).
   * :::
   * Example
   * ```yaml
   * flow_selector:
   *   service_selector:
   *      agent_group: demoapp
   *      service: service1-demo-app.demoapp.svc.cluster.local
   *   flow_matcher:
   *      control_point: ingress
   *      label_matcher:
   *         match_labels:
   *           user_tier: gold
   *         match_expressions:
   *           - key: user_type
   *             operator: In
   * rules:
   *   user:
   *    extractor:
   *      from: request.http.headers.user-agent
   *   telemetry: false
   * ```
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.Classifier}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.Classifier)
      com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_Classifier_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetRules();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableRules();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_Classifier_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.Classifier.class, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.Classifier.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = null;
      } else {
        flowSelector_ = null;
        flowSelectorBuilder_ = null;
      }
      internalGetMutableRules().clear();
      if (regoBuilder_ == null) {
        rego_ = null;
      } else {
        rego_ = null;
        regoBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_Classifier_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.Classifier.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier build() {
      com.fluxninja.generated.aperture.policy.language.v1.Classifier result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.Classifier result = new com.fluxninja.generated.aperture.policy.language.v1.Classifier(this);
      int from_bitField0_ = bitField0_;
      if (flowSelectorBuilder_ == null) {
        result.flowSelector_ = flowSelector_;
      } else {
        result.flowSelector_ = flowSelectorBuilder_.build();
      }
      result.rules_ = internalGetRules();
      result.rules_.makeImmutable();
      if (regoBuilder_ == null) {
        result.rego_ = rego_;
      } else {
        result.rego_ = regoBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.Classifier) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Classifier)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.Classifier other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.Classifier.getDefaultInstance()) return this;
      if (other.hasFlowSelector()) {
        mergeFlowSelector(other.getFlowSelector());
      }
      internalGetMutableRules().mergeFrom(
          other.internalGetRules());
      if (other.hasRego()) {
        mergeRego(other.getRego());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.Classifier parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.Classifier) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.fluxninja.generated.aperture.policy.language.v1.FlowSelector flowSelector_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder> flowSelectorBuilder_;
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     * @return Whether the flowSelector field is set.
     */
    public boolean hasFlowSelector() {
      return flowSelectorBuilder_ != null || flowSelector_ != null;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     * @return The flowSelector.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector getFlowSelector() {
      if (flowSelectorBuilder_ == null) {
        return flowSelector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
      } else {
        return flowSelectorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     */
    public Builder setFlowSelector(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector value) {
      if (flowSelectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        flowSelector_ = value;
        onChanged();
      } else {
        flowSelectorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     */
    public Builder setFlowSelector(
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder builderForValue) {
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = builderForValue.build();
        onChanged();
      } else {
        flowSelectorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     */
    public Builder mergeFlowSelector(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector value) {
      if (flowSelectorBuilder_ == null) {
        if (flowSelector_ != null) {
          flowSelector_ =
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.newBuilder(flowSelector_).mergeFrom(value).buildPartial();
        } else {
          flowSelector_ = value;
        }
        onChanged();
      } else {
        flowSelectorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     */
    public Builder clearFlowSelector() {
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = null;
        onChanged();
      } else {
        flowSelector_ = null;
        flowSelectorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder getFlowSelectorBuilder() {
      
      onChanged();
      return getFlowSelectorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder getFlowSelectorOrBuilder() {
      if (flowSelectorBuilder_ != null) {
        return flowSelectorBuilder_.getMessageOrBuilder();
      } else {
        return flowSelector_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
      }
    }
    /**
     * <pre>
     * Defines where to apply the flow classification rule.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder> 
        getFlowSelectorFieldBuilder() {
      if (flowSelectorBuilder_ == null) {
        flowSelectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder>(
                getFlowSelector(),
                getParentForChildren(),
                isClean());
        flowSelector_ = null;
      }
      return flowSelectorBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> rules_;
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>
    internalGetRules() {
      if (rules_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            RulesDefaultEntryHolder.defaultEntry);
      }
      return rules_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>
    internalGetMutableRules() {
      onChanged();;
      if (rules_ == null) {
        rules_ = com.google.protobuf.MapField.newMapField(
            RulesDefaultEntryHolder.defaultEntry);
      }
      if (!rules_.isMutable()) {
        rules_ = rules_.copy();
      }
      return rules_;
    }

    public int getRulesCount() {
      return internalGetRules().getMap().size();
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from
     * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
     * how to extract and propagate flow labels with that key.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */

    @java.lang.Override
    public boolean containsRules(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetRules().getMap().containsKey(key);
    }
    /**
     * Use {@link #getRulesMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> getRules() {
      return getRulesMap();
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from
     * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
     * how to extract and propagate flow labels with that key.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> getRulesMap() {
      return internalGetRules().getMap();
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from
     * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
     * how to extract and propagate flow labels with that key.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.policy.language.v1.Rule getRulesOrDefault(
        java.lang.String key,
        com.fluxninja.generated.aperture.policy.language.v1.Rule defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> map =
          internalGetRules().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from
     * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
     * how to extract and propagate flow labels with that key.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.policy.language.v1.Rule getRulesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> map =
          internalGetRules().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearRules() {
      internalGetMutableRules().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from
     * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
     * how to extract and propagate flow labels with that key.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */

    public Builder removeRules(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableRules().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>
    getMutableRules() {
      return internalGetMutableRules().getMutableMap();
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from
     * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
     * how to extract and propagate flow labels with that key.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */
    public Builder putRules(
        java.lang.String key,
        com.fluxninja.generated.aperture.policy.language.v1.Rule value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableRules().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * A map of {key, value} pairs mapping from
     * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
     * how to extract and propagate flow labels with that key.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
     */

    public Builder putAllRules(
        java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule> values) {
      internalGetMutableRules().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.Rego rego_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Rego, com.fluxninja.generated.aperture.policy.language.v1.Rego.Builder, com.fluxninja.generated.aperture.policy.language.v1.RegoOrBuilder> regoBuilder_;
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     * @return Whether the rego field is set.
     */
    public boolean hasRego() {
      return regoBuilder_ != null || rego_ != null;
    }
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     * @return The rego.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Rego getRego() {
      if (regoBuilder_ == null) {
        return rego_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Rego.getDefaultInstance() : rego_;
      } else {
        return regoBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     */
    public Builder setRego(com.fluxninja.generated.aperture.policy.language.v1.Rego value) {
      if (regoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        rego_ = value;
        onChanged();
      } else {
        regoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     */
    public Builder setRego(
        com.fluxninja.generated.aperture.policy.language.v1.Rego.Builder builderForValue) {
      if (regoBuilder_ == null) {
        rego_ = builderForValue.build();
        onChanged();
      } else {
        regoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     */
    public Builder mergeRego(com.fluxninja.generated.aperture.policy.language.v1.Rego value) {
      if (regoBuilder_ == null) {
        if (rego_ != null) {
          rego_ =
            com.fluxninja.generated.aperture.policy.language.v1.Rego.newBuilder(rego_).mergeFrom(value).buildPartial();
        } else {
          rego_ = value;
        }
        onChanged();
      } else {
        regoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     */
    public Builder clearRego() {
      if (regoBuilder_ == null) {
        rego_ = null;
        onChanged();
      } else {
        rego_ = null;
        regoBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Rego.Builder getRegoBuilder() {
      
      onChanged();
      return getRegoFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.RegoOrBuilder getRegoOrBuilder() {
      if (regoBuilder_ != null) {
        return regoBuilder_.getMessageOrBuilder();
      } else {
        return rego_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.Rego.getDefaultInstance() : rego_;
      }
    }
    /**
     * <pre>
     * Rego based classification
     * Rego is a policy language used to express complex policies in a concise and declarative way.
     * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
     * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Rego, com.fluxninja.generated.aperture.policy.language.v1.Rego.Builder, com.fluxninja.generated.aperture.policy.language.v1.RegoOrBuilder> 
        getRegoFieldBuilder() {
      if (regoBuilder_ == null) {
        regoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Rego, com.fluxninja.generated.aperture.policy.language.v1.Rego.Builder, com.fluxninja.generated.aperture.policy.language.v1.RegoOrBuilder>(
                getRego(),
                getParentForChildren(),
                isClean());
        rego_ = null;
      }
      return regoBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.Classifier)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.Classifier)
  private static final com.fluxninja.generated.aperture.policy.language.v1.Classifier DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.Classifier();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Classifier getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Classifier>
      PARSER = new com.google.protobuf.AbstractParser<Classifier>() {
    @java.lang.Override
    public Classifier parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Classifier(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Classifier> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Classifier> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Classifier getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

