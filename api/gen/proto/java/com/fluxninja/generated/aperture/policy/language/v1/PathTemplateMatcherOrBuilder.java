// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface PathTemplateMatcherOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.PathTemplateMatcher)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Template value keys are OpenAPI-inspired path templates.
   * * Static path segment `/foo` matches a path segment exactly
   * * `/{param}` matches arbitrary path segment.
   *   (The param name is ignored and can be omitted (`{}`))
   * * The parameter must cover whole segment.
   * * Additionally, path template can end with `/&#42;` wildcard to match
   *   arbitrary number of trailing segments (0 or more).
   * * Multiple consecutive `/` are ignored, as well as trailing `/`.
   * * Parametrized path segments must come after static segments.
   * * `*`, if present, must come last.
   * * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/&#42;`).
   * See also &lt;https://swagger.io/specification/#path-templating-matching&gt;
   * Example:
   * ```yaml
   * /register: register
   * "/user/{userId}": user
   * /static/&#42;: other
   * ```
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_values = 1 [json_name = "templateValues"];</code>
   */
  int getTemplateValuesCount();
  /**
   * <pre>
   * Template value keys are OpenAPI-inspired path templates.
   * * Static path segment `/foo` matches a path segment exactly
   * * `/{param}` matches arbitrary path segment.
   *   (The param name is ignored and can be omitted (`{}`))
   * * The parameter must cover whole segment.
   * * Additionally, path template can end with `/&#42;` wildcard to match
   *   arbitrary number of trailing segments (0 or more).
   * * Multiple consecutive `/` are ignored, as well as trailing `/`.
   * * Parametrized path segments must come after static segments.
   * * `*`, if present, must come last.
   * * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/&#42;`).
   * See also &lt;https://swagger.io/specification/#path-templating-matching&gt;
   * Example:
   * ```yaml
   * /register: register
   * "/user/{userId}": user
   * /static/&#42;: other
   * ```
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_values = 1 [json_name = "templateValues"];</code>
   */
  boolean containsTemplateValues(
      java.lang.String key);
  /**
   * Use {@link #getTemplateValuesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, java.lang.String>
  getTemplateValues();
  /**
   * <pre>
   * Template value keys are OpenAPI-inspired path templates.
   * * Static path segment `/foo` matches a path segment exactly
   * * `/{param}` matches arbitrary path segment.
   *   (The param name is ignored and can be omitted (`{}`))
   * * The parameter must cover whole segment.
   * * Additionally, path template can end with `/&#42;` wildcard to match
   *   arbitrary number of trailing segments (0 or more).
   * * Multiple consecutive `/` are ignored, as well as trailing `/`.
   * * Parametrized path segments must come after static segments.
   * * `*`, if present, must come last.
   * * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/&#42;`).
   * See also &lt;https://swagger.io/specification/#path-templating-matching&gt;
   * Example:
   * ```yaml
   * /register: register
   * "/user/{userId}": user
   * /static/&#42;: other
   * ```
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_values = 1 [json_name = "templateValues"];</code>
   */
  java.util.Map<java.lang.String, java.lang.String>
  getTemplateValuesMap();
  /**
   * <pre>
   * Template value keys are OpenAPI-inspired path templates.
   * * Static path segment `/foo` matches a path segment exactly
   * * `/{param}` matches arbitrary path segment.
   *   (The param name is ignored and can be omitted (`{}`))
   * * The parameter must cover whole segment.
   * * Additionally, path template can end with `/&#42;` wildcard to match
   *   arbitrary number of trailing segments (0 or more).
   * * Multiple consecutive `/` are ignored, as well as trailing `/`.
   * * Parametrized path segments must come after static segments.
   * * `*`, if present, must come last.
   * * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/&#42;`).
   * See also &lt;https://swagger.io/specification/#path-templating-matching&gt;
   * Example:
   * ```yaml
   * /register: register
   * "/user/{userId}": user
   * /static/&#42;: other
   * ```
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_values = 1 [json_name = "templateValues"];</code>
   */

  /* nullable */
java.lang.String getTemplateValuesOrDefault(
      java.lang.String key,
      /* nullable */
java.lang.String defaultValue);
  /**
   * <pre>
   * Template value keys are OpenAPI-inspired path templates.
   * * Static path segment `/foo` matches a path segment exactly
   * * `/{param}` matches arbitrary path segment.
   *   (The param name is ignored and can be omitted (`{}`))
   * * The parameter must cover whole segment.
   * * Additionally, path template can end with `/&#42;` wildcard to match
   *   arbitrary number of trailing segments (0 or more).
   * * Multiple consecutive `/` are ignored, as well as trailing `/`.
   * * Parametrized path segments must come after static segments.
   * * `*`, if present, must come last.
   * * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/&#42;`).
   * See also &lt;https://swagger.io/specification/#path-templating-matching&gt;
   * Example:
   * ```yaml
   * /register: register
   * "/user/{userId}": user
   * /static/&#42;: other
   * ```
   * </pre>
   *
   * <code>map&lt;string, string&gt; template_values = 1 [json_name = "templateValues"];</code>
   */

  java.lang.String getTemplateValuesOrThrow(
      java.lang.String key);
}
