// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface FlowControlOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.FlowControl)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
   * @return Whether the rateLimiter field is set.
   */
  boolean hasRateLimiter();
  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
   * @return The rateLimiter.
   */
  com.fluxninja.generated.aperture.policy.language.v1.RateLimiter getRateLimiter();
  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.RateLimiterOrBuilder getRateLimiterOrBuilder();

  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   * @return Whether the concurrencyLimiter field is set.
   */
  boolean hasConcurrencyLimiter();
  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   * @return The concurrencyLimiter.
   */
  com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter getConcurrencyLimiter();
  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder getConcurrencyLimiterOrBuilder();

  /**
   * <pre>
   * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
   * @return Whether the aimdConcurrencyController field is set.
   */
  boolean hasAimdConcurrencyController();
  /**
   * <pre>
   * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
   * @return The aimdConcurrencyController.
   */
  com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController getAimdConcurrencyController();
  /**
   * <pre>
   * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyControllerOrBuilder getAimdConcurrencyControllerOrBuilder();

  public com.fluxninja.generated.aperture.policy.language.v1.FlowControl.ComponentCase getComponentCase();
}
