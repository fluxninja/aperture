// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/selector.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Describes which flow in which service a [dataplane
 * component](/concepts/flow-control/flow-control.md#components) should apply
 * to
 * :::info
 * See also [Selector overview](/concepts/flow-control/selector.md).
 * :::
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.Selector}
 */
public final class Selector extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.Selector)
    SelectorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Selector.newBuilder() to construct.
  private Selector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Selector() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Selector();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Selector(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.Builder subBuilder = null;
            if (serviceSelector_ != null) {
              subBuilder = serviceSelector_.toBuilder();
            }
            serviceSelector_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(serviceSelector_);
              serviceSelector_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder subBuilder = null;
            if (flowSelector_ != null) {
              subBuilder = flowSelector_.toBuilder();
            }
            flowSelector_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(flowSelector_);
              flowSelector_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.Selector.class, com.fluxninja.generated.aperture.policy.language.v1.Selector.Builder.class);
  }

  public static final int SERVICE_SELECTOR_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector serviceSelector_;
  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the serviceSelector field is set.
   */
  @java.lang.Override
  public boolean hasServiceSelector() {
    return serviceSelector_ != null;
  }
  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The serviceSelector.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector getServiceSelector() {
    return serviceSelector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.getDefaultInstance() : serviceSelector_;
  }
  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ServiceSelectorOrBuilder getServiceSelectorOrBuilder() {
    return getServiceSelector();
  }

  public static final int FLOW_SELECTOR_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.policy.language.v1.FlowSelector flowSelector_;
  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return Whether the flowSelector field is set.
   */
  @java.lang.Override
  public boolean hasFlowSelector() {
    return flowSelector_ != null;
  }
  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   * @return The flowSelector.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector getFlowSelector() {
    return flowSelector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
  }
  /**
   * <pre>
   * &#64;gotags: validate:"required"
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder getFlowSelectorOrBuilder() {
    return getFlowSelector();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (serviceSelector_ != null) {
      output.writeMessage(1, getServiceSelector());
    }
    if (flowSelector_ != null) {
      output.writeMessage(2, getFlowSelector());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (serviceSelector_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getServiceSelector());
    }
    if (flowSelector_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getFlowSelector());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.Selector)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.Selector other = (com.fluxninja.generated.aperture.policy.language.v1.Selector) obj;

    if (hasServiceSelector() != other.hasServiceSelector()) return false;
    if (hasServiceSelector()) {
      if (!getServiceSelector()
          .equals(other.getServiceSelector())) return false;
    }
    if (hasFlowSelector() != other.hasFlowSelector()) return false;
    if (hasFlowSelector()) {
      if (!getFlowSelector()
          .equals(other.getFlowSelector())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasServiceSelector()) {
      hash = (37 * hash) + SERVICE_SELECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getServiceSelector().hashCode();
    }
    if (hasFlowSelector()) {
      hash = (37 * hash) + FLOW_SELECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getFlowSelector().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Selector parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.Selector prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Describes which flow in which service a [dataplane
   * component](/concepts/flow-control/flow-control.md#components) should apply
   * to
   * :::info
   * See also [Selector overview](/concepts/flow-control/selector.md).
   * :::
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.Selector}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.Selector)
      com.fluxninja.generated.aperture.policy.language.v1.SelectorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.Selector.class, com.fluxninja.generated.aperture.policy.language.v1.Selector.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.Selector.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (serviceSelectorBuilder_ == null) {
        serviceSelector_ = null;
      } else {
        serviceSelector_ = null;
        serviceSelectorBuilder_ = null;
      }
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = null;
      } else {
        flowSelector_ = null;
        flowSelectorBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.SelectorProto.internal_static_aperture_policy_language_v1_Selector_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Selector getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.Selector.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Selector build() {
      com.fluxninja.generated.aperture.policy.language.v1.Selector result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Selector buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.Selector result = new com.fluxninja.generated.aperture.policy.language.v1.Selector(this);
      if (serviceSelectorBuilder_ == null) {
        result.serviceSelector_ = serviceSelector_;
      } else {
        result.serviceSelector_ = serviceSelectorBuilder_.build();
      }
      if (flowSelectorBuilder_ == null) {
        result.flowSelector_ = flowSelector_;
      } else {
        result.flowSelector_ = flowSelectorBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.Selector) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Selector)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.Selector other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.Selector.getDefaultInstance()) return this;
      if (other.hasServiceSelector()) {
        mergeServiceSelector(other.getServiceSelector());
      }
      if (other.hasFlowSelector()) {
        mergeFlowSelector(other.getFlowSelector());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.Selector parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.Selector) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector serviceSelector_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector, com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.ServiceSelectorOrBuilder> serviceSelectorBuilder_;
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return Whether the serviceSelector field is set.
     */
    public boolean hasServiceSelector() {
      return serviceSelectorBuilder_ != null || serviceSelector_ != null;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The serviceSelector.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector getServiceSelector() {
      if (serviceSelectorBuilder_ == null) {
        return serviceSelector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.getDefaultInstance() : serviceSelector_;
      } else {
        return serviceSelectorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setServiceSelector(com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector value) {
      if (serviceSelectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        serviceSelector_ = value;
        onChanged();
      } else {
        serviceSelectorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setServiceSelector(
        com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.Builder builderForValue) {
      if (serviceSelectorBuilder_ == null) {
        serviceSelector_ = builderForValue.build();
        onChanged();
      } else {
        serviceSelectorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder mergeServiceSelector(com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector value) {
      if (serviceSelectorBuilder_ == null) {
        if (serviceSelector_ != null) {
          serviceSelector_ =
            com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.newBuilder(serviceSelector_).mergeFrom(value).buildPartial();
        } else {
          serviceSelector_ = value;
        }
        onChanged();
      } else {
        serviceSelectorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder clearServiceSelector() {
      if (serviceSelectorBuilder_ == null) {
        serviceSelector_ = null;
        onChanged();
      } else {
        serviceSelector_ = null;
        serviceSelectorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.Builder getServiceSelectorBuilder() {
      
      onChanged();
      return getServiceSelectorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ServiceSelectorOrBuilder getServiceSelectorOrBuilder() {
      if (serviceSelectorBuilder_ != null) {
        return serviceSelectorBuilder_.getMessageOrBuilder();
      } else {
        return serviceSelector_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.getDefaultInstance() : serviceSelector_;
      }
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ServiceSelector service_selector = 1 [json_name = "serviceSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector, com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.ServiceSelectorOrBuilder> 
        getServiceSelectorFieldBuilder() {
      if (serviceSelectorBuilder_ == null) {
        serviceSelectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector, com.fluxninja.generated.aperture.policy.language.v1.ServiceSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.ServiceSelectorOrBuilder>(
                getServiceSelector(),
                getParentForChildren(),
                isClean());
        serviceSelector_ = null;
      }
      return serviceSelectorBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.FlowSelector flowSelector_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder> flowSelectorBuilder_;
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return Whether the flowSelector field is set.
     */
    public boolean hasFlowSelector() {
      return flowSelectorBuilder_ != null || flowSelector_ != null;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The flowSelector.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector getFlowSelector() {
      if (flowSelectorBuilder_ == null) {
        return flowSelector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
      } else {
        return flowSelectorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setFlowSelector(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector value) {
      if (flowSelectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        flowSelector_ = value;
        onChanged();
      } else {
        flowSelectorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder setFlowSelector(
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder builderForValue) {
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = builderForValue.build();
        onChanged();
      } else {
        flowSelectorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder mergeFlowSelector(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector value) {
      if (flowSelectorBuilder_ == null) {
        if (flowSelector_ != null) {
          flowSelector_ =
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.newBuilder(flowSelector_).mergeFrom(value).buildPartial();
        } else {
          flowSelector_ = value;
        }
        onChanged();
      } else {
        flowSelectorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public Builder clearFlowSelector() {
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = null;
        onChanged();
      } else {
        flowSelector_ = null;
        flowSelectorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder getFlowSelectorBuilder() {
      
      onChanged();
      return getFlowSelectorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder getFlowSelectorOrBuilder() {
      if (flowSelectorBuilder_ != null) {
        return flowSelectorBuilder_.getMessageOrBuilder();
      } else {
        return flowSelector_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
      }
    }
    /**
     * <pre>
     * &#64;gotags: validate:"required"
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 2 [json_name = "flowSelector", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder> 
        getFlowSelectorFieldBuilder() {
      if (flowSelectorBuilder_ == null) {
        flowSelectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder>(
                getFlowSelector(),
                getParentForChildren(),
                isClean());
        flowSelector_ = null;
      }
      return flowSelectorBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.Selector)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.Selector)
  private static final com.fluxninja.generated.aperture.policy.language.v1.Selector DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.Selector();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Selector getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Selector>
      PARSER = new com.google.protobuf.AbstractParser<Selector>() {
    @java.lang.Override
    public Selector parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Selector(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Selector> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Selector> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Selector getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

