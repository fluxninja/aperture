// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * High level concurrency control component. Baselines a signal via exponential moving average and applies concurrency limits based on deviation of signal from the baseline. Internally implemented as a nested circuit.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.AIMDConcurrencyController}
 */
public final class AIMDConcurrencyController extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.AIMDConcurrencyController)
    AIMDConcurrencyControllerOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AIMDConcurrencyController.newBuilder() to construct.
  private AIMDConcurrencyController(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AIMDConcurrencyController() {
    dynamicConfigKey_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AIMDConcurrencyController();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private AIMDConcurrencyController(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.Builder subBuilder = null;
            if (inPorts_ != null) {
              subBuilder = inPorts_.toBuilder();
            }
            inPorts_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(inPorts_);
              inPorts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.Builder subBuilder = null;
            if (outPorts_ != null) {
              subBuilder = outPorts_.toBuilder();
            }
            outPorts_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(outPorts_);
              outPorts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder subBuilder = null;
            if (flowSelector_ != null) {
              subBuilder = flowSelector_.toBuilder();
            }
            flowSelector_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(flowSelector_);
              flowSelector_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.Builder subBuilder = null;
            if (schedulerParameters_ != null) {
              subBuilder = schedulerParameters_.toBuilder();
            }
            schedulerParameters_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(schedulerParameters_);
              schedulerParameters_ = subBuilder.buildPartial();
            }

            break;
          }
          case 42: {
            com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.Builder subBuilder = null;
            if (gradientParameters_ != null) {
              subBuilder = gradientParameters_.toBuilder();
            }
            gradientParameters_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(gradientParameters_);
              gradientParameters_ = subBuilder.buildPartial();
            }

            break;
          }
          case 49: {

            maxLoadMultiplier_ = input.readDouble();
            break;
          }
          case 57: {

            loadMultiplierLinearIncrement_ = input.readDouble();
            break;
          }
          case 66: {
            com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.Builder subBuilder = null;
            if (alerterParameters_ != null) {
              subBuilder = alerterParameters_.toBuilder();
            }
            alerterParameters_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(alerterParameters_);
              alerterParameters_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            java.lang.String s = input.readStringRequireUtf8();

            dynamicConfigKey_ = s;
            break;
          }
          case 82: {
            com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.Builder subBuilder = null;
            if (defaultConfig_ != null) {
              subBuilder = defaultConfig_.toBuilder();
            }
            defaultConfig_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(defaultConfig_);
              defaultConfig_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.class, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Builder.class);
  }

  public interface InsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.AIMDConcurrencyController.Ins)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The signal to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
     * @return Whether the signal field is set.
     */
    boolean hasSignal();
    /**
     * <pre>
     * The signal to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
     * @return The signal.
     */
    com.fluxninja.generated.aperture.policy.language.v1.InPort getSignal();
    /**
     * <pre>
     * The signal to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getSignalOrBuilder();

    /**
     * <pre>
     * The setpoint to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
     * @return Whether the setpoint field is set.
     */
    boolean hasSetpoint();
    /**
     * <pre>
     * The setpoint to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
     * @return The setpoint.
     */
    com.fluxninja.generated.aperture.policy.language.v1.InPort getSetpoint();
    /**
     * <pre>
     * The setpoint to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getSetpointOrBuilder();
  }
  /**
   * <pre>
   * Inputs for the AIMDConcurrencyController component.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.AIMDConcurrencyController.Ins}
   */
  public static final class Ins extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.AIMDConcurrencyController.Ins)
      InsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Ins.newBuilder() to construct.
    private Ins(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Ins() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Ins();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Ins(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder subBuilder = null;
              if (signal_ != null) {
                subBuilder = signal_.toBuilder();
              }
              signal_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.InPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(signal_);
                signal_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder subBuilder = null;
              if (setpoint_ != null) {
                subBuilder = setpoint_.toBuilder();
              }
              setpoint_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.InPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(setpoint_);
                setpoint_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Ins_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Ins_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.class, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.Builder.class);
    }

    public static final int SIGNAL_FIELD_NUMBER = 1;
    private com.fluxninja.generated.aperture.policy.language.v1.InPort signal_;
    /**
     * <pre>
     * The signal to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
     * @return Whether the signal field is set.
     */
    @java.lang.Override
    public boolean hasSignal() {
      return signal_ != null;
    }
    /**
     * <pre>
     * The signal to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
     * @return The signal.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InPort getSignal() {
      return signal_ == null ? com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : signal_;
    }
    /**
     * <pre>
     * The signal to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getSignalOrBuilder() {
      return getSignal();
    }

    public static final int SETPOINT_FIELD_NUMBER = 2;
    private com.fluxninja.generated.aperture.policy.language.v1.InPort setpoint_;
    /**
     * <pre>
     * The setpoint to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
     * @return Whether the setpoint field is set.
     */
    @java.lang.Override
    public boolean hasSetpoint() {
      return setpoint_ != null;
    }
    /**
     * <pre>
     * The setpoint to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
     * @return The setpoint.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InPort getSetpoint() {
      return setpoint_ == null ? com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : setpoint_;
    }
    /**
     * <pre>
     * The setpoint to the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getSetpointOrBuilder() {
      return getSetpoint();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (signal_ != null) {
        output.writeMessage(1, getSignal());
      }
      if (setpoint_ != null) {
        output.writeMessage(2, getSetpoint());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (signal_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getSignal());
      }
      if (setpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSetpoint());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins other = (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins) obj;

      if (hasSignal() != other.hasSignal()) return false;
      if (hasSignal()) {
        if (!getSignal()
            .equals(other.getSignal())) return false;
      }
      if (hasSetpoint() != other.hasSetpoint()) return false;
      if (hasSetpoint()) {
        if (!getSetpoint()
            .equals(other.getSetpoint())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasSignal()) {
        hash = (37 * hash) + SIGNAL_FIELD_NUMBER;
        hash = (53 * hash) + getSignal().hashCode();
      }
      if (hasSetpoint()) {
        hash = (37 * hash) + SETPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getSetpoint().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Inputs for the AIMDConcurrencyController component.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.AIMDConcurrencyController.Ins}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.AIMDConcurrencyController.Ins)
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.InsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Ins_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Ins_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.class, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (signalBuilder_ == null) {
          signal_ = null;
        } else {
          signal_ = null;
          signalBuilder_ = null;
        }
        if (setpointBuilder_ == null) {
          setpoint_ = null;
        } else {
          setpoint_ = null;
          setpointBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Ins_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins build() {
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins result = new com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins(this);
        if (signalBuilder_ == null) {
          result.signal_ = signal_;
        } else {
          result.signal_ = signalBuilder_.build();
        }
        if (setpointBuilder_ == null) {
          result.setpoint_ = setpoint_;
        } else {
          result.setpoint_ = setpointBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.getDefaultInstance()) return this;
        if (other.hasSignal()) {
          mergeSignal(other.getSignal());
        }
        if (other.hasSetpoint()) {
          mergeSetpoint(other.getSetpoint());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.InPort signal_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> signalBuilder_;
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       * @return Whether the signal field is set.
       */
      public boolean hasSignal() {
        return signalBuilder_ != null || signal_ != null;
      }
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       * @return The signal.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort getSignal() {
        if (signalBuilder_ == null) {
          return signal_ == null ? com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : signal_;
        } else {
          return signalBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       */
      public Builder setSignal(com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (signalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          signal_ = value;
          onChanged();
        } else {
          signalBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       */
      public Builder setSignal(
          com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder builderForValue) {
        if (signalBuilder_ == null) {
          signal_ = builderForValue.build();
          onChanged();
        } else {
          signalBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       */
      public Builder mergeSignal(com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (signalBuilder_ == null) {
          if (signal_ != null) {
            signal_ =
              com.fluxninja.generated.aperture.policy.language.v1.InPort.newBuilder(signal_).mergeFrom(value).buildPartial();
          } else {
            signal_ = value;
          }
          onChanged();
        } else {
          signalBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       */
      public Builder clearSignal() {
        if (signalBuilder_ == null) {
          signal_ = null;
          onChanged();
        } else {
          signal_ = null;
          signalBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder getSignalBuilder() {
        
        onChanged();
        return getSignalFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getSignalOrBuilder() {
        if (signalBuilder_ != null) {
          return signalBuilder_.getMessageOrBuilder();
        } else {
          return signal_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : signal_;
        }
      }
      /**
       * <pre>
       * The signal to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort signal = 1 [json_name = "signal"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> 
          getSignalFieldBuilder() {
        if (signalBuilder_ == null) {
          signalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder>(
                  getSignal(),
                  getParentForChildren(),
                  isClean());
          signal_ = null;
        }
        return signalBuilder_;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.InPort setpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> setpointBuilder_;
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       * @return Whether the setpoint field is set.
       */
      public boolean hasSetpoint() {
        return setpointBuilder_ != null || setpoint_ != null;
      }
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       * @return The setpoint.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort getSetpoint() {
        if (setpointBuilder_ == null) {
          return setpoint_ == null ? com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : setpoint_;
        } else {
          return setpointBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       */
      public Builder setSetpoint(com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (setpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          setpoint_ = value;
          onChanged();
        } else {
          setpointBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       */
      public Builder setSetpoint(
          com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder builderForValue) {
        if (setpointBuilder_ == null) {
          setpoint_ = builderForValue.build();
          onChanged();
        } else {
          setpointBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       */
      public Builder mergeSetpoint(com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (setpointBuilder_ == null) {
          if (setpoint_ != null) {
            setpoint_ =
              com.fluxninja.generated.aperture.policy.language.v1.InPort.newBuilder(setpoint_).mergeFrom(value).buildPartial();
          } else {
            setpoint_ = value;
          }
          onChanged();
        } else {
          setpointBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       */
      public Builder clearSetpoint() {
        if (setpointBuilder_ == null) {
          setpoint_ = null;
          onChanged();
        } else {
          setpoint_ = null;
          setpointBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder getSetpointBuilder() {
        
        onChanged();
        return getSetpointFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getSetpointOrBuilder() {
        if (setpointBuilder_ != null) {
          return setpointBuilder_.getMessageOrBuilder();
        } else {
          return setpoint_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : setpoint_;
        }
      }
      /**
       * <pre>
       * The setpoint to the controller.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort setpoint = 2 [json_name = "setpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> 
          getSetpointFieldBuilder() {
        if (setpointBuilder_ == null) {
          setpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder>(
                  getSetpoint(),
                  getParentForChildren(),
                  isClean());
          setpoint_ = null;
        }
        return setpointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.AIMDConcurrencyController.Ins)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.AIMDConcurrencyController.Ins)
    private static final com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Ins>
        PARSER = new com.google.protobuf.AbstractParser<Ins>() {
      @java.lang.Override
      public Ins parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ins(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Ins> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Ins> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OutsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.AIMDConcurrencyController.Outs)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
     * @return Whether the isOverload field is set.
     */
    boolean hasIsOverload();
    /**
     * <pre>
     * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
     * @return The isOverload.
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPort getIsOverload();
    /**
     * <pre>
     * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getIsOverloadOrBuilder();

    /**
     * <pre>
     * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
     * @return Whether the desiredLoadMultiplier field is set.
     */
    boolean hasDesiredLoadMultiplier();
    /**
     * <pre>
     * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
     * @return The desiredLoadMultiplier.
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPort getDesiredLoadMultiplier();
    /**
     * <pre>
     * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getDesiredLoadMultiplierOrBuilder();

    /**
     * <pre>
     * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
     * @return Whether the observedLoadMultiplier field is set.
     */
    boolean hasObservedLoadMultiplier();
    /**
     * <pre>
     * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
     * @return The observedLoadMultiplier.
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPort getObservedLoadMultiplier();
    /**
     * <pre>
     * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getObservedLoadMultiplierOrBuilder();

    /**
     * <pre>
     * Accepted concurrency is the number of concurrent requests that are accepted by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
     * @return Whether the acceptedConcurrency field is set.
     */
    boolean hasAcceptedConcurrency();
    /**
     * <pre>
     * Accepted concurrency is the number of concurrent requests that are accepted by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
     * @return The acceptedConcurrency.
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPort getAcceptedConcurrency();
    /**
     * <pre>
     * Accepted concurrency is the number of concurrent requests that are accepted by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getAcceptedConcurrencyOrBuilder();

    /**
     * <pre>
     * IncomingConcurrency is the number of concurrent requests that are received by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
     * @return Whether the incomingConcurrency field is set.
     */
    boolean hasIncomingConcurrency();
    /**
     * <pre>
     * IncomingConcurrency is the number of concurrent requests that are received by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
     * @return The incomingConcurrency.
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPort getIncomingConcurrency();
    /**
     * <pre>
     * IncomingConcurrency is the number of concurrent requests that are received by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getIncomingConcurrencyOrBuilder();
  }
  /**
   * <pre>
   * Outputs for the AIMDConcurrencyController component.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.AIMDConcurrencyController.Outs}
   */
  public static final class Outs extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.AIMDConcurrencyController.Outs)
      OutsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Outs.newBuilder() to construct.
    private Outs(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Outs() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Outs();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Outs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder subBuilder = null;
              if (isOverload_ != null) {
                subBuilder = isOverload_.toBuilder();
              }
              isOverload_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.OutPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(isOverload_);
                isOverload_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder subBuilder = null;
              if (desiredLoadMultiplier_ != null) {
                subBuilder = desiredLoadMultiplier_.toBuilder();
              }
              desiredLoadMultiplier_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.OutPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(desiredLoadMultiplier_);
                desiredLoadMultiplier_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder subBuilder = null;
              if (observedLoadMultiplier_ != null) {
                subBuilder = observedLoadMultiplier_.toBuilder();
              }
              observedLoadMultiplier_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.OutPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(observedLoadMultiplier_);
                observedLoadMultiplier_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder subBuilder = null;
              if (acceptedConcurrency_ != null) {
                subBuilder = acceptedConcurrency_.toBuilder();
              }
              acceptedConcurrency_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.OutPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(acceptedConcurrency_);
                acceptedConcurrency_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder subBuilder = null;
              if (incomingConcurrency_ != null) {
                subBuilder = incomingConcurrency_.toBuilder();
              }
              incomingConcurrency_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.OutPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(incomingConcurrency_);
                incomingConcurrency_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Outs_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Outs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.class, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.Builder.class);
    }

    public static final int IS_OVERLOAD_FIELD_NUMBER = 1;
    private com.fluxninja.generated.aperture.policy.language.v1.OutPort isOverload_;
    /**
     * <pre>
     * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
     * @return Whether the isOverload field is set.
     */
    @java.lang.Override
    public boolean hasIsOverload() {
      return isOverload_ != null;
    }
    /**
     * <pre>
     * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
     * @return The isOverload.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getIsOverload() {
      return isOverload_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : isOverload_;
    }
    /**
     * <pre>
     * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getIsOverloadOrBuilder() {
      return getIsOverload();
    }

    public static final int DESIRED_LOAD_MULTIPLIER_FIELD_NUMBER = 2;
    private com.fluxninja.generated.aperture.policy.language.v1.OutPort desiredLoadMultiplier_;
    /**
     * <pre>
     * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
     * @return Whether the desiredLoadMultiplier field is set.
     */
    @java.lang.Override
    public boolean hasDesiredLoadMultiplier() {
      return desiredLoadMultiplier_ != null;
    }
    /**
     * <pre>
     * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
     * @return The desiredLoadMultiplier.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getDesiredLoadMultiplier() {
      return desiredLoadMultiplier_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : desiredLoadMultiplier_;
    }
    /**
     * <pre>
     * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getDesiredLoadMultiplierOrBuilder() {
      return getDesiredLoadMultiplier();
    }

    public static final int OBSERVED_LOAD_MULTIPLIER_FIELD_NUMBER = 3;
    private com.fluxninja.generated.aperture.policy.language.v1.OutPort observedLoadMultiplier_;
    /**
     * <pre>
     * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
     * @return Whether the observedLoadMultiplier field is set.
     */
    @java.lang.Override
    public boolean hasObservedLoadMultiplier() {
      return observedLoadMultiplier_ != null;
    }
    /**
     * <pre>
     * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
     * @return The observedLoadMultiplier.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getObservedLoadMultiplier() {
      return observedLoadMultiplier_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : observedLoadMultiplier_;
    }
    /**
     * <pre>
     * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getObservedLoadMultiplierOrBuilder() {
      return getObservedLoadMultiplier();
    }

    public static final int ACCEPTED_CONCURRENCY_FIELD_NUMBER = 4;
    private com.fluxninja.generated.aperture.policy.language.v1.OutPort acceptedConcurrency_;
    /**
     * <pre>
     * Accepted concurrency is the number of concurrent requests that are accepted by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
     * @return Whether the acceptedConcurrency field is set.
     */
    @java.lang.Override
    public boolean hasAcceptedConcurrency() {
      return acceptedConcurrency_ != null;
    }
    /**
     * <pre>
     * Accepted concurrency is the number of concurrent requests that are accepted by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
     * @return The acceptedConcurrency.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getAcceptedConcurrency() {
      return acceptedConcurrency_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : acceptedConcurrency_;
    }
    /**
     * <pre>
     * Accepted concurrency is the number of concurrent requests that are accepted by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getAcceptedConcurrencyOrBuilder() {
      return getAcceptedConcurrency();
    }

    public static final int INCOMING_CONCURRENCY_FIELD_NUMBER = 5;
    private com.fluxninja.generated.aperture.policy.language.v1.OutPort incomingConcurrency_;
    /**
     * <pre>
     * IncomingConcurrency is the number of concurrent requests that are received by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
     * @return Whether the incomingConcurrency field is set.
     */
    @java.lang.Override
    public boolean hasIncomingConcurrency() {
      return incomingConcurrency_ != null;
    }
    /**
     * <pre>
     * IncomingConcurrency is the number of concurrent requests that are received by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
     * @return The incomingConcurrency.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getIncomingConcurrency() {
      return incomingConcurrency_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : incomingConcurrency_;
    }
    /**
     * <pre>
     * IncomingConcurrency is the number of concurrent requests that are received by the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getIncomingConcurrencyOrBuilder() {
      return getIncomingConcurrency();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (isOverload_ != null) {
        output.writeMessage(1, getIsOverload());
      }
      if (desiredLoadMultiplier_ != null) {
        output.writeMessage(2, getDesiredLoadMultiplier());
      }
      if (observedLoadMultiplier_ != null) {
        output.writeMessage(3, getObservedLoadMultiplier());
      }
      if (acceptedConcurrency_ != null) {
        output.writeMessage(4, getAcceptedConcurrency());
      }
      if (incomingConcurrency_ != null) {
        output.writeMessage(5, getIncomingConcurrency());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (isOverload_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getIsOverload());
      }
      if (desiredLoadMultiplier_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDesiredLoadMultiplier());
      }
      if (observedLoadMultiplier_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getObservedLoadMultiplier());
      }
      if (acceptedConcurrency_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getAcceptedConcurrency());
      }
      if (incomingConcurrency_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getIncomingConcurrency());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs other = (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs) obj;

      if (hasIsOverload() != other.hasIsOverload()) return false;
      if (hasIsOverload()) {
        if (!getIsOverload()
            .equals(other.getIsOverload())) return false;
      }
      if (hasDesiredLoadMultiplier() != other.hasDesiredLoadMultiplier()) return false;
      if (hasDesiredLoadMultiplier()) {
        if (!getDesiredLoadMultiplier()
            .equals(other.getDesiredLoadMultiplier())) return false;
      }
      if (hasObservedLoadMultiplier() != other.hasObservedLoadMultiplier()) return false;
      if (hasObservedLoadMultiplier()) {
        if (!getObservedLoadMultiplier()
            .equals(other.getObservedLoadMultiplier())) return false;
      }
      if (hasAcceptedConcurrency() != other.hasAcceptedConcurrency()) return false;
      if (hasAcceptedConcurrency()) {
        if (!getAcceptedConcurrency()
            .equals(other.getAcceptedConcurrency())) return false;
      }
      if (hasIncomingConcurrency() != other.hasIncomingConcurrency()) return false;
      if (hasIncomingConcurrency()) {
        if (!getIncomingConcurrency()
            .equals(other.getIncomingConcurrency())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIsOverload()) {
        hash = (37 * hash) + IS_OVERLOAD_FIELD_NUMBER;
        hash = (53 * hash) + getIsOverload().hashCode();
      }
      if (hasDesiredLoadMultiplier()) {
        hash = (37 * hash) + DESIRED_LOAD_MULTIPLIER_FIELD_NUMBER;
        hash = (53 * hash) + getDesiredLoadMultiplier().hashCode();
      }
      if (hasObservedLoadMultiplier()) {
        hash = (37 * hash) + OBSERVED_LOAD_MULTIPLIER_FIELD_NUMBER;
        hash = (53 * hash) + getObservedLoadMultiplier().hashCode();
      }
      if (hasAcceptedConcurrency()) {
        hash = (37 * hash) + ACCEPTED_CONCURRENCY_FIELD_NUMBER;
        hash = (53 * hash) + getAcceptedConcurrency().hashCode();
      }
      if (hasIncomingConcurrency()) {
        hash = (37 * hash) + INCOMING_CONCURRENCY_FIELD_NUMBER;
        hash = (53 * hash) + getIncomingConcurrency().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Outputs for the AIMDConcurrencyController component.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.AIMDConcurrencyController.Outs}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.AIMDConcurrencyController.Outs)
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.OutsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Outs_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Outs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.class, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (isOverloadBuilder_ == null) {
          isOverload_ = null;
        } else {
          isOverload_ = null;
          isOverloadBuilder_ = null;
        }
        if (desiredLoadMultiplierBuilder_ == null) {
          desiredLoadMultiplier_ = null;
        } else {
          desiredLoadMultiplier_ = null;
          desiredLoadMultiplierBuilder_ = null;
        }
        if (observedLoadMultiplierBuilder_ == null) {
          observedLoadMultiplier_ = null;
        } else {
          observedLoadMultiplier_ = null;
          observedLoadMultiplierBuilder_ = null;
        }
        if (acceptedConcurrencyBuilder_ == null) {
          acceptedConcurrency_ = null;
        } else {
          acceptedConcurrency_ = null;
          acceptedConcurrencyBuilder_ = null;
        }
        if (incomingConcurrencyBuilder_ == null) {
          incomingConcurrency_ = null;
        } else {
          incomingConcurrency_ = null;
          incomingConcurrencyBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_Outs_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs build() {
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs result = new com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs(this);
        if (isOverloadBuilder_ == null) {
          result.isOverload_ = isOverload_;
        } else {
          result.isOverload_ = isOverloadBuilder_.build();
        }
        if (desiredLoadMultiplierBuilder_ == null) {
          result.desiredLoadMultiplier_ = desiredLoadMultiplier_;
        } else {
          result.desiredLoadMultiplier_ = desiredLoadMultiplierBuilder_.build();
        }
        if (observedLoadMultiplierBuilder_ == null) {
          result.observedLoadMultiplier_ = observedLoadMultiplier_;
        } else {
          result.observedLoadMultiplier_ = observedLoadMultiplierBuilder_.build();
        }
        if (acceptedConcurrencyBuilder_ == null) {
          result.acceptedConcurrency_ = acceptedConcurrency_;
        } else {
          result.acceptedConcurrency_ = acceptedConcurrencyBuilder_.build();
        }
        if (incomingConcurrencyBuilder_ == null) {
          result.incomingConcurrency_ = incomingConcurrency_;
        } else {
          result.incomingConcurrency_ = incomingConcurrencyBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.getDefaultInstance()) return this;
        if (other.hasIsOverload()) {
          mergeIsOverload(other.getIsOverload());
        }
        if (other.hasDesiredLoadMultiplier()) {
          mergeDesiredLoadMultiplier(other.getDesiredLoadMultiplier());
        }
        if (other.hasObservedLoadMultiplier()) {
          mergeObservedLoadMultiplier(other.getObservedLoadMultiplier());
        }
        if (other.hasAcceptedConcurrency()) {
          mergeAcceptedConcurrency(other.getAcceptedConcurrency());
        }
        if (other.hasIncomingConcurrency()) {
          mergeIncomingConcurrency(other.getIncomingConcurrency());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.OutPort isOverload_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> isOverloadBuilder_;
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       * @return Whether the isOverload field is set.
       */
      public boolean hasIsOverload() {
        return isOverloadBuilder_ != null || isOverload_ != null;
      }
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       * @return The isOverload.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort getIsOverload() {
        if (isOverloadBuilder_ == null) {
          return isOverload_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : isOverload_;
        } else {
          return isOverloadBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       */
      public Builder setIsOverload(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (isOverloadBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          isOverload_ = value;
          onChanged();
        } else {
          isOverloadBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       */
      public Builder setIsOverload(
          com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder builderForValue) {
        if (isOverloadBuilder_ == null) {
          isOverload_ = builderForValue.build();
          onChanged();
        } else {
          isOverloadBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       */
      public Builder mergeIsOverload(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (isOverloadBuilder_ == null) {
          if (isOverload_ != null) {
            isOverload_ =
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.newBuilder(isOverload_).mergeFrom(value).buildPartial();
          } else {
            isOverload_ = value;
          }
          onChanged();
        } else {
          isOverloadBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       */
      public Builder clearIsOverload() {
        if (isOverloadBuilder_ == null) {
          isOverload_ = null;
          onChanged();
        } else {
          isOverload_ = null;
          isOverloadBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder getIsOverloadBuilder() {
        
        onChanged();
        return getIsOverloadFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getIsOverloadOrBuilder() {
        if (isOverloadBuilder_ != null) {
          return isOverloadBuilder_.getMessageOrBuilder();
        } else {
          return isOverload_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : isOverload_;
        }
      }
      /**
       * <pre>
       * Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort is_overload = 1 [json_name = "isOverload"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> 
          getIsOverloadFieldBuilder() {
        if (isOverloadBuilder_ == null) {
          isOverloadBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder>(
                  getIsOverload(),
                  getParentForChildren(),
                  isClean());
          isOverload_ = null;
        }
        return isOverloadBuilder_;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.OutPort desiredLoadMultiplier_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> desiredLoadMultiplierBuilder_;
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       * @return Whether the desiredLoadMultiplier field is set.
       */
      public boolean hasDesiredLoadMultiplier() {
        return desiredLoadMultiplierBuilder_ != null || desiredLoadMultiplier_ != null;
      }
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       * @return The desiredLoadMultiplier.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort getDesiredLoadMultiplier() {
        if (desiredLoadMultiplierBuilder_ == null) {
          return desiredLoadMultiplier_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : desiredLoadMultiplier_;
        } else {
          return desiredLoadMultiplierBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       */
      public Builder setDesiredLoadMultiplier(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (desiredLoadMultiplierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          desiredLoadMultiplier_ = value;
          onChanged();
        } else {
          desiredLoadMultiplierBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       */
      public Builder setDesiredLoadMultiplier(
          com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder builderForValue) {
        if (desiredLoadMultiplierBuilder_ == null) {
          desiredLoadMultiplier_ = builderForValue.build();
          onChanged();
        } else {
          desiredLoadMultiplierBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       */
      public Builder mergeDesiredLoadMultiplier(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (desiredLoadMultiplierBuilder_ == null) {
          if (desiredLoadMultiplier_ != null) {
            desiredLoadMultiplier_ =
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.newBuilder(desiredLoadMultiplier_).mergeFrom(value).buildPartial();
          } else {
            desiredLoadMultiplier_ = value;
          }
          onChanged();
        } else {
          desiredLoadMultiplierBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       */
      public Builder clearDesiredLoadMultiplier() {
        if (desiredLoadMultiplierBuilder_ == null) {
          desiredLoadMultiplier_ = null;
          onChanged();
        } else {
          desiredLoadMultiplier_ = null;
          desiredLoadMultiplierBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder getDesiredLoadMultiplierBuilder() {
        
        onChanged();
        return getDesiredLoadMultiplierFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getDesiredLoadMultiplierOrBuilder() {
        if (desiredLoadMultiplierBuilder_ != null) {
          return desiredLoadMultiplierBuilder_.getMessageOrBuilder();
        } else {
          return desiredLoadMultiplier_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : desiredLoadMultiplier_;
        }
      }
      /**
       * <pre>
       * Desired Load multiplier is the ratio of desired concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort desired_load_multiplier = 2 [json_name = "desiredLoadMultiplier"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> 
          getDesiredLoadMultiplierFieldBuilder() {
        if (desiredLoadMultiplierBuilder_ == null) {
          desiredLoadMultiplierBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder>(
                  getDesiredLoadMultiplier(),
                  getParentForChildren(),
                  isClean());
          desiredLoadMultiplier_ = null;
        }
        return desiredLoadMultiplierBuilder_;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.OutPort observedLoadMultiplier_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> observedLoadMultiplierBuilder_;
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       * @return Whether the observedLoadMultiplier field is set.
       */
      public boolean hasObservedLoadMultiplier() {
        return observedLoadMultiplierBuilder_ != null || observedLoadMultiplier_ != null;
      }
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       * @return The observedLoadMultiplier.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort getObservedLoadMultiplier() {
        if (observedLoadMultiplierBuilder_ == null) {
          return observedLoadMultiplier_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : observedLoadMultiplier_;
        } else {
          return observedLoadMultiplierBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       */
      public Builder setObservedLoadMultiplier(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (observedLoadMultiplierBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          observedLoadMultiplier_ = value;
          onChanged();
        } else {
          observedLoadMultiplierBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       */
      public Builder setObservedLoadMultiplier(
          com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder builderForValue) {
        if (observedLoadMultiplierBuilder_ == null) {
          observedLoadMultiplier_ = builderForValue.build();
          onChanged();
        } else {
          observedLoadMultiplierBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       */
      public Builder mergeObservedLoadMultiplier(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (observedLoadMultiplierBuilder_ == null) {
          if (observedLoadMultiplier_ != null) {
            observedLoadMultiplier_ =
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.newBuilder(observedLoadMultiplier_).mergeFrom(value).buildPartial();
          } else {
            observedLoadMultiplier_ = value;
          }
          onChanged();
        } else {
          observedLoadMultiplierBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       */
      public Builder clearObservedLoadMultiplier() {
        if (observedLoadMultiplierBuilder_ == null) {
          observedLoadMultiplier_ = null;
          onChanged();
        } else {
          observedLoadMultiplier_ = null;
          observedLoadMultiplierBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder getObservedLoadMultiplierBuilder() {
        
        onChanged();
        return getObservedLoadMultiplierFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getObservedLoadMultiplierOrBuilder() {
        if (observedLoadMultiplierBuilder_ != null) {
          return observedLoadMultiplierBuilder_.getMessageOrBuilder();
        } else {
          return observedLoadMultiplier_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : observedLoadMultiplier_;
        }
      }
      /**
       * <pre>
       * Observed Load multiplier is the ratio of accepted concurrency to the incoming concurrency.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort observed_load_multiplier = 3 [json_name = "observedLoadMultiplier"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> 
          getObservedLoadMultiplierFieldBuilder() {
        if (observedLoadMultiplierBuilder_ == null) {
          observedLoadMultiplierBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder>(
                  getObservedLoadMultiplier(),
                  getParentForChildren(),
                  isClean());
          observedLoadMultiplier_ = null;
        }
        return observedLoadMultiplierBuilder_;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.OutPort acceptedConcurrency_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> acceptedConcurrencyBuilder_;
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       * @return Whether the acceptedConcurrency field is set.
       */
      public boolean hasAcceptedConcurrency() {
        return acceptedConcurrencyBuilder_ != null || acceptedConcurrency_ != null;
      }
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       * @return The acceptedConcurrency.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort getAcceptedConcurrency() {
        if (acceptedConcurrencyBuilder_ == null) {
          return acceptedConcurrency_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : acceptedConcurrency_;
        } else {
          return acceptedConcurrencyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       */
      public Builder setAcceptedConcurrency(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (acceptedConcurrencyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          acceptedConcurrency_ = value;
          onChanged();
        } else {
          acceptedConcurrencyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       */
      public Builder setAcceptedConcurrency(
          com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder builderForValue) {
        if (acceptedConcurrencyBuilder_ == null) {
          acceptedConcurrency_ = builderForValue.build();
          onChanged();
        } else {
          acceptedConcurrencyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       */
      public Builder mergeAcceptedConcurrency(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (acceptedConcurrencyBuilder_ == null) {
          if (acceptedConcurrency_ != null) {
            acceptedConcurrency_ =
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.newBuilder(acceptedConcurrency_).mergeFrom(value).buildPartial();
          } else {
            acceptedConcurrency_ = value;
          }
          onChanged();
        } else {
          acceptedConcurrencyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       */
      public Builder clearAcceptedConcurrency() {
        if (acceptedConcurrencyBuilder_ == null) {
          acceptedConcurrency_ = null;
          onChanged();
        } else {
          acceptedConcurrency_ = null;
          acceptedConcurrencyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder getAcceptedConcurrencyBuilder() {
        
        onChanged();
        return getAcceptedConcurrencyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getAcceptedConcurrencyOrBuilder() {
        if (acceptedConcurrencyBuilder_ != null) {
          return acceptedConcurrencyBuilder_.getMessageOrBuilder();
        } else {
          return acceptedConcurrency_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : acceptedConcurrency_;
        }
      }
      /**
       * <pre>
       * Accepted concurrency is the number of concurrent requests that are accepted by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort accepted_concurrency = 4 [json_name = "acceptedConcurrency"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> 
          getAcceptedConcurrencyFieldBuilder() {
        if (acceptedConcurrencyBuilder_ == null) {
          acceptedConcurrencyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder>(
                  getAcceptedConcurrency(),
                  getParentForChildren(),
                  isClean());
          acceptedConcurrency_ = null;
        }
        return acceptedConcurrencyBuilder_;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.OutPort incomingConcurrency_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> incomingConcurrencyBuilder_;
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       * @return Whether the incomingConcurrency field is set.
       */
      public boolean hasIncomingConcurrency() {
        return incomingConcurrencyBuilder_ != null || incomingConcurrency_ != null;
      }
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       * @return The incomingConcurrency.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort getIncomingConcurrency() {
        if (incomingConcurrencyBuilder_ == null) {
          return incomingConcurrency_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : incomingConcurrency_;
        } else {
          return incomingConcurrencyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       */
      public Builder setIncomingConcurrency(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (incomingConcurrencyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          incomingConcurrency_ = value;
          onChanged();
        } else {
          incomingConcurrencyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       */
      public Builder setIncomingConcurrency(
          com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder builderForValue) {
        if (incomingConcurrencyBuilder_ == null) {
          incomingConcurrency_ = builderForValue.build();
          onChanged();
        } else {
          incomingConcurrencyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       */
      public Builder mergeIncomingConcurrency(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (incomingConcurrencyBuilder_ == null) {
          if (incomingConcurrency_ != null) {
            incomingConcurrency_ =
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.newBuilder(incomingConcurrency_).mergeFrom(value).buildPartial();
          } else {
            incomingConcurrency_ = value;
          }
          onChanged();
        } else {
          incomingConcurrencyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       */
      public Builder clearIncomingConcurrency() {
        if (incomingConcurrencyBuilder_ == null) {
          incomingConcurrency_ = null;
          onChanged();
        } else {
          incomingConcurrency_ = null;
          incomingConcurrencyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder getIncomingConcurrencyBuilder() {
        
        onChanged();
        return getIncomingConcurrencyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getIncomingConcurrencyOrBuilder() {
        if (incomingConcurrencyBuilder_ != null) {
          return incomingConcurrencyBuilder_.getMessageOrBuilder();
        } else {
          return incomingConcurrency_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : incomingConcurrency_;
        }
      }
      /**
       * <pre>
       * IncomingConcurrency is the number of concurrent requests that are received by the service.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort incoming_concurrency = 5 [json_name = "incomingConcurrency"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> 
          getIncomingConcurrencyFieldBuilder() {
        if (incomingConcurrencyBuilder_ == null) {
          incomingConcurrencyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder>(
                  getIncomingConcurrency(),
                  getParentForChildren(),
                  isClean());
          incomingConcurrency_ = null;
        }
        return incomingConcurrencyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.AIMDConcurrencyController.Outs)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.AIMDConcurrencyController.Outs)
    private static final com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Outs>
        PARSER = new com.google.protobuf.AbstractParser<Outs>() {
      @java.lang.Override
      public Outs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Outs(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Outs> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Outs> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int IN_PORTS_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins inPorts_;
  /**
   * <pre>
   * Input ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return Whether the inPorts field is set.
   */
  @java.lang.Override
  public boolean hasInPorts() {
    return inPorts_ != null;
  }
  /**
   * <pre>
   * Input ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return The inPorts.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins getInPorts() {
    return inPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.getDefaultInstance() : inPorts_;
  }
  /**
   * <pre>
   * Input ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.InsOrBuilder getInPortsOrBuilder() {
    return getInPorts();
  }

  public static final int OUT_PORTS_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs outPorts_;
  /**
   * <pre>
   * Output ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return Whether the outPorts field is set.
   */
  @java.lang.Override
  public boolean hasOutPorts() {
    return outPorts_ != null;
  }
  /**
   * <pre>
   * Output ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return The outPorts.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs getOutPorts() {
    return outPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.getDefaultInstance() : outPorts_;
  }
  /**
   * <pre>
   * Output ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.OutsOrBuilder getOutPortsOrBuilder() {
    return getOutPorts();
  }

  public static final int FLOW_SELECTOR_FIELD_NUMBER = 3;
  private com.fluxninja.generated.aperture.policy.language.v1.FlowSelector flowSelector_;
  /**
   * <pre>
   * Flow Selector decides the service and flows at which the concurrency limiter is applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
   * @return Whether the flowSelector field is set.
   */
  @java.lang.Override
  public boolean hasFlowSelector() {
    return flowSelector_ != null;
  }
  /**
   * <pre>
   * Flow Selector decides the service and flows at which the concurrency limiter is applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
   * @return The flowSelector.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector getFlowSelector() {
    return flowSelector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
  }
  /**
   * <pre>
   * Flow Selector decides the service and flows at which the concurrency limiter is applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder getFlowSelectorOrBuilder() {
    return getFlowSelector();
  }

  public static final int SCHEDULER_PARAMETERS_FIELD_NUMBER = 4;
  private com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters schedulerParameters_;
  /**
   * <pre>
   * Scheduler parameters.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
   * @return Whether the schedulerParameters field is set.
   */
  @java.lang.Override
  public boolean hasSchedulerParameters() {
    return schedulerParameters_ != null;
  }
  /**
   * <pre>
   * Scheduler parameters.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
   * @return The schedulerParameters.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters getSchedulerParameters() {
    return schedulerParameters_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.getDefaultInstance() : schedulerParameters_;
  }
  /**
   * <pre>
   * Scheduler parameters.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Scheduler.ParametersOrBuilder getSchedulerParametersOrBuilder() {
    return getSchedulerParameters();
  }

  public static final int GRADIENT_PARAMETERS_FIELD_NUMBER = 5;
  private com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters gradientParameters_;
  /**
   * <pre>
   * Gradient parameters for the controller.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
   * @return Whether the gradientParameters field is set.
   */
  @java.lang.Override
  public boolean hasGradientParameters() {
    return gradientParameters_ != null;
  }
  /**
   * <pre>
   * Gradient parameters for the controller.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
   * @return The gradientParameters.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters getGradientParameters() {
    return gradientParameters_ == null ? com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.getDefaultInstance() : gradientParameters_;
  }
  /**
   * <pre>
   * Gradient parameters for the controller.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.GradientController.ParametersOrBuilder getGradientParametersOrBuilder() {
    return getGradientParameters();
  }

  public static final int MAX_LOAD_MULTIPLIER_FIELD_NUMBER = 6;
  private double maxLoadMultiplier_;
  /**
   * <pre>
   * Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.
   * </pre>
   *
   * <code>double max_load_multiplier = 6 [json_name = "maxLoadMultiplier"];</code>
   * @return The maxLoadMultiplier.
   */
  @java.lang.Override
  public double getMaxLoadMultiplier() {
    return maxLoadMultiplier_;
  }

  public static final int LOAD_MULTIPLIER_LINEAR_INCREMENT_FIELD_NUMBER = 7;
  private double loadMultiplierLinearIncrement_;
  /**
   * <pre>
   * Linear increment to load multiplier in each execution tick when the system is not in overloaded state.
   * </pre>
   *
   * <code>double load_multiplier_linear_increment = 7 [json_name = "loadMultiplierLinearIncrement"];</code>
   * @return The loadMultiplierLinearIncrement.
   */
  @java.lang.Override
  public double getLoadMultiplierLinearIncrement() {
    return loadMultiplierLinearIncrement_;
  }

  public static final int ALERTER_PARAMETERS_FIELD_NUMBER = 8;
  private com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters alerterParameters_;
  /**
   * <pre>
   * Configuration for embedded alerter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
   * @return Whether the alerterParameters field is set.
   */
  @java.lang.Override
  public boolean hasAlerterParameters() {
    return alerterParameters_ != null;
  }
  /**
   * <pre>
   * Configuration for embedded alerter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
   * @return The alerterParameters.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters getAlerterParameters() {
    return alerterParameters_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.getDefaultInstance() : alerterParameters_;
  }
  /**
   * <pre>
   * Configuration for embedded alerter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Alerter.ParametersOrBuilder getAlerterParametersOrBuilder() {
    return getAlerterParameters();
  }

  public static final int DYNAMIC_CONFIG_KEY_FIELD_NUMBER = 9;
  private volatile java.lang.Object dynamicConfigKey_;
  /**
   * <pre>
   * Configuration key for load actuation.
   * </pre>
   *
   * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
   * @return The dynamicConfigKey.
   */
  @java.lang.Override
  public java.lang.String getDynamicConfigKey() {
    java.lang.Object ref = dynamicConfigKey_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      dynamicConfigKey_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Configuration key for load actuation.
   * </pre>
   *
   * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
   * @return The bytes for dynamicConfigKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDynamicConfigKeyBytes() {
    java.lang.Object ref = dynamicConfigKey_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      dynamicConfigKey_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DEFAULT_CONFIG_FIELD_NUMBER = 10;
  private com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig defaultConfig_;
  /**
   * <pre>
   * Default configuration.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
   * @return Whether the defaultConfig field is set.
   */
  @java.lang.Override
  public boolean hasDefaultConfig() {
    return defaultConfig_ != null;
  }
  /**
   * <pre>
   * Default configuration.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
   * @return The defaultConfig.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig getDefaultConfig() {
    return defaultConfig_ == null ? com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.getDefaultInstance() : defaultConfig_;
  }
  /**
   * <pre>
   * Default configuration.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfigOrBuilder getDefaultConfigOrBuilder() {
    return getDefaultConfig();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (inPorts_ != null) {
      output.writeMessage(1, getInPorts());
    }
    if (outPorts_ != null) {
      output.writeMessage(2, getOutPorts());
    }
    if (flowSelector_ != null) {
      output.writeMessage(3, getFlowSelector());
    }
    if (schedulerParameters_ != null) {
      output.writeMessage(4, getSchedulerParameters());
    }
    if (gradientParameters_ != null) {
      output.writeMessage(5, getGradientParameters());
    }
    if (java.lang.Double.doubleToRawLongBits(maxLoadMultiplier_) != 0) {
      output.writeDouble(6, maxLoadMultiplier_);
    }
    if (java.lang.Double.doubleToRawLongBits(loadMultiplierLinearIncrement_) != 0) {
      output.writeDouble(7, loadMultiplierLinearIncrement_);
    }
    if (alerterParameters_ != null) {
      output.writeMessage(8, getAlerterParameters());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(dynamicConfigKey_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 9, dynamicConfigKey_);
    }
    if (defaultConfig_ != null) {
      output.writeMessage(10, getDefaultConfig());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (inPorts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInPorts());
    }
    if (outPorts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getOutPorts());
    }
    if (flowSelector_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getFlowSelector());
    }
    if (schedulerParameters_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getSchedulerParameters());
    }
    if (gradientParameters_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getGradientParameters());
    }
    if (java.lang.Double.doubleToRawLongBits(maxLoadMultiplier_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(6, maxLoadMultiplier_);
    }
    if (java.lang.Double.doubleToRawLongBits(loadMultiplierLinearIncrement_) != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeDoubleSize(7, loadMultiplierLinearIncrement_);
    }
    if (alerterParameters_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getAlerterParameters());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(dynamicConfigKey_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, dynamicConfigKey_);
    }
    if (defaultConfig_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getDefaultConfig());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController other = (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) obj;

    if (hasInPorts() != other.hasInPorts()) return false;
    if (hasInPorts()) {
      if (!getInPorts()
          .equals(other.getInPorts())) return false;
    }
    if (hasOutPorts() != other.hasOutPorts()) return false;
    if (hasOutPorts()) {
      if (!getOutPorts()
          .equals(other.getOutPorts())) return false;
    }
    if (hasFlowSelector() != other.hasFlowSelector()) return false;
    if (hasFlowSelector()) {
      if (!getFlowSelector()
          .equals(other.getFlowSelector())) return false;
    }
    if (hasSchedulerParameters() != other.hasSchedulerParameters()) return false;
    if (hasSchedulerParameters()) {
      if (!getSchedulerParameters()
          .equals(other.getSchedulerParameters())) return false;
    }
    if (hasGradientParameters() != other.hasGradientParameters()) return false;
    if (hasGradientParameters()) {
      if (!getGradientParameters()
          .equals(other.getGradientParameters())) return false;
    }
    if (java.lang.Double.doubleToLongBits(getMaxLoadMultiplier())
        != java.lang.Double.doubleToLongBits(
            other.getMaxLoadMultiplier())) return false;
    if (java.lang.Double.doubleToLongBits(getLoadMultiplierLinearIncrement())
        != java.lang.Double.doubleToLongBits(
            other.getLoadMultiplierLinearIncrement())) return false;
    if (hasAlerterParameters() != other.hasAlerterParameters()) return false;
    if (hasAlerterParameters()) {
      if (!getAlerterParameters()
          .equals(other.getAlerterParameters())) return false;
    }
    if (!getDynamicConfigKey()
        .equals(other.getDynamicConfigKey())) return false;
    if (hasDefaultConfig() != other.hasDefaultConfig()) return false;
    if (hasDefaultConfig()) {
      if (!getDefaultConfig()
          .equals(other.getDefaultConfig())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInPorts()) {
      hash = (37 * hash) + IN_PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getInPorts().hashCode();
    }
    if (hasOutPorts()) {
      hash = (37 * hash) + OUT_PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getOutPorts().hashCode();
    }
    if (hasFlowSelector()) {
      hash = (37 * hash) + FLOW_SELECTOR_FIELD_NUMBER;
      hash = (53 * hash) + getFlowSelector().hashCode();
    }
    if (hasSchedulerParameters()) {
      hash = (37 * hash) + SCHEDULER_PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + getSchedulerParameters().hashCode();
    }
    if (hasGradientParameters()) {
      hash = (37 * hash) + GRADIENT_PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + getGradientParameters().hashCode();
    }
    hash = (37 * hash) + MAX_LOAD_MULTIPLIER_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getMaxLoadMultiplier()));
    hash = (37 * hash) + LOAD_MULTIPLIER_LINEAR_INCREMENT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        java.lang.Double.doubleToLongBits(getLoadMultiplierLinearIncrement()));
    if (hasAlerterParameters()) {
      hash = (37 * hash) + ALERTER_PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + getAlerterParameters().hashCode();
    }
    hash = (37 * hash) + DYNAMIC_CONFIG_KEY_FIELD_NUMBER;
    hash = (53 * hash) + getDynamicConfigKey().hashCode();
    if (hasDefaultConfig()) {
      hash = (37 * hash) + DEFAULT_CONFIG_FIELD_NUMBER;
      hash = (53 * hash) + getDefaultConfig().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * High level concurrency control component. Baselines a signal via exponential moving average and applies concurrency limits based on deviation of signal from the baseline. Internally implemented as a nested circuit.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.AIMDConcurrencyController}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.AIMDConcurrencyController)
      com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyControllerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.class, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inPortsBuilder_ == null) {
        inPorts_ = null;
      } else {
        inPorts_ = null;
        inPortsBuilder_ = null;
      }
      if (outPortsBuilder_ == null) {
        outPorts_ = null;
      } else {
        outPorts_ = null;
        outPortsBuilder_ = null;
      }
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = null;
      } else {
        flowSelector_ = null;
        flowSelectorBuilder_ = null;
      }
      if (schedulerParametersBuilder_ == null) {
        schedulerParameters_ = null;
      } else {
        schedulerParameters_ = null;
        schedulerParametersBuilder_ = null;
      }
      if (gradientParametersBuilder_ == null) {
        gradientParameters_ = null;
      } else {
        gradientParameters_ = null;
        gradientParametersBuilder_ = null;
      }
      maxLoadMultiplier_ = 0D;

      loadMultiplierLinearIncrement_ = 0D;

      if (alerterParametersBuilder_ == null) {
        alerterParameters_ = null;
      } else {
        alerterParameters_ = null;
        alerterParametersBuilder_ = null;
      }
      dynamicConfigKey_ = "";

      if (defaultConfigBuilder_ == null) {
        defaultConfig_ = null;
      } else {
        defaultConfig_ = null;
        defaultConfigBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_AIMDConcurrencyController_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController build() {
      com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController result = new com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController(this);
      if (inPortsBuilder_ == null) {
        result.inPorts_ = inPorts_;
      } else {
        result.inPorts_ = inPortsBuilder_.build();
      }
      if (outPortsBuilder_ == null) {
        result.outPorts_ = outPorts_;
      } else {
        result.outPorts_ = outPortsBuilder_.build();
      }
      if (flowSelectorBuilder_ == null) {
        result.flowSelector_ = flowSelector_;
      } else {
        result.flowSelector_ = flowSelectorBuilder_.build();
      }
      if (schedulerParametersBuilder_ == null) {
        result.schedulerParameters_ = schedulerParameters_;
      } else {
        result.schedulerParameters_ = schedulerParametersBuilder_.build();
      }
      if (gradientParametersBuilder_ == null) {
        result.gradientParameters_ = gradientParameters_;
      } else {
        result.gradientParameters_ = gradientParametersBuilder_.build();
      }
      result.maxLoadMultiplier_ = maxLoadMultiplier_;
      result.loadMultiplierLinearIncrement_ = loadMultiplierLinearIncrement_;
      if (alerterParametersBuilder_ == null) {
        result.alerterParameters_ = alerterParameters_;
      } else {
        result.alerterParameters_ = alerterParametersBuilder_.build();
      }
      result.dynamicConfigKey_ = dynamicConfigKey_;
      if (defaultConfigBuilder_ == null) {
        result.defaultConfig_ = defaultConfig_;
      } else {
        result.defaultConfig_ = defaultConfigBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance()) return this;
      if (other.hasInPorts()) {
        mergeInPorts(other.getInPorts());
      }
      if (other.hasOutPorts()) {
        mergeOutPorts(other.getOutPorts());
      }
      if (other.hasFlowSelector()) {
        mergeFlowSelector(other.getFlowSelector());
      }
      if (other.hasSchedulerParameters()) {
        mergeSchedulerParameters(other.getSchedulerParameters());
      }
      if (other.hasGradientParameters()) {
        mergeGradientParameters(other.getGradientParameters());
      }
      if (other.getMaxLoadMultiplier() != 0D) {
        setMaxLoadMultiplier(other.getMaxLoadMultiplier());
      }
      if (other.getLoadMultiplierLinearIncrement() != 0D) {
        setLoadMultiplierLinearIncrement(other.getLoadMultiplierLinearIncrement());
      }
      if (other.hasAlerterParameters()) {
        mergeAlerterParameters(other.getAlerterParameters());
      }
      if (!other.getDynamicConfigKey().isEmpty()) {
        dynamicConfigKey_ = other.dynamicConfigKey_;
        onChanged();
      }
      if (other.hasDefaultConfig()) {
        mergeDefaultConfig(other.getDefaultConfig());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins inPorts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.InsOrBuilder> inPortsBuilder_;
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     * @return Whether the inPorts field is set.
     */
    public boolean hasInPorts() {
      return inPortsBuilder_ != null || inPorts_ != null;
    }
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     * @return The inPorts.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins getInPorts() {
      if (inPortsBuilder_ == null) {
        return inPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.getDefaultInstance() : inPorts_;
      } else {
        return inPortsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder setInPorts(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins value) {
      if (inPortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        inPorts_ = value;
        onChanged();
      } else {
        inPortsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder setInPorts(
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.Builder builderForValue) {
      if (inPortsBuilder_ == null) {
        inPorts_ = builderForValue.build();
        onChanged();
      } else {
        inPortsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder mergeInPorts(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins value) {
      if (inPortsBuilder_ == null) {
        if (inPorts_ != null) {
          inPorts_ =
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.newBuilder(inPorts_).mergeFrom(value).buildPartial();
        } else {
          inPorts_ = value;
        }
        onChanged();
      } else {
        inPortsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder clearInPorts() {
      if (inPortsBuilder_ == null) {
        inPorts_ = null;
        onChanged();
      } else {
        inPorts_ = null;
        inPortsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.Builder getInPortsBuilder() {
      
      onChanged();
      return getInPortsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.InsOrBuilder getInPortsOrBuilder() {
      if (inPortsBuilder_ != null) {
        return inPortsBuilder_.getMessageOrBuilder();
      } else {
        return inPorts_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.getDefaultInstance() : inPorts_;
      }
    }
    /**
     * <pre>
     * Input ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.InsOrBuilder> 
        getInPortsFieldBuilder() {
      if (inPortsBuilder_ == null) {
        inPortsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.InsOrBuilder>(
                getInPorts(),
                getParentForChildren(),
                isClean());
        inPorts_ = null;
      }
      return inPortsBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs outPorts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.OutsOrBuilder> outPortsBuilder_;
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     * @return Whether the outPorts field is set.
     */
    public boolean hasOutPorts() {
      return outPortsBuilder_ != null || outPorts_ != null;
    }
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     * @return The outPorts.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs getOutPorts() {
      if (outPortsBuilder_ == null) {
        return outPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.getDefaultInstance() : outPorts_;
      } else {
        return outPortsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder setOutPorts(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs value) {
      if (outPortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outPorts_ = value;
        onChanged();
      } else {
        outPortsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder setOutPorts(
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.Builder builderForValue) {
      if (outPortsBuilder_ == null) {
        outPorts_ = builderForValue.build();
        onChanged();
      } else {
        outPortsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder mergeOutPorts(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs value) {
      if (outPortsBuilder_ == null) {
        if (outPorts_ != null) {
          outPorts_ =
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.newBuilder(outPorts_).mergeFrom(value).buildPartial();
        } else {
          outPorts_ = value;
        }
        onChanged();
      } else {
        outPortsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder clearOutPorts() {
      if (outPortsBuilder_ == null) {
        outPorts_ = null;
        onChanged();
      } else {
        outPorts_ = null;
        outPortsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.Builder getOutPortsBuilder() {
      
      onChanged();
      return getOutPortsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.OutsOrBuilder getOutPortsOrBuilder() {
      if (outPortsBuilder_ != null) {
        return outPortsBuilder_.getMessageOrBuilder();
      } else {
        return outPorts_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.getDefaultInstance() : outPorts_;
      }
    }
    /**
     * <pre>
     * Output ports for the AIMDConcurrencyController component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.OutsOrBuilder> 
        getOutPortsFieldBuilder() {
      if (outPortsBuilder_ == null) {
        outPortsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.OutsOrBuilder>(
                getOutPorts(),
                getParentForChildren(),
                isClean());
        outPorts_ = null;
      }
      return outPortsBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.FlowSelector flowSelector_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder> flowSelectorBuilder_;
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     * @return Whether the flowSelector field is set.
     */
    public boolean hasFlowSelector() {
      return flowSelectorBuilder_ != null || flowSelector_ != null;
    }
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     * @return The flowSelector.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector getFlowSelector() {
      if (flowSelectorBuilder_ == null) {
        return flowSelector_ == null ? com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
      } else {
        return flowSelectorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     */
    public Builder setFlowSelector(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector value) {
      if (flowSelectorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        flowSelector_ = value;
        onChanged();
      } else {
        flowSelectorBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     */
    public Builder setFlowSelector(
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder builderForValue) {
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = builderForValue.build();
        onChanged();
      } else {
        flowSelectorBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     */
    public Builder mergeFlowSelector(com.fluxninja.generated.aperture.policy.language.v1.FlowSelector value) {
      if (flowSelectorBuilder_ == null) {
        if (flowSelector_ != null) {
          flowSelector_ =
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.newBuilder(flowSelector_).mergeFrom(value).buildPartial();
        } else {
          flowSelector_ = value;
        }
        onChanged();
      } else {
        flowSelectorBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     */
    public Builder clearFlowSelector() {
      if (flowSelectorBuilder_ == null) {
        flowSelector_ = null;
        onChanged();
      } else {
        flowSelector_ = null;
        flowSelectorBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder getFlowSelectorBuilder() {
      
      onChanged();
      return getFlowSelectorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder getFlowSelectorOrBuilder() {
      if (flowSelectorBuilder_ != null) {
        return flowSelectorBuilder_.getMessageOrBuilder();
      } else {
        return flowSelector_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.getDefaultInstance() : flowSelector_;
      }
    }
    /**
     * <pre>
     * Flow Selector decides the service and flows at which the concurrency limiter is applied.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder> 
        getFlowSelectorFieldBuilder() {
      if (flowSelectorBuilder_ == null) {
        flowSelectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FlowSelector, com.fluxninja.generated.aperture.policy.language.v1.FlowSelector.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder>(
                getFlowSelector(),
                getParentForChildren(),
                isClean());
        flowSelector_ = null;
      }
      return flowSelectorBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters schedulerParameters_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters, com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.Scheduler.ParametersOrBuilder> schedulerParametersBuilder_;
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     * @return Whether the schedulerParameters field is set.
     */
    public boolean hasSchedulerParameters() {
      return schedulerParametersBuilder_ != null || schedulerParameters_ != null;
    }
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     * @return The schedulerParameters.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters getSchedulerParameters() {
      if (schedulerParametersBuilder_ == null) {
        return schedulerParameters_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.getDefaultInstance() : schedulerParameters_;
      } else {
        return schedulerParametersBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     */
    public Builder setSchedulerParameters(com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters value) {
      if (schedulerParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        schedulerParameters_ = value;
        onChanged();
      } else {
        schedulerParametersBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     */
    public Builder setSchedulerParameters(
        com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.Builder builderForValue) {
      if (schedulerParametersBuilder_ == null) {
        schedulerParameters_ = builderForValue.build();
        onChanged();
      } else {
        schedulerParametersBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     */
    public Builder mergeSchedulerParameters(com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters value) {
      if (schedulerParametersBuilder_ == null) {
        if (schedulerParameters_ != null) {
          schedulerParameters_ =
            com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.newBuilder(schedulerParameters_).mergeFrom(value).buildPartial();
        } else {
          schedulerParameters_ = value;
        }
        onChanged();
      } else {
        schedulerParametersBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     */
    public Builder clearSchedulerParameters() {
      if (schedulerParametersBuilder_ == null) {
        schedulerParameters_ = null;
        onChanged();
      } else {
        schedulerParameters_ = null;
        schedulerParametersBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.Builder getSchedulerParametersBuilder() {
      
      onChanged();
      return getSchedulerParametersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Scheduler.ParametersOrBuilder getSchedulerParametersOrBuilder() {
      if (schedulerParametersBuilder_ != null) {
        return schedulerParametersBuilder_.getMessageOrBuilder();
      } else {
        return schedulerParameters_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.getDefaultInstance() : schedulerParameters_;
      }
    }
    /**
     * <pre>
     * Scheduler parameters.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters, com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.Scheduler.ParametersOrBuilder> 
        getSchedulerParametersFieldBuilder() {
      if (schedulerParametersBuilder_ == null) {
        schedulerParametersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters, com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.Scheduler.ParametersOrBuilder>(
                getSchedulerParameters(),
                getParentForChildren(),
                isClean());
        schedulerParameters_ = null;
      }
      return schedulerParametersBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters gradientParameters_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters, com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.GradientController.ParametersOrBuilder> gradientParametersBuilder_;
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     * @return Whether the gradientParameters field is set.
     */
    public boolean hasGradientParameters() {
      return gradientParametersBuilder_ != null || gradientParameters_ != null;
    }
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     * @return The gradientParameters.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters getGradientParameters() {
      if (gradientParametersBuilder_ == null) {
        return gradientParameters_ == null ? com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.getDefaultInstance() : gradientParameters_;
      } else {
        return gradientParametersBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     */
    public Builder setGradientParameters(com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters value) {
      if (gradientParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        gradientParameters_ = value;
        onChanged();
      } else {
        gradientParametersBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     */
    public Builder setGradientParameters(
        com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.Builder builderForValue) {
      if (gradientParametersBuilder_ == null) {
        gradientParameters_ = builderForValue.build();
        onChanged();
      } else {
        gradientParametersBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     */
    public Builder mergeGradientParameters(com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters value) {
      if (gradientParametersBuilder_ == null) {
        if (gradientParameters_ != null) {
          gradientParameters_ =
            com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.newBuilder(gradientParameters_).mergeFrom(value).buildPartial();
        } else {
          gradientParameters_ = value;
        }
        onChanged();
      } else {
        gradientParametersBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     */
    public Builder clearGradientParameters() {
      if (gradientParametersBuilder_ == null) {
        gradientParameters_ = null;
        onChanged();
      } else {
        gradientParameters_ = null;
        gradientParametersBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.Builder getGradientParametersBuilder() {
      
      onChanged();
      return getGradientParametersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.GradientController.ParametersOrBuilder getGradientParametersOrBuilder() {
      if (gradientParametersBuilder_ != null) {
        return gradientParametersBuilder_.getMessageOrBuilder();
      } else {
        return gradientParameters_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.getDefaultInstance() : gradientParameters_;
      }
    }
    /**
     * <pre>
     * Gradient parameters for the controller.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters, com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.GradientController.ParametersOrBuilder> 
        getGradientParametersFieldBuilder() {
      if (gradientParametersBuilder_ == null) {
        gradientParametersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters, com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.GradientController.ParametersOrBuilder>(
                getGradientParameters(),
                getParentForChildren(),
                isClean());
        gradientParameters_ = null;
      }
      return gradientParametersBuilder_;
    }

    private double maxLoadMultiplier_ ;
    /**
     * <pre>
     * Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.
     * </pre>
     *
     * <code>double max_load_multiplier = 6 [json_name = "maxLoadMultiplier"];</code>
     * @return The maxLoadMultiplier.
     */
    @java.lang.Override
    public double getMaxLoadMultiplier() {
      return maxLoadMultiplier_;
    }
    /**
     * <pre>
     * Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.
     * </pre>
     *
     * <code>double max_load_multiplier = 6 [json_name = "maxLoadMultiplier"];</code>
     * @param value The maxLoadMultiplier to set.
     * @return This builder for chaining.
     */
    public Builder setMaxLoadMultiplier(double value) {
      
      maxLoadMultiplier_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.
     * </pre>
     *
     * <code>double max_load_multiplier = 6 [json_name = "maxLoadMultiplier"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxLoadMultiplier() {
      
      maxLoadMultiplier_ = 0D;
      onChanged();
      return this;
    }

    private double loadMultiplierLinearIncrement_ ;
    /**
     * <pre>
     * Linear increment to load multiplier in each execution tick when the system is not in overloaded state.
     * </pre>
     *
     * <code>double load_multiplier_linear_increment = 7 [json_name = "loadMultiplierLinearIncrement"];</code>
     * @return The loadMultiplierLinearIncrement.
     */
    @java.lang.Override
    public double getLoadMultiplierLinearIncrement() {
      return loadMultiplierLinearIncrement_;
    }
    /**
     * <pre>
     * Linear increment to load multiplier in each execution tick when the system is not in overloaded state.
     * </pre>
     *
     * <code>double load_multiplier_linear_increment = 7 [json_name = "loadMultiplierLinearIncrement"];</code>
     * @param value The loadMultiplierLinearIncrement to set.
     * @return This builder for chaining.
     */
    public Builder setLoadMultiplierLinearIncrement(double value) {
      
      loadMultiplierLinearIncrement_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Linear increment to load multiplier in each execution tick when the system is not in overloaded state.
     * </pre>
     *
     * <code>double load_multiplier_linear_increment = 7 [json_name = "loadMultiplierLinearIncrement"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLoadMultiplierLinearIncrement() {
      
      loadMultiplierLinearIncrement_ = 0D;
      onChanged();
      return this;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters alerterParameters_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters, com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.Alerter.ParametersOrBuilder> alerterParametersBuilder_;
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     * @return Whether the alerterParameters field is set.
     */
    public boolean hasAlerterParameters() {
      return alerterParametersBuilder_ != null || alerterParameters_ != null;
    }
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     * @return The alerterParameters.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters getAlerterParameters() {
      if (alerterParametersBuilder_ == null) {
        return alerterParameters_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.getDefaultInstance() : alerterParameters_;
      } else {
        return alerterParametersBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     */
    public Builder setAlerterParameters(com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters value) {
      if (alerterParametersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        alerterParameters_ = value;
        onChanged();
      } else {
        alerterParametersBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     */
    public Builder setAlerterParameters(
        com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.Builder builderForValue) {
      if (alerterParametersBuilder_ == null) {
        alerterParameters_ = builderForValue.build();
        onChanged();
      } else {
        alerterParametersBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     */
    public Builder mergeAlerterParameters(com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters value) {
      if (alerterParametersBuilder_ == null) {
        if (alerterParameters_ != null) {
          alerterParameters_ =
            com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.newBuilder(alerterParameters_).mergeFrom(value).buildPartial();
        } else {
          alerterParameters_ = value;
        }
        onChanged();
      } else {
        alerterParametersBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     */
    public Builder clearAlerterParameters() {
      if (alerterParametersBuilder_ == null) {
        alerterParameters_ = null;
        onChanged();
      } else {
        alerterParameters_ = null;
        alerterParametersBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.Builder getAlerterParametersBuilder() {
      
      onChanged();
      return getAlerterParametersFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Alerter.ParametersOrBuilder getAlerterParametersOrBuilder() {
      if (alerterParametersBuilder_ != null) {
        return alerterParametersBuilder_.getMessageOrBuilder();
      } else {
        return alerterParameters_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.getDefaultInstance() : alerterParameters_;
      }
    }
    /**
     * <pre>
     * Configuration for embedded alerter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters, com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.Alerter.ParametersOrBuilder> 
        getAlerterParametersFieldBuilder() {
      if (alerterParametersBuilder_ == null) {
        alerterParametersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters, com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters.Builder, com.fluxninja.generated.aperture.policy.language.v1.Alerter.ParametersOrBuilder>(
                getAlerterParameters(),
                getParentForChildren(),
                isClean());
        alerterParameters_ = null;
      }
      return alerterParametersBuilder_;
    }

    private java.lang.Object dynamicConfigKey_ = "";
    /**
     * <pre>
     * Configuration key for load actuation.
     * </pre>
     *
     * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
     * @return The dynamicConfigKey.
     */
    public java.lang.String getDynamicConfigKey() {
      java.lang.Object ref = dynamicConfigKey_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        dynamicConfigKey_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Configuration key for load actuation.
     * </pre>
     *
     * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
     * @return The bytes for dynamicConfigKey.
     */
    public com.google.protobuf.ByteString
        getDynamicConfigKeyBytes() {
      java.lang.Object ref = dynamicConfigKey_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        dynamicConfigKey_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Configuration key for load actuation.
     * </pre>
     *
     * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
     * @param value The dynamicConfigKey to set.
     * @return This builder for chaining.
     */
    public Builder setDynamicConfigKey(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      dynamicConfigKey_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration key for load actuation.
     * </pre>
     *
     * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDynamicConfigKey() {
      
      dynamicConfigKey_ = getDefaultInstance().getDynamicConfigKey();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Configuration key for load actuation.
     * </pre>
     *
     * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
     * @param value The bytes for dynamicConfigKey to set.
     * @return This builder for chaining.
     */
    public Builder setDynamicConfigKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      dynamicConfigKey_ = value;
      onChanged();
      return this;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig defaultConfig_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig, com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.Builder, com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfigOrBuilder> defaultConfigBuilder_;
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     * @return Whether the defaultConfig field is set.
     */
    public boolean hasDefaultConfig() {
      return defaultConfigBuilder_ != null || defaultConfig_ != null;
    }
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     * @return The defaultConfig.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig getDefaultConfig() {
      if (defaultConfigBuilder_ == null) {
        return defaultConfig_ == null ? com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.getDefaultInstance() : defaultConfig_;
      } else {
        return defaultConfigBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     */
    public Builder setDefaultConfig(com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig value) {
      if (defaultConfigBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        defaultConfig_ = value;
        onChanged();
      } else {
        defaultConfigBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     */
    public Builder setDefaultConfig(
        com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.Builder builderForValue) {
      if (defaultConfigBuilder_ == null) {
        defaultConfig_ = builderForValue.build();
        onChanged();
      } else {
        defaultConfigBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     */
    public Builder mergeDefaultConfig(com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig value) {
      if (defaultConfigBuilder_ == null) {
        if (defaultConfig_ != null) {
          defaultConfig_ =
            com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.newBuilder(defaultConfig_).mergeFrom(value).buildPartial();
        } else {
          defaultConfig_ = value;
        }
        onChanged();
      } else {
        defaultConfigBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     */
    public Builder clearDefaultConfig() {
      if (defaultConfigBuilder_ == null) {
        defaultConfig_ = null;
        onChanged();
      } else {
        defaultConfig_ = null;
        defaultConfigBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.Builder getDefaultConfigBuilder() {
      
      onChanged();
      return getDefaultConfigFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfigOrBuilder getDefaultConfigOrBuilder() {
      if (defaultConfigBuilder_ != null) {
        return defaultConfigBuilder_.getMessageOrBuilder();
      } else {
        return defaultConfig_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.getDefaultInstance() : defaultConfig_;
      }
    }
    /**
     * <pre>
     * Default configuration.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig, com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.Builder, com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfigOrBuilder> 
        getDefaultConfigFieldBuilder() {
      if (defaultConfigBuilder_ == null) {
        defaultConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig, com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig.Builder, com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfigOrBuilder>(
                getDefaultConfig(),
                getParentForChildren(),
                isClean());
        defaultConfig_ = null;
      }
      return defaultConfigBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.AIMDConcurrencyController)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.AIMDConcurrencyController)
  private static final com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AIMDConcurrencyController>
      PARSER = new com.google.protobuf.AbstractParser<AIMDConcurrencyController>() {
    @java.lang.Override
    public AIMDConcurrencyController parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new AIMDConcurrencyController(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<AIMDConcurrencyController> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AIMDConcurrencyController> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

