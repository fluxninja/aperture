// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Computational block that forms the circuit
 * :::info
 * See also [Components overview](/concepts/policy/circuit.md#components).
 * :::
 * Signals flow into the components via input ports and results are emitted on output ports.
 * Components are wired to each other based on signal names forming an execution graph of the circuit.
 * :::note
 * Loops are broken by the runtime at the earliest component index that is part of the loop.
 * The looped signals are saved in the tick they are generated and served in the subsequent tick.
 * :::
 * There are three categories of components:
 * * "source" components – they take some sort of input from "the real world" and output
 *   a signal based on this input. Example: [PromQL](#prom-q-l). In the UI
 *   they're represented by green color.
 * * signal processor components – "pure" components that don't interact with the "real world".
 *   Examples: [GradientController](#gradient-controller), [Max](#max).
 *   :::note
 *   Signal processor components's output can depend on their internal state, in addition to the inputs.
 *   Eg. see the [Exponential Moving Average filter](#e-m-a).
 *   :::
 * * "sink" components – they affect the real world.
 *   [ConcurrencyLimiter.LoadActuator](#concurrency-limiter) and [RateLimiter](#rate-limiter).
 *   In the UI, represented by orange color.  Sink components usually come in pairs with a
 *   "sources" component which emits a feedback signal, like
 *   `accepted_concurrency` emitted by ConcurrencyLimiter.Scheduler.
 * :::tip
 * Sometimes you may want to use a constant value as one of component's inputs.
 * You can create an input port containing the constant value instead of being connected to a signal.
 * To do so, use the [InPort](#in_port)'s .withConstantSignal(constant_signal) method.
 * You can also use it to provide special math values such as NaN and +- Inf.
 * If You need to provide the same constant signal to multiple components,
 * You can use the [Variable](#variable) component.
 * :::
 * See also [Policy](#policy) for a higher-level explanation of circuits.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.Component}
 */
public final class Component extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.Component)
    ComponentOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Component.newBuilder() to construct.
  private Component(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Component() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Component();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Component(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.GradientController.Builder subBuilder = null;
            if (componentCase_ == 1) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.GradientController.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 1;
            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.EMA.Builder subBuilder = null;
            if (componentCase_ == 2) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.EMA) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.EMA.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.EMA) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 2;
            break;
          }
          case 26: {
            com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.Builder subBuilder = null;
            if (componentCase_ == 3) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 3;
            break;
          }
          case 34: {
            com.fluxninja.generated.aperture.policy.language.v1.Decider.Builder subBuilder = null;
            if (componentCase_ == 4) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Decider) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Decider.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Decider) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 4;
            break;
          }
          case 42: {
            com.fluxninja.generated.aperture.policy.language.v1.Switcher.Builder subBuilder = null;
            if (componentCase_ == 5) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Switcher.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 5;
            break;
          }
          case 74: {
            com.fluxninja.generated.aperture.policy.language.v1.Variable.Builder subBuilder = null;
            if (componentCase_ == 9) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Variable) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Variable.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Variable) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 9;
            break;
          }
          case 82: {
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Builder subBuilder = null;
            if (componentCase_ == 10) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 10;
            break;
          }
          case 90: {
            com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.Builder subBuilder = null;
            if (componentCase_ == 11) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 11;
            break;
          }
          case 98: {
            com.fluxninja.generated.aperture.policy.language.v1.Max.Builder subBuilder = null;
            if (componentCase_ == 12) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Max) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Max.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Max) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 12;
            break;
          }
          case 106: {
            com.fluxninja.generated.aperture.policy.language.v1.Min.Builder subBuilder = null;
            if (componentCase_ == 13) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Min) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Min.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Min) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 13;
            break;
          }
          case 114: {
            com.fluxninja.generated.aperture.policy.language.v1.FirstValid.Builder subBuilder = null;
            if (componentCase_ == 14) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FirstValid.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 14;
            break;
          }
          case 122: {
            com.fluxninja.generated.aperture.policy.language.v1.Alerter.Builder subBuilder = null;
            if (componentCase_ == 15) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Alerter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 15;
            break;
          }
          case 130: {
            com.fluxninja.generated.aperture.policy.language.v1.Integrator.Builder subBuilder = null;
            if (componentCase_ == 16) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Integrator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 16;
            break;
          }
          case 138: {
            com.fluxninja.generated.aperture.policy.language.v1.Differentiator.Builder subBuilder = null;
            if (componentCase_ == 17) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Differentiator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 17;
            break;
          }
          case 154: {
            com.fluxninja.generated.aperture.policy.language.v1.And.Builder subBuilder = null;
            if (componentCase_ == 19) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.And) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.And.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.And) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 19;
            break;
          }
          case 162: {
            com.fluxninja.generated.aperture.policy.language.v1.Or.Builder subBuilder = null;
            if (componentCase_ == 20) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Or) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Or.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Or) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 20;
            break;
          }
          case 170: {
            com.fluxninja.generated.aperture.policy.language.v1.Inverter.Builder subBuilder = null;
            if (componentCase_ == 21) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Inverter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 21;
            break;
          }
          case 178: {
            com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.Builder subBuilder = null;
            if (componentCase_ == 22) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 22;
            break;
          }
          case 186: {
            com.fluxninja.generated.aperture.policy.language.v1.Holder.Builder subBuilder = null;
            if (componentCase_ == 23) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Holder) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Holder.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Holder) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 23;
            break;
          }
          case 194: {
            com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.Builder subBuilder = null;
            if (componentCase_ == 24) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 24;
            break;
          }
          case 202: {
            com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.Builder subBuilder = null;
            if (componentCase_ == 25) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 25;
            break;
          }
          case 210: {
            com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.Builder subBuilder = null;
            if (componentCase_ == 26) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 26;
            break;
          }
          case 802: {
            com.fluxninja.generated.aperture.policy.language.v1.Query.Builder subBuilder = null;
            if (componentCase_ == 100) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.Query) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Query.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Query) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 100;
            break;
          }
          case 810: {
            com.fluxninja.generated.aperture.policy.language.v1.FlowControl.Builder subBuilder = null;
            if (componentCase_ == 101) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.FlowControl.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 101;
            break;
          }
          case 818: {
            com.fluxninja.generated.aperture.policy.language.v1.AutoScale.Builder subBuilder = null;
            if (componentCase_ == 102) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.AutoScale.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 102;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.Component.class, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder.class);
  }

  private int componentCase_ = 0;
  private java.lang.Object component_;
  public enum ComponentCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    GRADIENT_CONTROLLER(1),
    EMA(2),
    ARITHMETIC_COMBINATOR(3),
    DECIDER(4),
    SWITCHER(5),
    VARIABLE(9),
    UNARY_OPERATOR(10),
    EXTRAPOLATOR(11),
    MAX(12),
    MIN(13),
    FIRST_VALID(14),
    ALERTER(15),
    INTEGRATOR(16),
    DIFFERENTIATOR(17),
    AND(19),
    OR(20),
    INVERTER(21),
    PULSE_GENERATOR(22),
    HOLDER(23),
    NESTED_CIRCUIT(24),
    NESTED_SIGNAL_INGRESS(25),
    NESTED_SIGNAL_EGRESS(26),
    QUERY(100),
    FLOW_CONTROL(101),
    AUTO_SCALE(102),
    COMPONENT_NOT_SET(0);
    private final int value;
    private ComponentCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ComponentCase valueOf(int value) {
      return forNumber(value);
    }

    public static ComponentCase forNumber(int value) {
      switch (value) {
        case 1: return GRADIENT_CONTROLLER;
        case 2: return EMA;
        case 3: return ARITHMETIC_COMBINATOR;
        case 4: return DECIDER;
        case 5: return SWITCHER;
        case 9: return VARIABLE;
        case 10: return UNARY_OPERATOR;
        case 11: return EXTRAPOLATOR;
        case 12: return MAX;
        case 13: return MIN;
        case 14: return FIRST_VALID;
        case 15: return ALERTER;
        case 16: return INTEGRATOR;
        case 17: return DIFFERENTIATOR;
        case 19: return AND;
        case 20: return OR;
        case 21: return INVERTER;
        case 22: return PULSE_GENERATOR;
        case 23: return HOLDER;
        case 24: return NESTED_CIRCUIT;
        case 25: return NESTED_SIGNAL_INGRESS;
        case 26: return NESTED_SIGNAL_EGRESS;
        case 100: return QUERY;
        case 101: return FLOW_CONTROL;
        case 102: return AUTO_SCALE;
        case 0: return COMPONENT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ComponentCase
  getComponentCase() {
    return ComponentCase.forNumber(
        componentCase_);
  }

  public static final int GRADIENT_CONTROLLER_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   * @return Whether the gradientController field is set.
   */
  @java.lang.Override
  public boolean hasGradientController() {
    return componentCase_ == 1;
  }
  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   * @return The gradientController.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.GradientController getGradientController() {
    if (componentCase_ == 1) {
       return (com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.GradientController.getDefaultInstance();
  }
  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.GradientControllerOrBuilder getGradientControllerOrBuilder() {
    if (componentCase_ == 1) {
       return (com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.GradientController.getDefaultInstance();
  }

  public static final int EMA_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   * @return Whether the ema field is set.
   */
  @java.lang.Override
  public boolean hasEma() {
    return componentCase_ == 2;
  }
  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   * @return The ema.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.EMA getEma() {
    if (componentCase_ == 2) {
       return (com.fluxninja.generated.aperture.policy.language.v1.EMA) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.EMA.getDefaultInstance();
  }
  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.EMAOrBuilder getEmaOrBuilder() {
    if (componentCase_ == 2) {
       return (com.fluxninja.generated.aperture.policy.language.v1.EMA) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.EMA.getDefaultInstance();
  }

  public static final int ARITHMETIC_COMBINATOR_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   * @return Whether the arithmeticCombinator field is set.
   */
  @java.lang.Override
  public boolean hasArithmeticCombinator() {
    return componentCase_ == 3;
  }
  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   * @return The arithmeticCombinator.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator getArithmeticCombinator() {
    if (componentCase_ == 3) {
       return (com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
  }
  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder getArithmeticCombinatorOrBuilder() {
    if (componentCase_ == 3) {
       return (com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
  }

  public static final int DECIDER_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Decider emits the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   * @return Whether the decider field is set.
   */
  @java.lang.Override
  public boolean hasDecider() {
    return componentCase_ == 4;
  }
  /**
   * <pre>
   * Decider emits the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   * @return The decider.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Decider getDecider() {
    if (componentCase_ == 4) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Decider) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Decider.getDefaultInstance();
  }
  /**
   * <pre>
   * Decider emits the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.DeciderOrBuilder getDeciderOrBuilder() {
    if (componentCase_ == 4) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Decider) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Decider.getDefaultInstance();
  }

  public static final int SWITCHER_FIELD_NUMBER = 5;
  /**
   * <pre>
   * Switcher acts as a switch that emits one of the two signals based on third signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
   * @return Whether the switcher field is set.
   */
  @java.lang.Override
  public boolean hasSwitcher() {
    return componentCase_ == 5;
  }
  /**
   * <pre>
   * Switcher acts as a switch that emits one of the two signals based on third signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
   * @return The switcher.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Switcher getSwitcher() {
    if (componentCase_ == 5) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Switcher.getDefaultInstance();
  }
  /**
   * <pre>
   * Switcher acts as a switch that emits one of the two signals based on third signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.SwitcherOrBuilder getSwitcherOrBuilder() {
    if (componentCase_ == 5) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Switcher.getDefaultInstance();
  }

  public static final int VARIABLE_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Emits a variable signal which can be set to invalid.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
   * @return Whether the variable field is set.
   */
  @java.lang.Override
  public boolean hasVariable() {
    return componentCase_ == 9;
  }
  /**
   * <pre>
   * Emits a variable signal which can be set to invalid.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
   * @return The variable.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Variable getVariable() {
    if (componentCase_ == 9) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Variable) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Variable.getDefaultInstance();
  }
  /**
   * <pre>
   * Emits a variable signal which can be set to invalid.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.VariableOrBuilder getVariableOrBuilder() {
    if (componentCase_ == 9) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Variable) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Variable.getDefaultInstance();
  }

  public static final int UNARY_OPERATOR_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
   * @return Whether the unaryOperator field is set.
   */
  @java.lang.Override
  public boolean hasUnaryOperator() {
    return componentCase_ == 10;
  }
  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
   * @return The unaryOperator.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator getUnaryOperator() {
    if (componentCase_ == 10) {
       return (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance();
  }
  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperatorOrBuilder getUnaryOperatorOrBuilder() {
    if (componentCase_ == 10) {
       return (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance();
  }

  public static final int EXTRAPOLATOR_FIELD_NUMBER = 11;
  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
   * @return Whether the extrapolator field is set.
   */
  @java.lang.Override
  public boolean hasExtrapolator() {
    return componentCase_ == 11;
  }
  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
   * @return The extrapolator.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Extrapolator getExtrapolator() {
    if (componentCase_ == 11) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
  }
  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ExtrapolatorOrBuilder getExtrapolatorOrBuilder() {
    if (componentCase_ == 11) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
  }

  public static final int MAX_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Emits the maximum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
   * @return Whether the max field is set.
   */
  @java.lang.Override
  public boolean hasMax() {
    return componentCase_ == 12;
  }
  /**
   * <pre>
   * Emits the maximum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
   * @return The max.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Max getMax() {
    if (componentCase_ == 12) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Max) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Max.getDefaultInstance();
  }
  /**
   * <pre>
   * Emits the maximum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MaxOrBuilder getMaxOrBuilder() {
    if (componentCase_ == 12) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Max) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Max.getDefaultInstance();
  }

  public static final int MIN_FIELD_NUMBER = 13;
  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
   * @return Whether the min field is set.
   */
  @java.lang.Override
  public boolean hasMin() {
    return componentCase_ == 13;
  }
  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
   * @return The min.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Min getMin() {
    if (componentCase_ == 13) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Min) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Min.getDefaultInstance();
  }
  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MinOrBuilder getMinOrBuilder() {
    if (componentCase_ == 13) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Min) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Min.getDefaultInstance();
  }

  public static final int FIRST_VALID_FIELD_NUMBER = 14;
  /**
   * <pre>
   * Picks the first valid input signal and emits it.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
   * @return Whether the firstValid field is set.
   */
  @java.lang.Override
  public boolean hasFirstValid() {
    return componentCase_ == 14;
  }
  /**
   * <pre>
   * Picks the first valid input signal and emits it.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
   * @return The firstValid.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FirstValid getFirstValid() {
    if (componentCase_ == 14) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FirstValid.getDefaultInstance();
  }
  /**
   * <pre>
   * Picks the first valid input signal and emits it.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FirstValidOrBuilder getFirstValidOrBuilder() {
    if (componentCase_ == 14) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FirstValid.getDefaultInstance();
  }

  public static final int ALERTER_FIELD_NUMBER = 15;
  /**
   * <pre>
   * Alerter reacts to a signal and generates alert to send to alert manager.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
   * @return Whether the alerter field is set.
   */
  @java.lang.Override
  public boolean hasAlerter() {
    return componentCase_ == 15;
  }
  /**
   * <pre>
   * Alerter reacts to a signal and generates alert to send to alert manager.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
   * @return The alerter.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Alerter getAlerter() {
    if (componentCase_ == 15) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Alerter.getDefaultInstance();
  }
  /**
   * <pre>
   * Alerter reacts to a signal and generates alert to send to alert manager.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AlerterOrBuilder getAlerterOrBuilder() {
    if (componentCase_ == 15) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Alerter.getDefaultInstance();
  }

  public static final int INTEGRATOR_FIELD_NUMBER = 16;
  /**
   * <pre>
   * Accumulates sum of signal every tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
   * @return Whether the integrator field is set.
   */
  @java.lang.Override
  public boolean hasIntegrator() {
    return componentCase_ == 16;
  }
  /**
   * <pre>
   * Accumulates sum of signal every tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
   * @return The integrator.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Integrator getIntegrator() {
    if (componentCase_ == 16) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Integrator.getDefaultInstance();
  }
  /**
   * <pre>
   * Accumulates sum of signal every tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.IntegratorOrBuilder getIntegratorOrBuilder() {
    if (componentCase_ == 16) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Integrator.getDefaultInstance();
  }

  public static final int DIFFERENTIATOR_FIELD_NUMBER = 17;
  /**
   * <pre>
   * Differentiator calculates rate of change per tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
   * @return Whether the differentiator field is set.
   */
  @java.lang.Override
  public boolean hasDifferentiator() {
    return componentCase_ == 17;
  }
  /**
   * <pre>
   * Differentiator calculates rate of change per tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
   * @return The differentiator.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Differentiator getDifferentiator() {
    if (componentCase_ == 17) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Differentiator.getDefaultInstance();
  }
  /**
   * <pre>
   * Differentiator calculates rate of change per tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.DifferentiatorOrBuilder getDifferentiatorOrBuilder() {
    if (componentCase_ == 17) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Differentiator.getDefaultInstance();
  }

  public static final int AND_FIELD_NUMBER = 19;
  /**
   * <pre>
   * Logical AND.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
   * @return Whether the and field is set.
   */
  @java.lang.Override
  public boolean hasAnd() {
    return componentCase_ == 19;
  }
  /**
   * <pre>
   * Logical AND.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
   * @return The and.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.And getAnd() {
    if (componentCase_ == 19) {
       return (com.fluxninja.generated.aperture.policy.language.v1.And) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance();
  }
  /**
   * <pre>
   * Logical AND.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AndOrBuilder getAndOrBuilder() {
    if (componentCase_ == 19) {
       return (com.fluxninja.generated.aperture.policy.language.v1.And) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance();
  }

  public static final int OR_FIELD_NUMBER = 20;
  /**
   * <pre>
   * Logical OR.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
   * @return Whether the or field is set.
   */
  @java.lang.Override
  public boolean hasOr() {
    return componentCase_ == 20;
  }
  /**
   * <pre>
   * Logical OR.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
   * @return The or.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Or getOr() {
    if (componentCase_ == 20) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Or) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Or.getDefaultInstance();
  }
  /**
   * <pre>
   * Logical OR.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.OrOrBuilder getOrOrBuilder() {
    if (componentCase_ == 20) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Or) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Or.getDefaultInstance();
  }

  public static final int INVERTER_FIELD_NUMBER = 21;
  /**
   * <pre>
   * Logical NOT.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
   * @return Whether the inverter field is set.
   */
  @java.lang.Override
  public boolean hasInverter() {
    return componentCase_ == 21;
  }
  /**
   * <pre>
   * Logical NOT.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
   * @return The inverter.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Inverter getInverter() {
    if (componentCase_ == 21) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Inverter.getDefaultInstance();
  }
  /**
   * <pre>
   * Logical NOT.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.InverterOrBuilder getInverterOrBuilder() {
    if (componentCase_ == 21) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Inverter.getDefaultInstance();
  }

  public static final int PULSE_GENERATOR_FIELD_NUMBER = 22;
  /**
   * <pre>
   * Generates 0 and 1 in turns.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
   * @return Whether the pulseGenerator field is set.
   */
  @java.lang.Override
  public boolean hasPulseGenerator() {
    return componentCase_ == 22;
  }
  /**
   * <pre>
   * Generates 0 and 1 in turns.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
   * @return The pulseGenerator.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator getPulseGenerator() {
    if (componentCase_ == 22) {
       return (com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.getDefaultInstance();
  }
  /**
   * <pre>
   * Generates 0 and 1 in turns.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.PulseGeneratorOrBuilder getPulseGeneratorOrBuilder() {
    if (componentCase_ == 22) {
       return (com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.getDefaultInstance();
  }

  public static final int HOLDER_FIELD_NUMBER = 23;
  /**
   * <pre>
   * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
   * @return Whether the holder field is set.
   */
  @java.lang.Override
  public boolean hasHolder() {
    return componentCase_ == 23;
  }
  /**
   * <pre>
   * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
   * @return The holder.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Holder getHolder() {
    if (componentCase_ == 23) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Holder) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Holder.getDefaultInstance();
  }
  /**
   * <pre>
   * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.HolderOrBuilder getHolderOrBuilder() {
    if (componentCase_ == 23) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Holder) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Holder.getDefaultInstance();
  }

  public static final int NESTED_CIRCUIT_FIELD_NUMBER = 24;
  /**
   * <pre>
   * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
   * @return Whether the nestedCircuit field is set.
   */
  @java.lang.Override
  public boolean hasNestedCircuit() {
    return componentCase_ == 24;
  }
  /**
   * <pre>
   * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
   * @return The nestedCircuit.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit getNestedCircuit() {
    if (componentCase_ == 24) {
       return (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance();
  }
  /**
   * <pre>
   * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuitOrBuilder getNestedCircuitOrBuilder() {
    if (componentCase_ == 24) {
       return (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance();
  }

  public static final int NESTED_SIGNAL_INGRESS_FIELD_NUMBER = 25;
  /**
   * <pre>
   * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
   * @return Whether the nestedSignalIngress field is set.
   */
  @java.lang.Override
  public boolean hasNestedSignalIngress() {
    return componentCase_ == 25;
  }
  /**
   * <pre>
   * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
   * @return The nestedSignalIngress.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress getNestedSignalIngress() {
    if (componentCase_ == 25) {
       return (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.getDefaultInstance();
  }
  /**
   * <pre>
   * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngressOrBuilder getNestedSignalIngressOrBuilder() {
    if (componentCase_ == 25) {
       return (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.getDefaultInstance();
  }

  public static final int NESTED_SIGNAL_EGRESS_FIELD_NUMBER = 26;
  /**
   * <pre>
   * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
   * @return Whether the nestedSignalEgress field is set.
   */
  @java.lang.Override
  public boolean hasNestedSignalEgress() {
    return componentCase_ == 26;
  }
  /**
   * <pre>
   * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
   * @return The nestedSignalEgress.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress getNestedSignalEgress() {
    if (componentCase_ == 26) {
       return (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.getDefaultInstance();
  }
  /**
   * <pre>
   * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgressOrBuilder getNestedSignalEgressOrBuilder() {
    if (componentCase_ == 26) {
       return (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.getDefaultInstance();
  }

  public static final int QUERY_FIELD_NUMBER = 100;
  /**
   * <pre>
   * Query components that are query databases such as Prometheus.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
   * @return Whether the query field is set.
   */
  @java.lang.Override
  public boolean hasQuery() {
    return componentCase_ == 100;
  }
  /**
   * <pre>
   * Query components that are query databases such as Prometheus.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
   * @return The query.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Query getQuery() {
    if (componentCase_ == 100) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Query) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Query.getDefaultInstance();
  }
  /**
   * <pre>
   * Query components that are query databases such as Prometheus.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.QueryOrBuilder getQueryOrBuilder() {
    if (componentCase_ == 100) {
       return (com.fluxninja.generated.aperture.policy.language.v1.Query) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.Query.getDefaultInstance();
  }

  public static final int FLOW_CONTROL_FIELD_NUMBER = 101;
  /**
   * <pre>
   * FlowControl components are used to regulate requests flow.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
   * @return Whether the flowControl field is set.
   */
  @java.lang.Override
  public boolean hasFlowControl() {
    return componentCase_ == 101;
  }
  /**
   * <pre>
   * FlowControl components are used to regulate requests flow.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
   * @return The flowControl.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowControl getFlowControl() {
    if (componentCase_ == 101) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance();
  }
  /**
   * <pre>
   * FlowControl components are used to regulate requests flow.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowControlOrBuilder getFlowControlOrBuilder() {
    if (componentCase_ == 101) {
       return (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance();
  }

  public static final int AUTO_SCALE_FIELD_NUMBER = 102;
  /**
   * <pre>
   * AutoScale components are used to scale the service.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
   * @return Whether the autoScale field is set.
   */
  @java.lang.Override
  public boolean hasAutoScale() {
    return componentCase_ == 102;
  }
  /**
   * <pre>
   * AutoScale components are used to scale the service.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
   * @return The autoScale.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AutoScale getAutoScale() {
    if (componentCase_ == 102) {
       return (com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.AutoScale.getDefaultInstance();
  }
  /**
   * <pre>
   * AutoScale components are used to scale the service.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AutoScaleOrBuilder getAutoScaleOrBuilder() {
    if (componentCase_ == 102) {
       return (com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.AutoScale.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (componentCase_ == 1) {
      output.writeMessage(1, (com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_);
    }
    if (componentCase_ == 2) {
      output.writeMessage(2, (com.fluxninja.generated.aperture.policy.language.v1.EMA) component_);
    }
    if (componentCase_ == 3) {
      output.writeMessage(3, (com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_);
    }
    if (componentCase_ == 4) {
      output.writeMessage(4, (com.fluxninja.generated.aperture.policy.language.v1.Decider) component_);
    }
    if (componentCase_ == 5) {
      output.writeMessage(5, (com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_);
    }
    if (componentCase_ == 9) {
      output.writeMessage(9, (com.fluxninja.generated.aperture.policy.language.v1.Variable) component_);
    }
    if (componentCase_ == 10) {
      output.writeMessage(10, (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_);
    }
    if (componentCase_ == 11) {
      output.writeMessage(11, (com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_);
    }
    if (componentCase_ == 12) {
      output.writeMessage(12, (com.fluxninja.generated.aperture.policy.language.v1.Max) component_);
    }
    if (componentCase_ == 13) {
      output.writeMessage(13, (com.fluxninja.generated.aperture.policy.language.v1.Min) component_);
    }
    if (componentCase_ == 14) {
      output.writeMessage(14, (com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_);
    }
    if (componentCase_ == 15) {
      output.writeMessage(15, (com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_);
    }
    if (componentCase_ == 16) {
      output.writeMessage(16, (com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_);
    }
    if (componentCase_ == 17) {
      output.writeMessage(17, (com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_);
    }
    if (componentCase_ == 19) {
      output.writeMessage(19, (com.fluxninja.generated.aperture.policy.language.v1.And) component_);
    }
    if (componentCase_ == 20) {
      output.writeMessage(20, (com.fluxninja.generated.aperture.policy.language.v1.Or) component_);
    }
    if (componentCase_ == 21) {
      output.writeMessage(21, (com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_);
    }
    if (componentCase_ == 22) {
      output.writeMessage(22, (com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_);
    }
    if (componentCase_ == 23) {
      output.writeMessage(23, (com.fluxninja.generated.aperture.policy.language.v1.Holder) component_);
    }
    if (componentCase_ == 24) {
      output.writeMessage(24, (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_);
    }
    if (componentCase_ == 25) {
      output.writeMessage(25, (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_);
    }
    if (componentCase_ == 26) {
      output.writeMessage(26, (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_);
    }
    if (componentCase_ == 100) {
      output.writeMessage(100, (com.fluxninja.generated.aperture.policy.language.v1.Query) component_);
    }
    if (componentCase_ == 101) {
      output.writeMessage(101, (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_);
    }
    if (componentCase_ == 102) {
      output.writeMessage(102, (com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (componentCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_);
    }
    if (componentCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.fluxninja.generated.aperture.policy.language.v1.EMA) component_);
    }
    if (componentCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_);
    }
    if (componentCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.fluxninja.generated.aperture.policy.language.v1.Decider) component_);
    }
    if (componentCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_);
    }
    if (componentCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (com.fluxninja.generated.aperture.policy.language.v1.Variable) component_);
    }
    if (componentCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_);
    }
    if (componentCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_);
    }
    if (componentCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (com.fluxninja.generated.aperture.policy.language.v1.Max) component_);
    }
    if (componentCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (com.fluxninja.generated.aperture.policy.language.v1.Min) component_);
    }
    if (componentCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_);
    }
    if (componentCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_);
    }
    if (componentCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_);
    }
    if (componentCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_);
    }
    if (componentCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (com.fluxninja.generated.aperture.policy.language.v1.And) component_);
    }
    if (componentCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (com.fluxninja.generated.aperture.policy.language.v1.Or) component_);
    }
    if (componentCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_);
    }
    if (componentCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_);
    }
    if (componentCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (com.fluxninja.generated.aperture.policy.language.v1.Holder) component_);
    }
    if (componentCase_ == 24) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_);
    }
    if (componentCase_ == 25) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(25, (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_);
    }
    if (componentCase_ == 26) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(26, (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_);
    }
    if (componentCase_ == 100) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(100, (com.fluxninja.generated.aperture.policy.language.v1.Query) component_);
    }
    if (componentCase_ == 101) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(101, (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_);
    }
    if (componentCase_ == 102) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(102, (com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.Component)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.Component other = (com.fluxninja.generated.aperture.policy.language.v1.Component) obj;

    if (!getComponentCase().equals(other.getComponentCase())) return false;
    switch (componentCase_) {
      case 1:
        if (!getGradientController()
            .equals(other.getGradientController())) return false;
        break;
      case 2:
        if (!getEma()
            .equals(other.getEma())) return false;
        break;
      case 3:
        if (!getArithmeticCombinator()
            .equals(other.getArithmeticCombinator())) return false;
        break;
      case 4:
        if (!getDecider()
            .equals(other.getDecider())) return false;
        break;
      case 5:
        if (!getSwitcher()
            .equals(other.getSwitcher())) return false;
        break;
      case 9:
        if (!getVariable()
            .equals(other.getVariable())) return false;
        break;
      case 10:
        if (!getUnaryOperator()
            .equals(other.getUnaryOperator())) return false;
        break;
      case 11:
        if (!getExtrapolator()
            .equals(other.getExtrapolator())) return false;
        break;
      case 12:
        if (!getMax()
            .equals(other.getMax())) return false;
        break;
      case 13:
        if (!getMin()
            .equals(other.getMin())) return false;
        break;
      case 14:
        if (!getFirstValid()
            .equals(other.getFirstValid())) return false;
        break;
      case 15:
        if (!getAlerter()
            .equals(other.getAlerter())) return false;
        break;
      case 16:
        if (!getIntegrator()
            .equals(other.getIntegrator())) return false;
        break;
      case 17:
        if (!getDifferentiator()
            .equals(other.getDifferentiator())) return false;
        break;
      case 19:
        if (!getAnd()
            .equals(other.getAnd())) return false;
        break;
      case 20:
        if (!getOr()
            .equals(other.getOr())) return false;
        break;
      case 21:
        if (!getInverter()
            .equals(other.getInverter())) return false;
        break;
      case 22:
        if (!getPulseGenerator()
            .equals(other.getPulseGenerator())) return false;
        break;
      case 23:
        if (!getHolder()
            .equals(other.getHolder())) return false;
        break;
      case 24:
        if (!getNestedCircuit()
            .equals(other.getNestedCircuit())) return false;
        break;
      case 25:
        if (!getNestedSignalIngress()
            .equals(other.getNestedSignalIngress())) return false;
        break;
      case 26:
        if (!getNestedSignalEgress()
            .equals(other.getNestedSignalEgress())) return false;
        break;
      case 100:
        if (!getQuery()
            .equals(other.getQuery())) return false;
        break;
      case 101:
        if (!getFlowControl()
            .equals(other.getFlowControl())) return false;
        break;
      case 102:
        if (!getAutoScale()
            .equals(other.getAutoScale())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (componentCase_) {
      case 1:
        hash = (37 * hash) + GRADIENT_CONTROLLER_FIELD_NUMBER;
        hash = (53 * hash) + getGradientController().hashCode();
        break;
      case 2:
        hash = (37 * hash) + EMA_FIELD_NUMBER;
        hash = (53 * hash) + getEma().hashCode();
        break;
      case 3:
        hash = (37 * hash) + ARITHMETIC_COMBINATOR_FIELD_NUMBER;
        hash = (53 * hash) + getArithmeticCombinator().hashCode();
        break;
      case 4:
        hash = (37 * hash) + DECIDER_FIELD_NUMBER;
        hash = (53 * hash) + getDecider().hashCode();
        break;
      case 5:
        hash = (37 * hash) + SWITCHER_FIELD_NUMBER;
        hash = (53 * hash) + getSwitcher().hashCode();
        break;
      case 9:
        hash = (37 * hash) + VARIABLE_FIELD_NUMBER;
        hash = (53 * hash) + getVariable().hashCode();
        break;
      case 10:
        hash = (37 * hash) + UNARY_OPERATOR_FIELD_NUMBER;
        hash = (53 * hash) + getUnaryOperator().hashCode();
        break;
      case 11:
        hash = (37 * hash) + EXTRAPOLATOR_FIELD_NUMBER;
        hash = (53 * hash) + getExtrapolator().hashCode();
        break;
      case 12:
        hash = (37 * hash) + MAX_FIELD_NUMBER;
        hash = (53 * hash) + getMax().hashCode();
        break;
      case 13:
        hash = (37 * hash) + MIN_FIELD_NUMBER;
        hash = (53 * hash) + getMin().hashCode();
        break;
      case 14:
        hash = (37 * hash) + FIRST_VALID_FIELD_NUMBER;
        hash = (53 * hash) + getFirstValid().hashCode();
        break;
      case 15:
        hash = (37 * hash) + ALERTER_FIELD_NUMBER;
        hash = (53 * hash) + getAlerter().hashCode();
        break;
      case 16:
        hash = (37 * hash) + INTEGRATOR_FIELD_NUMBER;
        hash = (53 * hash) + getIntegrator().hashCode();
        break;
      case 17:
        hash = (37 * hash) + DIFFERENTIATOR_FIELD_NUMBER;
        hash = (53 * hash) + getDifferentiator().hashCode();
        break;
      case 19:
        hash = (37 * hash) + AND_FIELD_NUMBER;
        hash = (53 * hash) + getAnd().hashCode();
        break;
      case 20:
        hash = (37 * hash) + OR_FIELD_NUMBER;
        hash = (53 * hash) + getOr().hashCode();
        break;
      case 21:
        hash = (37 * hash) + INVERTER_FIELD_NUMBER;
        hash = (53 * hash) + getInverter().hashCode();
        break;
      case 22:
        hash = (37 * hash) + PULSE_GENERATOR_FIELD_NUMBER;
        hash = (53 * hash) + getPulseGenerator().hashCode();
        break;
      case 23:
        hash = (37 * hash) + HOLDER_FIELD_NUMBER;
        hash = (53 * hash) + getHolder().hashCode();
        break;
      case 24:
        hash = (37 * hash) + NESTED_CIRCUIT_FIELD_NUMBER;
        hash = (53 * hash) + getNestedCircuit().hashCode();
        break;
      case 25:
        hash = (37 * hash) + NESTED_SIGNAL_INGRESS_FIELD_NUMBER;
        hash = (53 * hash) + getNestedSignalIngress().hashCode();
        break;
      case 26:
        hash = (37 * hash) + NESTED_SIGNAL_EGRESS_FIELD_NUMBER;
        hash = (53 * hash) + getNestedSignalEgress().hashCode();
        break;
      case 100:
        hash = (37 * hash) + QUERY_FIELD_NUMBER;
        hash = (53 * hash) + getQuery().hashCode();
        break;
      case 101:
        hash = (37 * hash) + FLOW_CONTROL_FIELD_NUMBER;
        hash = (53 * hash) + getFlowControl().hashCode();
        break;
      case 102:
        hash = (37 * hash) + AUTO_SCALE_FIELD_NUMBER;
        hash = (53 * hash) + getAutoScale().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Component parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.Component prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Computational block that forms the circuit
   * :::info
   * See also [Components overview](/concepts/policy/circuit.md#components).
   * :::
   * Signals flow into the components via input ports and results are emitted on output ports.
   * Components are wired to each other based on signal names forming an execution graph of the circuit.
   * :::note
   * Loops are broken by the runtime at the earliest component index that is part of the loop.
   * The looped signals are saved in the tick they are generated and served in the subsequent tick.
   * :::
   * There are three categories of components:
   * * "source" components – they take some sort of input from "the real world" and output
   *   a signal based on this input. Example: [PromQL](#prom-q-l). In the UI
   *   they're represented by green color.
   * * signal processor components – "pure" components that don't interact with the "real world".
   *   Examples: [GradientController](#gradient-controller), [Max](#max).
   *   :::note
   *   Signal processor components's output can depend on their internal state, in addition to the inputs.
   *   Eg. see the [Exponential Moving Average filter](#e-m-a).
   *   :::
   * * "sink" components – they affect the real world.
   *   [ConcurrencyLimiter.LoadActuator](#concurrency-limiter) and [RateLimiter](#rate-limiter).
   *   In the UI, represented by orange color.  Sink components usually come in pairs with a
   *   "sources" component which emits a feedback signal, like
   *   `accepted_concurrency` emitted by ConcurrencyLimiter.Scheduler.
   * :::tip
   * Sometimes you may want to use a constant value as one of component's inputs.
   * You can create an input port containing the constant value instead of being connected to a signal.
   * To do so, use the [InPort](#in_port)'s .withConstantSignal(constant_signal) method.
   * You can also use it to provide special math values such as NaN and +- Inf.
   * If You need to provide the same constant signal to multiple components,
   * You can use the [Variable](#variable) component.
   * :::
   * See also [Policy](#policy) for a higher-level explanation of circuits.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.Component}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.Component)
      com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.Component.class, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.Component.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      componentCase_ = 0;
      component_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Component_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Component getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.Component.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Component build() {
      com.fluxninja.generated.aperture.policy.language.v1.Component result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Component buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.Component result = new com.fluxninja.generated.aperture.policy.language.v1.Component(this);
      if (componentCase_ == 1) {
        if (gradientControllerBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = gradientControllerBuilder_.build();
        }
      }
      if (componentCase_ == 2) {
        if (emaBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = emaBuilder_.build();
        }
      }
      if (componentCase_ == 3) {
        if (arithmeticCombinatorBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = arithmeticCombinatorBuilder_.build();
        }
      }
      if (componentCase_ == 4) {
        if (deciderBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = deciderBuilder_.build();
        }
      }
      if (componentCase_ == 5) {
        if (switcherBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = switcherBuilder_.build();
        }
      }
      if (componentCase_ == 9) {
        if (variableBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = variableBuilder_.build();
        }
      }
      if (componentCase_ == 10) {
        if (unaryOperatorBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = unaryOperatorBuilder_.build();
        }
      }
      if (componentCase_ == 11) {
        if (extrapolatorBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = extrapolatorBuilder_.build();
        }
      }
      if (componentCase_ == 12) {
        if (maxBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = maxBuilder_.build();
        }
      }
      if (componentCase_ == 13) {
        if (minBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = minBuilder_.build();
        }
      }
      if (componentCase_ == 14) {
        if (firstValidBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = firstValidBuilder_.build();
        }
      }
      if (componentCase_ == 15) {
        if (alerterBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = alerterBuilder_.build();
        }
      }
      if (componentCase_ == 16) {
        if (integratorBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = integratorBuilder_.build();
        }
      }
      if (componentCase_ == 17) {
        if (differentiatorBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = differentiatorBuilder_.build();
        }
      }
      if (componentCase_ == 19) {
        if (andBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = andBuilder_.build();
        }
      }
      if (componentCase_ == 20) {
        if (orBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = orBuilder_.build();
        }
      }
      if (componentCase_ == 21) {
        if (inverterBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = inverterBuilder_.build();
        }
      }
      if (componentCase_ == 22) {
        if (pulseGeneratorBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = pulseGeneratorBuilder_.build();
        }
      }
      if (componentCase_ == 23) {
        if (holderBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = holderBuilder_.build();
        }
      }
      if (componentCase_ == 24) {
        if (nestedCircuitBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = nestedCircuitBuilder_.build();
        }
      }
      if (componentCase_ == 25) {
        if (nestedSignalIngressBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = nestedSignalIngressBuilder_.build();
        }
      }
      if (componentCase_ == 26) {
        if (nestedSignalEgressBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = nestedSignalEgressBuilder_.build();
        }
      }
      if (componentCase_ == 100) {
        if (queryBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = queryBuilder_.build();
        }
      }
      if (componentCase_ == 101) {
        if (flowControlBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = flowControlBuilder_.build();
        }
      }
      if (componentCase_ == 102) {
        if (autoScaleBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = autoScaleBuilder_.build();
        }
      }
      result.componentCase_ = componentCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.Component) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Component)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.Component other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.Component.getDefaultInstance()) return this;
      switch (other.getComponentCase()) {
        case GRADIENT_CONTROLLER: {
          mergeGradientController(other.getGradientController());
          break;
        }
        case EMA: {
          mergeEma(other.getEma());
          break;
        }
        case ARITHMETIC_COMBINATOR: {
          mergeArithmeticCombinator(other.getArithmeticCombinator());
          break;
        }
        case DECIDER: {
          mergeDecider(other.getDecider());
          break;
        }
        case SWITCHER: {
          mergeSwitcher(other.getSwitcher());
          break;
        }
        case VARIABLE: {
          mergeVariable(other.getVariable());
          break;
        }
        case UNARY_OPERATOR: {
          mergeUnaryOperator(other.getUnaryOperator());
          break;
        }
        case EXTRAPOLATOR: {
          mergeExtrapolator(other.getExtrapolator());
          break;
        }
        case MAX: {
          mergeMax(other.getMax());
          break;
        }
        case MIN: {
          mergeMin(other.getMin());
          break;
        }
        case FIRST_VALID: {
          mergeFirstValid(other.getFirstValid());
          break;
        }
        case ALERTER: {
          mergeAlerter(other.getAlerter());
          break;
        }
        case INTEGRATOR: {
          mergeIntegrator(other.getIntegrator());
          break;
        }
        case DIFFERENTIATOR: {
          mergeDifferentiator(other.getDifferentiator());
          break;
        }
        case AND: {
          mergeAnd(other.getAnd());
          break;
        }
        case OR: {
          mergeOr(other.getOr());
          break;
        }
        case INVERTER: {
          mergeInverter(other.getInverter());
          break;
        }
        case PULSE_GENERATOR: {
          mergePulseGenerator(other.getPulseGenerator());
          break;
        }
        case HOLDER: {
          mergeHolder(other.getHolder());
          break;
        }
        case NESTED_CIRCUIT: {
          mergeNestedCircuit(other.getNestedCircuit());
          break;
        }
        case NESTED_SIGNAL_INGRESS: {
          mergeNestedSignalIngress(other.getNestedSignalIngress());
          break;
        }
        case NESTED_SIGNAL_EGRESS: {
          mergeNestedSignalEgress(other.getNestedSignalEgress());
          break;
        }
        case QUERY: {
          mergeQuery(other.getQuery());
          break;
        }
        case FLOW_CONTROL: {
          mergeFlowControl(other.getFlowControl());
          break;
        }
        case AUTO_SCALE: {
          mergeAutoScale(other.getAutoScale());
          break;
        }
        case COMPONENT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.Component parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.Component) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int componentCase_ = 0;
    private java.lang.Object component_;
    public ComponentCase
        getComponentCase() {
      return ComponentCase.forNumber(
          componentCase_);
    }

    public Builder clearComponent() {
      componentCase_ = 0;
      component_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.GradientController, com.fluxninja.generated.aperture.policy.language.v1.GradientController.Builder, com.fluxninja.generated.aperture.policy.language.v1.GradientControllerOrBuilder> gradientControllerBuilder_;
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     * @return Whether the gradientController field is set.
     */
    @java.lang.Override
    public boolean hasGradientController() {
      return componentCase_ == 1;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     * @return The gradientController.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.GradientController getGradientController() {
      if (gradientControllerBuilder_ == null) {
        if (componentCase_ == 1) {
          return (com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.GradientController.getDefaultInstance();
      } else {
        if (componentCase_ == 1) {
          return gradientControllerBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.GradientController.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public Builder setGradientController(com.fluxninja.generated.aperture.policy.language.v1.GradientController value) {
      if (gradientControllerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        gradientControllerBuilder_.setMessage(value);
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public Builder setGradientController(
        com.fluxninja.generated.aperture.policy.language.v1.GradientController.Builder builderForValue) {
      if (gradientControllerBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        gradientControllerBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public Builder mergeGradientController(com.fluxninja.generated.aperture.policy.language.v1.GradientController value) {
      if (gradientControllerBuilder_ == null) {
        if (componentCase_ == 1 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.GradientController.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.GradientController.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 1) {
          gradientControllerBuilder_.mergeFrom(value);
        } else {
          gradientControllerBuilder_.setMessage(value);
        }
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public Builder clearGradientController() {
      if (gradientControllerBuilder_ == null) {
        if (componentCase_ == 1) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 1) {
          componentCase_ = 0;
          component_ = null;
        }
        gradientControllerBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.GradientController.Builder getGradientControllerBuilder() {
      return getGradientControllerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.GradientControllerOrBuilder getGradientControllerOrBuilder() {
      if ((componentCase_ == 1) && (gradientControllerBuilder_ != null)) {
        return gradientControllerBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 1) {
          return (com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.GradientController.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
     * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.GradientController, com.fluxninja.generated.aperture.policy.language.v1.GradientController.Builder, com.fluxninja.generated.aperture.policy.language.v1.GradientControllerOrBuilder> 
        getGradientControllerFieldBuilder() {
      if (gradientControllerBuilder_ == null) {
        if (!(componentCase_ == 1)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.GradientController.getDefaultInstance();
        }
        gradientControllerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.GradientController, com.fluxninja.generated.aperture.policy.language.v1.GradientController.Builder, com.fluxninja.generated.aperture.policy.language.v1.GradientControllerOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.GradientController) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 1;
      onChanged();;
      return gradientControllerBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.EMA, com.fluxninja.generated.aperture.policy.language.v1.EMA.Builder, com.fluxninja.generated.aperture.policy.language.v1.EMAOrBuilder> emaBuilder_;
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     * @return Whether the ema field is set.
     */
    @java.lang.Override
    public boolean hasEma() {
      return componentCase_ == 2;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     * @return The ema.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.EMA getEma() {
      if (emaBuilder_ == null) {
        if (componentCase_ == 2) {
          return (com.fluxninja.generated.aperture.policy.language.v1.EMA) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.EMA.getDefaultInstance();
      } else {
        if (componentCase_ == 2) {
          return emaBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.EMA.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public Builder setEma(com.fluxninja.generated.aperture.policy.language.v1.EMA value) {
      if (emaBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        emaBuilder_.setMessage(value);
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public Builder setEma(
        com.fluxninja.generated.aperture.policy.language.v1.EMA.Builder builderForValue) {
      if (emaBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        emaBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public Builder mergeEma(com.fluxninja.generated.aperture.policy.language.v1.EMA value) {
      if (emaBuilder_ == null) {
        if (componentCase_ == 2 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.EMA.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.EMA.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.EMA) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 2) {
          emaBuilder_.mergeFrom(value);
        } else {
          emaBuilder_.setMessage(value);
        }
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public Builder clearEma() {
      if (emaBuilder_ == null) {
        if (componentCase_ == 2) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 2) {
          componentCase_ = 0;
          component_ = null;
        }
        emaBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.EMA.Builder getEmaBuilder() {
      return getEmaFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.EMAOrBuilder getEmaOrBuilder() {
      if ((componentCase_ == 2) && (emaBuilder_ != null)) {
        return emaBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 2) {
          return (com.fluxninja.generated.aperture.policy.language.v1.EMA) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.EMA.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Exponential Moving Average filter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.EMA, com.fluxninja.generated.aperture.policy.language.v1.EMA.Builder, com.fluxninja.generated.aperture.policy.language.v1.EMAOrBuilder> 
        getEmaFieldBuilder() {
      if (emaBuilder_ == null) {
        if (!(componentCase_ == 2)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.EMA.getDefaultInstance();
        }
        emaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.EMA, com.fluxninja.generated.aperture.policy.language.v1.EMA.Builder, com.fluxninja.generated.aperture.policy.language.v1.EMAOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.EMA) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 2;
      onChanged();;
      return emaBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator, com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.Builder, com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder> arithmeticCombinatorBuilder_;
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     * @return Whether the arithmeticCombinator field is set.
     */
    @java.lang.Override
    public boolean hasArithmeticCombinator() {
      return componentCase_ == 3;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     * @return The arithmeticCombinator.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator getArithmeticCombinator() {
      if (arithmeticCombinatorBuilder_ == null) {
        if (componentCase_ == 3) {
          return (com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
      } else {
        if (componentCase_ == 3) {
          return arithmeticCombinatorBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public Builder setArithmeticCombinator(com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator value) {
      if (arithmeticCombinatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        arithmeticCombinatorBuilder_.setMessage(value);
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public Builder setArithmeticCombinator(
        com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.Builder builderForValue) {
      if (arithmeticCombinatorBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        arithmeticCombinatorBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public Builder mergeArithmeticCombinator(com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator value) {
      if (arithmeticCombinatorBuilder_ == null) {
        if (componentCase_ == 3 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 3) {
          arithmeticCombinatorBuilder_.mergeFrom(value);
        } else {
          arithmeticCombinatorBuilder_.setMessage(value);
        }
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public Builder clearArithmeticCombinator() {
      if (arithmeticCombinatorBuilder_ == null) {
        if (componentCase_ == 3) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 3) {
          componentCase_ = 0;
          component_ = null;
        }
        arithmeticCombinatorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.Builder getArithmeticCombinatorBuilder() {
      return getArithmeticCombinatorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder getArithmeticCombinatorOrBuilder() {
      if ((componentCase_ == 3) && (arithmeticCombinatorBuilder_ != null)) {
        return arithmeticCombinatorBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 3) {
          return (com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Applies the given operator on input operands (signals) and emits the result.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator, com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.Builder, com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder> 
        getArithmeticCombinatorFieldBuilder() {
      if (arithmeticCombinatorBuilder_ == null) {
        if (!(componentCase_ == 3)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.getDefaultInstance();
        }
        arithmeticCombinatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator, com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator.Builder, com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 3;
      onChanged();;
      return arithmeticCombinatorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Decider, com.fluxninja.generated.aperture.policy.language.v1.Decider.Builder, com.fluxninja.generated.aperture.policy.language.v1.DeciderOrBuilder> deciderBuilder_;
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     * @return Whether the decider field is set.
     */
    @java.lang.Override
    public boolean hasDecider() {
      return componentCase_ == 4;
    }
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     * @return The decider.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Decider getDecider() {
      if (deciderBuilder_ == null) {
        if (componentCase_ == 4) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Decider) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Decider.getDefaultInstance();
      } else {
        if (componentCase_ == 4) {
          return deciderBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Decider.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public Builder setDecider(com.fluxninja.generated.aperture.policy.language.v1.Decider value) {
      if (deciderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        deciderBuilder_.setMessage(value);
      }
      componentCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public Builder setDecider(
        com.fluxninja.generated.aperture.policy.language.v1.Decider.Builder builderForValue) {
      if (deciderBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        deciderBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public Builder mergeDecider(com.fluxninja.generated.aperture.policy.language.v1.Decider value) {
      if (deciderBuilder_ == null) {
        if (componentCase_ == 4 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Decider.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Decider.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Decider) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 4) {
          deciderBuilder_.mergeFrom(value);
        } else {
          deciderBuilder_.setMessage(value);
        }
      }
      componentCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public Builder clearDecider() {
      if (deciderBuilder_ == null) {
        if (componentCase_ == 4) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 4) {
          componentCase_ = 0;
          component_ = null;
        }
        deciderBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Decider.Builder getDeciderBuilder() {
      return getDeciderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.DeciderOrBuilder getDeciderOrBuilder() {
      if ((componentCase_ == 4) && (deciderBuilder_ != null)) {
        return deciderBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 4) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Decider) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Decider.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Decider emits the binary result of comparison operator on two operands.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Decider, com.fluxninja.generated.aperture.policy.language.v1.Decider.Builder, com.fluxninja.generated.aperture.policy.language.v1.DeciderOrBuilder> 
        getDeciderFieldBuilder() {
      if (deciderBuilder_ == null) {
        if (!(componentCase_ == 4)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Decider.getDefaultInstance();
        }
        deciderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Decider, com.fluxninja.generated.aperture.policy.language.v1.Decider.Builder, com.fluxninja.generated.aperture.policy.language.v1.DeciderOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Decider) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 4;
      onChanged();;
      return deciderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Switcher, com.fluxninja.generated.aperture.policy.language.v1.Switcher.Builder, com.fluxninja.generated.aperture.policy.language.v1.SwitcherOrBuilder> switcherBuilder_;
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     * @return Whether the switcher field is set.
     */
    @java.lang.Override
    public boolean hasSwitcher() {
      return componentCase_ == 5;
    }
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     * @return The switcher.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Switcher getSwitcher() {
      if (switcherBuilder_ == null) {
        if (componentCase_ == 5) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Switcher.getDefaultInstance();
      } else {
        if (componentCase_ == 5) {
          return switcherBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Switcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     */
    public Builder setSwitcher(com.fluxninja.generated.aperture.policy.language.v1.Switcher value) {
      if (switcherBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        switcherBuilder_.setMessage(value);
      }
      componentCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     */
    public Builder setSwitcher(
        com.fluxninja.generated.aperture.policy.language.v1.Switcher.Builder builderForValue) {
      if (switcherBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        switcherBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     */
    public Builder mergeSwitcher(com.fluxninja.generated.aperture.policy.language.v1.Switcher value) {
      if (switcherBuilder_ == null) {
        if (componentCase_ == 5 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Switcher.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Switcher.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 5) {
          switcherBuilder_.mergeFrom(value);
        } else {
          switcherBuilder_.setMessage(value);
        }
      }
      componentCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     */
    public Builder clearSwitcher() {
      if (switcherBuilder_ == null) {
        if (componentCase_ == 5) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 5) {
          componentCase_ = 0;
          component_ = null;
        }
        switcherBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Switcher.Builder getSwitcherBuilder() {
      return getSwitcherFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.SwitcherOrBuilder getSwitcherOrBuilder() {
      if ((componentCase_ == 5) && (switcherBuilder_ != null)) {
        return switcherBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 5) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Switcher.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Switcher acts as a switch that emits one of the two signals based on third signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Switcher, com.fluxninja.generated.aperture.policy.language.v1.Switcher.Builder, com.fluxninja.generated.aperture.policy.language.v1.SwitcherOrBuilder> 
        getSwitcherFieldBuilder() {
      if (switcherBuilder_ == null) {
        if (!(componentCase_ == 5)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Switcher.getDefaultInstance();
        }
        switcherBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Switcher, com.fluxninja.generated.aperture.policy.language.v1.Switcher.Builder, com.fluxninja.generated.aperture.policy.language.v1.SwitcherOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Switcher) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 5;
      onChanged();;
      return switcherBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Variable, com.fluxninja.generated.aperture.policy.language.v1.Variable.Builder, com.fluxninja.generated.aperture.policy.language.v1.VariableOrBuilder> variableBuilder_;
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     * @return Whether the variable field is set.
     */
    @java.lang.Override
    public boolean hasVariable() {
      return componentCase_ == 9;
    }
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     * @return The variable.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Variable getVariable() {
      if (variableBuilder_ == null) {
        if (componentCase_ == 9) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Variable) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Variable.getDefaultInstance();
      } else {
        if (componentCase_ == 9) {
          return variableBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Variable.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     */
    public Builder setVariable(com.fluxninja.generated.aperture.policy.language.v1.Variable value) {
      if (variableBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        variableBuilder_.setMessage(value);
      }
      componentCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     */
    public Builder setVariable(
        com.fluxninja.generated.aperture.policy.language.v1.Variable.Builder builderForValue) {
      if (variableBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        variableBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     */
    public Builder mergeVariable(com.fluxninja.generated.aperture.policy.language.v1.Variable value) {
      if (variableBuilder_ == null) {
        if (componentCase_ == 9 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Variable.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Variable.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Variable) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 9) {
          variableBuilder_.mergeFrom(value);
        } else {
          variableBuilder_.setMessage(value);
        }
      }
      componentCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     */
    public Builder clearVariable() {
      if (variableBuilder_ == null) {
        if (componentCase_ == 9) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 9) {
          componentCase_ = 0;
          component_ = null;
        }
        variableBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Variable.Builder getVariableBuilder() {
      return getVariableFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.VariableOrBuilder getVariableOrBuilder() {
      if ((componentCase_ == 9) && (variableBuilder_ != null)) {
        return variableBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 9) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Variable) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Variable.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits a variable signal which can be set to invalid.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Variable, com.fluxninja.generated.aperture.policy.language.v1.Variable.Builder, com.fluxninja.generated.aperture.policy.language.v1.VariableOrBuilder> 
        getVariableFieldBuilder() {
      if (variableBuilder_ == null) {
        if (!(componentCase_ == 9)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Variable.getDefaultInstance();
        }
        variableBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Variable, com.fluxninja.generated.aperture.policy.language.v1.Variable.Builder, com.fluxninja.generated.aperture.policy.language.v1.VariableOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Variable) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 9;
      onChanged();;
      return variableBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperatorOrBuilder> unaryOperatorBuilder_;
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     * @return Whether the unaryOperator field is set.
     */
    @java.lang.Override
    public boolean hasUnaryOperator() {
      return componentCase_ == 10;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     * @return The unaryOperator.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator getUnaryOperator() {
      if (unaryOperatorBuilder_ == null) {
        if (componentCase_ == 10) {
          return (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance();
      } else {
        if (componentCase_ == 10) {
          return unaryOperatorBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     */
    public Builder setUnaryOperator(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator value) {
      if (unaryOperatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        unaryOperatorBuilder_.setMessage(value);
      }
      componentCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     */
    public Builder setUnaryOperator(
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Builder builderForValue) {
      if (unaryOperatorBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        unaryOperatorBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     */
    public Builder mergeUnaryOperator(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator value) {
      if (unaryOperatorBuilder_ == null) {
        if (componentCase_ == 10 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 10) {
          unaryOperatorBuilder_.mergeFrom(value);
        } else {
          unaryOperatorBuilder_.setMessage(value);
        }
      }
      componentCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     */
    public Builder clearUnaryOperator() {
      if (unaryOperatorBuilder_ == null) {
        if (componentCase_ == 10) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 10) {
          componentCase_ = 0;
          component_ = null;
        }
        unaryOperatorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Builder getUnaryOperatorBuilder() {
      return getUnaryOperatorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperatorOrBuilder getUnaryOperatorOrBuilder() {
      if ((componentCase_ == 10) && (unaryOperatorBuilder_ != null)) {
        return unaryOperatorBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 10) {
          return (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Takes an input signal and emits the square root of the input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperatorOrBuilder> 
        getUnaryOperatorFieldBuilder() {
      if (unaryOperatorBuilder_ == null) {
        if (!(componentCase_ == 10)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance();
        }
        unaryOperatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperatorOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 10;
      onChanged();;
      return unaryOperatorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Extrapolator, com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.Builder, com.fluxninja.generated.aperture.policy.language.v1.ExtrapolatorOrBuilder> extrapolatorBuilder_;
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     * @return Whether the extrapolator field is set.
     */
    @java.lang.Override
    public boolean hasExtrapolator() {
      return componentCase_ == 11;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     * @return The extrapolator.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Extrapolator getExtrapolator() {
      if (extrapolatorBuilder_ == null) {
        if (componentCase_ == 11) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
      } else {
        if (componentCase_ == 11) {
          return extrapolatorBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     */
    public Builder setExtrapolator(com.fluxninja.generated.aperture.policy.language.v1.Extrapolator value) {
      if (extrapolatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        extrapolatorBuilder_.setMessage(value);
      }
      componentCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     */
    public Builder setExtrapolator(
        com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.Builder builderForValue) {
      if (extrapolatorBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        extrapolatorBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     */
    public Builder mergeExtrapolator(com.fluxninja.generated.aperture.policy.language.v1.Extrapolator value) {
      if (extrapolatorBuilder_ == null) {
        if (componentCase_ == 11 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 11) {
          extrapolatorBuilder_.mergeFrom(value);
        } else {
          extrapolatorBuilder_.setMessage(value);
        }
      }
      componentCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     */
    public Builder clearExtrapolator() {
      if (extrapolatorBuilder_ == null) {
        if (componentCase_ == 11) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 11) {
          componentCase_ = 0;
          component_ = null;
        }
        extrapolatorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.Builder getExtrapolatorBuilder() {
      return getExtrapolatorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.ExtrapolatorOrBuilder getExtrapolatorOrBuilder() {
      if ((componentCase_ == 11) && (extrapolatorBuilder_ != null)) {
        return extrapolatorBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 11) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Extrapolator, com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.Builder, com.fluxninja.generated.aperture.policy.language.v1.ExtrapolatorOrBuilder> 
        getExtrapolatorFieldBuilder() {
      if (extrapolatorBuilder_ == null) {
        if (!(componentCase_ == 11)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.getDefaultInstance();
        }
        extrapolatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Extrapolator, com.fluxninja.generated.aperture.policy.language.v1.Extrapolator.Builder, com.fluxninja.generated.aperture.policy.language.v1.ExtrapolatorOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Extrapolator) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 11;
      onChanged();;
      return extrapolatorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Max, com.fluxninja.generated.aperture.policy.language.v1.Max.Builder, com.fluxninja.generated.aperture.policy.language.v1.MaxOrBuilder> maxBuilder_;
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     * @return Whether the max field is set.
     */
    @java.lang.Override
    public boolean hasMax() {
      return componentCase_ == 12;
    }
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     * @return The max.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Max getMax() {
      if (maxBuilder_ == null) {
        if (componentCase_ == 12) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Max) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Max.getDefaultInstance();
      } else {
        if (componentCase_ == 12) {
          return maxBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Max.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     */
    public Builder setMax(com.fluxninja.generated.aperture.policy.language.v1.Max value) {
      if (maxBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        maxBuilder_.setMessage(value);
      }
      componentCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     */
    public Builder setMax(
        com.fluxninja.generated.aperture.policy.language.v1.Max.Builder builderForValue) {
      if (maxBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        maxBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     */
    public Builder mergeMax(com.fluxninja.generated.aperture.policy.language.v1.Max value) {
      if (maxBuilder_ == null) {
        if (componentCase_ == 12 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Max.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Max.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Max) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 12) {
          maxBuilder_.mergeFrom(value);
        } else {
          maxBuilder_.setMessage(value);
        }
      }
      componentCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     */
    public Builder clearMax() {
      if (maxBuilder_ == null) {
        if (componentCase_ == 12) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 12) {
          componentCase_ = 0;
          component_ = null;
        }
        maxBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Max.Builder getMaxBuilder() {
      return getMaxFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MaxOrBuilder getMaxOrBuilder() {
      if ((componentCase_ == 12) && (maxBuilder_ != null)) {
        return maxBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 12) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Max) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Max.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits the maximum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Max, com.fluxninja.generated.aperture.policy.language.v1.Max.Builder, com.fluxninja.generated.aperture.policy.language.v1.MaxOrBuilder> 
        getMaxFieldBuilder() {
      if (maxBuilder_ == null) {
        if (!(componentCase_ == 12)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Max.getDefaultInstance();
        }
        maxBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Max, com.fluxninja.generated.aperture.policy.language.v1.Max.Builder, com.fluxninja.generated.aperture.policy.language.v1.MaxOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Max) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 12;
      onChanged();;
      return maxBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Min, com.fluxninja.generated.aperture.policy.language.v1.Min.Builder, com.fluxninja.generated.aperture.policy.language.v1.MinOrBuilder> minBuilder_;
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     * @return Whether the min field is set.
     */
    @java.lang.Override
    public boolean hasMin() {
      return componentCase_ == 13;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     * @return The min.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Min getMin() {
      if (minBuilder_ == null) {
        if (componentCase_ == 13) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Min) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Min.getDefaultInstance();
      } else {
        if (componentCase_ == 13) {
          return minBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Min.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     */
    public Builder setMin(com.fluxninja.generated.aperture.policy.language.v1.Min value) {
      if (minBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        minBuilder_.setMessage(value);
      }
      componentCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     */
    public Builder setMin(
        com.fluxninja.generated.aperture.policy.language.v1.Min.Builder builderForValue) {
      if (minBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        minBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     */
    public Builder mergeMin(com.fluxninja.generated.aperture.policy.language.v1.Min value) {
      if (minBuilder_ == null) {
        if (componentCase_ == 13 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Min.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Min.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Min) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 13) {
          minBuilder_.mergeFrom(value);
        } else {
          minBuilder_.setMessage(value);
        }
      }
      componentCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     */
    public Builder clearMin() {
      if (minBuilder_ == null) {
        if (componentCase_ == 13) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 13) {
          componentCase_ = 0;
          component_ = null;
        }
        minBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Min.Builder getMinBuilder() {
      return getMinFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MinOrBuilder getMinOrBuilder() {
      if ((componentCase_ == 13) && (minBuilder_ != null)) {
        return minBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 13) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Min) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Min.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Emits the minimum of the input signals.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Min, com.fluxninja.generated.aperture.policy.language.v1.Min.Builder, com.fluxninja.generated.aperture.policy.language.v1.MinOrBuilder> 
        getMinFieldBuilder() {
      if (minBuilder_ == null) {
        if (!(componentCase_ == 13)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Min.getDefaultInstance();
        }
        minBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Min, com.fluxninja.generated.aperture.policy.language.v1.Min.Builder, com.fluxninja.generated.aperture.policy.language.v1.MinOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Min) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 13;
      onChanged();;
      return minBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FirstValid, com.fluxninja.generated.aperture.policy.language.v1.FirstValid.Builder, com.fluxninja.generated.aperture.policy.language.v1.FirstValidOrBuilder> firstValidBuilder_;
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     * @return Whether the firstValid field is set.
     */
    @java.lang.Override
    public boolean hasFirstValid() {
      return componentCase_ == 14;
    }
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     * @return The firstValid.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FirstValid getFirstValid() {
      if (firstValidBuilder_ == null) {
        if (componentCase_ == 14) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FirstValid.getDefaultInstance();
      } else {
        if (componentCase_ == 14) {
          return firstValidBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FirstValid.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     */
    public Builder setFirstValid(com.fluxninja.generated.aperture.policy.language.v1.FirstValid value) {
      if (firstValidBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        firstValidBuilder_.setMessage(value);
      }
      componentCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     */
    public Builder setFirstValid(
        com.fluxninja.generated.aperture.policy.language.v1.FirstValid.Builder builderForValue) {
      if (firstValidBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        firstValidBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     */
    public Builder mergeFirstValid(com.fluxninja.generated.aperture.policy.language.v1.FirstValid value) {
      if (firstValidBuilder_ == null) {
        if (componentCase_ == 14 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.FirstValid.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.FirstValid.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 14) {
          firstValidBuilder_.mergeFrom(value);
        } else {
          firstValidBuilder_.setMessage(value);
        }
      }
      componentCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     */
    public Builder clearFirstValid() {
      if (firstValidBuilder_ == null) {
        if (componentCase_ == 14) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 14) {
          componentCase_ = 0;
          component_ = null;
        }
        firstValidBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FirstValid.Builder getFirstValidBuilder() {
      return getFirstValidFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FirstValidOrBuilder getFirstValidOrBuilder() {
      if ((componentCase_ == 14) && (firstValidBuilder_ != null)) {
        return firstValidBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 14) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FirstValid.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Picks the first valid input signal and emits it.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FirstValid, com.fluxninja.generated.aperture.policy.language.v1.FirstValid.Builder, com.fluxninja.generated.aperture.policy.language.v1.FirstValidOrBuilder> 
        getFirstValidFieldBuilder() {
      if (firstValidBuilder_ == null) {
        if (!(componentCase_ == 14)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.FirstValid.getDefaultInstance();
        }
        firstValidBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FirstValid, com.fluxninja.generated.aperture.policy.language.v1.FirstValid.Builder, com.fluxninja.generated.aperture.policy.language.v1.FirstValidOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.FirstValid) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 14;
      onChanged();;
      return firstValidBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Alerter, com.fluxninja.generated.aperture.policy.language.v1.Alerter.Builder, com.fluxninja.generated.aperture.policy.language.v1.AlerterOrBuilder> alerterBuilder_;
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     * @return Whether the alerter field is set.
     */
    @java.lang.Override
    public boolean hasAlerter() {
      return componentCase_ == 15;
    }
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     * @return The alerter.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Alerter getAlerter() {
      if (alerterBuilder_ == null) {
        if (componentCase_ == 15) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Alerter.getDefaultInstance();
      } else {
        if (componentCase_ == 15) {
          return alerterBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Alerter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     */
    public Builder setAlerter(com.fluxninja.generated.aperture.policy.language.v1.Alerter value) {
      if (alerterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        alerterBuilder_.setMessage(value);
      }
      componentCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     */
    public Builder setAlerter(
        com.fluxninja.generated.aperture.policy.language.v1.Alerter.Builder builderForValue) {
      if (alerterBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        alerterBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     */
    public Builder mergeAlerter(com.fluxninja.generated.aperture.policy.language.v1.Alerter value) {
      if (alerterBuilder_ == null) {
        if (componentCase_ == 15 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Alerter.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Alerter.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 15) {
          alerterBuilder_.mergeFrom(value);
        } else {
          alerterBuilder_.setMessage(value);
        }
      }
      componentCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     */
    public Builder clearAlerter() {
      if (alerterBuilder_ == null) {
        if (componentCase_ == 15) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 15) {
          componentCase_ = 0;
          component_ = null;
        }
        alerterBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Alerter.Builder getAlerterBuilder() {
      return getAlerterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AlerterOrBuilder getAlerterOrBuilder() {
      if ((componentCase_ == 15) && (alerterBuilder_ != null)) {
        return alerterBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 15) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Alerter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Alerter reacts to a signal and generates alert to send to alert manager.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Alerter, com.fluxninja.generated.aperture.policy.language.v1.Alerter.Builder, com.fluxninja.generated.aperture.policy.language.v1.AlerterOrBuilder> 
        getAlerterFieldBuilder() {
      if (alerterBuilder_ == null) {
        if (!(componentCase_ == 15)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Alerter.getDefaultInstance();
        }
        alerterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Alerter, com.fluxninja.generated.aperture.policy.language.v1.Alerter.Builder, com.fluxninja.generated.aperture.policy.language.v1.AlerterOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Alerter) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 15;
      onChanged();;
      return alerterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Integrator, com.fluxninja.generated.aperture.policy.language.v1.Integrator.Builder, com.fluxninja.generated.aperture.policy.language.v1.IntegratorOrBuilder> integratorBuilder_;
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     * @return Whether the integrator field is set.
     */
    @java.lang.Override
    public boolean hasIntegrator() {
      return componentCase_ == 16;
    }
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     * @return The integrator.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Integrator getIntegrator() {
      if (integratorBuilder_ == null) {
        if (componentCase_ == 16) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Integrator.getDefaultInstance();
      } else {
        if (componentCase_ == 16) {
          return integratorBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Integrator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     */
    public Builder setIntegrator(com.fluxninja.generated.aperture.policy.language.v1.Integrator value) {
      if (integratorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        integratorBuilder_.setMessage(value);
      }
      componentCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     */
    public Builder setIntegrator(
        com.fluxninja.generated.aperture.policy.language.v1.Integrator.Builder builderForValue) {
      if (integratorBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        integratorBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     */
    public Builder mergeIntegrator(com.fluxninja.generated.aperture.policy.language.v1.Integrator value) {
      if (integratorBuilder_ == null) {
        if (componentCase_ == 16 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Integrator.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Integrator.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 16) {
          integratorBuilder_.mergeFrom(value);
        } else {
          integratorBuilder_.setMessage(value);
        }
      }
      componentCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     */
    public Builder clearIntegrator() {
      if (integratorBuilder_ == null) {
        if (componentCase_ == 16) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 16) {
          componentCase_ = 0;
          component_ = null;
        }
        integratorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Integrator.Builder getIntegratorBuilder() {
      return getIntegratorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.IntegratorOrBuilder getIntegratorOrBuilder() {
      if ((componentCase_ == 16) && (integratorBuilder_ != null)) {
        return integratorBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 16) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Integrator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Accumulates sum of signal every tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Integrator, com.fluxninja.generated.aperture.policy.language.v1.Integrator.Builder, com.fluxninja.generated.aperture.policy.language.v1.IntegratorOrBuilder> 
        getIntegratorFieldBuilder() {
      if (integratorBuilder_ == null) {
        if (!(componentCase_ == 16)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Integrator.getDefaultInstance();
        }
        integratorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Integrator, com.fluxninja.generated.aperture.policy.language.v1.Integrator.Builder, com.fluxninja.generated.aperture.policy.language.v1.IntegratorOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Integrator) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 16;
      onChanged();;
      return integratorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Differentiator, com.fluxninja.generated.aperture.policy.language.v1.Differentiator.Builder, com.fluxninja.generated.aperture.policy.language.v1.DifferentiatorOrBuilder> differentiatorBuilder_;
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     * @return Whether the differentiator field is set.
     */
    @java.lang.Override
    public boolean hasDifferentiator() {
      return componentCase_ == 17;
    }
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     * @return The differentiator.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Differentiator getDifferentiator() {
      if (differentiatorBuilder_ == null) {
        if (componentCase_ == 17) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Differentiator.getDefaultInstance();
      } else {
        if (componentCase_ == 17) {
          return differentiatorBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Differentiator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     */
    public Builder setDifferentiator(com.fluxninja.generated.aperture.policy.language.v1.Differentiator value) {
      if (differentiatorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        differentiatorBuilder_.setMessage(value);
      }
      componentCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     */
    public Builder setDifferentiator(
        com.fluxninja.generated.aperture.policy.language.v1.Differentiator.Builder builderForValue) {
      if (differentiatorBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        differentiatorBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     */
    public Builder mergeDifferentiator(com.fluxninja.generated.aperture.policy.language.v1.Differentiator value) {
      if (differentiatorBuilder_ == null) {
        if (componentCase_ == 17 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Differentiator.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Differentiator.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 17) {
          differentiatorBuilder_.mergeFrom(value);
        } else {
          differentiatorBuilder_.setMessage(value);
        }
      }
      componentCase_ = 17;
      return this;
    }
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     */
    public Builder clearDifferentiator() {
      if (differentiatorBuilder_ == null) {
        if (componentCase_ == 17) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 17) {
          componentCase_ = 0;
          component_ = null;
        }
        differentiatorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Differentiator.Builder getDifferentiatorBuilder() {
      return getDifferentiatorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.DifferentiatorOrBuilder getDifferentiatorOrBuilder() {
      if ((componentCase_ == 17) && (differentiatorBuilder_ != null)) {
        return differentiatorBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 17) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Differentiator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Differentiator calculates rate of change per tick.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Differentiator, com.fluxninja.generated.aperture.policy.language.v1.Differentiator.Builder, com.fluxninja.generated.aperture.policy.language.v1.DifferentiatorOrBuilder> 
        getDifferentiatorFieldBuilder() {
      if (differentiatorBuilder_ == null) {
        if (!(componentCase_ == 17)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Differentiator.getDefaultInstance();
        }
        differentiatorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Differentiator, com.fluxninja.generated.aperture.policy.language.v1.Differentiator.Builder, com.fluxninja.generated.aperture.policy.language.v1.DifferentiatorOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Differentiator) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 17;
      onChanged();;
      return differentiatorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.And, com.fluxninja.generated.aperture.policy.language.v1.And.Builder, com.fluxninja.generated.aperture.policy.language.v1.AndOrBuilder> andBuilder_;
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     * @return Whether the and field is set.
     */
    @java.lang.Override
    public boolean hasAnd() {
      return componentCase_ == 19;
    }
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     * @return The and.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.And getAnd() {
      if (andBuilder_ == null) {
        if (componentCase_ == 19) {
          return (com.fluxninja.generated.aperture.policy.language.v1.And) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance();
      } else {
        if (componentCase_ == 19) {
          return andBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     */
    public Builder setAnd(com.fluxninja.generated.aperture.policy.language.v1.And value) {
      if (andBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        andBuilder_.setMessage(value);
      }
      componentCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     */
    public Builder setAnd(
        com.fluxninja.generated.aperture.policy.language.v1.And.Builder builderForValue) {
      if (andBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        andBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     */
    public Builder mergeAnd(com.fluxninja.generated.aperture.policy.language.v1.And value) {
      if (andBuilder_ == null) {
        if (componentCase_ == 19 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.And.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.And) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 19) {
          andBuilder_.mergeFrom(value);
        } else {
          andBuilder_.setMessage(value);
        }
      }
      componentCase_ = 19;
      return this;
    }
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     */
    public Builder clearAnd() {
      if (andBuilder_ == null) {
        if (componentCase_ == 19) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 19) {
          componentCase_ = 0;
          component_ = null;
        }
        andBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.And.Builder getAndBuilder() {
      return getAndFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AndOrBuilder getAndOrBuilder() {
      if ((componentCase_ == 19) && (andBuilder_ != null)) {
        return andBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 19) {
          return (com.fluxninja.generated.aperture.policy.language.v1.And) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Logical AND.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.And, com.fluxninja.generated.aperture.policy.language.v1.And.Builder, com.fluxninja.generated.aperture.policy.language.v1.AndOrBuilder> 
        getAndFieldBuilder() {
      if (andBuilder_ == null) {
        if (!(componentCase_ == 19)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.And.getDefaultInstance();
        }
        andBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.And, com.fluxninja.generated.aperture.policy.language.v1.And.Builder, com.fluxninja.generated.aperture.policy.language.v1.AndOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.And) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 19;
      onChanged();;
      return andBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Or, com.fluxninja.generated.aperture.policy.language.v1.Or.Builder, com.fluxninja.generated.aperture.policy.language.v1.OrOrBuilder> orBuilder_;
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     * @return Whether the or field is set.
     */
    @java.lang.Override
    public boolean hasOr() {
      return componentCase_ == 20;
    }
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     * @return The or.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Or getOr() {
      if (orBuilder_ == null) {
        if (componentCase_ == 20) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Or) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Or.getDefaultInstance();
      } else {
        if (componentCase_ == 20) {
          return orBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Or.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     */
    public Builder setOr(com.fluxninja.generated.aperture.policy.language.v1.Or value) {
      if (orBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        orBuilder_.setMessage(value);
      }
      componentCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     */
    public Builder setOr(
        com.fluxninja.generated.aperture.policy.language.v1.Or.Builder builderForValue) {
      if (orBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        orBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     */
    public Builder mergeOr(com.fluxninja.generated.aperture.policy.language.v1.Or value) {
      if (orBuilder_ == null) {
        if (componentCase_ == 20 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Or.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Or.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Or) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 20) {
          orBuilder_.mergeFrom(value);
        } else {
          orBuilder_.setMessage(value);
        }
      }
      componentCase_ = 20;
      return this;
    }
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     */
    public Builder clearOr() {
      if (orBuilder_ == null) {
        if (componentCase_ == 20) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 20) {
          componentCase_ = 0;
          component_ = null;
        }
        orBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Or.Builder getOrBuilder() {
      return getOrFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OrOrBuilder getOrOrBuilder() {
      if ((componentCase_ == 20) && (orBuilder_ != null)) {
        return orBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 20) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Or) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Or.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Logical OR.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Or, com.fluxninja.generated.aperture.policy.language.v1.Or.Builder, com.fluxninja.generated.aperture.policy.language.v1.OrOrBuilder> 
        getOrFieldBuilder() {
      if (orBuilder_ == null) {
        if (!(componentCase_ == 20)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Or.getDefaultInstance();
        }
        orBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Or, com.fluxninja.generated.aperture.policy.language.v1.Or.Builder, com.fluxninja.generated.aperture.policy.language.v1.OrOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Or) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 20;
      onChanged();;
      return orBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Inverter, com.fluxninja.generated.aperture.policy.language.v1.Inverter.Builder, com.fluxninja.generated.aperture.policy.language.v1.InverterOrBuilder> inverterBuilder_;
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     * @return Whether the inverter field is set.
     */
    @java.lang.Override
    public boolean hasInverter() {
      return componentCase_ == 21;
    }
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     * @return The inverter.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Inverter getInverter() {
      if (inverterBuilder_ == null) {
        if (componentCase_ == 21) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Inverter.getDefaultInstance();
      } else {
        if (componentCase_ == 21) {
          return inverterBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Inverter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     */
    public Builder setInverter(com.fluxninja.generated.aperture.policy.language.v1.Inverter value) {
      if (inverterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        inverterBuilder_.setMessage(value);
      }
      componentCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     */
    public Builder setInverter(
        com.fluxninja.generated.aperture.policy.language.v1.Inverter.Builder builderForValue) {
      if (inverterBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        inverterBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     */
    public Builder mergeInverter(com.fluxninja.generated.aperture.policy.language.v1.Inverter value) {
      if (inverterBuilder_ == null) {
        if (componentCase_ == 21 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Inverter.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Inverter.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 21) {
          inverterBuilder_.mergeFrom(value);
        } else {
          inverterBuilder_.setMessage(value);
        }
      }
      componentCase_ = 21;
      return this;
    }
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     */
    public Builder clearInverter() {
      if (inverterBuilder_ == null) {
        if (componentCase_ == 21) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 21) {
          componentCase_ = 0;
          component_ = null;
        }
        inverterBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Inverter.Builder getInverterBuilder() {
      return getInverterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InverterOrBuilder getInverterOrBuilder() {
      if ((componentCase_ == 21) && (inverterBuilder_ != null)) {
        return inverterBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 21) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Inverter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Logical NOT.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Inverter, com.fluxninja.generated.aperture.policy.language.v1.Inverter.Builder, com.fluxninja.generated.aperture.policy.language.v1.InverterOrBuilder> 
        getInverterFieldBuilder() {
      if (inverterBuilder_ == null) {
        if (!(componentCase_ == 21)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Inverter.getDefaultInstance();
        }
        inverterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Inverter, com.fluxninja.generated.aperture.policy.language.v1.Inverter.Builder, com.fluxninja.generated.aperture.policy.language.v1.InverterOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Inverter) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 21;
      onChanged();;
      return inverterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator, com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.Builder, com.fluxninja.generated.aperture.policy.language.v1.PulseGeneratorOrBuilder> pulseGeneratorBuilder_;
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     * @return Whether the pulseGenerator field is set.
     */
    @java.lang.Override
    public boolean hasPulseGenerator() {
      return componentCase_ == 22;
    }
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     * @return The pulseGenerator.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator getPulseGenerator() {
      if (pulseGeneratorBuilder_ == null) {
        if (componentCase_ == 22) {
          return (com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.getDefaultInstance();
      } else {
        if (componentCase_ == 22) {
          return pulseGeneratorBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     */
    public Builder setPulseGenerator(com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator value) {
      if (pulseGeneratorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        pulseGeneratorBuilder_.setMessage(value);
      }
      componentCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     */
    public Builder setPulseGenerator(
        com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.Builder builderForValue) {
      if (pulseGeneratorBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        pulseGeneratorBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     */
    public Builder mergePulseGenerator(com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator value) {
      if (pulseGeneratorBuilder_ == null) {
        if (componentCase_ == 22 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 22) {
          pulseGeneratorBuilder_.mergeFrom(value);
        } else {
          pulseGeneratorBuilder_.setMessage(value);
        }
      }
      componentCase_ = 22;
      return this;
    }
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     */
    public Builder clearPulseGenerator() {
      if (pulseGeneratorBuilder_ == null) {
        if (componentCase_ == 22) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 22) {
          componentCase_ = 0;
          component_ = null;
        }
        pulseGeneratorBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.Builder getPulseGeneratorBuilder() {
      return getPulseGeneratorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.PulseGeneratorOrBuilder getPulseGeneratorOrBuilder() {
      if ((componentCase_ == 22) && (pulseGeneratorBuilder_ != null)) {
        return pulseGeneratorBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 22) {
          return (com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Generates 0 and 1 in turns.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator, com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.Builder, com.fluxninja.generated.aperture.policy.language.v1.PulseGeneratorOrBuilder> 
        getPulseGeneratorFieldBuilder() {
      if (pulseGeneratorBuilder_ == null) {
        if (!(componentCase_ == 22)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.getDefaultInstance();
        }
        pulseGeneratorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator, com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator.Builder, com.fluxninja.generated.aperture.policy.language.v1.PulseGeneratorOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 22;
      onChanged();;
      return pulseGeneratorBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Holder, com.fluxninja.generated.aperture.policy.language.v1.Holder.Builder, com.fluxninja.generated.aperture.policy.language.v1.HolderOrBuilder> holderBuilder_;
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     * @return Whether the holder field is set.
     */
    @java.lang.Override
    public boolean hasHolder() {
      return componentCase_ == 23;
    }
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     * @return The holder.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Holder getHolder() {
      if (holderBuilder_ == null) {
        if (componentCase_ == 23) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Holder) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Holder.getDefaultInstance();
      } else {
        if (componentCase_ == 23) {
          return holderBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Holder.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     */
    public Builder setHolder(com.fluxninja.generated.aperture.policy.language.v1.Holder value) {
      if (holderBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        holderBuilder_.setMessage(value);
      }
      componentCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     */
    public Builder setHolder(
        com.fluxninja.generated.aperture.policy.language.v1.Holder.Builder builderForValue) {
      if (holderBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        holderBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     */
    public Builder mergeHolder(com.fluxninja.generated.aperture.policy.language.v1.Holder value) {
      if (holderBuilder_ == null) {
        if (componentCase_ == 23 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Holder.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Holder.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Holder) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 23) {
          holderBuilder_.mergeFrom(value);
        } else {
          holderBuilder_.setMessage(value);
        }
      }
      componentCase_ = 23;
      return this;
    }
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     */
    public Builder clearHolder() {
      if (holderBuilder_ == null) {
        if (componentCase_ == 23) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 23) {
          componentCase_ = 0;
          component_ = null;
        }
        holderBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Holder.Builder getHolderBuilder() {
      return getHolderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.HolderOrBuilder getHolderOrBuilder() {
      if ((componentCase_ == 23) && (holderBuilder_ != null)) {
        return holderBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 23) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Holder) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Holder.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Holder, com.fluxninja.generated.aperture.policy.language.v1.Holder.Builder, com.fluxninja.generated.aperture.policy.language.v1.HolderOrBuilder> 
        getHolderFieldBuilder() {
      if (holderBuilder_ == null) {
        if (!(componentCase_ == 23)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Holder.getDefaultInstance();
        }
        holderBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Holder, com.fluxninja.generated.aperture.policy.language.v1.Holder.Builder, com.fluxninja.generated.aperture.policy.language.v1.HolderOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Holder) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 23;
      onChanged();;
      return holderBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit, com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedCircuitOrBuilder> nestedCircuitBuilder_;
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     * @return Whether the nestedCircuit field is set.
     */
    @java.lang.Override
    public boolean hasNestedCircuit() {
      return componentCase_ == 24;
    }
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     * @return The nestedCircuit.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit getNestedCircuit() {
      if (nestedCircuitBuilder_ == null) {
        if (componentCase_ == 24) {
          return (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance();
      } else {
        if (componentCase_ == 24) {
          return nestedCircuitBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     */
    public Builder setNestedCircuit(com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit value) {
      if (nestedCircuitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        nestedCircuitBuilder_.setMessage(value);
      }
      componentCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     */
    public Builder setNestedCircuit(
        com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.Builder builderForValue) {
      if (nestedCircuitBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        nestedCircuitBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     */
    public Builder mergeNestedCircuit(com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit value) {
      if (nestedCircuitBuilder_ == null) {
        if (componentCase_ == 24 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 24) {
          nestedCircuitBuilder_.mergeFrom(value);
        } else {
          nestedCircuitBuilder_.setMessage(value);
        }
      }
      componentCase_ = 24;
      return this;
    }
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     */
    public Builder clearNestedCircuit() {
      if (nestedCircuitBuilder_ == null) {
        if (componentCase_ == 24) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 24) {
          componentCase_ = 0;
          component_ = null;
        }
        nestedCircuitBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.Builder getNestedCircuitBuilder() {
      return getNestedCircuitFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuitOrBuilder getNestedCircuitOrBuilder() {
      if ((componentCase_ == 24) && (nestedCircuitBuilder_ != null)) {
        return nestedCircuitBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 24) {
          return (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit, com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedCircuitOrBuilder> 
        getNestedCircuitFieldBuilder() {
      if (nestedCircuitBuilder_ == null) {
        if (!(componentCase_ == 24)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance();
        }
        nestedCircuitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit, com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedCircuitOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 24;
      onChanged();;
      return nestedCircuitBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngressOrBuilder> nestedSignalIngressBuilder_;
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     * @return Whether the nestedSignalIngress field is set.
     */
    @java.lang.Override
    public boolean hasNestedSignalIngress() {
      return componentCase_ == 25;
    }
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     * @return The nestedSignalIngress.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress getNestedSignalIngress() {
      if (nestedSignalIngressBuilder_ == null) {
        if (componentCase_ == 25) {
          return (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.getDefaultInstance();
      } else {
        if (componentCase_ == 25) {
          return nestedSignalIngressBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     */
    public Builder setNestedSignalIngress(com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress value) {
      if (nestedSignalIngressBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        nestedSignalIngressBuilder_.setMessage(value);
      }
      componentCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     */
    public Builder setNestedSignalIngress(
        com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.Builder builderForValue) {
      if (nestedSignalIngressBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        nestedSignalIngressBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     */
    public Builder mergeNestedSignalIngress(com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress value) {
      if (nestedSignalIngressBuilder_ == null) {
        if (componentCase_ == 25 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 25) {
          nestedSignalIngressBuilder_.mergeFrom(value);
        } else {
          nestedSignalIngressBuilder_.setMessage(value);
        }
      }
      componentCase_ = 25;
      return this;
    }
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     */
    public Builder clearNestedSignalIngress() {
      if (nestedSignalIngressBuilder_ == null) {
        if (componentCase_ == 25) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 25) {
          componentCase_ = 0;
          component_ = null;
        }
        nestedSignalIngressBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.Builder getNestedSignalIngressBuilder() {
      return getNestedSignalIngressFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngressOrBuilder getNestedSignalIngressOrBuilder() {
      if ((componentCase_ == 25) && (nestedSignalIngressBuilder_ != null)) {
        return nestedSignalIngressBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 25) {
          return (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngressOrBuilder> 
        getNestedSignalIngressFieldBuilder() {
      if (nestedSignalIngressBuilder_ == null) {
        if (!(componentCase_ == 25)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.getDefaultInstance();
        }
        nestedSignalIngressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngressOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 25;
      onChanged();;
      return nestedSignalIngressBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgressOrBuilder> nestedSignalEgressBuilder_;
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     * @return Whether the nestedSignalEgress field is set.
     */
    @java.lang.Override
    public boolean hasNestedSignalEgress() {
      return componentCase_ == 26;
    }
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     * @return The nestedSignalEgress.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress getNestedSignalEgress() {
      if (nestedSignalEgressBuilder_ == null) {
        if (componentCase_ == 26) {
          return (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.getDefaultInstance();
      } else {
        if (componentCase_ == 26) {
          return nestedSignalEgressBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     */
    public Builder setNestedSignalEgress(com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress value) {
      if (nestedSignalEgressBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        nestedSignalEgressBuilder_.setMessage(value);
      }
      componentCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     */
    public Builder setNestedSignalEgress(
        com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.Builder builderForValue) {
      if (nestedSignalEgressBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        nestedSignalEgressBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     */
    public Builder mergeNestedSignalEgress(com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress value) {
      if (nestedSignalEgressBuilder_ == null) {
        if (componentCase_ == 26 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 26) {
          nestedSignalEgressBuilder_.mergeFrom(value);
        } else {
          nestedSignalEgressBuilder_.setMessage(value);
        }
      }
      componentCase_ = 26;
      return this;
    }
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     */
    public Builder clearNestedSignalEgress() {
      if (nestedSignalEgressBuilder_ == null) {
        if (componentCase_ == 26) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 26) {
          componentCase_ = 0;
          component_ = null;
        }
        nestedSignalEgressBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.Builder getNestedSignalEgressBuilder() {
      return getNestedSignalEgressFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgressOrBuilder getNestedSignalEgressOrBuilder() {
      if ((componentCase_ == 26) && (nestedSignalEgressBuilder_ != null)) {
        return nestedSignalEgressBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 26) {
          return (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgressOrBuilder> 
        getNestedSignalEgressFieldBuilder() {
      if (nestedSignalEgressBuilder_ == null) {
        if (!(componentCase_ == 26)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.getDefaultInstance();
        }
        nestedSignalEgressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress.Builder, com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgressOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 26;
      onChanged();;
      return nestedSignalEgressBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Query, com.fluxninja.generated.aperture.policy.language.v1.Query.Builder, com.fluxninja.generated.aperture.policy.language.v1.QueryOrBuilder> queryBuilder_;
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     * @return Whether the query field is set.
     */
    @java.lang.Override
    public boolean hasQuery() {
      return componentCase_ == 100;
    }
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     * @return The query.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Query getQuery() {
      if (queryBuilder_ == null) {
        if (componentCase_ == 100) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Query) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Query.getDefaultInstance();
      } else {
        if (componentCase_ == 100) {
          return queryBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Query.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     */
    public Builder setQuery(com.fluxninja.generated.aperture.policy.language.v1.Query value) {
      if (queryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        queryBuilder_.setMessage(value);
      }
      componentCase_ = 100;
      return this;
    }
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     */
    public Builder setQuery(
        com.fluxninja.generated.aperture.policy.language.v1.Query.Builder builderForValue) {
      if (queryBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        queryBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 100;
      return this;
    }
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     */
    public Builder mergeQuery(com.fluxninja.generated.aperture.policy.language.v1.Query value) {
      if (queryBuilder_ == null) {
        if (componentCase_ == 100 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.Query.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Query.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.Query) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 100) {
          queryBuilder_.mergeFrom(value);
        } else {
          queryBuilder_.setMessage(value);
        }
      }
      componentCase_ = 100;
      return this;
    }
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     */
    public Builder clearQuery() {
      if (queryBuilder_ == null) {
        if (componentCase_ == 100) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 100) {
          componentCase_ = 0;
          component_ = null;
        }
        queryBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Query.Builder getQueryBuilder() {
      return getQueryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.QueryOrBuilder getQueryOrBuilder() {
      if ((componentCase_ == 100) && (queryBuilder_ != null)) {
        return queryBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 100) {
          return (com.fluxninja.generated.aperture.policy.language.v1.Query) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.Query.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Query components that are query databases such as Prometheus.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Query, com.fluxninja.generated.aperture.policy.language.v1.Query.Builder, com.fluxninja.generated.aperture.policy.language.v1.QueryOrBuilder> 
        getQueryFieldBuilder() {
      if (queryBuilder_ == null) {
        if (!(componentCase_ == 100)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.Query.getDefaultInstance();
        }
        queryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Query, com.fluxninja.generated.aperture.policy.language.v1.Query.Builder, com.fluxninja.generated.aperture.policy.language.v1.QueryOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.Query) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 100;
      onChanged();;
      return queryBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FlowControl, com.fluxninja.generated.aperture.policy.language.v1.FlowControl.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowControlOrBuilder> flowControlBuilder_;
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     * @return Whether the flowControl field is set.
     */
    @java.lang.Override
    public boolean hasFlowControl() {
      return componentCase_ == 101;
    }
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     * @return The flowControl.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControl getFlowControl() {
      if (flowControlBuilder_ == null) {
        if (componentCase_ == 101) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance();
      } else {
        if (componentCase_ == 101) {
          return flowControlBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     */
    public Builder setFlowControl(com.fluxninja.generated.aperture.policy.language.v1.FlowControl value) {
      if (flowControlBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        flowControlBuilder_.setMessage(value);
      }
      componentCase_ = 101;
      return this;
    }
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     */
    public Builder setFlowControl(
        com.fluxninja.generated.aperture.policy.language.v1.FlowControl.Builder builderForValue) {
      if (flowControlBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        flowControlBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 101;
      return this;
    }
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     */
    public Builder mergeFlowControl(com.fluxninja.generated.aperture.policy.language.v1.FlowControl value) {
      if (flowControlBuilder_ == null) {
        if (componentCase_ == 101 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.FlowControl.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 101) {
          flowControlBuilder_.mergeFrom(value);
        } else {
          flowControlBuilder_.setMessage(value);
        }
      }
      componentCase_ = 101;
      return this;
    }
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     */
    public Builder clearFlowControl() {
      if (flowControlBuilder_ == null) {
        if (componentCase_ == 101) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 101) {
          componentCase_ = 0;
          component_ = null;
        }
        flowControlBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControl.Builder getFlowControlBuilder() {
      return getFlowControlFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControlOrBuilder getFlowControlOrBuilder() {
      if ((componentCase_ == 101) && (flowControlBuilder_ != null)) {
        return flowControlBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 101) {
          return (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * FlowControl components are used to regulate requests flow.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.FlowControl, com.fluxninja.generated.aperture.policy.language.v1.FlowControl.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowControlOrBuilder> 
        getFlowControlFieldBuilder() {
      if (flowControlBuilder_ == null) {
        if (!(componentCase_ == 101)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance();
        }
        flowControlBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.FlowControl, com.fluxninja.generated.aperture.policy.language.v1.FlowControl.Builder, com.fluxninja.generated.aperture.policy.language.v1.FlowControlOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 101;
      onChanged();;
      return flowControlBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.AutoScale, com.fluxninja.generated.aperture.policy.language.v1.AutoScale.Builder, com.fluxninja.generated.aperture.policy.language.v1.AutoScaleOrBuilder> autoScaleBuilder_;
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     * @return Whether the autoScale field is set.
     */
    @java.lang.Override
    public boolean hasAutoScale() {
      return componentCase_ == 102;
    }
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     * @return The autoScale.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AutoScale getAutoScale() {
      if (autoScaleBuilder_ == null) {
        if (componentCase_ == 102) {
          return (com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.AutoScale.getDefaultInstance();
      } else {
        if (componentCase_ == 102) {
          return autoScaleBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.AutoScale.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     */
    public Builder setAutoScale(com.fluxninja.generated.aperture.policy.language.v1.AutoScale value) {
      if (autoScaleBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        autoScaleBuilder_.setMessage(value);
      }
      componentCase_ = 102;
      return this;
    }
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     */
    public Builder setAutoScale(
        com.fluxninja.generated.aperture.policy.language.v1.AutoScale.Builder builderForValue) {
      if (autoScaleBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        autoScaleBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 102;
      return this;
    }
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     */
    public Builder mergeAutoScale(com.fluxninja.generated.aperture.policy.language.v1.AutoScale value) {
      if (autoScaleBuilder_ == null) {
        if (componentCase_ == 102 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.AutoScale.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.AutoScale.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 102) {
          autoScaleBuilder_.mergeFrom(value);
        } else {
          autoScaleBuilder_.setMessage(value);
        }
      }
      componentCase_ = 102;
      return this;
    }
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     */
    public Builder clearAutoScale() {
      if (autoScaleBuilder_ == null) {
        if (componentCase_ == 102) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 102) {
          componentCase_ = 0;
          component_ = null;
        }
        autoScaleBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.AutoScale.Builder getAutoScaleBuilder() {
      return getAutoScaleFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AutoScaleOrBuilder getAutoScaleOrBuilder() {
      if ((componentCase_ == 102) && (autoScaleBuilder_ != null)) {
        return autoScaleBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 102) {
          return (com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.AutoScale.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * AutoScale components are used to scale the service.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.AutoScale, com.fluxninja.generated.aperture.policy.language.v1.AutoScale.Builder, com.fluxninja.generated.aperture.policy.language.v1.AutoScaleOrBuilder> 
        getAutoScaleFieldBuilder() {
      if (autoScaleBuilder_ == null) {
        if (!(componentCase_ == 102)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.AutoScale.getDefaultInstance();
        }
        autoScaleBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.AutoScale, com.fluxninja.generated.aperture.policy.language.v1.AutoScale.Builder, com.fluxninja.generated.aperture.policy.language.v1.AutoScaleOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.AutoScale) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 102;
      onChanged();;
      return autoScaleBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.Component)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.Component)
  private static final com.fluxninja.generated.aperture.policy.language.v1.Component DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.Component();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Component getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Component>
      PARSER = new com.google.protobuf.AbstractParser<Component>() {
    @java.lang.Override
    public Component parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Component(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Component> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Component> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Component getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

