// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/distcache/v1/stats.proto

package com.fluxninja.generated.aperture.distcache.v1;

/**
 * Protobuf type {@code aperture.distcache.v1.SlabInfo}
 */
public final class SlabInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.distcache.v1.SlabInfo)
    SlabInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SlabInfo.newBuilder() to construct.
  private SlabInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SlabInfo() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SlabInfo();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SlabInfo(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            allocated_ = input.readInt64();
            break;
          }
          case 16: {

            inuse_ = input.readInt64();
            break;
          }
          case 24: {

            garbage_ = input.readInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_SlabInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_SlabInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.distcache.v1.SlabInfo.class, com.fluxninja.generated.aperture.distcache.v1.SlabInfo.Builder.class);
  }

  public static final int ALLOCATED_FIELD_NUMBER = 1;
  private long allocated_;
  /**
   * <code>int64 allocated = 1 [json_name = "Allocated"];</code>
   * @return The allocated.
   */
  @java.lang.Override
  public long getAllocated() {
    return allocated_;
  }

  public static final int INUSE_FIELD_NUMBER = 2;
  private long inuse_;
  /**
   * <code>int64 inuse = 2 [json_name = "Inuse"];</code>
   * @return The inuse.
   */
  @java.lang.Override
  public long getInuse() {
    return inuse_;
  }

  public static final int GARBAGE_FIELD_NUMBER = 3;
  private long garbage_;
  /**
   * <code>int64 garbage = 3 [json_name = "Garbage"];</code>
   * @return The garbage.
   */
  @java.lang.Override
  public long getGarbage() {
    return garbage_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (allocated_ != 0L) {
      output.writeInt64(1, allocated_);
    }
    if (inuse_ != 0L) {
      output.writeInt64(2, inuse_);
    }
    if (garbage_ != 0L) {
      output.writeInt64(3, garbage_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (allocated_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, allocated_);
    }
    if (inuse_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, inuse_);
    }
    if (garbage_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, garbage_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.distcache.v1.SlabInfo)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.distcache.v1.SlabInfo other = (com.fluxninja.generated.aperture.distcache.v1.SlabInfo) obj;

    if (getAllocated()
        != other.getAllocated()) return false;
    if (getInuse()
        != other.getInuse()) return false;
    if (getGarbage()
        != other.getGarbage()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ALLOCATED_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAllocated());
    hash = (37 * hash) + INUSE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getInuse());
    hash = (37 * hash) + GARBAGE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getGarbage());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.distcache.v1.SlabInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.distcache.v1.SlabInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.distcache.v1.SlabInfo)
      com.fluxninja.generated.aperture.distcache.v1.SlabInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_SlabInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_SlabInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.distcache.v1.SlabInfo.class, com.fluxninja.generated.aperture.distcache.v1.SlabInfo.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.distcache.v1.SlabInfo.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      allocated_ = 0L;

      inuse_ = 0L;

      garbage_ = 0L;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_SlabInfo_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.SlabInfo getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.distcache.v1.SlabInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.SlabInfo build() {
      com.fluxninja.generated.aperture.distcache.v1.SlabInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.SlabInfo buildPartial() {
      com.fluxninja.generated.aperture.distcache.v1.SlabInfo result = new com.fluxninja.generated.aperture.distcache.v1.SlabInfo(this);
      result.allocated_ = allocated_;
      result.inuse_ = inuse_;
      result.garbage_ = garbage_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.distcache.v1.SlabInfo) {
        return mergeFrom((com.fluxninja.generated.aperture.distcache.v1.SlabInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.distcache.v1.SlabInfo other) {
      if (other == com.fluxninja.generated.aperture.distcache.v1.SlabInfo.getDefaultInstance()) return this;
      if (other.getAllocated() != 0L) {
        setAllocated(other.getAllocated());
      }
      if (other.getInuse() != 0L) {
        setInuse(other.getInuse());
      }
      if (other.getGarbage() != 0L) {
        setGarbage(other.getGarbage());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.distcache.v1.SlabInfo parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.distcache.v1.SlabInfo) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private long allocated_ ;
    /**
     * <code>int64 allocated = 1 [json_name = "Allocated"];</code>
     * @return The allocated.
     */
    @java.lang.Override
    public long getAllocated() {
      return allocated_;
    }
    /**
     * <code>int64 allocated = 1 [json_name = "Allocated"];</code>
     * @param value The allocated to set.
     * @return This builder for chaining.
     */
    public Builder setAllocated(long value) {
      
      allocated_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 allocated = 1 [json_name = "Allocated"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAllocated() {
      
      allocated_ = 0L;
      onChanged();
      return this;
    }

    private long inuse_ ;
    /**
     * <code>int64 inuse = 2 [json_name = "Inuse"];</code>
     * @return The inuse.
     */
    @java.lang.Override
    public long getInuse() {
      return inuse_;
    }
    /**
     * <code>int64 inuse = 2 [json_name = "Inuse"];</code>
     * @param value The inuse to set.
     * @return This builder for chaining.
     */
    public Builder setInuse(long value) {
      
      inuse_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 inuse = 2 [json_name = "Inuse"];</code>
     * @return This builder for chaining.
     */
    public Builder clearInuse() {
      
      inuse_ = 0L;
      onChanged();
      return this;
    }

    private long garbage_ ;
    /**
     * <code>int64 garbage = 3 [json_name = "Garbage"];</code>
     * @return The garbage.
     */
    @java.lang.Override
    public long getGarbage() {
      return garbage_;
    }
    /**
     * <code>int64 garbage = 3 [json_name = "Garbage"];</code>
     * @param value The garbage to set.
     * @return This builder for chaining.
     */
    public Builder setGarbage(long value) {
      
      garbage_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 garbage = 3 [json_name = "Garbage"];</code>
     * @return This builder for chaining.
     */
    public Builder clearGarbage() {
      
      garbage_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.distcache.v1.SlabInfo)
  }

  // @@protoc_insertion_point(class_scope:aperture.distcache.v1.SlabInfo)
  private static final com.fluxninja.generated.aperture.distcache.v1.SlabInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.distcache.v1.SlabInfo();
  }

  public static com.fluxninja.generated.aperture.distcache.v1.SlabInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SlabInfo>
      PARSER = new com.google.protobuf.AbstractParser<SlabInfo>() {
    @java.lang.Override
    public SlabInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SlabInfo(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SlabInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SlabInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.SlabInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

