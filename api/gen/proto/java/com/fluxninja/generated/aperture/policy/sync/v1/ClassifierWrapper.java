// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/sync/v1/classifier.proto

package com.fluxninja.generated.aperture.policy.sync.v1;

/**
 * Protobuf type {@code aperture.policy.sync.v1.ClassifierWrapper}
 */
public final class ClassifierWrapper extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.sync.v1.ClassifierWrapper)
    ClassifierWrapperOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ClassifierWrapper.newBuilder() to construct.
  private ClassifierWrapper(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ClassifierWrapper() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ClassifierWrapper();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ClassifierWrapper(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.Builder subBuilder = null;
            if (classifierAttributes_ != null) {
              subBuilder = classifierAttributes_.toBuilder();
            }
            classifierAttributes_ = input.readMessage(com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(classifierAttributes_);
              classifierAttributes_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder subBuilder = null;
            if (classifier_ != null) {
              subBuilder = classifier_.toBuilder();
            }
            classifier_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Classifier.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(classifier_);
              classifier_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.sync.v1.ClassifierProto.internal_static_aperture_policy_sync_v1_ClassifierWrapper_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.sync.v1.ClassifierProto.internal_static_aperture_policy_sync_v1_ClassifierWrapper_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper.class, com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper.Builder.class);
  }

  public static final int CLASSIFIER_ATTRIBUTES_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes classifierAttributes_;
  /**
   * <pre>
   * CommonAttributes
   * </pre>
   *
   * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
   * @return Whether the classifierAttributes field is set.
   */
  @java.lang.Override
  public boolean hasClassifierAttributes() {
    return classifierAttributes_ != null;
  }
  /**
   * <pre>
   * CommonAttributes
   * </pre>
   *
   * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
   * @return The classifierAttributes.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes getClassifierAttributes() {
    return classifierAttributes_ == null ? com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.getDefaultInstance() : classifierAttributes_;
  }
  /**
   * <pre>
   * CommonAttributes
   * </pre>
   *
   * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributesOrBuilder getClassifierAttributesOrBuilder() {
    return getClassifierAttributes();
  }

  public static final int CLASSIFIER_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.policy.language.v1.Classifier classifier_;
  /**
   * <pre>
   * Classifier
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
   * @return Whether the classifier field is set.
   */
  @java.lang.Override
  public boolean hasClassifier() {
    return classifier_ != null;
  }
  /**
   * <pre>
   * Classifier
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
   * @return The classifier.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Classifier getClassifier() {
    return classifier_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Classifier.getDefaultInstance() : classifier_;
  }
  /**
   * <pre>
   * Classifier
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder getClassifierOrBuilder() {
    return getClassifier();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (classifierAttributes_ != null) {
      output.writeMessage(1, getClassifierAttributes());
    }
    if (classifier_ != null) {
      output.writeMessage(2, getClassifier());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (classifierAttributes_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getClassifierAttributes());
    }
    if (classifier_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getClassifier());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper other = (com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper) obj;

    if (hasClassifierAttributes() != other.hasClassifierAttributes()) return false;
    if (hasClassifierAttributes()) {
      if (!getClassifierAttributes()
          .equals(other.getClassifierAttributes())) return false;
    }
    if (hasClassifier() != other.hasClassifier()) return false;
    if (hasClassifier()) {
      if (!getClassifier()
          .equals(other.getClassifier())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasClassifierAttributes()) {
      hash = (37 * hash) + CLASSIFIER_ATTRIBUTES_FIELD_NUMBER;
      hash = (53 * hash) + getClassifierAttributes().hashCode();
    }
    if (hasClassifier()) {
      hash = (37 * hash) + CLASSIFIER_FIELD_NUMBER;
      hash = (53 * hash) + getClassifier().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.policy.sync.v1.ClassifierWrapper}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.sync.v1.ClassifierWrapper)
      com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapperOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.sync.v1.ClassifierProto.internal_static_aperture_policy_sync_v1_ClassifierWrapper_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.sync.v1.ClassifierProto.internal_static_aperture_policy_sync_v1_ClassifierWrapper_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper.class, com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (classifierAttributesBuilder_ == null) {
        classifierAttributes_ = null;
      } else {
        classifierAttributes_ = null;
        classifierAttributesBuilder_ = null;
      }
      if (classifierBuilder_ == null) {
        classifier_ = null;
      } else {
        classifier_ = null;
        classifierBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.sync.v1.ClassifierProto.internal_static_aperture_policy_sync_v1_ClassifierWrapper_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper build() {
      com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper buildPartial() {
      com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper result = new com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper(this);
      if (classifierAttributesBuilder_ == null) {
        result.classifierAttributes_ = classifierAttributes_;
      } else {
        result.classifierAttributes_ = classifierAttributesBuilder_.build();
      }
      if (classifierBuilder_ == null) {
        result.classifier_ = classifier_;
      } else {
        result.classifier_ = classifierBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper other) {
      if (other == com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper.getDefaultInstance()) return this;
      if (other.hasClassifierAttributes()) {
        mergeClassifierAttributes(other.getClassifierAttributes());
      }
      if (other.hasClassifier()) {
        mergeClassifier(other.getClassifier());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes classifierAttributes_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes, com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.Builder, com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributesOrBuilder> classifierAttributesBuilder_;
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     * @return Whether the classifierAttributes field is set.
     */
    public boolean hasClassifierAttributes() {
      return classifierAttributesBuilder_ != null || classifierAttributes_ != null;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     * @return The classifierAttributes.
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes getClassifierAttributes() {
      if (classifierAttributesBuilder_ == null) {
        return classifierAttributes_ == null ? com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.getDefaultInstance() : classifierAttributes_;
      } else {
        return classifierAttributesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     */
    public Builder setClassifierAttributes(com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes value) {
      if (classifierAttributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        classifierAttributes_ = value;
        onChanged();
      } else {
        classifierAttributesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     */
    public Builder setClassifierAttributes(
        com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.Builder builderForValue) {
      if (classifierAttributesBuilder_ == null) {
        classifierAttributes_ = builderForValue.build();
        onChanged();
      } else {
        classifierAttributesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     */
    public Builder mergeClassifierAttributes(com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes value) {
      if (classifierAttributesBuilder_ == null) {
        if (classifierAttributes_ != null) {
          classifierAttributes_ =
            com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.newBuilder(classifierAttributes_).mergeFrom(value).buildPartial();
        } else {
          classifierAttributes_ = value;
        }
        onChanged();
      } else {
        classifierAttributesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     */
    public Builder clearClassifierAttributes() {
      if (classifierAttributesBuilder_ == null) {
        classifierAttributes_ = null;
        onChanged();
      } else {
        classifierAttributes_ = null;
        classifierAttributesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.Builder getClassifierAttributesBuilder() {
      
      onChanged();
      return getClassifierAttributesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributesOrBuilder getClassifierAttributesOrBuilder() {
      if (classifierAttributesBuilder_ != null) {
        return classifierAttributesBuilder_.getMessageOrBuilder();
      } else {
        return classifierAttributes_ == null ?
            com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.getDefaultInstance() : classifierAttributes_;
      }
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.ClassifierAttributes classifier_attributes = 1 [json_name = "classifierAttributes"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes, com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.Builder, com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributesOrBuilder> 
        getClassifierAttributesFieldBuilder() {
      if (classifierAttributesBuilder_ == null) {
        classifierAttributesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes, com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributes.Builder, com.fluxninja.generated.aperture.policy.sync.v1.ClassifierAttributesOrBuilder>(
                getClassifierAttributes(),
                getParentForChildren(),
                isClean());
        classifierAttributes_ = null;
      }
      return classifierAttributesBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.Classifier classifier_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Classifier, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder, com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder> classifierBuilder_;
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     * @return Whether the classifier field is set.
     */
    public boolean hasClassifier() {
      return classifierBuilder_ != null || classifier_ != null;
    }
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     * @return The classifier.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier getClassifier() {
      if (classifierBuilder_ == null) {
        return classifier_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Classifier.getDefaultInstance() : classifier_;
      } else {
        return classifierBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     */
    public Builder setClassifier(com.fluxninja.generated.aperture.policy.language.v1.Classifier value) {
      if (classifierBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        classifier_ = value;
        onChanged();
      } else {
        classifierBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     */
    public Builder setClassifier(
        com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder builderForValue) {
      if (classifierBuilder_ == null) {
        classifier_ = builderForValue.build();
        onChanged();
      } else {
        classifierBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     */
    public Builder mergeClassifier(com.fluxninja.generated.aperture.policy.language.v1.Classifier value) {
      if (classifierBuilder_ == null) {
        if (classifier_ != null) {
          classifier_ =
            com.fluxninja.generated.aperture.policy.language.v1.Classifier.newBuilder(classifier_).mergeFrom(value).buildPartial();
        } else {
          classifier_ = value;
        }
        onChanged();
      } else {
        classifierBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     */
    public Builder clearClassifier() {
      if (classifierBuilder_ == null) {
        classifier_ = null;
        onChanged();
      } else {
        classifier_ = null;
        classifierBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder getClassifierBuilder() {
      
      onChanged();
      return getClassifierFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder getClassifierOrBuilder() {
      if (classifierBuilder_ != null) {
        return classifierBuilder_.getMessageOrBuilder();
      } else {
        return classifier_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.Classifier.getDefaultInstance() : classifier_;
      }
    }
    /**
     * <pre>
     * Classifier
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Classifier classifier = 2 [json_name = "classifier"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Classifier, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder, com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder> 
        getClassifierFieldBuilder() {
      if (classifierBuilder_ == null) {
        classifierBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Classifier, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder, com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder>(
                getClassifier(),
                getParentForChildren(),
                isClean());
        classifier_ = null;
      }
      return classifierBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.sync.v1.ClassifierWrapper)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.sync.v1.ClassifierWrapper)
  private static final com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper();
  }

  public static com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ClassifierWrapper>
      PARSER = new com.google.protobuf.AbstractParser<ClassifierWrapper>() {
    @java.lang.Override
    public ClassifierWrapper parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ClassifierWrapper(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ClassifierWrapper> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ClassifierWrapper> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.sync.v1.ClassifierWrapper getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

