// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/std_components.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Takes an input signal and emits the output after applying the specified unary operator
 * $$
 * &#92;text{output} = &#92;unary_operator{&#92;text{input}}
 * $$
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.UnaryOperator}
 */
public final class UnaryOperator extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.UnaryOperator)
    UnaryOperatorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use UnaryOperator.newBuilder() to construct.
  private UnaryOperator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private UnaryOperator() {
    operator_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new UnaryOperator();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private UnaryOperator(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.Builder subBuilder = null;
            if (inPorts_ != null) {
              subBuilder = inPorts_.toBuilder();
            }
            inPorts_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(inPorts_);
              inPorts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.Builder subBuilder = null;
            if (outPorts_ != null) {
              subBuilder = outPorts_.toBuilder();
            }
            outPorts_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(outPorts_);
              outPorts_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            operator_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.class, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Builder.class);
  }

  public interface InsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.UnaryOperator.Ins)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
     * @return Whether the input field is set.
     */
    boolean hasInput();
    /**
     * <pre>
     * Input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
     * @return The input.
     */
    com.fluxninja.generated.aperture.policy.language.v1.InPort getInput();
    /**
     * <pre>
     * Input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getInputOrBuilder();
  }
  /**
   * <pre>
   * Inputs for the UnaryOperator component.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.UnaryOperator.Ins}
   */
  public static final class Ins extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.UnaryOperator.Ins)
      InsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Ins.newBuilder() to construct.
    private Ins(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Ins() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Ins();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Ins(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder subBuilder = null;
              if (input_ != null) {
                subBuilder = input_.toBuilder();
              }
              input_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.InPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(input_);
                input_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Ins_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Ins_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.class, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.Builder.class);
    }

    public static final int INPUT_FIELD_NUMBER = 1;
    private com.fluxninja.generated.aperture.policy.language.v1.InPort input_;
    /**
     * <pre>
     * Input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
     * @return Whether the input field is set.
     */
    @java.lang.Override
    public boolean hasInput() {
      return input_ != null;
    }
    /**
     * <pre>
     * Input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
     * @return The input.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InPort getInput() {
      return input_ == null ? com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : input_;
    }
    /**
     * <pre>
     * Input signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getInputOrBuilder() {
      return getInput();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (input_ != null) {
        output.writeMessage(1, getInput());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (input_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getInput());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins other = (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins) obj;

      if (hasInput() != other.hasInput()) return false;
      if (hasInput()) {
        if (!getInput()
            .equals(other.getInput())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInput()) {
        hash = (37 * hash) + INPUT_FIELD_NUMBER;
        hash = (53 * hash) + getInput().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Inputs for the UnaryOperator component.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.UnaryOperator.Ins}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.UnaryOperator.Ins)
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.InsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Ins_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Ins_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.class, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (inputBuilder_ == null) {
          input_ = null;
        } else {
          input_ = null;
          inputBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Ins_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins build() {
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins result = new com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins(this);
        if (inputBuilder_ == null) {
          result.input_ = input_;
        } else {
          result.input_ = inputBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.getDefaultInstance()) return this;
        if (other.hasInput()) {
          mergeInput(other.getInput());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.InPort input_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> inputBuilder_;
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       * @return Whether the input field is set.
       */
      public boolean hasInput() {
        return inputBuilder_ != null || input_ != null;
      }
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       * @return The input.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort getInput() {
        if (inputBuilder_ == null) {
          return input_ == null ? com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : input_;
        } else {
          return inputBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       */
      public Builder setInput(com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (inputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          input_ = value;
          onChanged();
        } else {
          inputBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       */
      public Builder setInput(
          com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder builderForValue) {
        if (inputBuilder_ == null) {
          input_ = builderForValue.build();
          onChanged();
        } else {
          inputBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       */
      public Builder mergeInput(com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
        if (inputBuilder_ == null) {
          if (input_ != null) {
            input_ =
              com.fluxninja.generated.aperture.policy.language.v1.InPort.newBuilder(input_).mergeFrom(value).buildPartial();
          } else {
            input_ = value;
          }
          onChanged();
        } else {
          inputBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       */
      public Builder clearInput() {
        if (inputBuilder_ == null) {
          input_ = null;
          onChanged();
        } else {
          input_ = null;
          inputBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder getInputBuilder() {
        
        onChanged();
        return getInputFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder getInputOrBuilder() {
        if (inputBuilder_ != null) {
          return inputBuilder_.getMessageOrBuilder();
        } else {
          return input_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance() : input_;
        }
      }
      /**
       * <pre>
       * Input signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.InPort input = 1 [json_name = "input"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder> 
          getInputFieldBuilder() {
        if (inputBuilder_ == null) {
          inputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.InPort, com.fluxninja.generated.aperture.policy.language.v1.InPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.InPortOrBuilder>(
                  getInput(),
                  getParentForChildren(),
                  isClean());
          input_ = null;
        }
        return inputBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.UnaryOperator.Ins)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.UnaryOperator.Ins)
    private static final com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Ins>
        PARSER = new com.google.protobuf.AbstractParser<Ins>() {
      @java.lang.Override
      public Ins parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Ins(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Ins> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Ins> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OutsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.UnaryOperator.Outs)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     * @return Whether the output field is set.
     */
    boolean hasOutput();
    /**
     * <pre>
     * Output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     * @return The output.
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutput();
    /**
     * <pre>
     * Output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getOutputOrBuilder();
  }
  /**
   * <pre>
   * Outputs for the UnaryOperator component.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.UnaryOperator.Outs}
   */
  public static final class Outs extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.UnaryOperator.Outs)
      OutsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Outs.newBuilder() to construct.
    private Outs(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Outs() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Outs();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Outs(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder subBuilder = null;
              if (output_ != null) {
                subBuilder = output_.toBuilder();
              }
              output_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.OutPort.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(output_);
                output_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Outs_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Outs_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.class, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.Builder.class);
    }

    public static final int OUTPUT_FIELD_NUMBER = 1;
    private com.fluxninja.generated.aperture.policy.language.v1.OutPort output_;
    /**
     * <pre>
     * Output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     * @return Whether the output field is set.
     */
    @java.lang.Override
    public boolean hasOutput() {
      return output_ != null;
    }
    /**
     * <pre>
     * Output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     * @return The output.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutput() {
      return output_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : output_;
    }
    /**
     * <pre>
     * Output signal.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getOutputOrBuilder() {
      return getOutput();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (output_ != null) {
        output.writeMessage(1, getOutput());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (output_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getOutput());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs other = (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs) obj;

      if (hasOutput() != other.hasOutput()) return false;
      if (hasOutput()) {
        if (!getOutput()
            .equals(other.getOutput())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasOutput()) {
        hash = (37 * hash) + OUTPUT_FIELD_NUMBER;
        hash = (53 * hash) + getOutput().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Outputs for the UnaryOperator component.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.UnaryOperator.Outs}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.UnaryOperator.Outs)
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.OutsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Outs_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Outs_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.class, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (outputBuilder_ == null) {
          output_ = null;
        } else {
          output_ = null;
          outputBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_Outs_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs build() {
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs result = new com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs(this);
        if (outputBuilder_ == null) {
          result.output_ = output_;
        } else {
          result.output_ = outputBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.getDefaultInstance()) return this;
        if (other.hasOutput()) {
          mergeOutput(other.getOutput());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.fluxninja.generated.aperture.policy.language.v1.OutPort output_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> outputBuilder_;
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       * @return Whether the output field is set.
       */
      public boolean hasOutput() {
        return outputBuilder_ != null || output_ != null;
      }
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       * @return The output.
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutput() {
        if (outputBuilder_ == null) {
          return output_ == null ? com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : output_;
        } else {
          return outputBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public Builder setOutput(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (outputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          output_ = value;
          onChanged();
        } else {
          outputBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public Builder setOutput(
          com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder builderForValue) {
        if (outputBuilder_ == null) {
          output_ = builderForValue.build();
          onChanged();
        } else {
          outputBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public Builder mergeOutput(com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
        if (outputBuilder_ == null) {
          if (output_ != null) {
            output_ =
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.newBuilder(output_).mergeFrom(value).buildPartial();
          } else {
            output_ = value;
          }
          onChanged();
        } else {
          outputBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public Builder clearOutput() {
        if (outputBuilder_ == null) {
          output_ = null;
          onChanged();
        } else {
          output_ = null;
          outputBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder getOutputBuilder() {
        
        onChanged();
        return getOutputFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder getOutputOrBuilder() {
        if (outputBuilder_ != null) {
          return outputBuilder_.getMessageOrBuilder();
        } else {
          return output_ == null ?
              com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance() : output_;
        }
      }
      /**
       * <pre>
       * Output signal.
       * </pre>
       *
       * <code>.aperture.policy.language.v1.OutPort output = 1 [json_name = "output"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder> 
          getOutputFieldBuilder() {
        if (outputBuilder_ == null) {
          outputBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.OutPort, com.fluxninja.generated.aperture.policy.language.v1.OutPort.Builder, com.fluxninja.generated.aperture.policy.language.v1.OutPortOrBuilder>(
                  getOutput(),
                  getParentForChildren(),
                  isClean());
          output_ = null;
        }
        return outputBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.UnaryOperator.Outs)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.UnaryOperator.Outs)
    private static final com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Outs>
        PARSER = new com.google.protobuf.AbstractParser<Outs>() {
      @java.lang.Override
      public Outs parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Outs(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Outs> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Outs> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int IN_PORTS_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins inPorts_;
  /**
   * <pre>
   * Input ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return Whether the inPorts field is set.
   */
  @java.lang.Override
  public boolean hasInPorts() {
    return inPorts_ != null;
  }
  /**
   * <pre>
   * Input ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return The inPorts.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins getInPorts() {
    return inPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.getDefaultInstance() : inPorts_;
  }
  /**
   * <pre>
   * Input ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.InsOrBuilder getInPortsOrBuilder() {
    return getInPorts();
  }

  public static final int OUT_PORTS_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs outPorts_;
  /**
   * <pre>
   * Output ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return Whether the outPorts field is set.
   */
  @java.lang.Override
  public boolean hasOutPorts() {
    return outPorts_ != null;
  }
  /**
   * <pre>
   * Output ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return The outPorts.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs getOutPorts() {
    return outPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.getDefaultInstance() : outPorts_;
  }
  /**
   * <pre>
   * Output ports for the UnaryOperator component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.OutsOrBuilder getOutPortsOrBuilder() {
    return getOutPorts();
  }

  public static final int OPERATOR_FIELD_NUMBER = 3;
  private volatile java.lang.Object operator_;
  /**
   * <pre>
   * Unary Operator to apply.
   * The unary operator can be one of the following:
   * * abs: Absolute value with the sign removed.
   * * acos: arccosine, in radians.
   * * acosh: Inverse hyperbolic cosine.
   * * asin: arcsine, in radians.
   * * asinh: Inverse hyperbolic sine.
   * * atan: arctangent, in radians.
   * * atanh: Inverse hyperbolic tangent.
   * * cbrt: Cube root.
   * * ceil: Least integer value greater than or equal to input signal.
   * * cos: cosine, in radians.
   * * cosh: Hyperbolic cosine.
   * * erf: Error function.
   * * erfc: Complementary error function.
   * * erfcinv: Inverse complementary error function.
   * * erfinv: Inverse error function.
   * * exp: The base-e exponential of input signal.
   * * exp2: The base-2 exponential of input signal.
   * * expm1: The base-e exponential of input signal minus 1.
   * * floor: Greatest integer value less than or equal to input signal.
   * * gamma: Gamma function.
   * * j0: Bessel function of the first kind of order 0.
   * * j1: Bessel function of the first kind of order 1.
   * * lgamma: Natural logarithm of the absolute value of the gamma function.
   * * log: Natural logarithm of input signal.
   * * log10: Base-10 logarithm of input signal.
   * * log1p: Natural logarithm of input signal plus 1.
   * * log2: Base-2 logarithm of input signal.
   * * round: Round to nearest integer.
   * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
   * * sin: sine, in radians.
   * * sinh: Hyperbolic sine.
   * * sqrt: Square root.
   * * tan: tangent, in radians.
   * * tanh: Hyperbolic tangent.
   * * trunc: Truncate to integer.
   * * y0: Bessel function of the second kind of order 0.
   * * y1: Bessel function of the second kind of order 1.
   * </pre>
   *
   * <code>string operator = 3 [json_name = "operator"];</code>
   * @return The operator.
   */
  @java.lang.Override
  public java.lang.String getOperator() {
    java.lang.Object ref = operator_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      operator_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Unary Operator to apply.
   * The unary operator can be one of the following:
   * * abs: Absolute value with the sign removed.
   * * acos: arccosine, in radians.
   * * acosh: Inverse hyperbolic cosine.
   * * asin: arcsine, in radians.
   * * asinh: Inverse hyperbolic sine.
   * * atan: arctangent, in radians.
   * * atanh: Inverse hyperbolic tangent.
   * * cbrt: Cube root.
   * * ceil: Least integer value greater than or equal to input signal.
   * * cos: cosine, in radians.
   * * cosh: Hyperbolic cosine.
   * * erf: Error function.
   * * erfc: Complementary error function.
   * * erfcinv: Inverse complementary error function.
   * * erfinv: Inverse error function.
   * * exp: The base-e exponential of input signal.
   * * exp2: The base-2 exponential of input signal.
   * * expm1: The base-e exponential of input signal minus 1.
   * * floor: Greatest integer value less than or equal to input signal.
   * * gamma: Gamma function.
   * * j0: Bessel function of the first kind of order 0.
   * * j1: Bessel function of the first kind of order 1.
   * * lgamma: Natural logarithm of the absolute value of the gamma function.
   * * log: Natural logarithm of input signal.
   * * log10: Base-10 logarithm of input signal.
   * * log1p: Natural logarithm of input signal plus 1.
   * * log2: Base-2 logarithm of input signal.
   * * round: Round to nearest integer.
   * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
   * * sin: sine, in radians.
   * * sinh: Hyperbolic sine.
   * * sqrt: Square root.
   * * tan: tangent, in radians.
   * * tanh: Hyperbolic tangent.
   * * trunc: Truncate to integer.
   * * y0: Bessel function of the second kind of order 0.
   * * y1: Bessel function of the second kind of order 1.
   * </pre>
   *
   * <code>string operator = 3 [json_name = "operator"];</code>
   * @return The bytes for operator.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getOperatorBytes() {
    java.lang.Object ref = operator_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      operator_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (inPorts_ != null) {
      output.writeMessage(1, getInPorts());
    }
    if (outPorts_ != null) {
      output.writeMessage(2, getOutPorts());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(operator_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, operator_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (inPorts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInPorts());
    }
    if (outPorts_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getOutPorts());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(operator_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, operator_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator other = (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) obj;

    if (hasInPorts() != other.hasInPorts()) return false;
    if (hasInPorts()) {
      if (!getInPorts()
          .equals(other.getInPorts())) return false;
    }
    if (hasOutPorts() != other.hasOutPorts()) return false;
    if (hasOutPorts()) {
      if (!getOutPorts()
          .equals(other.getOutPorts())) return false;
    }
    if (!getOperator()
        .equals(other.getOperator())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInPorts()) {
      hash = (37 * hash) + IN_PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getInPorts().hashCode();
    }
    if (hasOutPorts()) {
      hash = (37 * hash) + OUT_PORTS_FIELD_NUMBER;
      hash = (53 * hash) + getOutPorts().hashCode();
    }
    hash = (37 * hash) + OPERATOR_FIELD_NUMBER;
    hash = (53 * hash) + getOperator().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Takes an input signal and emits the output after applying the specified unary operator
   * $$
   * &#92;text{output} = &#92;unary_operator{&#92;text{input}}
   * $$
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.UnaryOperator}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.UnaryOperator)
      com.fluxninja.generated.aperture.policy.language.v1.UnaryOperatorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.class, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (inPortsBuilder_ == null) {
        inPorts_ = null;
      } else {
        inPorts_ = null;
        inPortsBuilder_ = null;
      }
      if (outPortsBuilder_ == null) {
        outPorts_ = null;
      } else {
        outPorts_ = null;
        outPortsBuilder_ = null;
      }
      operator_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.StdComponentsProto.internal_static_aperture_policy_language_v1_UnaryOperator_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator build() {
      com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator result = new com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator(this);
      if (inPortsBuilder_ == null) {
        result.inPorts_ = inPorts_;
      } else {
        result.inPorts_ = inPortsBuilder_.build();
      }
      if (outPortsBuilder_ == null) {
        result.outPorts_ = outPorts_;
      } else {
        result.outPorts_ = outPortsBuilder_.build();
      }
      result.operator_ = operator_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.getDefaultInstance()) return this;
      if (other.hasInPorts()) {
        mergeInPorts(other.getInPorts());
      }
      if (other.hasOutPorts()) {
        mergeOutPorts(other.getOutPorts());
      }
      if (!other.getOperator().isEmpty()) {
        operator_ = other.operator_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins inPorts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.InsOrBuilder> inPortsBuilder_;
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     * @return Whether the inPorts field is set.
     */
    public boolean hasInPorts() {
      return inPortsBuilder_ != null || inPorts_ != null;
    }
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     * @return The inPorts.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins getInPorts() {
      if (inPortsBuilder_ == null) {
        return inPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.getDefaultInstance() : inPorts_;
      } else {
        return inPortsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder setInPorts(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins value) {
      if (inPortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        inPorts_ = value;
        onChanged();
      } else {
        inPortsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder setInPorts(
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.Builder builderForValue) {
      if (inPortsBuilder_ == null) {
        inPorts_ = builderForValue.build();
        onChanged();
      } else {
        inPortsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder mergeInPorts(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins value) {
      if (inPortsBuilder_ == null) {
        if (inPorts_ != null) {
          inPorts_ =
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.newBuilder(inPorts_).mergeFrom(value).buildPartial();
        } else {
          inPorts_ = value;
        }
        onChanged();
      } else {
        inPortsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public Builder clearInPorts() {
      if (inPortsBuilder_ == null) {
        inPorts_ = null;
        onChanged();
      } else {
        inPorts_ = null;
        inPortsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.Builder getInPortsBuilder() {
      
      onChanged();
      return getInPortsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.InsOrBuilder getInPortsOrBuilder() {
      if (inPortsBuilder_ != null) {
        return inPortsBuilder_.getMessageOrBuilder();
      } else {
        return inPorts_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.getDefaultInstance() : inPorts_;
      }
    }
    /**
     * <pre>
     * Input ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Ins in_ports = 1 [json_name = "inPorts"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.InsOrBuilder> 
        getInPortsFieldBuilder() {
      if (inPortsBuilder_ == null) {
        inPortsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Ins.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.InsOrBuilder>(
                getInPorts(),
                getParentForChildren(),
                isClean());
        inPorts_ = null;
      }
      return inPortsBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs outPorts_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.OutsOrBuilder> outPortsBuilder_;
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     * @return Whether the outPorts field is set.
     */
    public boolean hasOutPorts() {
      return outPortsBuilder_ != null || outPorts_ != null;
    }
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     * @return The outPorts.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs getOutPorts() {
      if (outPortsBuilder_ == null) {
        return outPorts_ == null ? com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.getDefaultInstance() : outPorts_;
      } else {
        return outPortsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder setOutPorts(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs value) {
      if (outPortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outPorts_ = value;
        onChanged();
      } else {
        outPortsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder setOutPorts(
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.Builder builderForValue) {
      if (outPortsBuilder_ == null) {
        outPorts_ = builderForValue.build();
        onChanged();
      } else {
        outPortsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder mergeOutPorts(com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs value) {
      if (outPortsBuilder_ == null) {
        if (outPorts_ != null) {
          outPorts_ =
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.newBuilder(outPorts_).mergeFrom(value).buildPartial();
        } else {
          outPorts_ = value;
        }
        onChanged();
      } else {
        outPortsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public Builder clearOutPorts() {
      if (outPortsBuilder_ == null) {
        outPorts_ = null;
        onChanged();
      } else {
        outPorts_ = null;
        outPortsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.Builder getOutPortsBuilder() {
      
      onChanged();
      return getOutPortsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.OutsOrBuilder getOutPortsOrBuilder() {
      if (outPortsBuilder_ != null) {
        return outPortsBuilder_.getMessageOrBuilder();
      } else {
        return outPorts_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.getDefaultInstance() : outPorts_;
      }
    }
    /**
     * <pre>
     * Output ports for the UnaryOperator component.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.UnaryOperator.Outs out_ports = 2 [json_name = "outPorts"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.OutsOrBuilder> 
        getOutPortsFieldBuilder() {
      if (outPortsBuilder_ == null) {
        outPortsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.Outs.Builder, com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator.OutsOrBuilder>(
                getOutPorts(),
                getParentForChildren(),
                isClean());
        outPorts_ = null;
      }
      return outPortsBuilder_;
    }

    private java.lang.Object operator_ = "";
    /**
     * <pre>
     * Unary Operator to apply.
     * The unary operator can be one of the following:
     * * abs: Absolute value with the sign removed.
     * * acos: arccosine, in radians.
     * * acosh: Inverse hyperbolic cosine.
     * * asin: arcsine, in radians.
     * * asinh: Inverse hyperbolic sine.
     * * atan: arctangent, in radians.
     * * atanh: Inverse hyperbolic tangent.
     * * cbrt: Cube root.
     * * ceil: Least integer value greater than or equal to input signal.
     * * cos: cosine, in radians.
     * * cosh: Hyperbolic cosine.
     * * erf: Error function.
     * * erfc: Complementary error function.
     * * erfcinv: Inverse complementary error function.
     * * erfinv: Inverse error function.
     * * exp: The base-e exponential of input signal.
     * * exp2: The base-2 exponential of input signal.
     * * expm1: The base-e exponential of input signal minus 1.
     * * floor: Greatest integer value less than or equal to input signal.
     * * gamma: Gamma function.
     * * j0: Bessel function of the first kind of order 0.
     * * j1: Bessel function of the first kind of order 1.
     * * lgamma: Natural logarithm of the absolute value of the gamma function.
     * * log: Natural logarithm of input signal.
     * * log10: Base-10 logarithm of input signal.
     * * log1p: Natural logarithm of input signal plus 1.
     * * log2: Base-2 logarithm of input signal.
     * * round: Round to nearest integer.
     * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
     * * sin: sine, in radians.
     * * sinh: Hyperbolic sine.
     * * sqrt: Square root.
     * * tan: tangent, in radians.
     * * tanh: Hyperbolic tangent.
     * * trunc: Truncate to integer.
     * * y0: Bessel function of the second kind of order 0.
     * * y1: Bessel function of the second kind of order 1.
     * </pre>
     *
     * <code>string operator = 3 [json_name = "operator"];</code>
     * @return The operator.
     */
    public java.lang.String getOperator() {
      java.lang.Object ref = operator_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        operator_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Unary Operator to apply.
     * The unary operator can be one of the following:
     * * abs: Absolute value with the sign removed.
     * * acos: arccosine, in radians.
     * * acosh: Inverse hyperbolic cosine.
     * * asin: arcsine, in radians.
     * * asinh: Inverse hyperbolic sine.
     * * atan: arctangent, in radians.
     * * atanh: Inverse hyperbolic tangent.
     * * cbrt: Cube root.
     * * ceil: Least integer value greater than or equal to input signal.
     * * cos: cosine, in radians.
     * * cosh: Hyperbolic cosine.
     * * erf: Error function.
     * * erfc: Complementary error function.
     * * erfcinv: Inverse complementary error function.
     * * erfinv: Inverse error function.
     * * exp: The base-e exponential of input signal.
     * * exp2: The base-2 exponential of input signal.
     * * expm1: The base-e exponential of input signal minus 1.
     * * floor: Greatest integer value less than or equal to input signal.
     * * gamma: Gamma function.
     * * j0: Bessel function of the first kind of order 0.
     * * j1: Bessel function of the first kind of order 1.
     * * lgamma: Natural logarithm of the absolute value of the gamma function.
     * * log: Natural logarithm of input signal.
     * * log10: Base-10 logarithm of input signal.
     * * log1p: Natural logarithm of input signal plus 1.
     * * log2: Base-2 logarithm of input signal.
     * * round: Round to nearest integer.
     * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
     * * sin: sine, in radians.
     * * sinh: Hyperbolic sine.
     * * sqrt: Square root.
     * * tan: tangent, in radians.
     * * tanh: Hyperbolic tangent.
     * * trunc: Truncate to integer.
     * * y0: Bessel function of the second kind of order 0.
     * * y1: Bessel function of the second kind of order 1.
     * </pre>
     *
     * <code>string operator = 3 [json_name = "operator"];</code>
     * @return The bytes for operator.
     */
    public com.google.protobuf.ByteString
        getOperatorBytes() {
      java.lang.Object ref = operator_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        operator_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Unary Operator to apply.
     * The unary operator can be one of the following:
     * * abs: Absolute value with the sign removed.
     * * acos: arccosine, in radians.
     * * acosh: Inverse hyperbolic cosine.
     * * asin: arcsine, in radians.
     * * asinh: Inverse hyperbolic sine.
     * * atan: arctangent, in radians.
     * * atanh: Inverse hyperbolic tangent.
     * * cbrt: Cube root.
     * * ceil: Least integer value greater than or equal to input signal.
     * * cos: cosine, in radians.
     * * cosh: Hyperbolic cosine.
     * * erf: Error function.
     * * erfc: Complementary error function.
     * * erfcinv: Inverse complementary error function.
     * * erfinv: Inverse error function.
     * * exp: The base-e exponential of input signal.
     * * exp2: The base-2 exponential of input signal.
     * * expm1: The base-e exponential of input signal minus 1.
     * * floor: Greatest integer value less than or equal to input signal.
     * * gamma: Gamma function.
     * * j0: Bessel function of the first kind of order 0.
     * * j1: Bessel function of the first kind of order 1.
     * * lgamma: Natural logarithm of the absolute value of the gamma function.
     * * log: Natural logarithm of input signal.
     * * log10: Base-10 logarithm of input signal.
     * * log1p: Natural logarithm of input signal plus 1.
     * * log2: Base-2 logarithm of input signal.
     * * round: Round to nearest integer.
     * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
     * * sin: sine, in radians.
     * * sinh: Hyperbolic sine.
     * * sqrt: Square root.
     * * tan: tangent, in radians.
     * * tanh: Hyperbolic tangent.
     * * trunc: Truncate to integer.
     * * y0: Bessel function of the second kind of order 0.
     * * y1: Bessel function of the second kind of order 1.
     * </pre>
     *
     * <code>string operator = 3 [json_name = "operator"];</code>
     * @param value The operator to set.
     * @return This builder for chaining.
     */
    public Builder setOperator(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      operator_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unary Operator to apply.
     * The unary operator can be one of the following:
     * * abs: Absolute value with the sign removed.
     * * acos: arccosine, in radians.
     * * acosh: Inverse hyperbolic cosine.
     * * asin: arcsine, in radians.
     * * asinh: Inverse hyperbolic sine.
     * * atan: arctangent, in radians.
     * * atanh: Inverse hyperbolic tangent.
     * * cbrt: Cube root.
     * * ceil: Least integer value greater than or equal to input signal.
     * * cos: cosine, in radians.
     * * cosh: Hyperbolic cosine.
     * * erf: Error function.
     * * erfc: Complementary error function.
     * * erfcinv: Inverse complementary error function.
     * * erfinv: Inverse error function.
     * * exp: The base-e exponential of input signal.
     * * exp2: The base-2 exponential of input signal.
     * * expm1: The base-e exponential of input signal minus 1.
     * * floor: Greatest integer value less than or equal to input signal.
     * * gamma: Gamma function.
     * * j0: Bessel function of the first kind of order 0.
     * * j1: Bessel function of the first kind of order 1.
     * * lgamma: Natural logarithm of the absolute value of the gamma function.
     * * log: Natural logarithm of input signal.
     * * log10: Base-10 logarithm of input signal.
     * * log1p: Natural logarithm of input signal plus 1.
     * * log2: Base-2 logarithm of input signal.
     * * round: Round to nearest integer.
     * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
     * * sin: sine, in radians.
     * * sinh: Hyperbolic sine.
     * * sqrt: Square root.
     * * tan: tangent, in radians.
     * * tanh: Hyperbolic tangent.
     * * trunc: Truncate to integer.
     * * y0: Bessel function of the second kind of order 0.
     * * y1: Bessel function of the second kind of order 1.
     * </pre>
     *
     * <code>string operator = 3 [json_name = "operator"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOperator() {
      
      operator_ = getDefaultInstance().getOperator();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unary Operator to apply.
     * The unary operator can be one of the following:
     * * abs: Absolute value with the sign removed.
     * * acos: arccosine, in radians.
     * * acosh: Inverse hyperbolic cosine.
     * * asin: arcsine, in radians.
     * * asinh: Inverse hyperbolic sine.
     * * atan: arctangent, in radians.
     * * atanh: Inverse hyperbolic tangent.
     * * cbrt: Cube root.
     * * ceil: Least integer value greater than or equal to input signal.
     * * cos: cosine, in radians.
     * * cosh: Hyperbolic cosine.
     * * erf: Error function.
     * * erfc: Complementary error function.
     * * erfcinv: Inverse complementary error function.
     * * erfinv: Inverse error function.
     * * exp: The base-e exponential of input signal.
     * * exp2: The base-2 exponential of input signal.
     * * expm1: The base-e exponential of input signal minus 1.
     * * floor: Greatest integer value less than or equal to input signal.
     * * gamma: Gamma function.
     * * j0: Bessel function of the first kind of order 0.
     * * j1: Bessel function of the first kind of order 1.
     * * lgamma: Natural logarithm of the absolute value of the gamma function.
     * * log: Natural logarithm of input signal.
     * * log10: Base-10 logarithm of input signal.
     * * log1p: Natural logarithm of input signal plus 1.
     * * log2: Base-2 logarithm of input signal.
     * * round: Round to nearest integer.
     * * roundtoeven: Round to nearest integer, with ties going to the nearest even integer.
     * * sin: sine, in radians.
     * * sinh: Hyperbolic sine.
     * * sqrt: Square root.
     * * tan: tangent, in radians.
     * * tanh: Hyperbolic tangent.
     * * trunc: Truncate to integer.
     * * y0: Bessel function of the second kind of order 0.
     * * y1: Bessel function of the second kind of order 1.
     * </pre>
     *
     * <code>string operator = 3 [json_name = "operator"];</code>
     * @param value The bytes for operator to set.
     * @return This builder for chaining.
     */
    public Builder setOperatorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      operator_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.UnaryOperator)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.UnaryOperator)
  private static final com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<UnaryOperator>
      PARSER = new com.google.protobuf.AbstractParser<UnaryOperator>() {
    @java.lang.Override
    public UnaryOperator parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new UnaryOperator(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<UnaryOperator> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<UnaryOperator> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

