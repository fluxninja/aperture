// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface AIMDConcurrencyControllerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.AIMDConcurrencyController)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Input ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return Whether the inPorts field is set.
   */
  boolean hasInPorts();
  /**
   * <pre>
   * Input ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
   * @return The inPorts.
   */
  com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Ins getInPorts();
  /**
   * <pre>
   * Input ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Ins in_ports = 1 [json_name = "inPorts"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.InsOrBuilder getInPortsOrBuilder();

  /**
   * <pre>
   * Output ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return Whether the outPorts field is set.
   */
  boolean hasOutPorts();
  /**
   * <pre>
   * Output ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
   * @return The outPorts.
   */
  com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Outs getOutPorts();
  /**
   * <pre>
   * Output ports for the AIMDConcurrencyController component.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController.Outs out_ports = 2 [json_name = "outPorts"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.OutsOrBuilder getOutPortsOrBuilder();

  /**
   * <pre>
   * Flow Selector decides the service and flows at which the concurrency limiter is applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
   * @return Whether the flowSelector field is set.
   */
  boolean hasFlowSelector();
  /**
   * <pre>
   * Flow Selector decides the service and flows at which the concurrency limiter is applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
   * @return The flowSelector.
   */
  com.fluxninja.generated.aperture.policy.language.v1.FlowSelector getFlowSelector();
  /**
   * <pre>
   * Flow Selector decides the service and flows at which the concurrency limiter is applied.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 3 [json_name = "flowSelector"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder getFlowSelectorOrBuilder();

  /**
   * <pre>
   * Scheduler parameters.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
   * @return Whether the schedulerParameters field is set.
   */
  boolean hasSchedulerParameters();
  /**
   * <pre>
   * Scheduler parameters.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
   * @return The schedulerParameters.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Scheduler.Parameters getSchedulerParameters();
  /**
   * <pre>
   * Scheduler parameters.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Scheduler.Parameters scheduler_parameters = 4 [json_name = "schedulerParameters"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.Scheduler.ParametersOrBuilder getSchedulerParametersOrBuilder();

  /**
   * <pre>
   * Gradient parameters for the controller.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
   * @return Whether the gradientParameters field is set.
   */
  boolean hasGradientParameters();
  /**
   * <pre>
   * Gradient parameters for the controller.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
   * @return The gradientParameters.
   */
  com.fluxninja.generated.aperture.policy.language.v1.GradientController.Parameters getGradientParameters();
  /**
   * <pre>
   * Gradient parameters for the controller.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController.Parameters gradient_parameters = 5 [json_name = "gradientParameters"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.GradientController.ParametersOrBuilder getGradientParametersOrBuilder();

  /**
   * <pre>
   * Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.
   * </pre>
   *
   * <code>double max_load_multiplier = 6 [json_name = "maxLoadMultiplier"];</code>
   * @return The maxLoadMultiplier.
   */
  double getMaxLoadMultiplier();

  /**
   * <pre>
   * Linear increment to load multiplier in each execution tick when the system is not in overloaded state.
   * </pre>
   *
   * <code>double load_multiplier_linear_increment = 7 [json_name = "loadMultiplierLinearIncrement"];</code>
   * @return The loadMultiplierLinearIncrement.
   */
  double getLoadMultiplierLinearIncrement();

  /**
   * <pre>
   * Configuration for embedded alerter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
   * @return Whether the alerterParameters field is set.
   */
  boolean hasAlerterParameters();
  /**
   * <pre>
   * Configuration for embedded alerter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
   * @return The alerterParameters.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Alerter.Parameters getAlerterParameters();
  /**
   * <pre>
   * Configuration for embedded alerter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter.Parameters alerter_parameters = 8 [json_name = "alerterParameters"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.Alerter.ParametersOrBuilder getAlerterParametersOrBuilder();

  /**
   * <pre>
   * Configuration key for load actuation.
   * </pre>
   *
   * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
   * @return The dynamicConfigKey.
   */
  java.lang.String getDynamicConfigKey();
  /**
   * <pre>
   * Configuration key for load actuation.
   * </pre>
   *
   * <code>string dynamic_config_key = 9 [json_name = "dynamicConfigKey"];</code>
   * @return The bytes for dynamicConfigKey.
   */
  com.google.protobuf.ByteString
      getDynamicConfigKeyBytes();

  /**
   * <pre>
   * Default configuration.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
   * @return Whether the defaultConfig field is set.
   */
  boolean hasDefaultConfig();
  /**
   * <pre>
   * Default configuration.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
   * @return The defaultConfig.
   */
  com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfig getDefaultConfig();
  /**
   * <pre>
   * Default configuration.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LoadActuator.DynamicConfig default_config = 10 [json_name = "defaultConfig"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.LoadActuator.DynamicConfigOrBuilder getDefaultConfigOrBuilder();
}
