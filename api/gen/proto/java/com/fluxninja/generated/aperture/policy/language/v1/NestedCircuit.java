// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.NestedCircuit}
 */
public final class NestedCircuit extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.NestedCircuit)
    NestedCircuitOrBuilder {
private static final long serialVersionUID = 0L;
  // Use NestedCircuit.newBuilder() to construct.
  private NestedCircuit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private NestedCircuit() {
    components_ = java.util.Collections.emptyList();
    name_ = "";
    shortDescription_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new NestedCircuit();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private NestedCircuit(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              inPortsMap_ = com.google.protobuf.MapField.newMapField(
                  InPortsMapDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>
            inPortsMap__ = input.readMessage(
                InPortsMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            inPortsMap_.getMutableMap().put(
                inPortsMap__.getKey(), inPortsMap__.getValue());
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              outPortsMap_ = com.google.protobuf.MapField.newMapField(
                  OutPortsMapDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000002;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>
            outPortsMap__ = input.readMessage(
                OutPortsMapDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            outPortsMap_.getMutableMap().put(
                outPortsMap__.getKey(), outPortsMap__.getValue());
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              components_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.Component>();
              mutable_bitField0_ |= 0x00000004;
            }
            components_.add(
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Component.parser(), extensionRegistry));
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            shortDescription_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000004) != 0)) {
        components_ = java.util.Collections.unmodifiableList(components_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_NestedCircuit_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetInPortsMap();
      case 2:
        return internalGetOutPortsMap();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_NestedCircuit_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.class, com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.Builder.class);
  }

  public static final int IN_PORTS_MAP_FIELD_NUMBER = 1;
  private static final class InPortsMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>newDefaultInstance(
                com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_NestedCircuit_InPortsMapEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.fluxninja.generated.aperture.policy.language.v1.InPort.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> inPortsMap_;
  private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>
  internalGetInPortsMap() {
    if (inPortsMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          InPortsMapDefaultEntryHolder.defaultEntry);
    }
    return inPortsMap_;
  }

  public int getInPortsMapCount() {
    return internalGetInPortsMap().getMap().size();
  }
  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */

  @java.lang.Override
  public boolean containsInPortsMap(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetInPortsMap().getMap().containsKey(key);
  }
  /**
   * Use {@link #getInPortsMapMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> getInPortsMap() {
    return getInPortsMapMap();
  }
  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> getInPortsMapMap() {
    return internalGetInPortsMap().getMap();
  }
  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.policy.language.v1.InPort getInPortsMapOrDefault(
      java.lang.String key,
      com.fluxninja.generated.aperture.policy.language.v1.InPort defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> map =
        internalGetInPortsMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Maps input port names to input ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.policy.language.v1.InPort getInPortsMapOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> map =
        internalGetInPortsMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int OUT_PORTS_MAP_FIELD_NUMBER = 2;
  private static final class OutPortsMapDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>newDefaultInstance(
                com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_NestedCircuit_OutPortsMapEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.fluxninja.generated.aperture.policy.language.v1.OutPort.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> outPortsMap_;
  private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>
  internalGetOutPortsMap() {
    if (outPortsMap_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          OutPortsMapDefaultEntryHolder.defaultEntry);
    }
    return outPortsMap_;
  }

  public int getOutPortsMapCount() {
    return internalGetOutPortsMap().getMap().size();
  }
  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */

  @java.lang.Override
  public boolean containsOutPortsMap(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetOutPortsMap().getMap().containsKey(key);
  }
  /**
   * Use {@link #getOutPortsMapMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> getOutPortsMap() {
    return getOutPortsMapMap();
  }
  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> getOutPortsMapMap() {
    return internalGetOutPortsMap().getMap();
  }
  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutPortsMapOrDefault(
      java.lang.String key,
      com.fluxninja.generated.aperture.policy.language.v1.OutPort defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> map =
        internalGetOutPortsMap().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Maps output port names to output ports.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutPortsMapOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> map =
        internalGetOutPortsMap().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int COMPONENTS_FIELD_NUMBER = 3;
  private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> components_;
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> getComponentsList() {
    return components_;
  }
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> 
      getComponentsOrBuilderList() {
    return components_;
  }
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  @java.lang.Override
  public int getComponentsCount() {
    return components_.size();
  }
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Component getComponents(int index) {
    return components_.get(index);
  }
  /**
   * <pre>
   * List of components in the nested circuit.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder getComponentsOrBuilder(
      int index) {
    return components_.get(index);
  }

  public static final int NAME_FIELD_NUMBER = 4;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * Name of the nested circuit component. This name is displayed by graph visualization tools.
   * </pre>
   *
   * <code>string name = 4 [json_name = "name"];</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Name of the nested circuit component. This name is displayed by graph visualization tools.
   * </pre>
   *
   * <code>string name = 4 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SHORT_DESCRIPTION_FIELD_NUMBER = 5;
  private volatile java.lang.Object shortDescription_;
  /**
   * <pre>
   * Short description of the nested circuit component. This description is displayed by graph visualization tools.
   * </pre>
   *
   * <code>string short_description = 5 [json_name = "shortDescription"];</code>
   * @return The shortDescription.
   */
  @java.lang.Override
  public java.lang.String getShortDescription() {
    java.lang.Object ref = shortDescription_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      shortDescription_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Short description of the nested circuit component. This description is displayed by graph visualization tools.
   * </pre>
   *
   * <code>string short_description = 5 [json_name = "shortDescription"];</code>
   * @return The bytes for shortDescription.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getShortDescriptionBytes() {
    java.lang.Object ref = shortDescription_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      shortDescription_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetInPortsMap(),
        InPortsMapDefaultEntryHolder.defaultEntry,
        1);
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetOutPortsMap(),
        OutPortsMapDefaultEntryHolder.defaultEntry,
        2);
    for (int i = 0; i < components_.size(); i++) {
      output.writeMessage(3, components_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, name_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shortDescription_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, shortDescription_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> entry
         : internalGetInPortsMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>
      inPortsMap__ = InPortsMapDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, inPortsMap__);
    }
    for (java.util.Map.Entry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> entry
         : internalGetOutPortsMap().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>
      outPortsMap__ = OutPortsMapDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, outPortsMap__);
    }
    for (int i = 0; i < components_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, components_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, name_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(shortDescription_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, shortDescription_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit other = (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) obj;

    if (!internalGetInPortsMap().equals(
        other.internalGetInPortsMap())) return false;
    if (!internalGetOutPortsMap().equals(
        other.internalGetOutPortsMap())) return false;
    if (!getComponentsList()
        .equals(other.getComponentsList())) return false;
    if (!getName()
        .equals(other.getName())) return false;
    if (!getShortDescription()
        .equals(other.getShortDescription())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetInPortsMap().getMap().isEmpty()) {
      hash = (37 * hash) + IN_PORTS_MAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetInPortsMap().hashCode();
    }
    if (!internalGetOutPortsMap().getMap().isEmpty()) {
      hash = (37 * hash) + OUT_PORTS_MAP_FIELD_NUMBER;
      hash = (53 * hash) + internalGetOutPortsMap().hashCode();
    }
    if (getComponentsCount() > 0) {
      hash = (37 * hash) + COMPONENTS_FIELD_NUMBER;
      hash = (53 * hash) + getComponentsList().hashCode();
    }
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + SHORT_DESCRIPTION_FIELD_NUMBER;
    hash = (53 * hash) + getShortDescription().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.NestedCircuit}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.NestedCircuit)
      com.fluxninja.generated.aperture.policy.language.v1.NestedCircuitOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_NestedCircuit_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetInPortsMap();
        case 2:
          return internalGetOutPortsMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableInPortsMap();
        case 2:
          return internalGetMutableOutPortsMap();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_NestedCircuit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.class, com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getComponentsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      internalGetMutableInPortsMap().clear();
      internalGetMutableOutPortsMap().clear();
      if (componentsBuilder_ == null) {
        components_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        componentsBuilder_.clear();
      }
      name_ = "";

      shortDescription_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_NestedCircuit_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit build() {
      com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit result = new com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit(this);
      int from_bitField0_ = bitField0_;
      result.inPortsMap_ = internalGetInPortsMap();
      result.inPortsMap_.makeImmutable();
      result.outPortsMap_ = internalGetOutPortsMap();
      result.outPortsMap_.makeImmutable();
      if (componentsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          components_ = java.util.Collections.unmodifiableList(components_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.components_ = components_;
      } else {
        result.components_ = componentsBuilder_.build();
      }
      result.name_ = name_;
      result.shortDescription_ = shortDescription_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit.getDefaultInstance()) return this;
      internalGetMutableInPortsMap().mergeFrom(
          other.internalGetInPortsMap());
      internalGetMutableOutPortsMap().mergeFrom(
          other.internalGetOutPortsMap());
      if (componentsBuilder_ == null) {
        if (!other.components_.isEmpty()) {
          if (components_.isEmpty()) {
            components_ = other.components_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureComponentsIsMutable();
            components_.addAll(other.components_);
          }
          onChanged();
        }
      } else {
        if (!other.components_.isEmpty()) {
          if (componentsBuilder_.isEmpty()) {
            componentsBuilder_.dispose();
            componentsBuilder_ = null;
            components_ = other.components_;
            bitField0_ = (bitField0_ & ~0x00000004);
            componentsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getComponentsFieldBuilder() : null;
          } else {
            componentsBuilder_.addAllMessages(other.components_);
          }
        }
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getShortDescription().isEmpty()) {
        shortDescription_ = other.shortDescription_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> inPortsMap_;
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>
    internalGetInPortsMap() {
      if (inPortsMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            InPortsMapDefaultEntryHolder.defaultEntry);
      }
      return inPortsMap_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>
    internalGetMutableInPortsMap() {
      onChanged();;
      if (inPortsMap_ == null) {
        inPortsMap_ = com.google.protobuf.MapField.newMapField(
            InPortsMapDefaultEntryHolder.defaultEntry);
      }
      if (!inPortsMap_.isMutable()) {
        inPortsMap_ = inPortsMap_.copy();
      }
      return inPortsMap_;
    }

    public int getInPortsMapCount() {
      return internalGetInPortsMap().getMap().size();
    }
    /**
     * <pre>
     * Maps input port names to input ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
     */

    @java.lang.Override
    public boolean containsInPortsMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetInPortsMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getInPortsMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> getInPortsMap() {
      return getInPortsMapMap();
    }
    /**
     * <pre>
     * Maps input port names to input ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> getInPortsMapMap() {
      return internalGetInPortsMap().getMap();
    }
    /**
     * <pre>
     * Maps input port names to input ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.policy.language.v1.InPort getInPortsMapOrDefault(
        java.lang.String key,
        com.fluxninja.generated.aperture.policy.language.v1.InPort defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> map =
          internalGetInPortsMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Maps input port names to input ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.policy.language.v1.InPort getInPortsMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> map =
          internalGetInPortsMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearInPortsMap() {
      internalGetMutableInPortsMap().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Maps input port names to input ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
     */

    public Builder removeInPortsMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableInPortsMap().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort>
    getMutableInPortsMap() {
      return internalGetMutableInPortsMap().getMutableMap();
    }
    /**
     * <pre>
     * Maps input port names to input ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
     */
    public Builder putInPortsMap(
        java.lang.String key,
        com.fluxninja.generated.aperture.policy.language.v1.InPort value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableInPortsMap().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Maps input port names to input ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.InPort&gt; in_ports_map = 1 [json_name = "inPortsMap"];</code>
     */

    public Builder putAllInPortsMap(
        java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.InPort> values) {
      internalGetMutableInPortsMap().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> outPortsMap_;
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>
    internalGetOutPortsMap() {
      if (outPortsMap_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            OutPortsMapDefaultEntryHolder.defaultEntry);
      }
      return outPortsMap_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>
    internalGetMutableOutPortsMap() {
      onChanged();;
      if (outPortsMap_ == null) {
        outPortsMap_ = com.google.protobuf.MapField.newMapField(
            OutPortsMapDefaultEntryHolder.defaultEntry);
      }
      if (!outPortsMap_.isMutable()) {
        outPortsMap_ = outPortsMap_.copy();
      }
      return outPortsMap_;
    }

    public int getOutPortsMapCount() {
      return internalGetOutPortsMap().getMap().size();
    }
    /**
     * <pre>
     * Maps output port names to output ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
     */

    @java.lang.Override
    public boolean containsOutPortsMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetOutPortsMap().getMap().containsKey(key);
    }
    /**
     * Use {@link #getOutPortsMapMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> getOutPortsMap() {
      return getOutPortsMapMap();
    }
    /**
     * <pre>
     * Maps output port names to output ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> getOutPortsMapMap() {
      return internalGetOutPortsMap().getMap();
    }
    /**
     * <pre>
     * Maps output port names to output ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutPortsMapOrDefault(
        java.lang.String key,
        com.fluxninja.generated.aperture.policy.language.v1.OutPort defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> map =
          internalGetOutPortsMap().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Maps output port names to output ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.policy.language.v1.OutPort getOutPortsMapOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> map =
          internalGetOutPortsMap().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearOutPortsMap() {
      internalGetMutableOutPortsMap().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Maps output port names to output ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
     */

    public Builder removeOutPortsMap(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableOutPortsMap().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort>
    getMutableOutPortsMap() {
      return internalGetMutableOutPortsMap().getMutableMap();
    }
    /**
     * <pre>
     * Maps output port names to output ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
     */
    public Builder putOutPortsMap(
        java.lang.String key,
        com.fluxninja.generated.aperture.policy.language.v1.OutPort value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableOutPortsMap().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Maps output port names to output ports.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.OutPort&gt; out_ports_map = 2 [json_name = "outPortsMap"];</code>
     */

    public Builder putAllOutPortsMap(
        java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.OutPort> values) {
      internalGetMutableOutPortsMap().getMutableMap()
          .putAll(values);
      return this;
    }

    private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> components_ =
      java.util.Collections.emptyList();
    private void ensureComponentsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        components_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.Component>(components_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Component, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder, com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> componentsBuilder_;

    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> getComponentsList() {
      if (componentsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(components_);
      } else {
        return componentsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public int getComponentsCount() {
      if (componentsBuilder_ == null) {
        return components_.size();
      } else {
        return componentsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Component getComponents(int index) {
      if (componentsBuilder_ == null) {
        return components_.get(index);
      } else {
        return componentsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder setComponents(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Component value) {
      if (componentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComponentsIsMutable();
        components_.set(index, value);
        onChanged();
      } else {
        componentsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder setComponents(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        components_.set(index, builderForValue.build());
        onChanged();
      } else {
        componentsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder addComponents(com.fluxninja.generated.aperture.policy.language.v1.Component value) {
      if (componentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComponentsIsMutable();
        components_.add(value);
        onChanged();
      } else {
        componentsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder addComponents(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Component value) {
      if (componentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComponentsIsMutable();
        components_.add(index, value);
        onChanged();
      } else {
        componentsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder addComponents(
        com.fluxninja.generated.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        components_.add(builderForValue.build());
        onChanged();
      } else {
        componentsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder addComponents(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        components_.add(index, builderForValue.build());
        onChanged();
      } else {
        componentsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder addAllComponents(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.policy.language.v1.Component> values) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, components_);
        onChanged();
      } else {
        componentsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder clearComponents() {
      if (componentsBuilder_ == null) {
        components_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        componentsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public Builder removeComponents(int index) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        components_.remove(index);
        onChanged();
      } else {
        componentsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Component.Builder getComponentsBuilder(
        int index) {
      return getComponentsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder getComponentsOrBuilder(
        int index) {
      if (componentsBuilder_ == null) {
        return components_.get(index);  } else {
        return componentsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> 
         getComponentsOrBuilderList() {
      if (componentsBuilder_ != null) {
        return componentsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(components_);
      }
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Component.Builder addComponentsBuilder() {
      return getComponentsFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.policy.language.v1.Component.getDefaultInstance());
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Component.Builder addComponentsBuilder(
        int index) {
      return getComponentsFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.policy.language.v1.Component.getDefaultInstance());
    }
    /**
     * <pre>
     * List of components in the nested circuit.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 3 [json_name = "components"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component.Builder> 
         getComponentsBuilderList() {
      return getComponentsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Component, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder, com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> 
        getComponentsFieldBuilder() {
      if (componentsBuilder_ == null) {
        componentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Component, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder, com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder>(
                components_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        components_ = null;
      }
      return componentsBuilder_;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * Name of the nested circuit component. This name is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string name = 4 [json_name = "name"];</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Name of the nested circuit component. This name is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string name = 4 [json_name = "name"];</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Name of the nested circuit component. This name is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string name = 4 [json_name = "name"];</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name of the nested circuit component. This name is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string name = 4 [json_name = "name"];</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name of the nested circuit component. This name is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string name = 4 [json_name = "name"];</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object shortDescription_ = "";
    /**
     * <pre>
     * Short description of the nested circuit component. This description is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string short_description = 5 [json_name = "shortDescription"];</code>
     * @return The shortDescription.
     */
    public java.lang.String getShortDescription() {
      java.lang.Object ref = shortDescription_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        shortDescription_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Short description of the nested circuit component. This description is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string short_description = 5 [json_name = "shortDescription"];</code>
     * @return The bytes for shortDescription.
     */
    public com.google.protobuf.ByteString
        getShortDescriptionBytes() {
      java.lang.Object ref = shortDescription_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        shortDescription_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Short description of the nested circuit component. This description is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string short_description = 5 [json_name = "shortDescription"];</code>
     * @param value The shortDescription to set.
     * @return This builder for chaining.
     */
    public Builder setShortDescription(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      shortDescription_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Short description of the nested circuit component. This description is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string short_description = 5 [json_name = "shortDescription"];</code>
     * @return This builder for chaining.
     */
    public Builder clearShortDescription() {
      
      shortDescription_ = getDefaultInstance().getShortDescription();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Short description of the nested circuit component. This description is displayed by graph visualization tools.
     * </pre>
     *
     * <code>string short_description = 5 [json_name = "shortDescription"];</code>
     * @param value The bytes for shortDescription to set.
     * @return This builder for chaining.
     */
    public Builder setShortDescriptionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      shortDescription_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.NestedCircuit)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.NestedCircuit)
  private static final com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NestedCircuit>
      PARSER = new com.google.protobuf.AbstractParser<NestedCircuit>() {
    @java.lang.Override
    public NestedCircuit parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new NestedCircuit(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<NestedCircuit> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NestedCircuit> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

