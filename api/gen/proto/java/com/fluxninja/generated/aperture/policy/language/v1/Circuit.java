// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Circuit is defined as a dataflow graph of inter-connected components
 * :::info
 * See also [Circuit overview](/concepts/policy/circuit.md).
 * :::
 * Signals flow between components via ports.
 * As signals traverse the circuit, they get processed, stored within components or get acted upon (e.g. load-shed, rate-limit, auto-scale etc.).
 * Circuit is evaluated periodically in order to respond to changes in signal readings.
 * :::info
 * **Signal**
 * Signals are floating-point values.
 * A signal can also have a special **Invalid** value. It's usually used to
 * communicate that signal doesn't have a meaningful value at the moment, eg.
 * [PromQL](#prom-q-l) emits such a value if it cannot execute a query.
 * Components know when their input signals are invalid and can act
 * accordingly. They can either propagate the invalidness, by making their
 * output itself invalid (like eg.
 * [ArithmeticCombinator](#arithmetic-combinator)) or use some different
 * logic, like eg. [Extrapolator](#extrapolator). Refer to a component's
 * docs on how exactly it handles invalid inputs.
 * :::
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.Circuit}
 */
public final class Circuit extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.Circuit)
    CircuitOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Circuit.newBuilder() to construct.
  private Circuit(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Circuit() {
    components_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Circuit();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Circuit(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (evaluationInterval_ != null) {
              subBuilder = evaluationInterval_.toBuilder();
            }
            evaluationInterval_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(evaluationInterval_);
              evaluationInterval_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              components_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.Component>();
              mutable_bitField0_ |= 0x00000001;
            }
            components_.add(
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Component.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        components_ = java.util.Collections.unmodifiableList(components_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Circuit_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Circuit_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.Circuit.class, com.fluxninja.generated.aperture.policy.language.v1.Circuit.Builder.class);
  }

  public static final int EVALUATION_INTERVAL_FIELD_NUMBER = 1;
  private com.google.protobuf.Duration evaluationInterval_;
  /**
   * <pre>
   * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
   * @return Whether the evaluationInterval field is set.
   */
  @java.lang.Override
  public boolean hasEvaluationInterval() {
    return evaluationInterval_ != null;
  }
  /**
   * <pre>
   * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
   * @return The evaluationInterval.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getEvaluationInterval() {
    return evaluationInterval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : evaluationInterval_;
  }
  /**
   * <pre>
   * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
   * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
   * </pre>
   *
   * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getEvaluationIntervalOrBuilder() {
    return getEvaluationInterval();
  }

  public static final int COMPONENTS_FIELD_NUMBER = 2;
  private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> components_;
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> getComponentsList() {
    return components_;
  }
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> 
      getComponentsOrBuilderList() {
    return components_;
  }
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
   */
  @java.lang.Override
  public int getComponentsCount() {
    return components_.size();
  }
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Component getComponents(int index) {
    return components_.get(index);
  }
  /**
   * <pre>
   * Defines a signal processing graph as a list of components.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder getComponentsOrBuilder(
      int index) {
    return components_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (evaluationInterval_ != null) {
      output.writeMessage(1, getEvaluationInterval());
    }
    for (int i = 0; i < components_.size(); i++) {
      output.writeMessage(2, components_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (evaluationInterval_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getEvaluationInterval());
    }
    for (int i = 0; i < components_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, components_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.Circuit)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.Circuit other = (com.fluxninja.generated.aperture.policy.language.v1.Circuit) obj;

    if (hasEvaluationInterval() != other.hasEvaluationInterval()) return false;
    if (hasEvaluationInterval()) {
      if (!getEvaluationInterval()
          .equals(other.getEvaluationInterval())) return false;
    }
    if (!getComponentsList()
        .equals(other.getComponentsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasEvaluationInterval()) {
      hash = (37 * hash) + EVALUATION_INTERVAL_FIELD_NUMBER;
      hash = (53 * hash) + getEvaluationInterval().hashCode();
    }
    if (getComponentsCount() > 0) {
      hash = (37 * hash) + COMPONENTS_FIELD_NUMBER;
      hash = (53 * hash) + getComponentsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.Circuit prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Circuit is defined as a dataflow graph of inter-connected components
   * :::info
   * See also [Circuit overview](/concepts/policy/circuit.md).
   * :::
   * Signals flow between components via ports.
   * As signals traverse the circuit, they get processed, stored within components or get acted upon (e.g. load-shed, rate-limit, auto-scale etc.).
   * Circuit is evaluated periodically in order to respond to changes in signal readings.
   * :::info
   * **Signal**
   * Signals are floating-point values.
   * A signal can also have a special **Invalid** value. It's usually used to
   * communicate that signal doesn't have a meaningful value at the moment, eg.
   * [PromQL](#prom-q-l) emits such a value if it cannot execute a query.
   * Components know when their input signals are invalid and can act
   * accordingly. They can either propagate the invalidness, by making their
   * output itself invalid (like eg.
   * [ArithmeticCombinator](#arithmetic-combinator)) or use some different
   * logic, like eg. [Extrapolator](#extrapolator). Refer to a component's
   * docs on how exactly it handles invalid inputs.
   * :::
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.Circuit}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.Circuit)
      com.fluxninja.generated.aperture.policy.language.v1.CircuitOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Circuit_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Circuit_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.Circuit.class, com.fluxninja.generated.aperture.policy.language.v1.Circuit.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.Circuit.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getComponentsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (evaluationIntervalBuilder_ == null) {
        evaluationInterval_ = null;
      } else {
        evaluationInterval_ = null;
        evaluationIntervalBuilder_ = null;
      }
      if (componentsBuilder_ == null) {
        components_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        componentsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Circuit_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Circuit getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.Circuit.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Circuit build() {
      com.fluxninja.generated.aperture.policy.language.v1.Circuit result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Circuit buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.Circuit result = new com.fluxninja.generated.aperture.policy.language.v1.Circuit(this);
      int from_bitField0_ = bitField0_;
      if (evaluationIntervalBuilder_ == null) {
        result.evaluationInterval_ = evaluationInterval_;
      } else {
        result.evaluationInterval_ = evaluationIntervalBuilder_.build();
      }
      if (componentsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          components_ = java.util.Collections.unmodifiableList(components_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.components_ = components_;
      } else {
        result.components_ = componentsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.Circuit) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Circuit)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.Circuit other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.Circuit.getDefaultInstance()) return this;
      if (other.hasEvaluationInterval()) {
        mergeEvaluationInterval(other.getEvaluationInterval());
      }
      if (componentsBuilder_ == null) {
        if (!other.components_.isEmpty()) {
          if (components_.isEmpty()) {
            components_ = other.components_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureComponentsIsMutable();
            components_.addAll(other.components_);
          }
          onChanged();
        }
      } else {
        if (!other.components_.isEmpty()) {
          if (componentsBuilder_.isEmpty()) {
            componentsBuilder_.dispose();
            componentsBuilder_ = null;
            components_ = other.components_;
            bitField0_ = (bitField0_ & ~0x00000001);
            componentsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getComponentsFieldBuilder() : null;
          } else {
            componentsBuilder_.addAllMessages(other.components_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.Circuit parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.Circuit) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Duration evaluationInterval_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> evaluationIntervalBuilder_;
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     * @return Whether the evaluationInterval field is set.
     */
    public boolean hasEvaluationInterval() {
      return evaluationIntervalBuilder_ != null || evaluationInterval_ != null;
    }
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     * @return The evaluationInterval.
     */
    public com.google.protobuf.Duration getEvaluationInterval() {
      if (evaluationIntervalBuilder_ == null) {
        return evaluationInterval_ == null ? com.google.protobuf.Duration.getDefaultInstance() : evaluationInterval_;
      } else {
        return evaluationIntervalBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     */
    public Builder setEvaluationInterval(com.google.protobuf.Duration value) {
      if (evaluationIntervalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        evaluationInterval_ = value;
        onChanged();
      } else {
        evaluationIntervalBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     */
    public Builder setEvaluationInterval(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (evaluationIntervalBuilder_ == null) {
        evaluationInterval_ = builderForValue.build();
        onChanged();
      } else {
        evaluationIntervalBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     */
    public Builder mergeEvaluationInterval(com.google.protobuf.Duration value) {
      if (evaluationIntervalBuilder_ == null) {
        if (evaluationInterval_ != null) {
          evaluationInterval_ =
            com.google.protobuf.Duration.newBuilder(evaluationInterval_).mergeFrom(value).buildPartial();
        } else {
          evaluationInterval_ = value;
        }
        onChanged();
      } else {
        evaluationIntervalBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     */
    public Builder clearEvaluationInterval() {
      if (evaluationIntervalBuilder_ == null) {
        evaluationInterval_ = null;
        onChanged();
      } else {
        evaluationInterval_ = null;
        evaluationIntervalBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     */
    public com.google.protobuf.Duration.Builder getEvaluationIntervalBuilder() {
      
      onChanged();
      return getEvaluationIntervalFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     */
    public com.google.protobuf.DurationOrBuilder getEvaluationIntervalOrBuilder() {
      if (evaluationIntervalBuilder_ != null) {
        return evaluationIntervalBuilder_.getMessageOrBuilder();
      } else {
        return evaluationInterval_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : evaluationInterval_;
      }
    }
    /**
     * <pre>
     * Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
     * This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
     * </pre>
     *
     * <code>.google.protobuf.Duration evaluation_interval = 1 [json_name = "evaluationInterval"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getEvaluationIntervalFieldBuilder() {
      if (evaluationIntervalBuilder_ == null) {
        evaluationIntervalBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getEvaluationInterval(),
                getParentForChildren(),
                isClean());
        evaluationInterval_ = null;
      }
      return evaluationIntervalBuilder_;
    }

    private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> components_ =
      java.util.Collections.emptyList();
    private void ensureComponentsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        components_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.Component>(components_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Component, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder, com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> componentsBuilder_;

    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component> getComponentsList() {
      if (componentsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(components_);
      } else {
        return componentsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public int getComponentsCount() {
      if (componentsBuilder_ == null) {
        return components_.size();
      } else {
        return componentsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Component getComponents(int index) {
      if (componentsBuilder_ == null) {
        return components_.get(index);
      } else {
        return componentsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder setComponents(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Component value) {
      if (componentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComponentsIsMutable();
        components_.set(index, value);
        onChanged();
      } else {
        componentsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder setComponents(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        components_.set(index, builderForValue.build());
        onChanged();
      } else {
        componentsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder addComponents(com.fluxninja.generated.aperture.policy.language.v1.Component value) {
      if (componentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComponentsIsMutable();
        components_.add(value);
        onChanged();
      } else {
        componentsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder addComponents(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Component value) {
      if (componentsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureComponentsIsMutable();
        components_.add(index, value);
        onChanged();
      } else {
        componentsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder addComponents(
        com.fluxninja.generated.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        components_.add(builderForValue.build());
        onChanged();
      } else {
        componentsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder addComponents(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder builderForValue) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        components_.add(index, builderForValue.build());
        onChanged();
      } else {
        componentsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder addAllComponents(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.policy.language.v1.Component> values) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, components_);
        onChanged();
      } else {
        componentsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder clearComponents() {
      if (componentsBuilder_ == null) {
        components_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        componentsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public Builder removeComponents(int index) {
      if (componentsBuilder_ == null) {
        ensureComponentsIsMutable();
        components_.remove(index);
        onChanged();
      } else {
        componentsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Component.Builder getComponentsBuilder(
        int index) {
      return getComponentsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder getComponentsOrBuilder(
        int index) {
      if (componentsBuilder_ == null) {
        return components_.get(index);  } else {
        return componentsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> 
         getComponentsOrBuilderList() {
      if (componentsBuilder_ != null) {
        return componentsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(components_);
      }
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Component.Builder addComponentsBuilder() {
      return getComponentsFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.policy.language.v1.Component.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Component.Builder addComponentsBuilder(
        int index) {
      return getComponentsFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.policy.language.v1.Component.getDefaultInstance());
    }
    /**
     * <pre>
     * Defines a signal processing graph as a list of components.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Component components = 2 [json_name = "components"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Component.Builder> 
         getComponentsBuilderList() {
      return getComponentsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Component, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder, com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder> 
        getComponentsFieldBuilder() {
      if (componentsBuilder_ == null) {
        componentsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Component, com.fluxninja.generated.aperture.policy.language.v1.Component.Builder, com.fluxninja.generated.aperture.policy.language.v1.ComponentOrBuilder>(
                components_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        components_ = null;
      }
      return componentsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.Circuit)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.Circuit)
  private static final com.fluxninja.generated.aperture.policy.language.v1.Circuit DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.Circuit();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Circuit getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Circuit>
      PARSER = new com.google.protobuf.AbstractParser<Circuit>() {
    @java.lang.Override
    public Circuit parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Circuit(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Circuit> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Circuit> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Circuit getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

