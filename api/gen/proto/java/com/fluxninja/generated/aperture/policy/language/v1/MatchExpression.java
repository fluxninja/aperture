// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/label_matcher.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Defines a [map&lt;string, string&gt; → bool] expression to be evaluated on labels
 * MatchExpression has multiple variants, exactly one should be set.
 * Example:
 * ```yaml
 * all:
 *   of:
 *     - label_exists: foo
 *     - label_equals: { label = app, value = frobnicator }
 * ```
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.MatchExpression}
 */
public final class MatchExpression extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.MatchExpression)
    MatchExpressionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MatchExpression.newBuilder() to construct.
  private MatchExpression(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MatchExpression() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new MatchExpression();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private MatchExpression(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder subBuilder = null;
            if (variantCase_ == 1) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 1;
            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder subBuilder = null;
            if (variantCase_ == 2) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 2;
            break;
          }
          case 26: {
            com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder subBuilder = null;
            if (variantCase_ == 3) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 3;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();
            variantCase_ = 4;
            variant_ = s;
            break;
          }
          case 42: {
            com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.Builder subBuilder = null;
            if (variantCase_ == 5) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 5;
            break;
          }
          case 50: {
            com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.Builder subBuilder = null;
            if (variantCase_ == 6) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_).toBuilder();
            }
            variant_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_);
              variant_ = subBuilder.buildPartial();
            }
            variantCase_ = 6;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.class, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder.class);
  }

  public interface ListOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.MatchExpression.List)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    java.util.List<com.fluxninja.generated.aperture.policy.language.v1.MatchExpression> 
        getOfList();
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.MatchExpression getOf(int index);
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    int getOfCount();
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder> 
        getOfOrBuilderList();
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder getOfOrBuilder(
        int index);
  }
  /**
   * <pre>
   * List of MatchExpressions that is used for all/any matching
   * eg. {any: {of: [expr1, expr2]}}.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.MatchExpression.List}
   */
  public static final class List extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.MatchExpression.List)
      ListOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use List.newBuilder() to construct.
    private List(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private List() {
      of_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new List();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private List(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                of_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.MatchExpression>();
                mutable_bitField0_ |= 0x00000001;
              }
              of_.add(
                  input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          of_ = java.util.Collections.unmodifiableList(of_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_List_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_List_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.class, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder.class);
    }

    public static final int OF_FIELD_NUMBER = 1;
    private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.MatchExpression> of_;
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    @java.lang.Override
    public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.MatchExpression> getOfList() {
      return of_;
    }
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder> 
        getOfOrBuilderList() {
      return of_;
    }
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    @java.lang.Override
    public int getOfCount() {
      return of_.size();
    }
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression getOf(int index) {
      return of_.get(index);
    }
    /**
     * <pre>
     * List of subexpressions of the match expression.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder getOfOrBuilder(
        int index) {
      return of_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < of_.size(); i++) {
        output.writeMessage(1, of_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < of_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, of_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List other = (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) obj;

      if (!getOfList()
          .equals(other.getOfList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getOfCount() > 0) {
        hash = (37 * hash) + OF_FIELD_NUMBER;
        hash = (53 * hash) + getOfList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * List of MatchExpressions that is used for all/any matching
     * eg. {any: {of: [expr1, expr2]}}.
     * </pre>
     *
     * Protobuf type {@code aperture.policy.language.v1.MatchExpression.List}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.MatchExpression.List)
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_List_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_List_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.class, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getOfFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (ofBuilder_ == null) {
          of_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ofBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_List_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List build() {
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List buildPartial() {
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List result = new com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List(this);
        int from_bitField0_ = bitField0_;
        if (ofBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            of_ = java.util.Collections.unmodifiableList(of_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.of_ = of_;
        } else {
          result.of_ = ofBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) {
          return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List other) {
        if (other == com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance()) return this;
        if (ofBuilder_ == null) {
          if (!other.of_.isEmpty()) {
            if (of_.isEmpty()) {
              of_ = other.of_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureOfIsMutable();
              of_.addAll(other.of_);
            }
            onChanged();
          }
        } else {
          if (!other.of_.isEmpty()) {
            if (ofBuilder_.isEmpty()) {
              ofBuilder_.dispose();
              ofBuilder_ = null;
              of_ = other.of_;
              bitField0_ = (bitField0_ & ~0x00000001);
              ofBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOfFieldBuilder() : null;
            } else {
              ofBuilder_.addAllMessages(other.of_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.MatchExpression> of_ =
        java.util.Collections.emptyList();
      private void ensureOfIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          of_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.MatchExpression>(of_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.MatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder> ofBuilder_;

      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.MatchExpression> getOfList() {
        if (ofBuilder_ == null) {
          return java.util.Collections.unmodifiableList(of_);
        } else {
          return ofBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public int getOfCount() {
        if (ofBuilder_ == null) {
          return of_.size();
        } else {
          return ofBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression getOf(int index) {
        if (ofBuilder_ == null) {
          return of_.get(index);
        } else {
          return ofBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder setOf(
          int index, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression value) {
        if (ofBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOfIsMutable();
          of_.set(index, value);
          onChanged();
        } else {
          ofBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder setOf(
          int index, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder builderForValue) {
        if (ofBuilder_ == null) {
          ensureOfIsMutable();
          of_.set(index, builderForValue.build());
          onChanged();
        } else {
          ofBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder addOf(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression value) {
        if (ofBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOfIsMutable();
          of_.add(value);
          onChanged();
        } else {
          ofBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder addOf(
          int index, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression value) {
        if (ofBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOfIsMutable();
          of_.add(index, value);
          onChanged();
        } else {
          ofBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder addOf(
          com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder builderForValue) {
        if (ofBuilder_ == null) {
          ensureOfIsMutable();
          of_.add(builderForValue.build());
          onChanged();
        } else {
          ofBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder addOf(
          int index, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder builderForValue) {
        if (ofBuilder_ == null) {
          ensureOfIsMutable();
          of_.add(index, builderForValue.build());
          onChanged();
        } else {
          ofBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder addAllOf(
          java.lang.Iterable<? extends com.fluxninja.generated.aperture.policy.language.v1.MatchExpression> values) {
        if (ofBuilder_ == null) {
          ensureOfIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, of_);
          onChanged();
        } else {
          ofBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder clearOf() {
        if (ofBuilder_ == null) {
          of_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          ofBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public Builder removeOf(int index) {
        if (ofBuilder_ == null) {
          ensureOfIsMutable();
          of_.remove(index);
          onChanged();
        } else {
          ofBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder getOfBuilder(
          int index) {
        return getOfFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder getOfOrBuilder(
          int index) {
        if (ofBuilder_ == null) {
          return of_.get(index);  } else {
          return ofBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder> 
           getOfOrBuilderList() {
        if (ofBuilder_ != null) {
          return ofBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(of_);
        }
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder addOfBuilder() {
        return getOfFieldBuilder().addBuilder(
            com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance());
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder addOfBuilder(
          int index) {
        return getOfFieldBuilder().addBuilder(
            index, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance());
      }
      /**
       * <pre>
       * List of subexpressions of the match expression.
       * </pre>
       *
       * <code>repeated .aperture.policy.language.v1.MatchExpression of = 1 [json_name = "of"];</code>
       */
      public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder> 
           getOfBuilderList() {
        return getOfFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.fluxninja.generated.aperture.policy.language.v1.MatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder> 
          getOfFieldBuilder() {
        if (ofBuilder_ == null) {
          ofBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.fluxninja.generated.aperture.policy.language.v1.MatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder>(
                  of_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          of_ = null;
        }
        return ofBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.MatchExpression.List)
    }

    // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.MatchExpression.List)
    private static final com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List();
    }

    public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<List>
        PARSER = new com.google.protobuf.AbstractParser<List>() {
      @java.lang.Override
      public List parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new List(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<List> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<List> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int variantCase_ = 0;
  private java.lang.Object variant_;
  public enum VariantCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    NOT(1),
    ALL(2),
    ANY(3),
    LABEL_EXISTS(4),
    LABEL_EQUALS(5),
    LABEL_MATCHES(6),
    VARIANT_NOT_SET(0);
    private final int value;
    private VariantCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static VariantCase valueOf(int value) {
      return forNumber(value);
    }

    public static VariantCase forNumber(int value) {
      switch (value) {
        case 1: return NOT;
        case 2: return ALL;
        case 3: return ANY;
        case 4: return LABEL_EXISTS;
        case 5: return LABEL_EQUALS;
        case 6: return LABEL_MATCHES;
        case 0: return VARIANT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public VariantCase
  getVariantCase() {
    return VariantCase.forNumber(
        variantCase_);
  }

  public static final int NOT_FIELD_NUMBER = 1;
  /**
   * <pre>
   * The expression negates the result of subexpression.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
   * @return Whether the not field is set.
   */
  @java.lang.Override
  public boolean hasNot() {
    return variantCase_ == 1;
  }
  /**
   * <pre>
   * The expression negates the result of subexpression.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
   * @return The not.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression getNot() {
    if (variantCase_ == 1) {
       return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance();
  }
  /**
   * <pre>
   * The expression negates the result of subexpression.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder getNotOrBuilder() {
    if (variantCase_ == 1) {
       return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance();
  }

  public static final int ALL_FIELD_NUMBER = 2;
  /**
   * <pre>
   * The expression is true when all subexpressions are true.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
   * @return Whether the all field is set.
   */
  @java.lang.Override
  public boolean hasAll() {
    return variantCase_ == 2;
  }
  /**
   * <pre>
   * The expression is true when all subexpressions are true.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
   * @return The all.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List getAll() {
    if (variantCase_ == 2) {
       return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
  }
  /**
   * <pre>
   * The expression is true when all subexpressions are true.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder getAllOrBuilder() {
    if (variantCase_ == 2) {
       return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
  }

  public static final int ANY_FIELD_NUMBER = 3;
  /**
   * <pre>
   * The expression is true when any subexpression is true.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
   * @return Whether the any field is set.
   */
  @java.lang.Override
  public boolean hasAny() {
    return variantCase_ == 3;
  }
  /**
   * <pre>
   * The expression is true when any subexpression is true.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
   * @return The any.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List getAny() {
    if (variantCase_ == 3) {
       return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
  }
  /**
   * <pre>
   * The expression is true when any subexpression is true.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder getAnyOrBuilder() {
    if (variantCase_ == 3) {
       return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
  }

  public static final int LABEL_EXISTS_FIELD_NUMBER = 4;
  /**
   * <pre>
   * The expression is true when label with given name exists.
   * </pre>
   *
   * <code>string label_exists = 4 [json_name = "labelExists"];</code>
   * @return Whether the labelExists field is set.
   */
  public boolean hasLabelExists() {
    return variantCase_ == 4;
  }
  /**
   * <pre>
   * The expression is true when label with given name exists.
   * </pre>
   *
   * <code>string label_exists = 4 [json_name = "labelExists"];</code>
   * @return The labelExists.
   */
  public java.lang.String getLabelExists() {
    java.lang.Object ref = "";
    if (variantCase_ == 4) {
      ref = variant_;
    }
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (variantCase_ == 4) {
        variant_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * The expression is true when label with given name exists.
   * </pre>
   *
   * <code>string label_exists = 4 [json_name = "labelExists"];</code>
   * @return The bytes for labelExists.
   */
  public com.google.protobuf.ByteString
      getLabelExistsBytes() {
    java.lang.Object ref = "";
    if (variantCase_ == 4) {
      ref = variant_;
    }
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      if (variantCase_ == 4) {
        variant_ = b;
      }
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LABEL_EQUALS_FIELD_NUMBER = 5;
  /**
   * <pre>
   * The expression is true when label value equals given value.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
   * @return Whether the labelEquals field is set.
   */
  @java.lang.Override
  public boolean hasLabelEquals() {
    return variantCase_ == 5;
  }
  /**
   * <pre>
   * The expression is true when label value equals given value.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
   * @return The labelEquals.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression getLabelEquals() {
    if (variantCase_ == 5) {
       return (com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.getDefaultInstance();
  }
  /**
   * <pre>
   * The expression is true when label value equals given value.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpressionOrBuilder getLabelEqualsOrBuilder() {
    if (variantCase_ == 5) {
       return (com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.getDefaultInstance();
  }

  public static final int LABEL_MATCHES_FIELD_NUMBER = 6;
  /**
   * <pre>
   * The expression is true when label matches given regex.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
   * @return Whether the labelMatches field is set.
   */
  @java.lang.Override
  public boolean hasLabelMatches() {
    return variantCase_ == 6;
  }
  /**
   * <pre>
   * The expression is true when label matches given regex.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
   * @return The labelMatches.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression getLabelMatches() {
    if (variantCase_ == 6) {
       return (com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.getDefaultInstance();
  }
  /**
   * <pre>
   * The expression is true when label matches given regex.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpressionOrBuilder getLabelMatchesOrBuilder() {
    if (variantCase_ == 6) {
       return (com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (variantCase_ == 1) {
      output.writeMessage(1, (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_);
    }
    if (variantCase_ == 2) {
      output.writeMessage(2, (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_);
    }
    if (variantCase_ == 3) {
      output.writeMessage(3, (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_);
    }
    if (variantCase_ == 4) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, variant_);
    }
    if (variantCase_ == 5) {
      output.writeMessage(5, (com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_);
    }
    if (variantCase_ == 6) {
      output.writeMessage(6, (com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (variantCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_);
    }
    if (variantCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_);
    }
    if (variantCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_);
    }
    if (variantCase_ == 4) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, variant_);
    }
    if (variantCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_);
    }
    if (variantCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.MatchExpression)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.MatchExpression other = (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) obj;

    if (!getVariantCase().equals(other.getVariantCase())) return false;
    switch (variantCase_) {
      case 1:
        if (!getNot()
            .equals(other.getNot())) return false;
        break;
      case 2:
        if (!getAll()
            .equals(other.getAll())) return false;
        break;
      case 3:
        if (!getAny()
            .equals(other.getAny())) return false;
        break;
      case 4:
        if (!getLabelExists()
            .equals(other.getLabelExists())) return false;
        break;
      case 5:
        if (!getLabelEquals()
            .equals(other.getLabelEquals())) return false;
        break;
      case 6:
        if (!getLabelMatches()
            .equals(other.getLabelMatches())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (variantCase_) {
      case 1:
        hash = (37 * hash) + NOT_FIELD_NUMBER;
        hash = (53 * hash) + getNot().hashCode();
        break;
      case 2:
        hash = (37 * hash) + ALL_FIELD_NUMBER;
        hash = (53 * hash) + getAll().hashCode();
        break;
      case 3:
        hash = (37 * hash) + ANY_FIELD_NUMBER;
        hash = (53 * hash) + getAny().hashCode();
        break;
      case 4:
        hash = (37 * hash) + LABEL_EXISTS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelExists().hashCode();
        break;
      case 5:
        hash = (37 * hash) + LABEL_EQUALS_FIELD_NUMBER;
        hash = (53 * hash) + getLabelEquals().hashCode();
        break;
      case 6:
        hash = (37 * hash) + LABEL_MATCHES_FIELD_NUMBER;
        hash = (53 * hash) + getLabelMatches().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Defines a [map&lt;string, string&gt; → bool] expression to be evaluated on labels
   * MatchExpression has multiple variants, exactly one should be set.
   * Example:
   * ```yaml
   * all:
   *   of:
   *     - label_exists: foo
   *     - label_equals: { label = app, value = frobnicator }
   * ```
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.MatchExpression}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.MatchExpression)
      com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.class, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      variantCase_ = 0;
      variant_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherProto.internal_static_aperture_policy_language_v1_MatchExpression_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression build() {
      com.fluxninja.generated.aperture.policy.language.v1.MatchExpression result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.MatchExpression result = new com.fluxninja.generated.aperture.policy.language.v1.MatchExpression(this);
      if (variantCase_ == 1) {
        if (notBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = notBuilder_.build();
        }
      }
      if (variantCase_ == 2) {
        if (allBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = allBuilder_.build();
        }
      }
      if (variantCase_ == 3) {
        if (anyBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = anyBuilder_.build();
        }
      }
      if (variantCase_ == 4) {
        result.variant_ = variant_;
      }
      if (variantCase_ == 5) {
        if (labelEqualsBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = labelEqualsBuilder_.build();
        }
      }
      if (variantCase_ == 6) {
        if (labelMatchesBuilder_ == null) {
          result.variant_ = variant_;
        } else {
          result.variant_ = labelMatchesBuilder_.build();
        }
      }
      result.variantCase_ = variantCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance()) return this;
      switch (other.getVariantCase()) {
        case NOT: {
          mergeNot(other.getNot());
          break;
        }
        case ALL: {
          mergeAll(other.getAll());
          break;
        }
        case ANY: {
          mergeAny(other.getAny());
          break;
        }
        case LABEL_EXISTS: {
          variantCase_ = 4;
          variant_ = other.variant_;
          onChanged();
          break;
        }
        case LABEL_EQUALS: {
          mergeLabelEquals(other.getLabelEquals());
          break;
        }
        case LABEL_MATCHES: {
          mergeLabelMatches(other.getLabelMatches());
          break;
        }
        case VARIANT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.MatchExpression parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int variantCase_ = 0;
    private java.lang.Object variant_;
    public VariantCase
        getVariantCase() {
      return VariantCase.forNumber(
          variantCase_);
    }

    public Builder clearVariant() {
      variantCase_ = 0;
      variant_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder> notBuilder_;
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     * @return Whether the not field is set.
     */
    @java.lang.Override
    public boolean hasNot() {
      return variantCase_ == 1;
    }
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     * @return The not.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression getNot() {
      if (notBuilder_ == null) {
        if (variantCase_ == 1) {
          return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance();
      } else {
        if (variantCase_ == 1) {
          return notBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     */
    public Builder setNot(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression value) {
      if (notBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        notBuilder_.setMessage(value);
      }
      variantCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     */
    public Builder setNot(
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder builderForValue) {
      if (notBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        notBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     */
    public Builder mergeNot(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression value) {
      if (notBuilder_ == null) {
        if (variantCase_ == 1 &&
            variant_ != com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance()) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 1) {
          notBuilder_.mergeFrom(value);
        } else {
          notBuilder_.setMessage(value);
        }
      }
      variantCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     */
    public Builder clearNot() {
      if (notBuilder_ == null) {
        if (variantCase_ == 1) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 1) {
          variantCase_ = 0;
          variant_ = null;
        }
        notBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder getNotBuilder() {
      return getNotFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder getNotOrBuilder() {
      if ((variantCase_ == 1) && (notBuilder_ != null)) {
        return notBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 1) {
          return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression negates the result of subexpression.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression not = 1 [json_name = "not"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder> 
        getNotFieldBuilder() {
      if (notBuilder_ == null) {
        if (!(variantCase_ == 1)) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.getDefaultInstance();
        }
        notBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.MatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpressionOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 1;
      onChanged();;
      return notBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder> allBuilder_;
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     * @return Whether the all field is set.
     */
    @java.lang.Override
    public boolean hasAll() {
      return variantCase_ == 2;
    }
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     * @return The all.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List getAll() {
      if (allBuilder_ == null) {
        if (variantCase_ == 2) {
          return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
      } else {
        if (variantCase_ == 2) {
          return allBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     */
    public Builder setAll(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List value) {
      if (allBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        allBuilder_.setMessage(value);
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     */
    public Builder setAll(
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder builderForValue) {
      if (allBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        allBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     */
    public Builder mergeAll(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List value) {
      if (allBuilder_ == null) {
        if (variantCase_ == 2 &&
            variant_ != com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance()) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 2) {
          allBuilder_.mergeFrom(value);
        } else {
          allBuilder_.setMessage(value);
        }
      }
      variantCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     */
    public Builder clearAll() {
      if (allBuilder_ == null) {
        if (variantCase_ == 2) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 2) {
          variantCase_ = 0;
          variant_ = null;
        }
        allBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder getAllBuilder() {
      return getAllFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder getAllOrBuilder() {
      if ((variantCase_ == 2) && (allBuilder_ != null)) {
        return allBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 2) {
          return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression is true when all subexpressions are true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List all = 2 [json_name = "all"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder> 
        getAllFieldBuilder() {
      if (allBuilder_ == null) {
        if (!(variantCase_ == 2)) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
        }
        allBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 2;
      onChanged();;
      return allBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder> anyBuilder_;
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     * @return Whether the any field is set.
     */
    @java.lang.Override
    public boolean hasAny() {
      return variantCase_ == 3;
    }
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     * @return The any.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List getAny() {
      if (anyBuilder_ == null) {
        if (variantCase_ == 3) {
          return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
      } else {
        if (variantCase_ == 3) {
          return anyBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     */
    public Builder setAny(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List value) {
      if (anyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        anyBuilder_.setMessage(value);
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     */
    public Builder setAny(
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder builderForValue) {
      if (anyBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        anyBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     */
    public Builder mergeAny(com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List value) {
      if (anyBuilder_ == null) {
        if (variantCase_ == 3 &&
            variant_ != com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance()) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 3) {
          anyBuilder_.mergeFrom(value);
        } else {
          anyBuilder_.setMessage(value);
        }
      }
      variantCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     */
    public Builder clearAny() {
      if (anyBuilder_ == null) {
        if (variantCase_ == 3) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 3) {
          variantCase_ = 0;
          variant_ = null;
        }
        anyBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder getAnyBuilder() {
      return getAnyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder getAnyOrBuilder() {
      if ((variantCase_ == 3) && (anyBuilder_ != null)) {
        return anyBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 3) {
          return (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression is true when any subexpression is true.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchExpression.List any = 3 [json_name = "any"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder> 
        getAnyFieldBuilder() {
      if (anyBuilder_ == null) {
        if (!(variantCase_ == 3)) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.getDefaultInstance();
        }
        anyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.ListOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.MatchExpression.List) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 3;
      onChanged();;
      return anyBuilder_;
    }

    /**
     * <pre>
     * The expression is true when label with given name exists.
     * </pre>
     *
     * <code>string label_exists = 4 [json_name = "labelExists"];</code>
     * @return Whether the labelExists field is set.
     */
    @java.lang.Override
    public boolean hasLabelExists() {
      return variantCase_ == 4;
    }
    /**
     * <pre>
     * The expression is true when label with given name exists.
     * </pre>
     *
     * <code>string label_exists = 4 [json_name = "labelExists"];</code>
     * @return The labelExists.
     */
    @java.lang.Override
    public java.lang.String getLabelExists() {
      java.lang.Object ref = "";
      if (variantCase_ == 4) {
        ref = variant_;
      }
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (variantCase_ == 4) {
          variant_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The expression is true when label with given name exists.
     * </pre>
     *
     * <code>string label_exists = 4 [json_name = "labelExists"];</code>
     * @return The bytes for labelExists.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLabelExistsBytes() {
      java.lang.Object ref = "";
      if (variantCase_ == 4) {
        ref = variant_;
      }
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (variantCase_ == 4) {
          variant_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The expression is true when label with given name exists.
     * </pre>
     *
     * <code>string label_exists = 4 [json_name = "labelExists"];</code>
     * @param value The labelExists to set.
     * @return This builder for chaining.
     */
    public Builder setLabelExists(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  variantCase_ = 4;
      variant_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The expression is true when label with given name exists.
     * </pre>
     *
     * <code>string label_exists = 4 [json_name = "labelExists"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLabelExists() {
      if (variantCase_ == 4) {
        variantCase_ = 0;
        variant_ = null;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The expression is true when label with given name exists.
     * </pre>
     *
     * <code>string label_exists = 4 [json_name = "labelExists"];</code>
     * @param value The bytes for labelExists to set.
     * @return This builder for chaining.
     */
    public Builder setLabelExistsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      variantCase_ = 4;
      variant_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression, com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpressionOrBuilder> labelEqualsBuilder_;
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     * @return Whether the labelEquals field is set.
     */
    @java.lang.Override
    public boolean hasLabelEquals() {
      return variantCase_ == 5;
    }
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     * @return The labelEquals.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression getLabelEquals() {
      if (labelEqualsBuilder_ == null) {
        if (variantCase_ == 5) {
          return (com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.getDefaultInstance();
      } else {
        if (variantCase_ == 5) {
          return labelEqualsBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     */
    public Builder setLabelEquals(com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression value) {
      if (labelEqualsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        labelEqualsBuilder_.setMessage(value);
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     */
    public Builder setLabelEquals(
        com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.Builder builderForValue) {
      if (labelEqualsBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        labelEqualsBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     */
    public Builder mergeLabelEquals(com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression value) {
      if (labelEqualsBuilder_ == null) {
        if (variantCase_ == 5 &&
            variant_ != com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.getDefaultInstance()) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 5) {
          labelEqualsBuilder_.mergeFrom(value);
        } else {
          labelEqualsBuilder_.setMessage(value);
        }
      }
      variantCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     */
    public Builder clearLabelEquals() {
      if (labelEqualsBuilder_ == null) {
        if (variantCase_ == 5) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 5) {
          variantCase_ = 0;
          variant_ = null;
        }
        labelEqualsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.Builder getLabelEqualsBuilder() {
      return getLabelEqualsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpressionOrBuilder getLabelEqualsOrBuilder() {
      if ((variantCase_ == 5) && (labelEqualsBuilder_ != null)) {
        return labelEqualsBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 5) {
          return (com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression is true when label value equals given value.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.EqualsMatchExpression label_equals = 5 [json_name = "labelEquals"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression, com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpressionOrBuilder> 
        getLabelEqualsFieldBuilder() {
      if (labelEqualsBuilder_ == null) {
        if (!(variantCase_ == 5)) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.getDefaultInstance();
        }
        labelEqualsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression, com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpressionOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.EqualsMatchExpression) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 5;
      onChanged();;
      return labelEqualsBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpressionOrBuilder> labelMatchesBuilder_;
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     * @return Whether the labelMatches field is set.
     */
    @java.lang.Override
    public boolean hasLabelMatches() {
      return variantCase_ == 6;
    }
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     * @return The labelMatches.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression getLabelMatches() {
      if (labelMatchesBuilder_ == null) {
        if (variantCase_ == 6) {
          return (com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.getDefaultInstance();
      } else {
        if (variantCase_ == 6) {
          return labelMatchesBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     */
    public Builder setLabelMatches(com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression value) {
      if (labelMatchesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        variant_ = value;
        onChanged();
      } else {
        labelMatchesBuilder_.setMessage(value);
      }
      variantCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     */
    public Builder setLabelMatches(
        com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.Builder builderForValue) {
      if (labelMatchesBuilder_ == null) {
        variant_ = builderForValue.build();
        onChanged();
      } else {
        labelMatchesBuilder_.setMessage(builderForValue.build());
      }
      variantCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     */
    public Builder mergeLabelMatches(com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression value) {
      if (labelMatchesBuilder_ == null) {
        if (variantCase_ == 6 &&
            variant_ != com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.getDefaultInstance()) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_)
              .mergeFrom(value).buildPartial();
        } else {
          variant_ = value;
        }
        onChanged();
      } else {
        if (variantCase_ == 6) {
          labelMatchesBuilder_.mergeFrom(value);
        } else {
          labelMatchesBuilder_.setMessage(value);
        }
      }
      variantCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     */
    public Builder clearLabelMatches() {
      if (labelMatchesBuilder_ == null) {
        if (variantCase_ == 6) {
          variantCase_ = 0;
          variant_ = null;
          onChanged();
        }
      } else {
        if (variantCase_ == 6) {
          variantCase_ = 0;
          variant_ = null;
        }
        labelMatchesBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.Builder getLabelMatchesBuilder() {
      return getLabelMatchesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpressionOrBuilder getLabelMatchesOrBuilder() {
      if ((variantCase_ == 6) && (labelMatchesBuilder_ != null)) {
        return labelMatchesBuilder_.getMessageOrBuilder();
      } else {
        if (variantCase_ == 6) {
          return (com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * The expression is true when label matches given regex.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.MatchesMatchExpression label_matches = 6 [json_name = "labelMatches"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpressionOrBuilder> 
        getLabelMatchesFieldBuilder() {
      if (labelMatchesBuilder_ == null) {
        if (!(variantCase_ == 6)) {
          variant_ = com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.getDefaultInstance();
        }
        labelMatchesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression, com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression.Builder, com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpressionOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.MatchesMatchExpression) variant_,
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      variantCase_ = 6;
      onChanged();;
      return labelMatchesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.MatchExpression)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.MatchExpression)
  private static final com.fluxninja.generated.aperture.policy.language.v1.MatchExpression DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.MatchExpression();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.MatchExpression getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MatchExpression>
      PARSER = new com.google.protobuf.AbstractParser<MatchExpression>() {
    @java.lang.Override
    public MatchExpression parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new MatchExpression(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<MatchExpression> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<MatchExpression> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.MatchExpression getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

