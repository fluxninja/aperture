// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/cmd/v1/cmd.proto

package com.fluxninja.generated.aperture.cmd.v1;

/**
 * Protobuf type {@code aperture.cmd.v1.ListFlowControlPointsControllerResponse}
 */
public final class ListFlowControlPointsControllerResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.cmd.v1.ListFlowControlPointsControllerResponse)
    ListFlowControlPointsControllerResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ListFlowControlPointsControllerResponse.newBuilder() to construct.
  private ListFlowControlPointsControllerResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ListFlowControlPointsControllerResponse() {
    globalFlowControlPoints_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ListFlowControlPointsControllerResponse();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ListFlowControlPointsControllerResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              globalFlowControlPoints_ = new java.util.ArrayList<com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint>();
              mutable_bitField0_ |= 0x00000001;
            }
            globalFlowControlPoints_.add(
                input.readMessage(com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.parser(), extensionRegistry));
            break;
          }
          case 16: {

            errorsCount_ = input.readUInt32();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        globalFlowControlPoints_ = java.util.Collections.unmodifiableList(globalFlowControlPoints_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.cmd.v1.CmdProto.internal_static_aperture_cmd_v1_ListFlowControlPointsControllerResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.cmd.v1.CmdProto.internal_static_aperture_cmd_v1_ListFlowControlPointsControllerResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse.class, com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse.Builder.class);
  }

  public static final int GLOBAL_FLOW_CONTROL_POINTS_FIELD_NUMBER = 1;
  private java.util.List<com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint> globalFlowControlPoints_;
  /**
   * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint> getGlobalFlowControlPointsList() {
    return globalFlowControlPoints_;
  }
  /**
   * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPointOrBuilder> 
      getGlobalFlowControlPointsOrBuilderList() {
    return globalFlowControlPoints_;
  }
  /**
   * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
   */
  @java.lang.Override
  public int getGlobalFlowControlPointsCount() {
    return globalFlowControlPoints_.size();
  }
  /**
   * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint getGlobalFlowControlPoints(int index) {
    return globalFlowControlPoints_.get(index);
  }
  /**
   * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPointOrBuilder getGlobalFlowControlPointsOrBuilder(
      int index) {
    return globalFlowControlPoints_.get(index);
  }

  public static final int ERRORS_COUNT_FIELD_NUMBER = 2;
  private int errorsCount_;
  /**
   * <code>uint32 errors_count = 2 [json_name = "errorsCount"];</code>
   * @return The errorsCount.
   */
  @java.lang.Override
  public int getErrorsCount() {
    return errorsCount_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < globalFlowControlPoints_.size(); i++) {
      output.writeMessage(1, globalFlowControlPoints_.get(i));
    }
    if (errorsCount_ != 0) {
      output.writeUInt32(2, errorsCount_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < globalFlowControlPoints_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, globalFlowControlPoints_.get(i));
    }
    if (errorsCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, errorsCount_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse other = (com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse) obj;

    if (!getGlobalFlowControlPointsList()
        .equals(other.getGlobalFlowControlPointsList())) return false;
    if (getErrorsCount()
        != other.getErrorsCount()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getGlobalFlowControlPointsCount() > 0) {
      hash = (37 * hash) + GLOBAL_FLOW_CONTROL_POINTS_FIELD_NUMBER;
      hash = (53 * hash) + getGlobalFlowControlPointsList().hashCode();
    }
    hash = (37 * hash) + ERRORS_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getErrorsCount();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.cmd.v1.ListFlowControlPointsControllerResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.cmd.v1.ListFlowControlPointsControllerResponse)
      com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.cmd.v1.CmdProto.internal_static_aperture_cmd_v1_ListFlowControlPointsControllerResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.cmd.v1.CmdProto.internal_static_aperture_cmd_v1_ListFlowControlPointsControllerResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse.class, com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getGlobalFlowControlPointsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (globalFlowControlPointsBuilder_ == null) {
        globalFlowControlPoints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        globalFlowControlPointsBuilder_.clear();
      }
      errorsCount_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.cmd.v1.CmdProto.internal_static_aperture_cmd_v1_ListFlowControlPointsControllerResponse_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse build() {
      com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse buildPartial() {
      com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse result = new com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse(this);
      int from_bitField0_ = bitField0_;
      if (globalFlowControlPointsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          globalFlowControlPoints_ = java.util.Collections.unmodifiableList(globalFlowControlPoints_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.globalFlowControlPoints_ = globalFlowControlPoints_;
      } else {
        result.globalFlowControlPoints_ = globalFlowControlPointsBuilder_.build();
      }
      result.errorsCount_ = errorsCount_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse) {
        return mergeFrom((com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse other) {
      if (other == com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse.getDefaultInstance()) return this;
      if (globalFlowControlPointsBuilder_ == null) {
        if (!other.globalFlowControlPoints_.isEmpty()) {
          if (globalFlowControlPoints_.isEmpty()) {
            globalFlowControlPoints_ = other.globalFlowControlPoints_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureGlobalFlowControlPointsIsMutable();
            globalFlowControlPoints_.addAll(other.globalFlowControlPoints_);
          }
          onChanged();
        }
      } else {
        if (!other.globalFlowControlPoints_.isEmpty()) {
          if (globalFlowControlPointsBuilder_.isEmpty()) {
            globalFlowControlPointsBuilder_.dispose();
            globalFlowControlPointsBuilder_ = null;
            globalFlowControlPoints_ = other.globalFlowControlPoints_;
            bitField0_ = (bitField0_ & ~0x00000001);
            globalFlowControlPointsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getGlobalFlowControlPointsFieldBuilder() : null;
          } else {
            globalFlowControlPointsBuilder_.addAllMessages(other.globalFlowControlPoints_);
          }
        }
      }
      if (other.getErrorsCount() != 0) {
        setErrorsCount(other.getErrorsCount());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint> globalFlowControlPoints_ =
      java.util.Collections.emptyList();
    private void ensureGlobalFlowControlPointsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        globalFlowControlPoints_ = new java.util.ArrayList<com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint>(globalFlowControlPoints_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPointOrBuilder> globalFlowControlPointsBuilder_;

    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint> getGlobalFlowControlPointsList() {
      if (globalFlowControlPointsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(globalFlowControlPoints_);
      } else {
        return globalFlowControlPointsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public int getGlobalFlowControlPointsCount() {
      if (globalFlowControlPointsBuilder_ == null) {
        return globalFlowControlPoints_.size();
      } else {
        return globalFlowControlPointsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint getGlobalFlowControlPoints(int index) {
      if (globalFlowControlPointsBuilder_ == null) {
        return globalFlowControlPoints_.get(index);
      } else {
        return globalFlowControlPointsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder setGlobalFlowControlPoints(
        int index, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint value) {
      if (globalFlowControlPointsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalFlowControlPointsIsMutable();
        globalFlowControlPoints_.set(index, value);
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder setGlobalFlowControlPoints(
        int index, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder builderForValue) {
      if (globalFlowControlPointsBuilder_ == null) {
        ensureGlobalFlowControlPointsIsMutable();
        globalFlowControlPoints_.set(index, builderForValue.build());
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder addGlobalFlowControlPoints(com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint value) {
      if (globalFlowControlPointsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalFlowControlPointsIsMutable();
        globalFlowControlPoints_.add(value);
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder addGlobalFlowControlPoints(
        int index, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint value) {
      if (globalFlowControlPointsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureGlobalFlowControlPointsIsMutable();
        globalFlowControlPoints_.add(index, value);
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder addGlobalFlowControlPoints(
        com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder builderForValue) {
      if (globalFlowControlPointsBuilder_ == null) {
        ensureGlobalFlowControlPointsIsMutable();
        globalFlowControlPoints_.add(builderForValue.build());
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder addGlobalFlowControlPoints(
        int index, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder builderForValue) {
      if (globalFlowControlPointsBuilder_ == null) {
        ensureGlobalFlowControlPointsIsMutable();
        globalFlowControlPoints_.add(index, builderForValue.build());
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder addAllGlobalFlowControlPoints(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint> values) {
      if (globalFlowControlPointsBuilder_ == null) {
        ensureGlobalFlowControlPointsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, globalFlowControlPoints_);
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder clearGlobalFlowControlPoints() {
      if (globalFlowControlPointsBuilder_ == null) {
        globalFlowControlPoints_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public Builder removeGlobalFlowControlPoints(int index) {
      if (globalFlowControlPointsBuilder_ == null) {
        ensureGlobalFlowControlPointsIsMutable();
        globalFlowControlPoints_.remove(index);
        onChanged();
      } else {
        globalFlowControlPointsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder getGlobalFlowControlPointsBuilder(
        int index) {
      return getGlobalFlowControlPointsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPointOrBuilder getGlobalFlowControlPointsOrBuilder(
        int index) {
      if (globalFlowControlPointsBuilder_ == null) {
        return globalFlowControlPoints_.get(index);  } else {
        return globalFlowControlPointsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPointOrBuilder> 
         getGlobalFlowControlPointsOrBuilderList() {
      if (globalFlowControlPointsBuilder_ != null) {
        return globalFlowControlPointsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(globalFlowControlPoints_);
      }
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder addGlobalFlowControlPointsBuilder() {
      return getGlobalFlowControlPointsFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder addGlobalFlowControlPointsBuilder(
        int index) {
      return getGlobalFlowControlPointsFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.cmd.v1.GlobalFlowControlPoint global_flow_control_points = 1 [json_name = "globalFlowControlPoints"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder> 
         getGlobalFlowControlPointsBuilderList() {
      return getGlobalFlowControlPointsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPointOrBuilder> 
        getGlobalFlowControlPointsFieldBuilder() {
      if (globalFlowControlPointsBuilder_ == null) {
        globalFlowControlPointsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPoint.Builder, com.fluxninja.generated.aperture.cmd.v1.GlobalFlowControlPointOrBuilder>(
                globalFlowControlPoints_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        globalFlowControlPoints_ = null;
      }
      return globalFlowControlPointsBuilder_;
    }

    private int errorsCount_ ;
    /**
     * <code>uint32 errors_count = 2 [json_name = "errorsCount"];</code>
     * @return The errorsCount.
     */
    @java.lang.Override
    public int getErrorsCount() {
      return errorsCount_;
    }
    /**
     * <code>uint32 errors_count = 2 [json_name = "errorsCount"];</code>
     * @param value The errorsCount to set.
     * @return This builder for chaining.
     */
    public Builder setErrorsCount(int value) {
      
      errorsCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>uint32 errors_count = 2 [json_name = "errorsCount"];</code>
     * @return This builder for chaining.
     */
    public Builder clearErrorsCount() {
      
      errorsCount_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.cmd.v1.ListFlowControlPointsControllerResponse)
  }

  // @@protoc_insertion_point(class_scope:aperture.cmd.v1.ListFlowControlPointsControllerResponse)
  private static final com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse();
  }

  public static com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ListFlowControlPointsControllerResponse>
      PARSER = new com.google.protobuf.AbstractParser<ListFlowControlPointsControllerResponse>() {
    @java.lang.Override
    public ListFlowControlPointsControllerResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ListFlowControlPointsControllerResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ListFlowControlPointsControllerResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ListFlowControlPointsControllerResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.cmd.v1.ListFlowControlPointsControllerResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

