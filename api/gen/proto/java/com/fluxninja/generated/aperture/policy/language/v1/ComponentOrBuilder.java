// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface ComponentOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.Component)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   * @return Whether the gradientController field is set.
   */
  boolean hasGradientController();
  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   * @return The gradientController.
   */
  com.fluxninja.generated.aperture.policy.language.v1.GradientController getGradientController();
  /**
   * <pre>
   * Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
   * This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.GradientController gradient_controller = 1 [json_name = "gradientController"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.GradientControllerOrBuilder getGradientControllerOrBuilder();

  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   * @return Whether the ema field is set.
   */
  boolean hasEma();
  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   * @return The ema.
   */
  com.fluxninja.generated.aperture.policy.language.v1.EMA getEma();
  /**
   * <pre>
   * Exponential Moving Average filter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.EMA ema = 2 [json_name = "ema"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.EMAOrBuilder getEmaOrBuilder();

  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   * @return Whether the arithmeticCombinator field is set.
   */
  boolean hasArithmeticCombinator();
  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   * @return The arithmeticCombinator.
   */
  com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinator getArithmeticCombinator();
  /**
   * <pre>
   * Applies the given operator on input operands (signals) and emits the result.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ArithmeticCombinator arithmetic_combinator = 3 [json_name = "arithmeticCombinator"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.ArithmeticCombinatorOrBuilder getArithmeticCombinatorOrBuilder();

  /**
   * <pre>
   * Decider emits the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   * @return Whether the decider field is set.
   */
  boolean hasDecider();
  /**
   * <pre>
   * Decider emits the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   * @return The decider.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Decider getDecider();
  /**
   * <pre>
   * Decider emits the binary result of comparison operator on two operands.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Decider decider = 4 [json_name = "decider"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.DeciderOrBuilder getDeciderOrBuilder();

  /**
   * <pre>
   * Switcher acts as a switch that emits one of the two signals based on third signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
   * @return Whether the switcher field is set.
   */
  boolean hasSwitcher();
  /**
   * <pre>
   * Switcher acts as a switch that emits one of the two signals based on third signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
   * @return The switcher.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Switcher getSwitcher();
  /**
   * <pre>
   * Switcher acts as a switch that emits one of the two signals based on third signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Switcher switcher = 5 [json_name = "switcher"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.SwitcherOrBuilder getSwitcherOrBuilder();

  /**
   * <pre>
   * Emits a variable signal which can be set to invalid.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
   * @return Whether the variable field is set.
   */
  boolean hasVariable();
  /**
   * <pre>
   * Emits a variable signal which can be set to invalid.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
   * @return The variable.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Variable getVariable();
  /**
   * <pre>
   * Emits a variable signal which can be set to invalid.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Variable variable = 9 [json_name = "variable"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.VariableOrBuilder getVariableOrBuilder();

  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
   * @return Whether the unaryOperator field is set.
   */
  boolean hasUnaryOperator();
  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
   * @return The unaryOperator.
   */
  com.fluxninja.generated.aperture.policy.language.v1.UnaryOperator getUnaryOperator();
  /**
   * <pre>
   * Takes an input signal and emits the square root of the input signal.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.UnaryOperator unary_operator = 10 [json_name = "unaryOperator"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.UnaryOperatorOrBuilder getUnaryOperatorOrBuilder();

  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
   * @return Whether the extrapolator field is set.
   */
  boolean hasExtrapolator();
  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
   * @return The extrapolator.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Extrapolator getExtrapolator();
  /**
   * <pre>
   * Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Extrapolator extrapolator = 11 [json_name = "extrapolator"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.ExtrapolatorOrBuilder getExtrapolatorOrBuilder();

  /**
   * <pre>
   * Emits the maximum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
   * @return Whether the max field is set.
   */
  boolean hasMax();
  /**
   * <pre>
   * Emits the maximum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
   * @return The max.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Max getMax();
  /**
   * <pre>
   * Emits the maximum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Max max = 12 [json_name = "max"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.MaxOrBuilder getMaxOrBuilder();

  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
   * @return Whether the min field is set.
   */
  boolean hasMin();
  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
   * @return The min.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Min getMin();
  /**
   * <pre>
   * Emits the minimum of the input signals.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Min min = 13 [json_name = "min"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.MinOrBuilder getMinOrBuilder();

  /**
   * <pre>
   * Picks the first valid input signal and emits it.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
   * @return Whether the firstValid field is set.
   */
  boolean hasFirstValid();
  /**
   * <pre>
   * Picks the first valid input signal and emits it.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
   * @return The firstValid.
   */
  com.fluxninja.generated.aperture.policy.language.v1.FirstValid getFirstValid();
  /**
   * <pre>
   * Picks the first valid input signal and emits it.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FirstValid first_valid = 14 [json_name = "firstValid"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.FirstValidOrBuilder getFirstValidOrBuilder();

  /**
   * <pre>
   * Alerter reacts to a signal and generates alert to send to alert manager.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
   * @return Whether the alerter field is set.
   */
  boolean hasAlerter();
  /**
   * <pre>
   * Alerter reacts to a signal and generates alert to send to alert manager.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
   * @return The alerter.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Alerter getAlerter();
  /**
   * <pre>
   * Alerter reacts to a signal and generates alert to send to alert manager.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Alerter alerter = 15 [json_name = "alerter"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.AlerterOrBuilder getAlerterOrBuilder();

  /**
   * <pre>
   * Accumulates sum of signal every tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
   * @return Whether the integrator field is set.
   */
  boolean hasIntegrator();
  /**
   * <pre>
   * Accumulates sum of signal every tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
   * @return The integrator.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Integrator getIntegrator();
  /**
   * <pre>
   * Accumulates sum of signal every tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Integrator integrator = 16 [json_name = "integrator"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.IntegratorOrBuilder getIntegratorOrBuilder();

  /**
   * <pre>
   * Differentiator calculates rate of change per tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
   * @return Whether the differentiator field is set.
   */
  boolean hasDifferentiator();
  /**
   * <pre>
   * Differentiator calculates rate of change per tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
   * @return The differentiator.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Differentiator getDifferentiator();
  /**
   * <pre>
   * Differentiator calculates rate of change per tick.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Differentiator differentiator = 17 [json_name = "differentiator"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.DifferentiatorOrBuilder getDifferentiatorOrBuilder();

  /**
   * <pre>
   * Logical AND.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
   * @return Whether the and field is set.
   */
  boolean hasAnd();
  /**
   * <pre>
   * Logical AND.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
   * @return The and.
   */
  com.fluxninja.generated.aperture.policy.language.v1.And getAnd();
  /**
   * <pre>
   * Logical AND.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.And and = 19 [json_name = "and"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.AndOrBuilder getAndOrBuilder();

  /**
   * <pre>
   * Logical OR.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
   * @return Whether the or field is set.
   */
  boolean hasOr();
  /**
   * <pre>
   * Logical OR.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
   * @return The or.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Or getOr();
  /**
   * <pre>
   * Logical OR.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Or or = 20 [json_name = "or"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.OrOrBuilder getOrOrBuilder();

  /**
   * <pre>
   * Logical NOT.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
   * @return Whether the inverter field is set.
   */
  boolean hasInverter();
  /**
   * <pre>
   * Logical NOT.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
   * @return The inverter.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Inverter getInverter();
  /**
   * <pre>
   * Logical NOT.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Inverter inverter = 21 [json_name = "inverter"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.InverterOrBuilder getInverterOrBuilder();

  /**
   * <pre>
   * Generates 0 and 1 in turns.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
   * @return Whether the pulseGenerator field is set.
   */
  boolean hasPulseGenerator();
  /**
   * <pre>
   * Generates 0 and 1 in turns.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
   * @return The pulseGenerator.
   */
  com.fluxninja.generated.aperture.policy.language.v1.PulseGenerator getPulseGenerator();
  /**
   * <pre>
   * Generates 0 and 1 in turns.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.PulseGenerator pulse_generator = 22 [json_name = "pulseGenerator"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.PulseGeneratorOrBuilder getPulseGeneratorOrBuilder();

  /**
   * <pre>
   * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
   * @return Whether the holder field is set.
   */
  boolean hasHolder();
  /**
   * <pre>
   * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
   * @return The holder.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Holder getHolder();
  /**
   * <pre>
   * Holds the last valid signal value for the specified duration then waits for next valid value to hold.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Holder holder = 23 [json_name = "holder"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.HolderOrBuilder getHolderOrBuilder();

  /**
   * <pre>
   * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
   * @return Whether the nestedCircuit field is set.
   */
  boolean hasNestedCircuit();
  /**
   * <pre>
   * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
   * @return The nestedCircuit.
   */
  com.fluxninja.generated.aperture.policy.language.v1.NestedCircuit getNestedCircuit();
  /**
   * <pre>
   * Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedCircuit nested_circuit = 24 [json_name = "nestedCircuit"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.NestedCircuitOrBuilder getNestedCircuitOrBuilder();

  /**
   * <pre>
   * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
   * @return Whether the nestedSignalIngress field is set.
   */
  boolean hasNestedSignalIngress();
  /**
   * <pre>
   * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
   * @return The nestedSignalIngress.
   */
  com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngress getNestedSignalIngress();
  /**
   * <pre>
   * Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalIngress nested_signal_ingress = 25 [json_name = "nestedSignalIngress"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.NestedSignalIngressOrBuilder getNestedSignalIngressOrBuilder();

  /**
   * <pre>
   * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
   * @return Whether the nestedSignalEgress field is set.
   */
  boolean hasNestedSignalEgress();
  /**
   * <pre>
   * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
   * @return The nestedSignalEgress.
   */
  com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgress getNestedSignalEgress();
  /**
   * <pre>
   * Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.NestedSignalEgress nested_signal_egress = 26 [json_name = "nestedSignalEgress"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.NestedSignalEgressOrBuilder getNestedSignalEgressOrBuilder();

  /**
   * <pre>
   * Query components that are query databases such as Prometheus.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
   * @return Whether the query field is set.
   */
  boolean hasQuery();
  /**
   * <pre>
   * Query components that are query databases such as Prometheus.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
   * @return The query.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Query getQuery();
  /**
   * <pre>
   * Query components that are query databases such as Prometheus.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Query query = 100 [json_name = "query"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.QueryOrBuilder getQueryOrBuilder();

  /**
   * <pre>
   * FlowControl components are used to regulate requests flow.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
   * @return Whether the flowControl field is set.
   */
  boolean hasFlowControl();
  /**
   * <pre>
   * FlowControl components are used to regulate requests flow.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
   * @return The flowControl.
   */
  com.fluxninja.generated.aperture.policy.language.v1.FlowControl getFlowControl();
  /**
   * <pre>
   * FlowControl components are used to regulate requests flow.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowControl flow_control = 101 [json_name = "flowControl"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.FlowControlOrBuilder getFlowControlOrBuilder();

  /**
   * <pre>
   * AutoScale components are used to scale the service.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
   * @return Whether the autoScale field is set.
   */
  boolean hasAutoScale();
  /**
   * <pre>
   * AutoScale components are used to scale the service.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
   * @return The autoScale.
   */
  com.fluxninja.generated.aperture.policy.language.v1.AutoScale getAutoScale();
  /**
   * <pre>
   * AutoScale components are used to scale the service.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AutoScale auto_scale = 102 [json_name = "autoScale"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.AutoScaleOrBuilder getAutoScaleOrBuilder();

  public com.fluxninja.generated.aperture.policy.language.v1.Component.ComponentCase getComponentCase();
}
