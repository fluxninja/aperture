// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/distcache/v1/stats.proto

package com.fluxninja.generated.aperture.distcache.v1;

/**
 * Protobuf type {@code aperture.distcache.v1.DMap}
 */
public final class DMap extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.distcache.v1.DMap)
    DMapOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DMap.newBuilder() to construct.
  private DMap(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DMap() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DMap();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DMap(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            length_ = input.readInt64();
            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.distcache.v1.SlabInfo.Builder subBuilder = null;
            if (slabInfo_ != null) {
              subBuilder = slabInfo_.toBuilder();
            }
            slabInfo_ = input.readMessage(com.fluxninja.generated.aperture.distcache.v1.SlabInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(slabInfo_);
              slabInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 24: {

            numTables_ = input.readInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_DMap_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_DMap_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.distcache.v1.DMap.class, com.fluxninja.generated.aperture.distcache.v1.DMap.Builder.class);
  }

  public static final int LENGTH_FIELD_NUMBER = 1;
  private long length_;
  /**
   * <code>int64 length = 1 [json_name = "Length"];</code>
   * @return The length.
   */
  @java.lang.Override
  public long getLength() {
    return length_;
  }

  public static final int SLAB_INFO_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.distcache.v1.SlabInfo slabInfo_;
  /**
   * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
   * @return Whether the slabInfo field is set.
   */
  @java.lang.Override
  public boolean hasSlabInfo() {
    return slabInfo_ != null;
  }
  /**
   * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
   * @return The slabInfo.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.SlabInfo getSlabInfo() {
    return slabInfo_ == null ? com.fluxninja.generated.aperture.distcache.v1.SlabInfo.getDefaultInstance() : slabInfo_;
  }
  /**
   * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.SlabInfoOrBuilder getSlabInfoOrBuilder() {
    return getSlabInfo();
  }

  public static final int NUM_TABLES_FIELD_NUMBER = 3;
  private long numTables_;
  /**
   * <code>int64 num_tables = 3 [json_name = "NumTables"];</code>
   * @return The numTables.
   */
  @java.lang.Override
  public long getNumTables() {
    return numTables_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (length_ != 0L) {
      output.writeInt64(1, length_);
    }
    if (slabInfo_ != null) {
      output.writeMessage(2, getSlabInfo());
    }
    if (numTables_ != 0L) {
      output.writeInt64(3, numTables_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (length_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, length_);
    }
    if (slabInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSlabInfo());
    }
    if (numTables_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, numTables_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.distcache.v1.DMap)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.distcache.v1.DMap other = (com.fluxninja.generated.aperture.distcache.v1.DMap) obj;

    if (getLength()
        != other.getLength()) return false;
    if (hasSlabInfo() != other.hasSlabInfo()) return false;
    if (hasSlabInfo()) {
      if (!getSlabInfo()
          .equals(other.getSlabInfo())) return false;
    }
    if (getNumTables()
        != other.getNumTables()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + LENGTH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getLength());
    if (hasSlabInfo()) {
      hash = (37 * hash) + SLAB_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getSlabInfo().hashCode();
    }
    hash = (37 * hash) + NUM_TABLES_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getNumTables());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.DMap parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.distcache.v1.DMap prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.distcache.v1.DMap}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.distcache.v1.DMap)
      com.fluxninja.generated.aperture.distcache.v1.DMapOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_DMap_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_DMap_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.distcache.v1.DMap.class, com.fluxninja.generated.aperture.distcache.v1.DMap.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.distcache.v1.DMap.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      length_ = 0L;

      if (slabInfoBuilder_ == null) {
        slabInfo_ = null;
      } else {
        slabInfo_ = null;
        slabInfoBuilder_ = null;
      }
      numTables_ = 0L;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_DMap_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.DMap getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.distcache.v1.DMap.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.DMap build() {
      com.fluxninja.generated.aperture.distcache.v1.DMap result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.DMap buildPartial() {
      com.fluxninja.generated.aperture.distcache.v1.DMap result = new com.fluxninja.generated.aperture.distcache.v1.DMap(this);
      result.length_ = length_;
      if (slabInfoBuilder_ == null) {
        result.slabInfo_ = slabInfo_;
      } else {
        result.slabInfo_ = slabInfoBuilder_.build();
      }
      result.numTables_ = numTables_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.distcache.v1.DMap) {
        return mergeFrom((com.fluxninja.generated.aperture.distcache.v1.DMap)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.distcache.v1.DMap other) {
      if (other == com.fluxninja.generated.aperture.distcache.v1.DMap.getDefaultInstance()) return this;
      if (other.getLength() != 0L) {
        setLength(other.getLength());
      }
      if (other.hasSlabInfo()) {
        mergeSlabInfo(other.getSlabInfo());
      }
      if (other.getNumTables() != 0L) {
        setNumTables(other.getNumTables());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.distcache.v1.DMap parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.distcache.v1.DMap) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private long length_ ;
    /**
     * <code>int64 length = 1 [json_name = "Length"];</code>
     * @return The length.
     */
    @java.lang.Override
    public long getLength() {
      return length_;
    }
    /**
     * <code>int64 length = 1 [json_name = "Length"];</code>
     * @param value The length to set.
     * @return This builder for chaining.
     */
    public Builder setLength(long value) {
      
      length_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 length = 1 [json_name = "Length"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLength() {
      
      length_ = 0L;
      onChanged();
      return this;
    }

    private com.fluxninja.generated.aperture.distcache.v1.SlabInfo slabInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.distcache.v1.SlabInfo, com.fluxninja.generated.aperture.distcache.v1.SlabInfo.Builder, com.fluxninja.generated.aperture.distcache.v1.SlabInfoOrBuilder> slabInfoBuilder_;
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     * @return Whether the slabInfo field is set.
     */
    public boolean hasSlabInfo() {
      return slabInfoBuilder_ != null || slabInfo_ != null;
    }
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     * @return The slabInfo.
     */
    public com.fluxninja.generated.aperture.distcache.v1.SlabInfo getSlabInfo() {
      if (slabInfoBuilder_ == null) {
        return slabInfo_ == null ? com.fluxninja.generated.aperture.distcache.v1.SlabInfo.getDefaultInstance() : slabInfo_;
      } else {
        return slabInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     */
    public Builder setSlabInfo(com.fluxninja.generated.aperture.distcache.v1.SlabInfo value) {
      if (slabInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        slabInfo_ = value;
        onChanged();
      } else {
        slabInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     */
    public Builder setSlabInfo(
        com.fluxninja.generated.aperture.distcache.v1.SlabInfo.Builder builderForValue) {
      if (slabInfoBuilder_ == null) {
        slabInfo_ = builderForValue.build();
        onChanged();
      } else {
        slabInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     */
    public Builder mergeSlabInfo(com.fluxninja.generated.aperture.distcache.v1.SlabInfo value) {
      if (slabInfoBuilder_ == null) {
        if (slabInfo_ != null) {
          slabInfo_ =
            com.fluxninja.generated.aperture.distcache.v1.SlabInfo.newBuilder(slabInfo_).mergeFrom(value).buildPartial();
        } else {
          slabInfo_ = value;
        }
        onChanged();
      } else {
        slabInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     */
    public Builder clearSlabInfo() {
      if (slabInfoBuilder_ == null) {
        slabInfo_ = null;
        onChanged();
      } else {
        slabInfo_ = null;
        slabInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.SlabInfo.Builder getSlabInfoBuilder() {
      
      onChanged();
      return getSlabInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.SlabInfoOrBuilder getSlabInfoOrBuilder() {
      if (slabInfoBuilder_ != null) {
        return slabInfoBuilder_.getMessageOrBuilder();
      } else {
        return slabInfo_ == null ?
            com.fluxninja.generated.aperture.distcache.v1.SlabInfo.getDefaultInstance() : slabInfo_;
      }
    }
    /**
     * <code>.aperture.distcache.v1.SlabInfo slab_info = 2 [json_name = "SlabInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.distcache.v1.SlabInfo, com.fluxninja.generated.aperture.distcache.v1.SlabInfo.Builder, com.fluxninja.generated.aperture.distcache.v1.SlabInfoOrBuilder> 
        getSlabInfoFieldBuilder() {
      if (slabInfoBuilder_ == null) {
        slabInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.distcache.v1.SlabInfo, com.fluxninja.generated.aperture.distcache.v1.SlabInfo.Builder, com.fluxninja.generated.aperture.distcache.v1.SlabInfoOrBuilder>(
                getSlabInfo(),
                getParentForChildren(),
                isClean());
        slabInfo_ = null;
      }
      return slabInfoBuilder_;
    }

    private long numTables_ ;
    /**
     * <code>int64 num_tables = 3 [json_name = "NumTables"];</code>
     * @return The numTables.
     */
    @java.lang.Override
    public long getNumTables() {
      return numTables_;
    }
    /**
     * <code>int64 num_tables = 3 [json_name = "NumTables"];</code>
     * @param value The numTables to set.
     * @return This builder for chaining.
     */
    public Builder setNumTables(long value) {
      
      numTables_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 num_tables = 3 [json_name = "NumTables"];</code>
     * @return This builder for chaining.
     */
    public Builder clearNumTables() {
      
      numTables_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.distcache.v1.DMap)
  }

  // @@protoc_insertion_point(class_scope:aperture.distcache.v1.DMap)
  private static final com.fluxninja.generated.aperture.distcache.v1.DMap DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.distcache.v1.DMap();
  }

  public static com.fluxninja.generated.aperture.distcache.v1.DMap getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DMap>
      PARSER = new com.google.protobuf.AbstractParser<DMap>() {
    @java.lang.Override
    public DMap parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DMap(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DMap> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DMap> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.DMap getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

