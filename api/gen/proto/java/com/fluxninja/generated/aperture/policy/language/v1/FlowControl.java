// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * FlowControl components are used to regulate requests flow.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.FlowControl}
 */
public final class FlowControl extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.FlowControl)
    FlowControlOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FlowControl.newBuilder() to construct.
  private FlowControl(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FlowControl() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FlowControl();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private FlowControl(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.Builder subBuilder = null;
            if (componentCase_ == 1) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 1;
            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder subBuilder = null;
            if (componentCase_ == 2) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 2;
            break;
          }
          case 26: {
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Builder subBuilder = null;
            if (componentCase_ == 3) {
              subBuilder = ((com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_).toBuilder();
            }
            component_ =
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_);
              component_ = subBuilder.buildPartial();
            }
            componentCase_ = 3;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControl_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControl_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.FlowControl.class, com.fluxninja.generated.aperture.policy.language.v1.FlowControl.Builder.class);
  }

  private int componentCase_ = 0;
  private java.lang.Object component_;
  public enum ComponentCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    RATE_LIMITER(1),
    CONCURRENCY_LIMITER(2),
    AIMD_CONCURRENCY_CONTROLLER(3),
    COMPONENT_NOT_SET(0);
    private final int value;
    private ComponentCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ComponentCase valueOf(int value) {
      return forNumber(value);
    }

    public static ComponentCase forNumber(int value) {
      switch (value) {
        case 1: return RATE_LIMITER;
        case 2: return CONCURRENCY_LIMITER;
        case 3: return AIMD_CONCURRENCY_CONTROLLER;
        case 0: return COMPONENT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ComponentCase
  getComponentCase() {
    return ComponentCase.forNumber(
        componentCase_);
  }

  public static final int RATE_LIMITER_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
   * @return Whether the rateLimiter field is set.
   */
  @java.lang.Override
  public boolean hasRateLimiter() {
    return componentCase_ == 1;
  }
  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
   * @return The rateLimiter.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.RateLimiter getRateLimiter() {
    if (componentCase_ == 1) {
       return (com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
  }
  /**
   * <pre>
   * Rate Limiter provides service protection by applying rate limiter.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.RateLimiterOrBuilder getRateLimiterOrBuilder() {
    if (componentCase_ == 1) {
       return (com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
  }

  public static final int CONCURRENCY_LIMITER_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   * @return Whether the concurrencyLimiter field is set.
   */
  @java.lang.Override
  public boolean hasConcurrencyLimiter() {
    return componentCase_ == 2;
  }
  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   * @return The concurrencyLimiter.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter getConcurrencyLimiter() {
    if (componentCase_ == 2) {
       return (com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
  }
  /**
   * <pre>
   * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder getConcurrencyLimiterOrBuilder() {
    if (componentCase_ == 2) {
       return (com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
  }

  public static final int AIMD_CONCURRENCY_CONTROLLER_FIELD_NUMBER = 3;
  /**
   * <pre>
   * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
   * @return Whether the aimdConcurrencyController field is set.
   */
  @java.lang.Override
  public boolean hasAimdConcurrencyController() {
    return componentCase_ == 3;
  }
  /**
   * <pre>
   * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
   * @return The aimdConcurrencyController.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController getAimdConcurrencyController() {
    if (componentCase_ == 3) {
       return (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance();
  }
  /**
   * <pre>
   * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyControllerOrBuilder getAimdConcurrencyControllerOrBuilder() {
    if (componentCase_ == 3) {
       return (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_;
    }
    return com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (componentCase_ == 1) {
      output.writeMessage(1, (com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_);
    }
    if (componentCase_ == 2) {
      output.writeMessage(2, (com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_);
    }
    if (componentCase_ == 3) {
      output.writeMessage(3, (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (componentCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_);
    }
    if (componentCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_);
    }
    if (componentCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.FlowControl)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.FlowControl other = (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) obj;

    if (!getComponentCase().equals(other.getComponentCase())) return false;
    switch (componentCase_) {
      case 1:
        if (!getRateLimiter()
            .equals(other.getRateLimiter())) return false;
        break;
      case 2:
        if (!getConcurrencyLimiter()
            .equals(other.getConcurrencyLimiter())) return false;
        break;
      case 3:
        if (!getAimdConcurrencyController()
            .equals(other.getAimdConcurrencyController())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (componentCase_) {
      case 1:
        hash = (37 * hash) + RATE_LIMITER_FIELD_NUMBER;
        hash = (53 * hash) + getRateLimiter().hashCode();
        break;
      case 2:
        hash = (37 * hash) + CONCURRENCY_LIMITER_FIELD_NUMBER;
        hash = (53 * hash) + getConcurrencyLimiter().hashCode();
        break;
      case 3:
        hash = (37 * hash) + AIMD_CONCURRENCY_CONTROLLER_FIELD_NUMBER;
        hash = (53 * hash) + getAimdConcurrencyController().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.FlowControl prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * FlowControl components are used to regulate requests flow.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.FlowControl}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.FlowControl)
      com.fluxninja.generated.aperture.policy.language.v1.FlowControlOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControl_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControl_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.FlowControl.class, com.fluxninja.generated.aperture.policy.language.v1.FlowControl.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.FlowControl.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      componentCase_ = 0;
      component_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControl_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControl getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControl build() {
      com.fluxninja.generated.aperture.policy.language.v1.FlowControl result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControl buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.FlowControl result = new com.fluxninja.generated.aperture.policy.language.v1.FlowControl(this);
      if (componentCase_ == 1) {
        if (rateLimiterBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = rateLimiterBuilder_.build();
        }
      }
      if (componentCase_ == 2) {
        if (concurrencyLimiterBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = concurrencyLimiterBuilder_.build();
        }
      }
      if (componentCase_ == 3) {
        if (aimdConcurrencyControllerBuilder_ == null) {
          result.component_ = component_;
        } else {
          result.component_ = aimdConcurrencyControllerBuilder_.build();
        }
      }
      result.componentCase_ = componentCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.FlowControl) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FlowControl)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.FlowControl other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.FlowControl.getDefaultInstance()) return this;
      switch (other.getComponentCase()) {
        case RATE_LIMITER: {
          mergeRateLimiter(other.getRateLimiter());
          break;
        }
        case CONCURRENCY_LIMITER: {
          mergeConcurrencyLimiter(other.getConcurrencyLimiter());
          break;
        }
        case AIMD_CONCURRENCY_CONTROLLER: {
          mergeAimdConcurrencyController(other.getAimdConcurrencyController());
          break;
        }
        case COMPONENT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.FlowControl parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.FlowControl) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int componentCase_ = 0;
    private java.lang.Object component_;
    public ComponentCase
        getComponentCase() {
      return ComponentCase.forNumber(
          componentCase_);
    }

    public Builder clearComponent() {
      componentCase_ = 0;
      component_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.RateLimiter, com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.RateLimiterOrBuilder> rateLimiterBuilder_;
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     * @return Whether the rateLimiter field is set.
     */
    @java.lang.Override
    public boolean hasRateLimiter() {
      return componentCase_ == 1;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     * @return The rateLimiter.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.RateLimiter getRateLimiter() {
      if (rateLimiterBuilder_ == null) {
        if (componentCase_ == 1) {
          return (com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
      } else {
        if (componentCase_ == 1) {
          return rateLimiterBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     */
    public Builder setRateLimiter(com.fluxninja.generated.aperture.policy.language.v1.RateLimiter value) {
      if (rateLimiterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        rateLimiterBuilder_.setMessage(value);
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     */
    public Builder setRateLimiter(
        com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.Builder builderForValue) {
      if (rateLimiterBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        rateLimiterBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     */
    public Builder mergeRateLimiter(com.fluxninja.generated.aperture.policy.language.v1.RateLimiter value) {
      if (rateLimiterBuilder_ == null) {
        if (componentCase_ == 1 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 1) {
          rateLimiterBuilder_.mergeFrom(value);
        } else {
          rateLimiterBuilder_.setMessage(value);
        }
      }
      componentCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     */
    public Builder clearRateLimiter() {
      if (rateLimiterBuilder_ == null) {
        if (componentCase_ == 1) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 1) {
          componentCase_ = 0;
          component_ = null;
        }
        rateLimiterBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.Builder getRateLimiterBuilder() {
      return getRateLimiterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.RateLimiterOrBuilder getRateLimiterOrBuilder() {
      if ((componentCase_ == 1) && (rateLimiterBuilder_ != null)) {
        return rateLimiterBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 1) {
          return (com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Rate Limiter provides service protection by applying rate limiter.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.RateLimiter rate_limiter = 1 [json_name = "rateLimiter"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.RateLimiter, com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.RateLimiterOrBuilder> 
        getRateLimiterFieldBuilder() {
      if (rateLimiterBuilder_ == null) {
        if (!(componentCase_ == 1)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.getDefaultInstance();
        }
        rateLimiterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.RateLimiter, com.fluxninja.generated.aperture.policy.language.v1.RateLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.RateLimiterOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.RateLimiter) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 1;
      onChanged();;
      return rateLimiterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder> concurrencyLimiterBuilder_;
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     * @return Whether the concurrencyLimiter field is set.
     */
    @java.lang.Override
    public boolean hasConcurrencyLimiter() {
      return componentCase_ == 2;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     * @return The concurrencyLimiter.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter getConcurrencyLimiter() {
      if (concurrencyLimiterBuilder_ == null) {
        if (componentCase_ == 2) {
          return (com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
      } else {
        if (componentCase_ == 2) {
          return concurrencyLimiterBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder setConcurrencyLimiter(com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter value) {
      if (concurrencyLimiterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        concurrencyLimiterBuilder_.setMessage(value);
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder setConcurrencyLimiter(
        com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder builderForValue) {
      if (concurrencyLimiterBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        concurrencyLimiterBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder mergeConcurrencyLimiter(com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter value) {
      if (concurrencyLimiterBuilder_ == null) {
        if (componentCase_ == 2 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 2) {
          concurrencyLimiterBuilder_.mergeFrom(value);
        } else {
          concurrencyLimiterBuilder_.setMessage(value);
        }
      }
      componentCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder clearConcurrencyLimiter() {
      if (concurrencyLimiterBuilder_ == null) {
        if (componentCase_ == 2) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 2) {
          componentCase_ = 0;
          component_ = null;
        }
        concurrencyLimiterBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder getConcurrencyLimiterBuilder() {
      return getConcurrencyLimiterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder getConcurrencyLimiterOrBuilder() {
      if ((componentCase_ == 2) && (concurrencyLimiterBuilder_ != null)) {
        return concurrencyLimiterBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 2) {
          return (com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder> 
        getConcurrencyLimiterFieldBuilder() {
      if (concurrencyLimiterBuilder_ == null) {
        if (!(componentCase_ == 2)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance();
        }
        concurrencyLimiterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 2;
      onChanged();;
      return concurrencyLimiterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyControllerOrBuilder> aimdConcurrencyControllerBuilder_;
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     * @return Whether the aimdConcurrencyController field is set.
     */
    @java.lang.Override
    public boolean hasAimdConcurrencyController() {
      return componentCase_ == 3;
    }
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     * @return The aimdConcurrencyController.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController getAimdConcurrencyController() {
      if (aimdConcurrencyControllerBuilder_ == null) {
        if (componentCase_ == 3) {
          return (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance();
      } else {
        if (componentCase_ == 3) {
          return aimdConcurrencyControllerBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     */
    public Builder setAimdConcurrencyController(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController value) {
      if (aimdConcurrencyControllerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        component_ = value;
        onChanged();
      } else {
        aimdConcurrencyControllerBuilder_.setMessage(value);
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     */
    public Builder setAimdConcurrencyController(
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Builder builderForValue) {
      if (aimdConcurrencyControllerBuilder_ == null) {
        component_ = builderForValue.build();
        onChanged();
      } else {
        aimdConcurrencyControllerBuilder_.setMessage(builderForValue.build());
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     */
    public Builder mergeAimdConcurrencyController(com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController value) {
      if (aimdConcurrencyControllerBuilder_ == null) {
        if (componentCase_ == 3 &&
            component_ != com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance()) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.newBuilder((com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_)
              .mergeFrom(value).buildPartial();
        } else {
          component_ = value;
        }
        onChanged();
      } else {
        if (componentCase_ == 3) {
          aimdConcurrencyControllerBuilder_.mergeFrom(value);
        } else {
          aimdConcurrencyControllerBuilder_.setMessage(value);
        }
      }
      componentCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     */
    public Builder clearAimdConcurrencyController() {
      if (aimdConcurrencyControllerBuilder_ == null) {
        if (componentCase_ == 3) {
          componentCase_ = 0;
          component_ = null;
          onChanged();
        }
      } else {
        if (componentCase_ == 3) {
          componentCase_ = 0;
          component_ = null;
        }
        aimdConcurrencyControllerBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Builder getAimdConcurrencyControllerBuilder() {
      return getAimdConcurrencyControllerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyControllerOrBuilder getAimdConcurrencyControllerOrBuilder() {
      if ((componentCase_ == 3) && (aimdConcurrencyControllerBuilder_ != null)) {
        return aimdConcurrencyControllerBuilder_.getMessageOrBuilder();
      } else {
        if (componentCase_ == 3) {
          return (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_;
        }
        return com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.AIMDConcurrencyController aimd_concurrency_controller = 3 [json_name = "aimdConcurrencyController"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyControllerOrBuilder> 
        getAimdConcurrencyControllerFieldBuilder() {
      if (aimdConcurrencyControllerBuilder_ == null) {
        if (!(componentCase_ == 3)) {
          component_ = com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.getDefaultInstance();
        }
        aimdConcurrencyControllerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController.Builder, com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyControllerOrBuilder>(
                (com.fluxninja.generated.aperture.policy.language.v1.AIMDConcurrencyController) component_,
                getParentForChildren(),
                isClean());
        component_ = null;
      }
      componentCase_ = 3;
      onChanged();;
      return aimdConcurrencyControllerBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.FlowControl)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.FlowControl)
  private static final com.fluxninja.generated.aperture.policy.language.v1.FlowControl DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.FlowControl();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControl getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FlowControl>
      PARSER = new com.google.protobuf.AbstractParser<FlowControl>() {
    @java.lang.Override
    public FlowControl parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new FlowControl(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<FlowControl> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FlowControl> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowControl getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

