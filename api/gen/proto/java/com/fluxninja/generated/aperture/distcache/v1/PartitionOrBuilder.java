// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/distcache/v1/stats.proto

package com.fluxninja.generated.aperture.distcache.v1;

public interface PartitionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.distcache.v1.Partition)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> 
      getPreviousOwnersList();
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.Member getPreviousOwners(int index);
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  int getPreviousOwnersCount();
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  java.util.List<? extends com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> 
      getPreviousOwnersOrBuilderList();
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder getPreviousOwnersOrBuilder(
      int index);

  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> 
      getBackupsList();
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.Member getBackups(int index);
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  int getBackupsCount();
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  java.util.List<? extends com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> 
      getBackupsOrBuilderList();
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder getBackupsOrBuilder(
      int index);

  /**
   * <code>int64 length = 3 [json_name = "Length"];</code>
   * @return The length.
   */
  long getLength();

  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */
  int getDMapsCount();
  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */
  boolean containsDMaps(
      java.lang.String key);
  /**
   * Use {@link #getDMapsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>
  getDMaps();
  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>
  getDMapsMap();
  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */

  /* nullable */
com.fluxninja.generated.aperture.distcache.v1.DMap getDMapsOrDefault(
      java.lang.String key,
      /* nullable */
com.fluxninja.generated.aperture.distcache.v1.DMap defaultValue);
  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */

  com.fluxninja.generated.aperture.distcache.v1.DMap getDMapsOrThrow(
      java.lang.String key);
}
