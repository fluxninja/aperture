// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/peers/v1/peers.proto

package com.fluxninja.generated.aperture.peers.v1;

/**
 * <pre>
 * Peers holds the peer info of this peer and a mapping of address to other peers.
 * </pre>
 *
 * Protobuf type {@code aperture.peers.v1.Peers}
 */
public final class Peers extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.peers.v1.Peers)
    PeersOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Peers.newBuilder() to construct.
  private Peers(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Peers() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Peers();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Peers(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.peers.v1.Peer.Builder subBuilder = null;
            if (selfPeer_ != null) {
              subBuilder = selfPeer_.toBuilder();
            }
            selfPeer_ = input.readMessage(com.fluxninja.generated.aperture.peers.v1.Peer.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(selfPeer_);
              selfPeer_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              peers_ = com.google.protobuf.MapField.newMapField(
                  PeersDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer>
            peers__ = input.readMessage(
                PeersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            peers_.getMutableMap().put(
                peers__.getKey(), peers__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.peers.v1.PeersProto.internal_static_aperture_peers_v1_Peers_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetPeers();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.peers.v1.PeersProto.internal_static_aperture_peers_v1_Peers_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.peers.v1.Peers.class, com.fluxninja.generated.aperture.peers.v1.Peers.Builder.class);
  }

  public static final int SELF_PEER_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.peers.v1.Peer selfPeer_;
  /**
   * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
   * @return Whether the selfPeer field is set.
   */
  @java.lang.Override
  public boolean hasSelfPeer() {
    return selfPeer_ != null;
  }
  /**
   * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
   * @return The selfPeer.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.peers.v1.Peer getSelfPeer() {
    return selfPeer_ == null ? com.fluxninja.generated.aperture.peers.v1.Peer.getDefaultInstance() : selfPeer_;
  }
  /**
   * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.peers.v1.PeerOrBuilder getSelfPeerOrBuilder() {
    return getSelfPeer();
  }

  public static final int PEERS_FIELD_NUMBER = 2;
  private static final class PeersDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer>newDefaultInstance(
                com.fluxninja.generated.aperture.peers.v1.PeersProto.internal_static_aperture_peers_v1_Peers_PeersEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.fluxninja.generated.aperture.peers.v1.Peer.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> peers_;
  private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer>
  internalGetPeers() {
    if (peers_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          PeersDefaultEntryHolder.defaultEntry);
    }
    return peers_;
  }

  public int getPeersCount() {
    return internalGetPeers().getMap().size();
  }
  /**
   * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
   */

  @java.lang.Override
  public boolean containsPeers(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetPeers().getMap().containsKey(key);
  }
  /**
   * Use {@link #getPeersMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> getPeers() {
    return getPeersMap();
  }
  /**
   * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> getPeersMap() {
    return internalGetPeers().getMap();
  }
  /**
   * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.peers.v1.Peer getPeersOrDefault(
      java.lang.String key,
      com.fluxninja.generated.aperture.peers.v1.Peer defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> map =
        internalGetPeers().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.peers.v1.Peer getPeersOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> map =
        internalGetPeers().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (selfPeer_ != null) {
      output.writeMessage(1, getSelfPeer());
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetPeers(),
        PeersDefaultEntryHolder.defaultEntry,
        2);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (selfPeer_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getSelfPeer());
    }
    for (java.util.Map.Entry<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> entry
         : internalGetPeers().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer>
      peers__ = PeersDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, peers__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.peers.v1.Peers)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.peers.v1.Peers other = (com.fluxninja.generated.aperture.peers.v1.Peers) obj;

    if (hasSelfPeer() != other.hasSelfPeer()) return false;
    if (hasSelfPeer()) {
      if (!getSelfPeer()
          .equals(other.getSelfPeer())) return false;
    }
    if (!internalGetPeers().equals(
        other.internalGetPeers())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSelfPeer()) {
      hash = (37 * hash) + SELF_PEER_FIELD_NUMBER;
      hash = (53 * hash) + getSelfPeer().hashCode();
    }
    if (!internalGetPeers().getMap().isEmpty()) {
      hash = (37 * hash) + PEERS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetPeers().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.peers.v1.Peers parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.peers.v1.Peers prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Peers holds the peer info of this peer and a mapping of address to other peers.
   * </pre>
   *
   * Protobuf type {@code aperture.peers.v1.Peers}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.peers.v1.Peers)
      com.fluxninja.generated.aperture.peers.v1.PeersOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.peers.v1.PeersProto.internal_static_aperture_peers_v1_Peers_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetPeers();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutablePeers();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.peers.v1.PeersProto.internal_static_aperture_peers_v1_Peers_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.peers.v1.Peers.class, com.fluxninja.generated.aperture.peers.v1.Peers.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.peers.v1.Peers.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (selfPeerBuilder_ == null) {
        selfPeer_ = null;
      } else {
        selfPeer_ = null;
        selfPeerBuilder_ = null;
      }
      internalGetMutablePeers().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.peers.v1.PeersProto.internal_static_aperture_peers_v1_Peers_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.peers.v1.Peers getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.peers.v1.Peers.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.peers.v1.Peers build() {
      com.fluxninja.generated.aperture.peers.v1.Peers result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.peers.v1.Peers buildPartial() {
      com.fluxninja.generated.aperture.peers.v1.Peers result = new com.fluxninja.generated.aperture.peers.v1.Peers(this);
      int from_bitField0_ = bitField0_;
      if (selfPeerBuilder_ == null) {
        result.selfPeer_ = selfPeer_;
      } else {
        result.selfPeer_ = selfPeerBuilder_.build();
      }
      result.peers_ = internalGetPeers();
      result.peers_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.peers.v1.Peers) {
        return mergeFrom((com.fluxninja.generated.aperture.peers.v1.Peers)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.peers.v1.Peers other) {
      if (other == com.fluxninja.generated.aperture.peers.v1.Peers.getDefaultInstance()) return this;
      if (other.hasSelfPeer()) {
        mergeSelfPeer(other.getSelfPeer());
      }
      internalGetMutablePeers().mergeFrom(
          other.internalGetPeers());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.peers.v1.Peers parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.peers.v1.Peers) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.fluxninja.generated.aperture.peers.v1.Peer selfPeer_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.peers.v1.Peer, com.fluxninja.generated.aperture.peers.v1.Peer.Builder, com.fluxninja.generated.aperture.peers.v1.PeerOrBuilder> selfPeerBuilder_;
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     * @return Whether the selfPeer field is set.
     */
    public boolean hasSelfPeer() {
      return selfPeerBuilder_ != null || selfPeer_ != null;
    }
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     * @return The selfPeer.
     */
    public com.fluxninja.generated.aperture.peers.v1.Peer getSelfPeer() {
      if (selfPeerBuilder_ == null) {
        return selfPeer_ == null ? com.fluxninja.generated.aperture.peers.v1.Peer.getDefaultInstance() : selfPeer_;
      } else {
        return selfPeerBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     */
    public Builder setSelfPeer(com.fluxninja.generated.aperture.peers.v1.Peer value) {
      if (selfPeerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        selfPeer_ = value;
        onChanged();
      } else {
        selfPeerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     */
    public Builder setSelfPeer(
        com.fluxninja.generated.aperture.peers.v1.Peer.Builder builderForValue) {
      if (selfPeerBuilder_ == null) {
        selfPeer_ = builderForValue.build();
        onChanged();
      } else {
        selfPeerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     */
    public Builder mergeSelfPeer(com.fluxninja.generated.aperture.peers.v1.Peer value) {
      if (selfPeerBuilder_ == null) {
        if (selfPeer_ != null) {
          selfPeer_ =
            com.fluxninja.generated.aperture.peers.v1.Peer.newBuilder(selfPeer_).mergeFrom(value).buildPartial();
        } else {
          selfPeer_ = value;
        }
        onChanged();
      } else {
        selfPeerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     */
    public Builder clearSelfPeer() {
      if (selfPeerBuilder_ == null) {
        selfPeer_ = null;
        onChanged();
      } else {
        selfPeer_ = null;
        selfPeerBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     */
    public com.fluxninja.generated.aperture.peers.v1.Peer.Builder getSelfPeerBuilder() {
      
      onChanged();
      return getSelfPeerFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     */
    public com.fluxninja.generated.aperture.peers.v1.PeerOrBuilder getSelfPeerOrBuilder() {
      if (selfPeerBuilder_ != null) {
        return selfPeerBuilder_.getMessageOrBuilder();
      } else {
        return selfPeer_ == null ?
            com.fluxninja.generated.aperture.peers.v1.Peer.getDefaultInstance() : selfPeer_;
      }
    }
    /**
     * <code>.aperture.peers.v1.Peer self_peer = 1 [json_name = "selfPeer"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.peers.v1.Peer, com.fluxninja.generated.aperture.peers.v1.Peer.Builder, com.fluxninja.generated.aperture.peers.v1.PeerOrBuilder> 
        getSelfPeerFieldBuilder() {
      if (selfPeerBuilder_ == null) {
        selfPeerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.peers.v1.Peer, com.fluxninja.generated.aperture.peers.v1.Peer.Builder, com.fluxninja.generated.aperture.peers.v1.PeerOrBuilder>(
                getSelfPeer(),
                getParentForChildren(),
                isClean());
        selfPeer_ = null;
      }
      return selfPeerBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> peers_;
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer>
    internalGetPeers() {
      if (peers_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            PeersDefaultEntryHolder.defaultEntry);
      }
      return peers_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer>
    internalGetMutablePeers() {
      onChanged();;
      if (peers_ == null) {
        peers_ = com.google.protobuf.MapField.newMapField(
            PeersDefaultEntryHolder.defaultEntry);
      }
      if (!peers_.isMutable()) {
        peers_ = peers_.copy();
      }
      return peers_;
    }

    public int getPeersCount() {
      return internalGetPeers().getMap().size();
    }
    /**
     * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
     */

    @java.lang.Override
    public boolean containsPeers(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetPeers().getMap().containsKey(key);
    }
    /**
     * Use {@link #getPeersMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> getPeers() {
      return getPeersMap();
    }
    /**
     * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> getPeersMap() {
      return internalGetPeers().getMap();
    }
    /**
     * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.peers.v1.Peer getPeersOrDefault(
        java.lang.String key,
        com.fluxninja.generated.aperture.peers.v1.Peer defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> map =
          internalGetPeers().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.peers.v1.Peer getPeersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> map =
          internalGetPeers().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearPeers() {
      internalGetMutablePeers().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
     */

    public Builder removePeers(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutablePeers().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer>
    getMutablePeers() {
      return internalGetMutablePeers().getMutableMap();
    }
    /**
     * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
     */
    public Builder putPeers(
        java.lang.String key,
        com.fluxninja.generated.aperture.peers.v1.Peer value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutablePeers().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.peers.v1.Peer&gt; peers = 2 [json_name = "peers"];</code>
     */

    public Builder putAllPeers(
        java.util.Map<java.lang.String, com.fluxninja.generated.aperture.peers.v1.Peer> values) {
      internalGetMutablePeers().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.peers.v1.Peers)
  }

  // @@protoc_insertion_point(class_scope:aperture.peers.v1.Peers)
  private static final com.fluxninja.generated.aperture.peers.v1.Peers DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.peers.v1.Peers();
  }

  public static com.fluxninja.generated.aperture.peers.v1.Peers getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Peers>
      PARSER = new com.google.protobuf.AbstractParser<Peers>() {
    @java.lang.Override
    public Peers parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Peers(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Peers> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Peers> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.peers.v1.Peers getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

