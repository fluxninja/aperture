// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/preview/v1/preview.proto

package com.fluxninja.generated.aperture.flowcontrol.preview.v1;

/**
 * Protobuf type {@code aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse}
 */
public final class PreviewFlowLabelsResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse)
    PreviewFlowLabelsResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use PreviewFlowLabelsResponse.newBuilder() to construct.
  private PreviewFlowLabelsResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private PreviewFlowLabelsResponse() {
    samples_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new PreviewFlowLabelsResponse();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private PreviewFlowLabelsResponse(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              samples_ = new java.util.ArrayList<com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels>();
              mutable_bitField0_ |= 0x00000001;
            }
            samples_.add(
                input.readMessage(com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        samples_ = java.util.Collections.unmodifiableList(samples_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.class, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.Builder.class);
  }

  public interface FlowLabelsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */
    int getLabelsCount();
    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */
    boolean containsLabels(
        java.lang.String key);
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getLabels();
    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getLabelsMap();
    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */

    /* nullable */
java.lang.String getLabelsOrDefault(
        java.lang.String key,
        /* nullable */
java.lang.String defaultValue);
    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */

    java.lang.String getLabelsOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels}
   */
  public static final class FlowLabels extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels)
      FlowLabelsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FlowLabels.newBuilder() to construct.
    private FlowLabels(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FlowLabels() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FlowLabels();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FlowLabels(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                labels_ = com.google.protobuf.MapField.newMapField(
                    LabelsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000001;
              }
              com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
              labels__ = input.readMessage(
                  LabelsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              labels_.getMutableMap().put(
                  labels__.getKey(), labels__.getValue());
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_FlowLabels_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetLabels();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_FlowLabels_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.class, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder.class);
    }

    public static final int LABELS_FIELD_NUMBER = 1;
    private static final class LabelsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_FlowLabels_LabelsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> labels_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetLabels() {
      if (labels_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            LabelsDefaultEntryHolder.defaultEntry);
      }
      return labels_;
    }

    public int getLabelsCount() {
      return internalGetLabels().getMap().size();
    }
    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */

    @java.lang.Override
    public boolean containsLabels(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetLabels().getMap().containsKey(key);
    }
    /**
     * Use {@link #getLabelsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getLabels() {
      return getLabelsMap();
    }
    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
      return internalGetLabels().getMap();
    }
    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */
    @java.lang.Override

    public java.lang.String getLabelsOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetLabels().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
     */
    @java.lang.Override

    public java.lang.String getLabelsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetLabels().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetLabels(),
          LabelsDefaultEntryHolder.defaultEntry,
          1);
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetLabels().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
        labels__ = LabelsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, labels__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels)) {
        return super.equals(obj);
      }
      com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels other = (com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels) obj;

      if (!internalGetLabels().equals(
          other.internalGetLabels())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (!internalGetLabels().getMap().isEmpty()) {
        hash = (37 * hash) + LABELS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetLabels().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels)
        com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabelsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_FlowLabels_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetLabels();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 1:
            return internalGetMutableLabels();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_FlowLabels_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.class, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder.class);
      }

      // Construct using com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        internalGetMutableLabels().clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_FlowLabels_descriptor;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels getDefaultInstanceForType() {
        return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.getDefaultInstance();
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels build() {
        com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels buildPartial() {
        com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels result = new com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels(this);
        int from_bitField0_ = bitField0_;
        result.labels_ = internalGetLabels();
        result.labels_.makeImmutable();
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels) {
          return mergeFrom((com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels other) {
        if (other == com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.getDefaultInstance()) return this;
        internalGetMutableLabels().mergeFrom(
            other.internalGetLabels());
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.MapField<
          java.lang.String, java.lang.String> labels_;
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetLabels() {
        if (labels_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              LabelsDefaultEntryHolder.defaultEntry);
        }
        return labels_;
      }
      private com.google.protobuf.MapField<java.lang.String, java.lang.String>
      internalGetMutableLabels() {
        onChanged();;
        if (labels_ == null) {
          labels_ = com.google.protobuf.MapField.newMapField(
              LabelsDefaultEntryHolder.defaultEntry);
        }
        if (!labels_.isMutable()) {
          labels_ = labels_.copy();
        }
        return labels_;
      }

      public int getLabelsCount() {
        return internalGetLabels().getMap().size();
      }
      /**
       * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
       */

      @java.lang.Override
      public boolean containsLabels(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        return internalGetLabels().getMap().containsKey(key);
      }
      /**
       * Use {@link #getLabelsMap()} instead.
       */
      @java.lang.Override
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getLabels() {
        return getLabelsMap();
      }
      /**
       * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
       */
      @java.lang.Override

      public java.util.Map<java.lang.String, java.lang.String> getLabelsMap() {
        return internalGetLabels().getMap();
      }
      /**
       * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
       */
      @java.lang.Override

      public java.lang.String getLabelsOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetLabels().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
       */
      @java.lang.Override

      public java.lang.String getLabelsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        java.util.Map<java.lang.String, java.lang.String> map =
            internalGetLabels().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearLabels() {
        internalGetMutableLabels().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
       */

      public Builder removeLabels(
          java.lang.String key) {
        if (key == null) { throw new NullPointerException("map key"); }
        internalGetMutableLabels().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String>
      getMutableLabels() {
        return internalGetMutableLabels().getMutableMap();
      }
      /**
       * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
       */
      public Builder putLabels(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new NullPointerException("map key"); }
        if (value == null) {
  throw new NullPointerException("map value");
}

        internalGetMutableLabels().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <code>map&lt;string, string&gt; labels = 1 [json_name = "labels"];</code>
       */

      public Builder putAllLabels(
          java.util.Map<java.lang.String, java.lang.String> values) {
        internalGetMutableLabels().getMutableMap()
            .putAll(values);
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels)
    }

    // @@protoc_insertion_point(class_scope:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels)
    private static final com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels();
    }

    public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FlowLabels>
        PARSER = new com.google.protobuf.AbstractParser<FlowLabels>() {
      @java.lang.Override
      public FlowLabels parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FlowLabels(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FlowLabels> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FlowLabels> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int SAMPLES_FIELD_NUMBER = 1;
  private java.util.List<com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels> samples_;
  /**
   * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels> getSamplesList() {
    return samples_;
  }
  /**
   * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabelsOrBuilder> 
      getSamplesOrBuilderList() {
    return samples_;
  }
  /**
   * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
   */
  @java.lang.Override
  public int getSamplesCount() {
    return samples_.size();
  }
  /**
   * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels getSamples(int index) {
    return samples_.get(index);
  }
  /**
   * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabelsOrBuilder getSamplesOrBuilder(
      int index) {
    return samples_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < samples_.size(); i++) {
      output.writeMessage(1, samples_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < samples_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, samples_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse other = (com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse) obj;

    if (!getSamplesList()
        .equals(other.getSamplesList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getSamplesCount() > 0) {
      hash = (37 * hash) + SAMPLES_FIELD_NUMBER;
      hash = (53 * hash) + getSamplesList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse)
      com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.class, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSamplesFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (samplesBuilder_ == null) {
        samples_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        samplesBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewProto.internal_static_aperture_flowcontrol_preview_v1_PreviewFlowLabelsResponse_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse build() {
      com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse buildPartial() {
      com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse result = new com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse(this);
      int from_bitField0_ = bitField0_;
      if (samplesBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          samples_ = java.util.Collections.unmodifiableList(samples_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.samples_ = samples_;
      } else {
        result.samples_ = samplesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse) {
        return mergeFrom((com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse other) {
      if (other == com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.getDefaultInstance()) return this;
      if (samplesBuilder_ == null) {
        if (!other.samples_.isEmpty()) {
          if (samples_.isEmpty()) {
            samples_ = other.samples_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSamplesIsMutable();
            samples_.addAll(other.samples_);
          }
          onChanged();
        }
      } else {
        if (!other.samples_.isEmpty()) {
          if (samplesBuilder_.isEmpty()) {
            samplesBuilder_.dispose();
            samplesBuilder_ = null;
            samples_ = other.samples_;
            bitField0_ = (bitField0_ & ~0x00000001);
            samplesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSamplesFieldBuilder() : null;
          } else {
            samplesBuilder_.addAllMessages(other.samples_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels> samples_ =
      java.util.Collections.emptyList();
    private void ensureSamplesIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        samples_ = new java.util.ArrayList<com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels>(samples_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabelsOrBuilder> samplesBuilder_;

    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels> getSamplesList() {
      if (samplesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(samples_);
      } else {
        return samplesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public int getSamplesCount() {
      if (samplesBuilder_ == null) {
        return samples_.size();
      } else {
        return samplesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels getSamples(int index) {
      if (samplesBuilder_ == null) {
        return samples_.get(index);
      } else {
        return samplesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder setSamples(
        int index, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels value) {
      if (samplesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSamplesIsMutable();
        samples_.set(index, value);
        onChanged();
      } else {
        samplesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder setSamples(
        int index, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder builderForValue) {
      if (samplesBuilder_ == null) {
        ensureSamplesIsMutable();
        samples_.set(index, builderForValue.build());
        onChanged();
      } else {
        samplesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder addSamples(com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels value) {
      if (samplesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSamplesIsMutable();
        samples_.add(value);
        onChanged();
      } else {
        samplesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder addSamples(
        int index, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels value) {
      if (samplesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSamplesIsMutable();
        samples_.add(index, value);
        onChanged();
      } else {
        samplesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder addSamples(
        com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder builderForValue) {
      if (samplesBuilder_ == null) {
        ensureSamplesIsMutable();
        samples_.add(builderForValue.build());
        onChanged();
      } else {
        samplesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder addSamples(
        int index, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder builderForValue) {
      if (samplesBuilder_ == null) {
        ensureSamplesIsMutable();
        samples_.add(index, builderForValue.build());
        onChanged();
      } else {
        samplesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder addAllSamples(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels> values) {
      if (samplesBuilder_ == null) {
        ensureSamplesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, samples_);
        onChanged();
      } else {
        samplesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder clearSamples() {
      if (samplesBuilder_ == null) {
        samples_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        samplesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public Builder removeSamples(int index) {
      if (samplesBuilder_ == null) {
        ensureSamplesIsMutable();
        samples_.remove(index);
        onChanged();
      } else {
        samplesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder getSamplesBuilder(
        int index) {
      return getSamplesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabelsOrBuilder getSamplesOrBuilder(
        int index) {
      if (samplesBuilder_ == null) {
        return samples_.get(index);  } else {
        return samplesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabelsOrBuilder> 
         getSamplesOrBuilderList() {
      if (samplesBuilder_ != null) {
        return samplesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(samples_);
      }
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder addSamplesBuilder() {
      return getSamplesFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder addSamplesBuilder(
        int index) {
      return getSamplesFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels samples = 1 [json_name = "samples"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder> 
         getSamplesBuilderList() {
      return getSamplesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabelsOrBuilder> 
        getSamplesFieldBuilder() {
      if (samplesBuilder_ == null) {
        samplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels.Builder, com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabelsOrBuilder>(
                samples_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        samples_ = null;
      }
      return samplesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse)
  }

  // @@protoc_insertion_point(class_scope:aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse)
  private static final com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse();
  }

  public static com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<PreviewFlowLabelsResponse>
      PARSER = new com.google.protobuf.AbstractParser<PreviewFlowLabelsResponse>() {
    @java.lang.Override
    public PreviewFlowLabelsResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new PreviewFlowLabelsResponse(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<PreviewFlowLabelsResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<PreviewFlowLabelsResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

