// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/rpc/v1/rpc.proto

package com.fluxninja.generated.aperture.rpc.v1;

/**
 * Protobuf type {@code aperture.rpc.v1.ServerToClient}
 */
public final class ServerToClient extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.rpc.v1.ServerToClient)
    ServerToClientOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ServerToClient.newBuilder() to construct.
  private ServerToClient(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ServerToClient() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ServerToClient();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ServerToClient(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.rpc.v1.Request.Builder subBuilder = null;
            if (commandCase_ == 1) {
              subBuilder = ((com.fluxninja.generated.aperture.rpc.v1.Request) command_).toBuilder();
            }
            command_ =
                input.readMessage(com.fluxninja.generated.aperture.rpc.v1.Request.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((com.fluxninja.generated.aperture.rpc.v1.Request) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 1;
            break;
          }
          case 16: {
            command_ = input.readUInt64();
            commandCase_ = 2;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.rpc.v1.RpcProto.internal_static_aperture_rpc_v1_ServerToClient_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.rpc.v1.RpcProto.internal_static_aperture_rpc_v1_ServerToClient_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.rpc.v1.ServerToClient.class, com.fluxninja.generated.aperture.rpc.v1.ServerToClient.Builder.class);
  }

  private int commandCase_ = 0;
  private java.lang.Object command_;
  public enum CommandCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    REQUEST(1),
    CANCEL_ID(2),
    COMMAND_NOT_SET(0);
    private final int value;
    private CommandCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CommandCase valueOf(int value) {
      return forNumber(value);
    }

    public static CommandCase forNumber(int value) {
      switch (value) {
        case 1: return REQUEST;
        case 2: return CANCEL_ID;
        case 0: return COMMAND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public CommandCase
  getCommandCase() {
    return CommandCase.forNumber(
        commandCase_);
  }

  public static final int REQUEST_FIELD_NUMBER = 1;
  /**
   * <pre>
   * Make a request to client. Expect AgentToController message in the
   * future containing Response with the same id.
   * </pre>
   *
   * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
   * @return Whether the request field is set.
   */
  @java.lang.Override
  public boolean hasRequest() {
    return commandCase_ == 1;
  }
  /**
   * <pre>
   * Make a request to client. Expect AgentToController message in the
   * future containing Response with the same id.
   * </pre>
   *
   * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
   * @return The request.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.rpc.v1.Request getRequest() {
    if (commandCase_ == 1) {
       return (com.fluxninja.generated.aperture.rpc.v1.Request) command_;
    }
    return com.fluxninja.generated.aperture.rpc.v1.Request.getDefaultInstance();
  }
  /**
   * <pre>
   * Make a request to client. Expect AgentToController message in the
   * future containing Response with the same id.
   * </pre>
   *
   * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.rpc.v1.RequestOrBuilder getRequestOrBuilder() {
    if (commandCase_ == 1) {
       return (com.fluxninja.generated.aperture.rpc.v1.Request) command_;
    }
    return com.fluxninja.generated.aperture.rpc.v1.Request.getDefaultInstance();
  }

  public static final int CANCEL_ID_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Cancels in-flight request.
   * After cancellation, the response is not expected to be received, but
   * might happen that it will be received. If so, it should be ignored.
   * </pre>
   *
   * <code>uint64 cancel_id = 2 [json_name = "cancelId"];</code>
   * @return Whether the cancelId field is set.
   */
  @java.lang.Override
  public boolean hasCancelId() {
    return commandCase_ == 2;
  }
  /**
   * <pre>
   * Cancels in-flight request.
   * After cancellation, the response is not expected to be received, but
   * might happen that it will be received. If so, it should be ignored.
   * </pre>
   *
   * <code>uint64 cancel_id = 2 [json_name = "cancelId"];</code>
   * @return The cancelId.
   */
  @java.lang.Override
  public long getCancelId() {
    if (commandCase_ == 2) {
      return (java.lang.Long) command_;
    }
    return 0L;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commandCase_ == 1) {
      output.writeMessage(1, (com.fluxninja.generated.aperture.rpc.v1.Request) command_);
    }
    if (commandCase_ == 2) {
      output.writeUInt64(
          2, (long)((java.lang.Long) command_));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commandCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (com.fluxninja.generated.aperture.rpc.v1.Request) command_);
    }
    if (commandCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(
            2, (long)((java.lang.Long) command_));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.rpc.v1.ServerToClient)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.rpc.v1.ServerToClient other = (com.fluxninja.generated.aperture.rpc.v1.ServerToClient) obj;

    if (!getCommandCase().equals(other.getCommandCase())) return false;
    switch (commandCase_) {
      case 1:
        if (!getRequest()
            .equals(other.getRequest())) return false;
        break;
      case 2:
        if (getCancelId()
            != other.getCancelId()) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (commandCase_) {
      case 1:
        hash = (37 * hash) + REQUEST_FIELD_NUMBER;
        hash = (53 * hash) + getRequest().hashCode();
        break;
      case 2:
        hash = (37 * hash) + CANCEL_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getCancelId());
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.rpc.v1.ServerToClient prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.rpc.v1.ServerToClient}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.rpc.v1.ServerToClient)
      com.fluxninja.generated.aperture.rpc.v1.ServerToClientOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.rpc.v1.RpcProto.internal_static_aperture_rpc_v1_ServerToClient_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.rpc.v1.RpcProto.internal_static_aperture_rpc_v1_ServerToClient_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.rpc.v1.ServerToClient.class, com.fluxninja.generated.aperture.rpc.v1.ServerToClient.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.rpc.v1.ServerToClient.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      commandCase_ = 0;
      command_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.rpc.v1.RpcProto.internal_static_aperture_rpc_v1_ServerToClient_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.rpc.v1.ServerToClient getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.rpc.v1.ServerToClient.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.rpc.v1.ServerToClient build() {
      com.fluxninja.generated.aperture.rpc.v1.ServerToClient result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.rpc.v1.ServerToClient buildPartial() {
      com.fluxninja.generated.aperture.rpc.v1.ServerToClient result = new com.fluxninja.generated.aperture.rpc.v1.ServerToClient(this);
      if (commandCase_ == 1) {
        if (requestBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = requestBuilder_.build();
        }
      }
      if (commandCase_ == 2) {
        result.command_ = command_;
      }
      result.commandCase_ = commandCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.rpc.v1.ServerToClient) {
        return mergeFrom((com.fluxninja.generated.aperture.rpc.v1.ServerToClient)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.rpc.v1.ServerToClient other) {
      if (other == com.fluxninja.generated.aperture.rpc.v1.ServerToClient.getDefaultInstance()) return this;
      switch (other.getCommandCase()) {
        case REQUEST: {
          mergeRequest(other.getRequest());
          break;
        }
        case CANCEL_ID: {
          setCancelId(other.getCancelId());
          break;
        }
        case COMMAND_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.rpc.v1.ServerToClient parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.rpc.v1.ServerToClient) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int commandCase_ = 0;
    private java.lang.Object command_;
    public CommandCase
        getCommandCase() {
      return CommandCase.forNumber(
          commandCase_);
    }

    public Builder clearCommand() {
      commandCase_ = 0;
      command_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.rpc.v1.Request, com.fluxninja.generated.aperture.rpc.v1.Request.Builder, com.fluxninja.generated.aperture.rpc.v1.RequestOrBuilder> requestBuilder_;
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     * @return Whether the request field is set.
     */
    @java.lang.Override
    public boolean hasRequest() {
      return commandCase_ == 1;
    }
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     * @return The request.
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.rpc.v1.Request getRequest() {
      if (requestBuilder_ == null) {
        if (commandCase_ == 1) {
          return (com.fluxninja.generated.aperture.rpc.v1.Request) command_;
        }
        return com.fluxninja.generated.aperture.rpc.v1.Request.getDefaultInstance();
      } else {
        if (commandCase_ == 1) {
          return requestBuilder_.getMessage();
        }
        return com.fluxninja.generated.aperture.rpc.v1.Request.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     */
    public Builder setRequest(com.fluxninja.generated.aperture.rpc.v1.Request value) {
      if (requestBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        requestBuilder_.setMessage(value);
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     */
    public Builder setRequest(
        com.fluxninja.generated.aperture.rpc.v1.Request.Builder builderForValue) {
      if (requestBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        requestBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     */
    public Builder mergeRequest(com.fluxninja.generated.aperture.rpc.v1.Request value) {
      if (requestBuilder_ == null) {
        if (commandCase_ == 1 &&
            command_ != com.fluxninja.generated.aperture.rpc.v1.Request.getDefaultInstance()) {
          command_ = com.fluxninja.generated.aperture.rpc.v1.Request.newBuilder((com.fluxninja.generated.aperture.rpc.v1.Request) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 1) {
          requestBuilder_.mergeFrom(value);
        } else {
          requestBuilder_.setMessage(value);
        }
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     */
    public Builder clearRequest() {
      if (requestBuilder_ == null) {
        if (commandCase_ == 1) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 1) {
          commandCase_ = 0;
          command_ = null;
        }
        requestBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     */
    public com.fluxninja.generated.aperture.rpc.v1.Request.Builder getRequestBuilder() {
      return getRequestFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     */
    @java.lang.Override
    public com.fluxninja.generated.aperture.rpc.v1.RequestOrBuilder getRequestOrBuilder() {
      if ((commandCase_ == 1) && (requestBuilder_ != null)) {
        return requestBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 1) {
          return (com.fluxninja.generated.aperture.rpc.v1.Request) command_;
        }
        return com.fluxninja.generated.aperture.rpc.v1.Request.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Make a request to client. Expect AgentToController message in the
     * future containing Response with the same id.
     * </pre>
     *
     * <code>.aperture.rpc.v1.Request request = 1 [json_name = "request"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.rpc.v1.Request, com.fluxninja.generated.aperture.rpc.v1.Request.Builder, com.fluxninja.generated.aperture.rpc.v1.RequestOrBuilder> 
        getRequestFieldBuilder() {
      if (requestBuilder_ == null) {
        if (!(commandCase_ == 1)) {
          command_ = com.fluxninja.generated.aperture.rpc.v1.Request.getDefaultInstance();
        }
        requestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.rpc.v1.Request, com.fluxninja.generated.aperture.rpc.v1.Request.Builder, com.fluxninja.generated.aperture.rpc.v1.RequestOrBuilder>(
                (com.fluxninja.generated.aperture.rpc.v1.Request) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 1;
      onChanged();;
      return requestBuilder_;
    }

    /**
     * <pre>
     * Cancels in-flight request.
     * After cancellation, the response is not expected to be received, but
     * might happen that it will be received. If so, it should be ignored.
     * </pre>
     *
     * <code>uint64 cancel_id = 2 [json_name = "cancelId"];</code>
     * @return Whether the cancelId field is set.
     */
    public boolean hasCancelId() {
      return commandCase_ == 2;
    }
    /**
     * <pre>
     * Cancels in-flight request.
     * After cancellation, the response is not expected to be received, but
     * might happen that it will be received. If so, it should be ignored.
     * </pre>
     *
     * <code>uint64 cancel_id = 2 [json_name = "cancelId"];</code>
     * @return The cancelId.
     */
    public long getCancelId() {
      if (commandCase_ == 2) {
        return (java.lang.Long) command_;
      }
      return 0L;
    }
    /**
     * <pre>
     * Cancels in-flight request.
     * After cancellation, the response is not expected to be received, but
     * might happen that it will be received. If so, it should be ignored.
     * </pre>
     *
     * <code>uint64 cancel_id = 2 [json_name = "cancelId"];</code>
     * @param value The cancelId to set.
     * @return This builder for chaining.
     */
    public Builder setCancelId(long value) {
      commandCase_ = 2;
      command_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Cancels in-flight request.
     * After cancellation, the response is not expected to be received, but
     * might happen that it will be received. If so, it should be ignored.
     * </pre>
     *
     * <code>uint64 cancel_id = 2 [json_name = "cancelId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCancelId() {
      if (commandCase_ == 2) {
        commandCase_ = 0;
        command_ = null;
        onChanged();
      }
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.rpc.v1.ServerToClient)
  }

  // @@protoc_insertion_point(class_scope:aperture.rpc.v1.ServerToClient)
  private static final com.fluxninja.generated.aperture.rpc.v1.ServerToClient DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.rpc.v1.ServerToClient();
  }

  public static com.fluxninja.generated.aperture.rpc.v1.ServerToClient getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ServerToClient>
      PARSER = new com.google.protobuf.AbstractParser<ServerToClient>() {
    @java.lang.Override
    public ServerToClient parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ServerToClient(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ServerToClient> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ServerToClient> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.rpc.v1.ServerToClient getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

