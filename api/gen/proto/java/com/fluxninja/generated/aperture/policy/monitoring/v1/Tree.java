// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/monitoring/v1/policy_view.proto

package com.fluxninja.generated.aperture.policy.monitoring.v1;

/**
 * Protobuf type {@code aperture.policy.monitoring.v1.Tree}
 */
public final class Tree extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.monitoring.v1.Tree)
    TreeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Tree.newBuilder() to construct.
  private Tree(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Tree() {
    children_ = java.util.Collections.emptyList();
    actuators_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Tree();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Tree(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder subBuilder = null;
            if (node_ != null) {
              subBuilder = node_.toBuilder();
            }
            node_ = input.readMessage(com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(node_);
              node_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.Builder subBuilder = null;
            if (graph_ != null) {
              subBuilder = graph_.toBuilder();
            }
            graph_ = input.readMessage(com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(graph_);
              graph_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              children_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.monitoring.v1.Tree>();
              mutable_bitField0_ |= 0x00000001;
            }
            children_.add(
                input.readMessage(com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.parser(), extensionRegistry));
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              actuators_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView>();
              mutable_bitField0_ |= 0x00000002;
            }
            actuators_.add(
                input.readMessage(com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        children_ = java.util.Collections.unmodifiableList(children_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        actuators_ = java.util.Collections.unmodifiableList(actuators_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.monitoring.v1.PolicyViewProto.internal_static_aperture_policy_monitoring_v1_Tree_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.monitoring.v1.PolicyViewProto.internal_static_aperture_policy_monitoring_v1_Tree_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.class, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder.class);
  }

  public static final int NODE_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView node_;
  /**
   * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
   * @return Whether the node field is set.
   */
  @java.lang.Override
  public boolean hasNode() {
    return node_ != null;
  }
  /**
   * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
   * @return The node.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView getNode() {
    return node_ == null ? com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.getDefaultInstance() : node_;
  }
  /**
   * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder getNodeOrBuilder() {
    return getNode();
  }

  public static final int GRAPH_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.policy.monitoring.v1.Graph graph_;
  /**
   * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
   * @return Whether the graph field is set.
   */
  @java.lang.Override
  public boolean hasGraph() {
    return graph_ != null;
  }
  /**
   * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
   * @return The graph.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.Graph getGraph() {
    return graph_ == null ? com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.getDefaultInstance() : graph_;
  }
  /**
   * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.GraphOrBuilder getGraphOrBuilder() {
    return getGraph();
  }

  public static final int CHILDREN_FIELD_NUMBER = 3;
  private java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.Tree> children_;
  /**
   * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.Tree> getChildrenList() {
    return children_;
  }
  /**
   * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.TreeOrBuilder> 
      getChildrenOrBuilderList() {
    return children_;
  }
  /**
   * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
   */
  @java.lang.Override
  public int getChildrenCount() {
    return children_.size();
  }
  /**
   * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree getChildren(int index) {
    return children_.get(index);
  }
  /**
   * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.TreeOrBuilder getChildrenOrBuilder(
      int index) {
    return children_.get(index);
  }

  public static final int ACTUATORS_FIELD_NUMBER = 4;
  private java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView> actuators_;
  /**
   * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView> getActuatorsList() {
    return actuators_;
  }
  /**
   * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder> 
      getActuatorsOrBuilderList() {
    return actuators_;
  }
  /**
   * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
   */
  @java.lang.Override
  public int getActuatorsCount() {
    return actuators_.size();
  }
  /**
   * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView getActuators(int index) {
    return actuators_.get(index);
  }
  /**
   * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder getActuatorsOrBuilder(
      int index) {
    return actuators_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (node_ != null) {
      output.writeMessage(1, getNode());
    }
    if (graph_ != null) {
      output.writeMessage(2, getGraph());
    }
    for (int i = 0; i < children_.size(); i++) {
      output.writeMessage(3, children_.get(i));
    }
    for (int i = 0; i < actuators_.size(); i++) {
      output.writeMessage(4, actuators_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (node_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getNode());
    }
    if (graph_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getGraph());
    }
    for (int i = 0; i < children_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, children_.get(i));
    }
    for (int i = 0; i < actuators_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, actuators_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.monitoring.v1.Tree)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.monitoring.v1.Tree other = (com.fluxninja.generated.aperture.policy.monitoring.v1.Tree) obj;

    if (hasNode() != other.hasNode()) return false;
    if (hasNode()) {
      if (!getNode()
          .equals(other.getNode())) return false;
    }
    if (hasGraph() != other.hasGraph()) return false;
    if (hasGraph()) {
      if (!getGraph()
          .equals(other.getGraph())) return false;
    }
    if (!getChildrenList()
        .equals(other.getChildrenList())) return false;
    if (!getActuatorsList()
        .equals(other.getActuatorsList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasNode()) {
      hash = (37 * hash) + NODE_FIELD_NUMBER;
      hash = (53 * hash) + getNode().hashCode();
    }
    if (hasGraph()) {
      hash = (37 * hash) + GRAPH_FIELD_NUMBER;
      hash = (53 * hash) + getGraph().hashCode();
    }
    if (getChildrenCount() > 0) {
      hash = (37 * hash) + CHILDREN_FIELD_NUMBER;
      hash = (53 * hash) + getChildrenList().hashCode();
    }
    if (getActuatorsCount() > 0) {
      hash = (37 * hash) + ACTUATORS_FIELD_NUMBER;
      hash = (53 * hash) + getActuatorsList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.monitoring.v1.Tree prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.policy.monitoring.v1.Tree}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.monitoring.v1.Tree)
      com.fluxninja.generated.aperture.policy.monitoring.v1.TreeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.monitoring.v1.PolicyViewProto.internal_static_aperture_policy_monitoring_v1_Tree_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.monitoring.v1.PolicyViewProto.internal_static_aperture_policy_monitoring_v1_Tree_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.class, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getChildrenFieldBuilder();
        getActuatorsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (nodeBuilder_ == null) {
        node_ = null;
      } else {
        node_ = null;
        nodeBuilder_ = null;
      }
      if (graphBuilder_ == null) {
        graph_ = null;
      } else {
        graph_ = null;
        graphBuilder_ = null;
      }
      if (childrenBuilder_ == null) {
        children_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        childrenBuilder_.clear();
      }
      if (actuatorsBuilder_ == null) {
        actuators_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        actuatorsBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.monitoring.v1.PolicyViewProto.internal_static_aperture_policy_monitoring_v1_Tree_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree build() {
      com.fluxninja.generated.aperture.policy.monitoring.v1.Tree result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree buildPartial() {
      com.fluxninja.generated.aperture.policy.monitoring.v1.Tree result = new com.fluxninja.generated.aperture.policy.monitoring.v1.Tree(this);
      int from_bitField0_ = bitField0_;
      if (nodeBuilder_ == null) {
        result.node_ = node_;
      } else {
        result.node_ = nodeBuilder_.build();
      }
      if (graphBuilder_ == null) {
        result.graph_ = graph_;
      } else {
        result.graph_ = graphBuilder_.build();
      }
      if (childrenBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          children_ = java.util.Collections.unmodifiableList(children_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.children_ = children_;
      } else {
        result.children_ = childrenBuilder_.build();
      }
      if (actuatorsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          actuators_ = java.util.Collections.unmodifiableList(actuators_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.actuators_ = actuators_;
      } else {
        result.actuators_ = actuatorsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.monitoring.v1.Tree) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.monitoring.v1.Tree)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.monitoring.v1.Tree other) {
      if (other == com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.getDefaultInstance()) return this;
      if (other.hasNode()) {
        mergeNode(other.getNode());
      }
      if (other.hasGraph()) {
        mergeGraph(other.getGraph());
      }
      if (childrenBuilder_ == null) {
        if (!other.children_.isEmpty()) {
          if (children_.isEmpty()) {
            children_ = other.children_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureChildrenIsMutable();
            children_.addAll(other.children_);
          }
          onChanged();
        }
      } else {
        if (!other.children_.isEmpty()) {
          if (childrenBuilder_.isEmpty()) {
            childrenBuilder_.dispose();
            childrenBuilder_ = null;
            children_ = other.children_;
            bitField0_ = (bitField0_ & ~0x00000001);
            childrenBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getChildrenFieldBuilder() : null;
          } else {
            childrenBuilder_.addAllMessages(other.children_);
          }
        }
      }
      if (actuatorsBuilder_ == null) {
        if (!other.actuators_.isEmpty()) {
          if (actuators_.isEmpty()) {
            actuators_ = other.actuators_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureActuatorsIsMutable();
            actuators_.addAll(other.actuators_);
          }
          onChanged();
        }
      } else {
        if (!other.actuators_.isEmpty()) {
          if (actuatorsBuilder_.isEmpty()) {
            actuatorsBuilder_.dispose();
            actuatorsBuilder_ = null;
            actuators_ = other.actuators_;
            bitField0_ = (bitField0_ & ~0x00000002);
            actuatorsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getActuatorsFieldBuilder() : null;
          } else {
            actuatorsBuilder_.addAllMessages(other.actuators_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.monitoring.v1.Tree parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.monitoring.v1.Tree) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView node_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder> nodeBuilder_;
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     * @return Whether the node field is set.
     */
    public boolean hasNode() {
      return nodeBuilder_ != null || node_ != null;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     * @return The node.
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView getNode() {
      if (nodeBuilder_ == null) {
        return node_ == null ? com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.getDefaultInstance() : node_;
      } else {
        return nodeBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     */
    public Builder setNode(com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView value) {
      if (nodeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        node_ = value;
        onChanged();
      } else {
        nodeBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     */
    public Builder setNode(
        com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder builderForValue) {
      if (nodeBuilder_ == null) {
        node_ = builderForValue.build();
        onChanged();
      } else {
        nodeBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     */
    public Builder mergeNode(com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView value) {
      if (nodeBuilder_ == null) {
        if (node_ != null) {
          node_ =
            com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.newBuilder(node_).mergeFrom(value).buildPartial();
        } else {
          node_ = value;
        }
        onChanged();
      } else {
        nodeBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     */
    public Builder clearNode() {
      if (nodeBuilder_ == null) {
        node_ = null;
        onChanged();
      } else {
        node_ = null;
        nodeBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder getNodeBuilder() {
      
      onChanged();
      return getNodeFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder getNodeOrBuilder() {
      if (nodeBuilder_ != null) {
        return nodeBuilder_.getMessageOrBuilder();
      } else {
        return node_ == null ?
            com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.getDefaultInstance() : node_;
      }
    }
    /**
     * <code>.aperture.policy.monitoring.v1.ComponentView node = 1 [json_name = "node"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder> 
        getNodeFieldBuilder() {
      if (nodeBuilder_ == null) {
        nodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder>(
                getNode(),
                getParentForChildren(),
                isClean());
        node_ = null;
      }
      return nodeBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.monitoring.v1.Graph graph_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.Graph, com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.GraphOrBuilder> graphBuilder_;
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     * @return Whether the graph field is set.
     */
    public boolean hasGraph() {
      return graphBuilder_ != null || graph_ != null;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     * @return The graph.
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Graph getGraph() {
      if (graphBuilder_ == null) {
        return graph_ == null ? com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.getDefaultInstance() : graph_;
      } else {
        return graphBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     */
    public Builder setGraph(com.fluxninja.generated.aperture.policy.monitoring.v1.Graph value) {
      if (graphBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        graph_ = value;
        onChanged();
      } else {
        graphBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     */
    public Builder setGraph(
        com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.Builder builderForValue) {
      if (graphBuilder_ == null) {
        graph_ = builderForValue.build();
        onChanged();
      } else {
        graphBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     */
    public Builder mergeGraph(com.fluxninja.generated.aperture.policy.monitoring.v1.Graph value) {
      if (graphBuilder_ == null) {
        if (graph_ != null) {
          graph_ =
            com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.newBuilder(graph_).mergeFrom(value).buildPartial();
        } else {
          graph_ = value;
        }
        onChanged();
      } else {
        graphBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     */
    public Builder clearGraph() {
      if (graphBuilder_ == null) {
        graph_ = null;
        onChanged();
      } else {
        graph_ = null;
        graphBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.Builder getGraphBuilder() {
      
      onChanged();
      return getGraphFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.GraphOrBuilder getGraphOrBuilder() {
      if (graphBuilder_ != null) {
        return graphBuilder_.getMessageOrBuilder();
      } else {
        return graph_ == null ?
            com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.getDefaultInstance() : graph_;
      }
    }
    /**
     * <code>.aperture.policy.monitoring.v1.Graph graph = 2 [json_name = "graph"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.Graph, com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.GraphOrBuilder> 
        getGraphFieldBuilder() {
      if (graphBuilder_ == null) {
        graphBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.monitoring.v1.Graph, com.fluxninja.generated.aperture.policy.monitoring.v1.Graph.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.GraphOrBuilder>(
                getGraph(),
                getParentForChildren(),
                isClean());
        graph_ = null;
      }
      return graphBuilder_;
    }

    private java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.Tree> children_ =
      java.util.Collections.emptyList();
    private void ensureChildrenIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        children_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.monitoring.v1.Tree>(children_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.Tree, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.TreeOrBuilder> childrenBuilder_;

    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.Tree> getChildrenList() {
      if (childrenBuilder_ == null) {
        return java.util.Collections.unmodifiableList(children_);
      } else {
        return childrenBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public int getChildrenCount() {
      if (childrenBuilder_ == null) {
        return children_.size();
      } else {
        return childrenBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree getChildren(int index) {
      if (childrenBuilder_ == null) {
        return children_.get(index);
      } else {
        return childrenBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder setChildren(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree value) {
      if (childrenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChildrenIsMutable();
        children_.set(index, value);
        onChanged();
      } else {
        childrenBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder setChildren(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder builderForValue) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        children_.set(index, builderForValue.build());
        onChanged();
      } else {
        childrenBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder addChildren(com.fluxninja.generated.aperture.policy.monitoring.v1.Tree value) {
      if (childrenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChildrenIsMutable();
        children_.add(value);
        onChanged();
      } else {
        childrenBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder addChildren(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree value) {
      if (childrenBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChildrenIsMutable();
        children_.add(index, value);
        onChanged();
      } else {
        childrenBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder addChildren(
        com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder builderForValue) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        children_.add(builderForValue.build());
        onChanged();
      } else {
        childrenBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder addChildren(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder builderForValue) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        children_.add(index, builderForValue.build());
        onChanged();
      } else {
        childrenBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder addAllChildren(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.Tree> values) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, children_);
        onChanged();
      } else {
        childrenBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder clearChildren() {
      if (childrenBuilder_ == null) {
        children_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        childrenBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public Builder removeChildren(int index) {
      if (childrenBuilder_ == null) {
        ensureChildrenIsMutable();
        children_.remove(index);
        onChanged();
      } else {
        childrenBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder getChildrenBuilder(
        int index) {
      return getChildrenFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.TreeOrBuilder getChildrenOrBuilder(
        int index) {
      if (childrenBuilder_ == null) {
        return children_.get(index);  } else {
        return childrenBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.TreeOrBuilder> 
         getChildrenOrBuilderList() {
      if (childrenBuilder_ != null) {
        return childrenBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(children_);
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder addChildrenBuilder() {
      return getChildrenFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder addChildrenBuilder(
        int index) {
      return getChildrenFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.Tree children = 3 [json_name = "children"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder> 
         getChildrenBuilderList() {
      return getChildrenFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.Tree, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.TreeOrBuilder> 
        getChildrenFieldBuilder() {
      if (childrenBuilder_ == null) {
        childrenBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.monitoring.v1.Tree, com.fluxninja.generated.aperture.policy.monitoring.v1.Tree.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.TreeOrBuilder>(
                children_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        children_ = null;
      }
      return childrenBuilder_;
    }

    private java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView> actuators_ =
      java.util.Collections.emptyList();
    private void ensureActuatorsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        actuators_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView>(actuators_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder> actuatorsBuilder_;

    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView> getActuatorsList() {
      if (actuatorsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(actuators_);
      } else {
        return actuatorsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public int getActuatorsCount() {
      if (actuatorsBuilder_ == null) {
        return actuators_.size();
      } else {
        return actuatorsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView getActuators(int index) {
      if (actuatorsBuilder_ == null) {
        return actuators_.get(index);
      } else {
        return actuatorsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder setActuators(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView value) {
      if (actuatorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureActuatorsIsMutable();
        actuators_.set(index, value);
        onChanged();
      } else {
        actuatorsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder setActuators(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder builderForValue) {
      if (actuatorsBuilder_ == null) {
        ensureActuatorsIsMutable();
        actuators_.set(index, builderForValue.build());
        onChanged();
      } else {
        actuatorsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder addActuators(com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView value) {
      if (actuatorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureActuatorsIsMutable();
        actuators_.add(value);
        onChanged();
      } else {
        actuatorsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder addActuators(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView value) {
      if (actuatorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureActuatorsIsMutable();
        actuators_.add(index, value);
        onChanged();
      } else {
        actuatorsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder addActuators(
        com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder builderForValue) {
      if (actuatorsBuilder_ == null) {
        ensureActuatorsIsMutable();
        actuators_.add(builderForValue.build());
        onChanged();
      } else {
        actuatorsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder addActuators(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder builderForValue) {
      if (actuatorsBuilder_ == null) {
        ensureActuatorsIsMutable();
        actuators_.add(index, builderForValue.build());
        onChanged();
      } else {
        actuatorsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder addAllActuators(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView> values) {
      if (actuatorsBuilder_ == null) {
        ensureActuatorsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, actuators_);
        onChanged();
      } else {
        actuatorsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder clearActuators() {
      if (actuatorsBuilder_ == null) {
        actuators_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        actuatorsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public Builder removeActuators(int index) {
      if (actuatorsBuilder_ == null) {
        ensureActuatorsIsMutable();
        actuators_.remove(index);
        onChanged();
      } else {
        actuatorsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder getActuatorsBuilder(
        int index) {
      return getActuatorsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder getActuatorsOrBuilder(
        int index) {
      if (actuatorsBuilder_ == null) {
        return actuators_.get(index);  } else {
        return actuatorsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder> 
         getActuatorsOrBuilderList() {
      if (actuatorsBuilder_ != null) {
        return actuatorsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(actuators_);
      }
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder addActuatorsBuilder() {
      return getActuatorsFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder addActuatorsBuilder(
        int index) {
      return getActuatorsFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.policy.monitoring.v1.ComponentView actuators = 4 [json_name = "actuators"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder> 
         getActuatorsBuilderList() {
      return getActuatorsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder> 
        getActuatorsFieldBuilder() {
      if (actuatorsBuilder_ == null) {
        actuatorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentView.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.ComponentViewOrBuilder>(
                actuators_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        actuators_ = null;
      }
      return actuatorsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.monitoring.v1.Tree)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.monitoring.v1.Tree)
  private static final com.fluxninja.generated.aperture.policy.monitoring.v1.Tree DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.monitoring.v1.Tree();
  }

  public static com.fluxninja.generated.aperture.policy.monitoring.v1.Tree getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Tree>
      PARSER = new com.google.protobuf.AbstractParser<Tree>() {
    @java.lang.Override
    public Tree parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Tree(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Tree> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Tree> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.Tree getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

