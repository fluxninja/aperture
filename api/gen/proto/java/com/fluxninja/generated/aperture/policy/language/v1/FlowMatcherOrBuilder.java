// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface FlowMatcherOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.FlowMatcher)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * [Control Point](/concepts/flow-control/flow-selector.md#control-point)
   * identifies the location of a Flow within a Service. For an SDK based insertion, a Control Point can represent a particular feature or execution
   * block within a Service. In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners
   * or filter chains.
   * </pre>
   *
   * <code>string control_point = 1 [json_name = "controlPoint"];</code>
   * @return The controlPoint.
   */
  java.lang.String getControlPoint();
  /**
   * <pre>
   * [Control Point](/concepts/flow-control/flow-selector.md#control-point)
   * identifies the location of a Flow within a Service. For an SDK based insertion, a Control Point can represent a particular feature or execution
   * block within a Service. In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners
   * or filter chains.
   * </pre>
   *
   * <code>string control_point = 1 [json_name = "controlPoint"];</code>
   * @return The bytes for controlPoint.
   */
  com.google.protobuf.ByteString
      getControlPointBytes();

  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on
   * [flow labels](/concepts/flow-control/flow-label.md)
   * must also be satisfied (in addition to service+control point matching)
   * :::info
   * See also [Label Matcher overview](/concepts/flow-control/flow-selector.md#label-matcher).
   * :::
   * :::note
   * [Classifiers](#classifier) _can_ use flow labels created by some other
   * classifier, but only if they were created at some previous control point
   * (and propagated in baggage).
   * This limitation doesn't apply to selectors of other entities, like
   * Flux Meters or Actuators. It's valid to create a flow label on a control
   * point using classifier, and immediately use it for matching on the same
   * control point.
   * :::
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 2 [json_name = "labelMatcher"];</code>
   * @return Whether the labelMatcher field is set.
   */
  boolean hasLabelMatcher();
  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on
   * [flow labels](/concepts/flow-control/flow-label.md)
   * must also be satisfied (in addition to service+control point matching)
   * :::info
   * See also [Label Matcher overview](/concepts/flow-control/flow-selector.md#label-matcher).
   * :::
   * :::note
   * [Classifiers](#classifier) _can_ use flow labels created by some other
   * classifier, but only if they were created at some previous control point
   * (and propagated in baggage).
   * This limitation doesn't apply to selectors of other entities, like
   * Flux Meters or Actuators. It's valid to create a flow label on a control
   * point using classifier, and immediately use it for matching on the same
   * control point.
   * :::
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 2 [json_name = "labelMatcher"];</code>
   * @return The labelMatcher.
   */
  com.fluxninja.generated.aperture.policy.language.v1.LabelMatcher getLabelMatcher();
  /**
   * <pre>
   * Label matcher allows to add _additional_ condition on
   * [flow labels](/concepts/flow-control/flow-label.md)
   * must also be satisfied (in addition to service+control point matching)
   * :::info
   * See also [Label Matcher overview](/concepts/flow-control/flow-selector.md#label-matcher).
   * :::
   * :::note
   * [Classifiers](#classifier) _can_ use flow labels created by some other
   * classifier, but only if they were created at some previous control point
   * (and propagated in baggage).
   * This limitation doesn't apply to selectors of other entities, like
   * Flux Meters or Actuators. It's valid to create a flow label on a control
   * point using classifier, and immediately use it for matching on the same
   * control point.
   * :::
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 2 [json_name = "labelMatcher"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherOrBuilder getLabelMatcherOrBuilder();
}
