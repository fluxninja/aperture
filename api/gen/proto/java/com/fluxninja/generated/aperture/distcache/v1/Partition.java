// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/distcache/v1/stats.proto

package com.fluxninja.generated.aperture.distcache.v1;

/**
 * Protobuf type {@code aperture.distcache.v1.Partition}
 */
public final class Partition extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.distcache.v1.Partition)
    PartitionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Partition.newBuilder() to construct.
  private Partition(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Partition() {
    previousOwners_ = java.util.Collections.emptyList();
    backups_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Partition();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Partition(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              previousOwners_ = new java.util.ArrayList<com.fluxninja.generated.aperture.distcache.v1.Member>();
              mutable_bitField0_ |= 0x00000001;
            }
            previousOwners_.add(
                input.readMessage(com.fluxninja.generated.aperture.distcache.v1.Member.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              backups_ = new java.util.ArrayList<com.fluxninja.generated.aperture.distcache.v1.Member>();
              mutable_bitField0_ |= 0x00000002;
            }
            backups_.add(
                input.readMessage(com.fluxninja.generated.aperture.distcache.v1.Member.parser(), extensionRegistry));
            break;
          }
          case 24: {

            length_ = input.readInt64();
            break;
          }
          case 34: {
            if (!((mutable_bitField0_ & 0x00000004) != 0)) {
              dMaps_ = com.google.protobuf.MapField.newMapField(
                  DMapsDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000004;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>
            dMaps__ = input.readMessage(
                DMapsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            dMaps_.getMutableMap().put(
                dMaps__.getKey(), dMaps__.getValue());
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        previousOwners_ = java.util.Collections.unmodifiableList(previousOwners_);
      }
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        backups_ = java.util.Collections.unmodifiableList(backups_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_Partition_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 4:
        return internalGetDMaps();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_Partition_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.distcache.v1.Partition.class, com.fluxninja.generated.aperture.distcache.v1.Partition.Builder.class);
  }

  public static final int PREVIOUS_OWNERS_FIELD_NUMBER = 1;
  private java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> previousOwners_;
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> getPreviousOwnersList() {
    return previousOwners_;
  }
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> 
      getPreviousOwnersOrBuilderList() {
    return previousOwners_;
  }
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  @java.lang.Override
  public int getPreviousOwnersCount() {
    return previousOwners_.size();
  }
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.Member getPreviousOwners(int index) {
    return previousOwners_.get(index);
  }
  /**
   * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder getPreviousOwnersOrBuilder(
      int index) {
    return previousOwners_.get(index);
  }

  public static final int BACKUPS_FIELD_NUMBER = 2;
  private java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> backups_;
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> getBackupsList() {
    return backups_;
  }
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> 
      getBackupsOrBuilderList() {
    return backups_;
  }
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  @java.lang.Override
  public int getBackupsCount() {
    return backups_.size();
  }
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.Member getBackups(int index) {
    return backups_.get(index);
  }
  /**
   * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder getBackupsOrBuilder(
      int index) {
    return backups_.get(index);
  }

  public static final int LENGTH_FIELD_NUMBER = 3;
  private long length_;
  /**
   * <code>int64 length = 3 [json_name = "Length"];</code>
   * @return The length.
   */
  @java.lang.Override
  public long getLength() {
    return length_;
  }

  public static final int D_MAPS_FIELD_NUMBER = 4;
  private static final class DMapsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>newDefaultInstance(
                com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_Partition_DMapsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.fluxninja.generated.aperture.distcache.v1.DMap.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> dMaps_;
  private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>
  internalGetDMaps() {
    if (dMaps_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          DMapsDefaultEntryHolder.defaultEntry);
    }
    return dMaps_;
  }

  public int getDMapsCount() {
    return internalGetDMaps().getMap().size();
  }
  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */

  @java.lang.Override
  public boolean containsDMaps(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetDMaps().getMap().containsKey(key);
  }
  /**
   * Use {@link #getDMapsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> getDMaps() {
    return getDMapsMap();
  }
  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> getDMapsMap() {
    return internalGetDMaps().getMap();
  }
  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.distcache.v1.DMap getDMapsOrDefault(
      java.lang.String key,
      com.fluxninja.generated.aperture.distcache.v1.DMap defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> map =
        internalGetDMaps().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.distcache.v1.DMap getDMapsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> map =
        internalGetDMaps().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < previousOwners_.size(); i++) {
      output.writeMessage(1, previousOwners_.get(i));
    }
    for (int i = 0; i < backups_.size(); i++) {
      output.writeMessage(2, backups_.get(i));
    }
    if (length_ != 0L) {
      output.writeInt64(3, length_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetDMaps(),
        DMapsDefaultEntryHolder.defaultEntry,
        4);
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < previousOwners_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, previousOwners_.get(i));
    }
    for (int i = 0; i < backups_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, backups_.get(i));
    }
    if (length_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, length_);
    }
    for (java.util.Map.Entry<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> entry
         : internalGetDMaps().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>
      dMaps__ = DMapsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, dMaps__);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.distcache.v1.Partition)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.distcache.v1.Partition other = (com.fluxninja.generated.aperture.distcache.v1.Partition) obj;

    if (!getPreviousOwnersList()
        .equals(other.getPreviousOwnersList())) return false;
    if (!getBackupsList()
        .equals(other.getBackupsList())) return false;
    if (getLength()
        != other.getLength()) return false;
    if (!internalGetDMaps().equals(
        other.internalGetDMaps())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getPreviousOwnersCount() > 0) {
      hash = (37 * hash) + PREVIOUS_OWNERS_FIELD_NUMBER;
      hash = (53 * hash) + getPreviousOwnersList().hashCode();
    }
    if (getBackupsCount() > 0) {
      hash = (37 * hash) + BACKUPS_FIELD_NUMBER;
      hash = (53 * hash) + getBackupsList().hashCode();
    }
    hash = (37 * hash) + LENGTH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getLength());
    if (!internalGetDMaps().getMap().isEmpty()) {
      hash = (37 * hash) + D_MAPS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetDMaps().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.distcache.v1.Partition parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.distcache.v1.Partition prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.distcache.v1.Partition}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.distcache.v1.Partition)
      com.fluxninja.generated.aperture.distcache.v1.PartitionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_Partition_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetDMaps();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 4:
          return internalGetMutableDMaps();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_Partition_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.distcache.v1.Partition.class, com.fluxninja.generated.aperture.distcache.v1.Partition.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.distcache.v1.Partition.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getPreviousOwnersFieldBuilder();
        getBackupsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (previousOwnersBuilder_ == null) {
        previousOwners_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        previousOwnersBuilder_.clear();
      }
      if (backupsBuilder_ == null) {
        backups_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        backupsBuilder_.clear();
      }
      length_ = 0L;

      internalGetMutableDMaps().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.distcache.v1.StatsProto.internal_static_aperture_distcache_v1_Partition_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.Partition getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.distcache.v1.Partition.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.Partition build() {
      com.fluxninja.generated.aperture.distcache.v1.Partition result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.distcache.v1.Partition buildPartial() {
      com.fluxninja.generated.aperture.distcache.v1.Partition result = new com.fluxninja.generated.aperture.distcache.v1.Partition(this);
      int from_bitField0_ = bitField0_;
      if (previousOwnersBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          previousOwners_ = java.util.Collections.unmodifiableList(previousOwners_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.previousOwners_ = previousOwners_;
      } else {
        result.previousOwners_ = previousOwnersBuilder_.build();
      }
      if (backupsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          backups_ = java.util.Collections.unmodifiableList(backups_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.backups_ = backups_;
      } else {
        result.backups_ = backupsBuilder_.build();
      }
      result.length_ = length_;
      result.dMaps_ = internalGetDMaps();
      result.dMaps_.makeImmutable();
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.distcache.v1.Partition) {
        return mergeFrom((com.fluxninja.generated.aperture.distcache.v1.Partition)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.distcache.v1.Partition other) {
      if (other == com.fluxninja.generated.aperture.distcache.v1.Partition.getDefaultInstance()) return this;
      if (previousOwnersBuilder_ == null) {
        if (!other.previousOwners_.isEmpty()) {
          if (previousOwners_.isEmpty()) {
            previousOwners_ = other.previousOwners_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePreviousOwnersIsMutable();
            previousOwners_.addAll(other.previousOwners_);
          }
          onChanged();
        }
      } else {
        if (!other.previousOwners_.isEmpty()) {
          if (previousOwnersBuilder_.isEmpty()) {
            previousOwnersBuilder_.dispose();
            previousOwnersBuilder_ = null;
            previousOwners_ = other.previousOwners_;
            bitField0_ = (bitField0_ & ~0x00000001);
            previousOwnersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getPreviousOwnersFieldBuilder() : null;
          } else {
            previousOwnersBuilder_.addAllMessages(other.previousOwners_);
          }
        }
      }
      if (backupsBuilder_ == null) {
        if (!other.backups_.isEmpty()) {
          if (backups_.isEmpty()) {
            backups_ = other.backups_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBackupsIsMutable();
            backups_.addAll(other.backups_);
          }
          onChanged();
        }
      } else {
        if (!other.backups_.isEmpty()) {
          if (backupsBuilder_.isEmpty()) {
            backupsBuilder_.dispose();
            backupsBuilder_ = null;
            backups_ = other.backups_;
            bitField0_ = (bitField0_ & ~0x00000002);
            backupsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getBackupsFieldBuilder() : null;
          } else {
            backupsBuilder_.addAllMessages(other.backups_);
          }
        }
      }
      if (other.getLength() != 0L) {
        setLength(other.getLength());
      }
      internalGetMutableDMaps().mergeFrom(
          other.internalGetDMaps());
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.distcache.v1.Partition parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.distcache.v1.Partition) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> previousOwners_ =
      java.util.Collections.emptyList();
    private void ensurePreviousOwnersIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        previousOwners_ = new java.util.ArrayList<com.fluxninja.generated.aperture.distcache.v1.Member>(previousOwners_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.distcache.v1.Member, com.fluxninja.generated.aperture.distcache.v1.Member.Builder, com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> previousOwnersBuilder_;

    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> getPreviousOwnersList() {
      if (previousOwnersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(previousOwners_);
      } else {
        return previousOwnersBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public int getPreviousOwnersCount() {
      if (previousOwnersBuilder_ == null) {
        return previousOwners_.size();
      } else {
        return previousOwnersBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.Member getPreviousOwners(int index) {
      if (previousOwnersBuilder_ == null) {
        return previousOwners_.get(index);
      } else {
        return previousOwnersBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder setPreviousOwners(
        int index, com.fluxninja.generated.aperture.distcache.v1.Member value) {
      if (previousOwnersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePreviousOwnersIsMutable();
        previousOwners_.set(index, value);
        onChanged();
      } else {
        previousOwnersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder setPreviousOwners(
        int index, com.fluxninja.generated.aperture.distcache.v1.Member.Builder builderForValue) {
      if (previousOwnersBuilder_ == null) {
        ensurePreviousOwnersIsMutable();
        previousOwners_.set(index, builderForValue.build());
        onChanged();
      } else {
        previousOwnersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder addPreviousOwners(com.fluxninja.generated.aperture.distcache.v1.Member value) {
      if (previousOwnersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePreviousOwnersIsMutable();
        previousOwners_.add(value);
        onChanged();
      } else {
        previousOwnersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder addPreviousOwners(
        int index, com.fluxninja.generated.aperture.distcache.v1.Member value) {
      if (previousOwnersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensurePreviousOwnersIsMutable();
        previousOwners_.add(index, value);
        onChanged();
      } else {
        previousOwnersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder addPreviousOwners(
        com.fluxninja.generated.aperture.distcache.v1.Member.Builder builderForValue) {
      if (previousOwnersBuilder_ == null) {
        ensurePreviousOwnersIsMutable();
        previousOwners_.add(builderForValue.build());
        onChanged();
      } else {
        previousOwnersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder addPreviousOwners(
        int index, com.fluxninja.generated.aperture.distcache.v1.Member.Builder builderForValue) {
      if (previousOwnersBuilder_ == null) {
        ensurePreviousOwnersIsMutable();
        previousOwners_.add(index, builderForValue.build());
        onChanged();
      } else {
        previousOwnersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder addAllPreviousOwners(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.distcache.v1.Member> values) {
      if (previousOwnersBuilder_ == null) {
        ensurePreviousOwnersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, previousOwners_);
        onChanged();
      } else {
        previousOwnersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder clearPreviousOwners() {
      if (previousOwnersBuilder_ == null) {
        previousOwners_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        previousOwnersBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public Builder removePreviousOwners(int index) {
      if (previousOwnersBuilder_ == null) {
        ensurePreviousOwnersIsMutable();
        previousOwners_.remove(index);
        onChanged();
      } else {
        previousOwnersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.Member.Builder getPreviousOwnersBuilder(
        int index) {
      return getPreviousOwnersFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder getPreviousOwnersOrBuilder(
        int index) {
      if (previousOwnersBuilder_ == null) {
        return previousOwners_.get(index);  } else {
        return previousOwnersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> 
         getPreviousOwnersOrBuilderList() {
      if (previousOwnersBuilder_ != null) {
        return previousOwnersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(previousOwners_);
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.Member.Builder addPreviousOwnersBuilder() {
      return getPreviousOwnersFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.distcache.v1.Member.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.Member.Builder addPreviousOwnersBuilder(
        int index) {
      return getPreviousOwnersFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.distcache.v1.Member.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member previous_owners = 1 [json_name = "PreviousOwners"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member.Builder> 
         getPreviousOwnersBuilderList() {
      return getPreviousOwnersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.distcache.v1.Member, com.fluxninja.generated.aperture.distcache.v1.Member.Builder, com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> 
        getPreviousOwnersFieldBuilder() {
      if (previousOwnersBuilder_ == null) {
        previousOwnersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.distcache.v1.Member, com.fluxninja.generated.aperture.distcache.v1.Member.Builder, com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder>(
                previousOwners_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        previousOwners_ = null;
      }
      return previousOwnersBuilder_;
    }

    private java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> backups_ =
      java.util.Collections.emptyList();
    private void ensureBackupsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        backups_ = new java.util.ArrayList<com.fluxninja.generated.aperture.distcache.v1.Member>(backups_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.distcache.v1.Member, com.fluxninja.generated.aperture.distcache.v1.Member.Builder, com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> backupsBuilder_;

    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member> getBackupsList() {
      if (backupsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(backups_);
      } else {
        return backupsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public int getBackupsCount() {
      if (backupsBuilder_ == null) {
        return backups_.size();
      } else {
        return backupsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.Member getBackups(int index) {
      if (backupsBuilder_ == null) {
        return backups_.get(index);
      } else {
        return backupsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder setBackups(
        int index, com.fluxninja.generated.aperture.distcache.v1.Member value) {
      if (backupsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBackupsIsMutable();
        backups_.set(index, value);
        onChanged();
      } else {
        backupsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder setBackups(
        int index, com.fluxninja.generated.aperture.distcache.v1.Member.Builder builderForValue) {
      if (backupsBuilder_ == null) {
        ensureBackupsIsMutable();
        backups_.set(index, builderForValue.build());
        onChanged();
      } else {
        backupsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder addBackups(com.fluxninja.generated.aperture.distcache.v1.Member value) {
      if (backupsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBackupsIsMutable();
        backups_.add(value);
        onChanged();
      } else {
        backupsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder addBackups(
        int index, com.fluxninja.generated.aperture.distcache.v1.Member value) {
      if (backupsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBackupsIsMutable();
        backups_.add(index, value);
        onChanged();
      } else {
        backupsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder addBackups(
        com.fluxninja.generated.aperture.distcache.v1.Member.Builder builderForValue) {
      if (backupsBuilder_ == null) {
        ensureBackupsIsMutable();
        backups_.add(builderForValue.build());
        onChanged();
      } else {
        backupsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder addBackups(
        int index, com.fluxninja.generated.aperture.distcache.v1.Member.Builder builderForValue) {
      if (backupsBuilder_ == null) {
        ensureBackupsIsMutable();
        backups_.add(index, builderForValue.build());
        onChanged();
      } else {
        backupsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder addAllBackups(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.distcache.v1.Member> values) {
      if (backupsBuilder_ == null) {
        ensureBackupsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, backups_);
        onChanged();
      } else {
        backupsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder clearBackups() {
      if (backupsBuilder_ == null) {
        backups_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        backupsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public Builder removeBackups(int index) {
      if (backupsBuilder_ == null) {
        ensureBackupsIsMutable();
        backups_.remove(index);
        onChanged();
      } else {
        backupsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.Member.Builder getBackupsBuilder(
        int index) {
      return getBackupsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder getBackupsOrBuilder(
        int index) {
      if (backupsBuilder_ == null) {
        return backups_.get(index);  } else {
        return backupsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> 
         getBackupsOrBuilderList() {
      if (backupsBuilder_ != null) {
        return backupsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(backups_);
      }
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.Member.Builder addBackupsBuilder() {
      return getBackupsFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.distcache.v1.Member.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public com.fluxninja.generated.aperture.distcache.v1.Member.Builder addBackupsBuilder(
        int index) {
      return getBackupsFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.distcache.v1.Member.getDefaultInstance());
    }
    /**
     * <code>repeated .aperture.distcache.v1.Member backups = 2 [json_name = "Backups"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.distcache.v1.Member.Builder> 
         getBackupsBuilderList() {
      return getBackupsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.distcache.v1.Member, com.fluxninja.generated.aperture.distcache.v1.Member.Builder, com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder> 
        getBackupsFieldBuilder() {
      if (backupsBuilder_ == null) {
        backupsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.distcache.v1.Member, com.fluxninja.generated.aperture.distcache.v1.Member.Builder, com.fluxninja.generated.aperture.distcache.v1.MemberOrBuilder>(
                backups_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        backups_ = null;
      }
      return backupsBuilder_;
    }

    private long length_ ;
    /**
     * <code>int64 length = 3 [json_name = "Length"];</code>
     * @return The length.
     */
    @java.lang.Override
    public long getLength() {
      return length_;
    }
    /**
     * <code>int64 length = 3 [json_name = "Length"];</code>
     * @param value The length to set.
     * @return This builder for chaining.
     */
    public Builder setLength(long value) {
      
      length_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int64 length = 3 [json_name = "Length"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLength() {
      
      length_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> dMaps_;
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>
    internalGetDMaps() {
      if (dMaps_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            DMapsDefaultEntryHolder.defaultEntry);
      }
      return dMaps_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>
    internalGetMutableDMaps() {
      onChanged();;
      if (dMaps_ == null) {
        dMaps_ = com.google.protobuf.MapField.newMapField(
            DMapsDefaultEntryHolder.defaultEntry);
      }
      if (!dMaps_.isMutable()) {
        dMaps_ = dMaps_.copy();
      }
      return dMaps_;
    }

    public int getDMapsCount() {
      return internalGetDMaps().getMap().size();
    }
    /**
     * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
     */

    @java.lang.Override
    public boolean containsDMaps(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetDMaps().getMap().containsKey(key);
    }
    /**
     * Use {@link #getDMapsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> getDMaps() {
      return getDMapsMap();
    }
    /**
     * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> getDMapsMap() {
      return internalGetDMaps().getMap();
    }
    /**
     * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.distcache.v1.DMap getDMapsOrDefault(
        java.lang.String key,
        com.fluxninja.generated.aperture.distcache.v1.DMap defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> map =
          internalGetDMaps().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.distcache.v1.DMap getDMapsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> map =
          internalGetDMaps().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearDMaps() {
      internalGetMutableDMaps().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
     */

    public Builder removeDMaps(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableDMaps().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap>
    getMutableDMaps() {
      return internalGetMutableDMaps().getMutableMap();
    }
    /**
     * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
     */
    public Builder putDMaps(
        java.lang.String key,
        com.fluxninja.generated.aperture.distcache.v1.DMap value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableDMaps().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <code>map&lt;string, .aperture.distcache.v1.DMap&gt; d_maps = 4 [json_name = "DMaps"];</code>
     */

    public Builder putAllDMaps(
        java.util.Map<java.lang.String, com.fluxninja.generated.aperture.distcache.v1.DMap> values) {
      internalGetMutableDMaps().getMutableMap()
          .putAll(values);
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.distcache.v1.Partition)
  }

  // @@protoc_insertion_point(class_scope:aperture.distcache.v1.Partition)
  private static final com.fluxninja.generated.aperture.distcache.v1.Partition DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.distcache.v1.Partition();
  }

  public static com.fluxninja.generated.aperture.distcache.v1.Partition getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Partition>
      PARSER = new com.google.protobuf.AbstractParser<Partition>() {
    @java.lang.Override
    public Partition parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Partition(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Partition> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Partition> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.distcache.v1.Partition getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

