// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/flowcontrol/preview/v1/preview.proto

package com.fluxninja.generated.aperture.flowcontrol.preview.v1;

public interface PreviewRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.flowcontrol.preview.v1.PreviewRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Number of samples to collect.
   * </pre>
   *
   * <code>int64 samples = 1 [json_name = "samples", (.validate.rules) = { ... }</code>
   * @return The samples.
   */
  long getSamples();

  /**
   * <pre>
   * Control point to preview.
   * </pre>
   *
   * <code>string control_point = 2 [json_name = "controlPoint", (.validate.rules) = { ... }</code>
   * @return The controlPoint.
   */
  java.lang.String getControlPoint();
  /**
   * <pre>
   * Control point to preview.
   * </pre>
   *
   * <code>string control_point = 2 [json_name = "controlPoint", (.validate.rules) = { ... }</code>
   * @return The bytes for controlPoint.
   */
  com.google.protobuf.ByteString
      getControlPointBytes();

  /**
   * <pre>
   * Service to preview.
   * </pre>
   *
   * <code>string service = 3 [json_name = "service", (.validate.rules) = { ... }</code>
   * @return The service.
   */
  java.lang.String getService();
  /**
   * <pre>
   * Service to preview.
   * </pre>
   *
   * <code>string service = 3 [json_name = "service", (.validate.rules) = { ... }</code>
   * @return The bytes for service.
   */
  com.google.protobuf.ByteString
      getServiceBytes();

  /**
   * <pre>
   * Flow labels to match. Optional parameter for advanced filtering.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   * @return Whether the labelMatcher field is set.
   */
  boolean hasLabelMatcher();
  /**
   * <pre>
   * Flow labels to match. Optional parameter for advanced filtering.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   * @return The labelMatcher.
   */
  com.fluxninja.generated.aperture.policy.language.v1.LabelMatcher getLabelMatcher();
  /**
   * <pre>
   * Flow labels to match. Optional parameter for advanced filtering.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.LabelMatcher label_matcher = 4 [json_name = "labelMatcher"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.LabelMatcherOrBuilder getLabelMatcherOrBuilder();
}
