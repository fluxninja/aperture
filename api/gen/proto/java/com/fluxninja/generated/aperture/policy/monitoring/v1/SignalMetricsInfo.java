// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/monitoring/v1/signal_metrics.proto

package com.fluxninja.generated.aperture.policy.monitoring.v1;

/**
 * Protobuf type {@code aperture.policy.monitoring.v1.SignalMetricsInfo}
 */
public final class SignalMetricsInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.monitoring.v1.SignalMetricsInfo)
    SignalMetricsInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SignalMetricsInfo.newBuilder() to construct.
  private SignalMetricsInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SignalMetricsInfo() {
    policyName_ = "";
    policyHash_ = "";
    signalReading_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SignalMetricsInfo();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SignalMetricsInfo(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            policyName_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            policyHash_ = s;
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              signalReading_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading>();
              mutable_bitField0_ |= 0x00000001;
            }
            signalReading_.add(
                input.readMessage(com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        signalReading_ = java.util.Collections.unmodifiableList(signalReading_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsProto.internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsProto.internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo.class, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo.Builder.class);
  }

  public static final int POLICY_NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object policyName_;
  /**
   * <pre>
   * Name of the Policy.
   * </pre>
   *
   * <code>string policy_name = 1 [json_name = "policyName"];</code>
   * @return The policyName.
   */
  @java.lang.Override
  public java.lang.String getPolicyName() {
    java.lang.Object ref = policyName_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      policyName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Name of the Policy.
   * </pre>
   *
   * <code>string policy_name = 1 [json_name = "policyName"];</code>
   * @return The bytes for policyName.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPolicyNameBytes() {
    java.lang.Object ref = policyName_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      policyName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int POLICY_HASH_FIELD_NUMBER = 2;
  private volatile java.lang.Object policyHash_;
  /**
   * <pre>
   * Hash of the entire Policy spec.
   * </pre>
   *
   * <code>string policy_hash = 2 [json_name = "policyHash"];</code>
   * @return The policyHash.
   */
  @java.lang.Override
  public java.lang.String getPolicyHash() {
    java.lang.Object ref = policyHash_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      policyHash_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Hash of the entire Policy spec.
   * </pre>
   *
   * <code>string policy_hash = 2 [json_name = "policyHash"];</code>
   * @return The bytes for policyHash.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getPolicyHashBytes() {
    java.lang.Object ref = policyHash_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      policyHash_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SIGNAL_READING_FIELD_NUMBER = 3;
  private java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading> signalReading_;
  /**
   * <pre>
   * List of signals readings.
   * </pre>
   *
   * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading> getSignalReadingList() {
    return signalReading_;
  }
  /**
   * <pre>
   * List of signals readings.
   * </pre>
   *
   * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReadingOrBuilder> 
      getSignalReadingOrBuilderList() {
    return signalReading_;
  }
  /**
   * <pre>
   * List of signals readings.
   * </pre>
   *
   * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
   */
  @java.lang.Override
  public int getSignalReadingCount() {
    return signalReading_.size();
  }
  /**
   * <pre>
   * List of signals readings.
   * </pre>
   *
   * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading getSignalReading(int index) {
    return signalReading_.get(index);
  }
  /**
   * <pre>
   * List of signals readings.
   * </pre>
   *
   * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReadingOrBuilder getSignalReadingOrBuilder(
      int index) {
    return signalReading_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(policyName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, policyName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(policyHash_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, policyHash_);
    }
    for (int i = 0; i < signalReading_.size(); i++) {
      output.writeMessage(3, signalReading_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(policyName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, policyName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(policyHash_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, policyHash_);
    }
    for (int i = 0; i < signalReading_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, signalReading_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo other = (com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo) obj;

    if (!getPolicyName()
        .equals(other.getPolicyName())) return false;
    if (!getPolicyHash()
        .equals(other.getPolicyHash())) return false;
    if (!getSignalReadingList()
        .equals(other.getSignalReadingList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + POLICY_NAME_FIELD_NUMBER;
    hash = (53 * hash) + getPolicyName().hashCode();
    hash = (37 * hash) + POLICY_HASH_FIELD_NUMBER;
    hash = (53 * hash) + getPolicyHash().hashCode();
    if (getSignalReadingCount() > 0) {
      hash = (37 * hash) + SIGNAL_READING_FIELD_NUMBER;
      hash = (53 * hash) + getSignalReadingList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.policy.monitoring.v1.SignalMetricsInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.monitoring.v1.SignalMetricsInfo)
      com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsProto.internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsProto.internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo.class, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSignalReadingFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      policyName_ = "";

      policyHash_ = "";

      if (signalReadingBuilder_ == null) {
        signalReading_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        signalReadingBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsProto.internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo build() {
      com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo buildPartial() {
      com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo result = new com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo(this);
      int from_bitField0_ = bitField0_;
      result.policyName_ = policyName_;
      result.policyHash_ = policyHash_;
      if (signalReadingBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          signalReading_ = java.util.Collections.unmodifiableList(signalReading_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.signalReading_ = signalReading_;
      } else {
        result.signalReading_ = signalReadingBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo other) {
      if (other == com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo.getDefaultInstance()) return this;
      if (!other.getPolicyName().isEmpty()) {
        policyName_ = other.policyName_;
        onChanged();
      }
      if (!other.getPolicyHash().isEmpty()) {
        policyHash_ = other.policyHash_;
        onChanged();
      }
      if (signalReadingBuilder_ == null) {
        if (!other.signalReading_.isEmpty()) {
          if (signalReading_.isEmpty()) {
            signalReading_ = other.signalReading_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSignalReadingIsMutable();
            signalReading_.addAll(other.signalReading_);
          }
          onChanged();
        }
      } else {
        if (!other.signalReading_.isEmpty()) {
          if (signalReadingBuilder_.isEmpty()) {
            signalReadingBuilder_.dispose();
            signalReadingBuilder_ = null;
            signalReading_ = other.signalReading_;
            bitField0_ = (bitField0_ & ~0x00000001);
            signalReadingBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSignalReadingFieldBuilder() : null;
          } else {
            signalReadingBuilder_.addAllMessages(other.signalReading_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object policyName_ = "";
    /**
     * <pre>
     * Name of the Policy.
     * </pre>
     *
     * <code>string policy_name = 1 [json_name = "policyName"];</code>
     * @return The policyName.
     */
    public java.lang.String getPolicyName() {
      java.lang.Object ref = policyName_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        policyName_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Name of the Policy.
     * </pre>
     *
     * <code>string policy_name = 1 [json_name = "policyName"];</code>
     * @return The bytes for policyName.
     */
    public com.google.protobuf.ByteString
        getPolicyNameBytes() {
      java.lang.Object ref = policyName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        policyName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Name of the Policy.
     * </pre>
     *
     * <code>string policy_name = 1 [json_name = "policyName"];</code>
     * @param value The policyName to set.
     * @return This builder for chaining.
     */
    public Builder setPolicyName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      policyName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name of the Policy.
     * </pre>
     *
     * <code>string policy_name = 1 [json_name = "policyName"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPolicyName() {
      
      policyName_ = getDefaultInstance().getPolicyName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Name of the Policy.
     * </pre>
     *
     * <code>string policy_name = 1 [json_name = "policyName"];</code>
     * @param value The bytes for policyName to set.
     * @return This builder for chaining.
     */
    public Builder setPolicyNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      policyName_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object policyHash_ = "";
    /**
     * <pre>
     * Hash of the entire Policy spec.
     * </pre>
     *
     * <code>string policy_hash = 2 [json_name = "policyHash"];</code>
     * @return The policyHash.
     */
    public java.lang.String getPolicyHash() {
      java.lang.Object ref = policyHash_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        policyHash_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Hash of the entire Policy spec.
     * </pre>
     *
     * <code>string policy_hash = 2 [json_name = "policyHash"];</code>
     * @return The bytes for policyHash.
     */
    public com.google.protobuf.ByteString
        getPolicyHashBytes() {
      java.lang.Object ref = policyHash_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        policyHash_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Hash of the entire Policy spec.
     * </pre>
     *
     * <code>string policy_hash = 2 [json_name = "policyHash"];</code>
     * @param value The policyHash to set.
     * @return This builder for chaining.
     */
    public Builder setPolicyHash(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      policyHash_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Hash of the entire Policy spec.
     * </pre>
     *
     * <code>string policy_hash = 2 [json_name = "policyHash"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPolicyHash() {
      
      policyHash_ = getDefaultInstance().getPolicyHash();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Hash of the entire Policy spec.
     * </pre>
     *
     * <code>string policy_hash = 2 [json_name = "policyHash"];</code>
     * @param value The bytes for policyHash to set.
     * @return This builder for chaining.
     */
    public Builder setPolicyHashBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      policyHash_ = value;
      onChanged();
      return this;
    }

    private java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading> signalReading_ =
      java.util.Collections.emptyList();
    private void ensureSignalReadingIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        signalReading_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading>(signalReading_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReadingOrBuilder> signalReadingBuilder_;

    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading> getSignalReadingList() {
      if (signalReadingBuilder_ == null) {
        return java.util.Collections.unmodifiableList(signalReading_);
      } else {
        return signalReadingBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public int getSignalReadingCount() {
      if (signalReadingBuilder_ == null) {
        return signalReading_.size();
      } else {
        return signalReadingBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading getSignalReading(int index) {
      if (signalReadingBuilder_ == null) {
        return signalReading_.get(index);
      } else {
        return signalReadingBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder setSignalReading(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading value) {
      if (signalReadingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignalReadingIsMutable();
        signalReading_.set(index, value);
        onChanged();
      } else {
        signalReadingBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder setSignalReading(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder builderForValue) {
      if (signalReadingBuilder_ == null) {
        ensureSignalReadingIsMutable();
        signalReading_.set(index, builderForValue.build());
        onChanged();
      } else {
        signalReadingBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder addSignalReading(com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading value) {
      if (signalReadingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignalReadingIsMutable();
        signalReading_.add(value);
        onChanged();
      } else {
        signalReadingBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder addSignalReading(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading value) {
      if (signalReadingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignalReadingIsMutable();
        signalReading_.add(index, value);
        onChanged();
      } else {
        signalReadingBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder addSignalReading(
        com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder builderForValue) {
      if (signalReadingBuilder_ == null) {
        ensureSignalReadingIsMutable();
        signalReading_.add(builderForValue.build());
        onChanged();
      } else {
        signalReadingBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder addSignalReading(
        int index, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder builderForValue) {
      if (signalReadingBuilder_ == null) {
        ensureSignalReadingIsMutable();
        signalReading_.add(index, builderForValue.build());
        onChanged();
      } else {
        signalReadingBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder addAllSignalReading(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading> values) {
      if (signalReadingBuilder_ == null) {
        ensureSignalReadingIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, signalReading_);
        onChanged();
      } else {
        signalReadingBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder clearSignalReading() {
      if (signalReadingBuilder_ == null) {
        signalReading_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        signalReadingBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public Builder removeSignalReading(int index) {
      if (signalReadingBuilder_ == null) {
        ensureSignalReadingIsMutable();
        signalReading_.remove(index);
        onChanged();
      } else {
        signalReadingBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder getSignalReadingBuilder(
        int index) {
      return getSignalReadingFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReadingOrBuilder getSignalReadingOrBuilder(
        int index) {
      if (signalReadingBuilder_ == null) {
        return signalReading_.get(index);  } else {
        return signalReadingBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReadingOrBuilder> 
         getSignalReadingOrBuilderList() {
      if (signalReadingBuilder_ != null) {
        return signalReadingBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(signalReading_);
      }
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder addSignalReadingBuilder() {
      return getSignalReadingFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.getDefaultInstance());
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder addSignalReadingBuilder(
        int index) {
      return getSignalReadingFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.getDefaultInstance());
    }
    /**
     * <pre>
     * List of signals readings.
     * </pre>
     *
     * <code>repeated .aperture.policy.monitoring.v1.SignalReading signal_reading = 3 [json_name = "signalReading"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder> 
         getSignalReadingBuilderList() {
      return getSignalReadingFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReadingOrBuilder> 
        getSignalReadingFieldBuilder() {
      if (signalReadingBuilder_ == null) {
        signalReadingBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReading.Builder, com.fluxninja.generated.aperture.policy.monitoring.v1.SignalReadingOrBuilder>(
                signalReading_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        signalReading_ = null;
      }
      return signalReadingBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.monitoring.v1.SignalMetricsInfo)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.monitoring.v1.SignalMetricsInfo)
  private static final com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo();
  }

  public static com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SignalMetricsInfo>
      PARSER = new com.google.protobuf.AbstractParser<SignalMetricsInfo>() {
    @java.lang.Override
    public SignalMetricsInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SignalMetricsInfo(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SignalMetricsInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SignalMetricsInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.monitoring.v1.SignalMetricsInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

