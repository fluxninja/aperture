// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/monitoring/v1/signal_metrics.proto

package com.fluxninja.generated.aperture.policy.monitoring.v1;

public final class SignalMetricsProto {
  private SignalMetricsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_policy_monitoring_v1_SignalReading_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_policy_monitoring_v1_SignalReading_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n2aperture/policy/monitoring/v1/signal_m" +
      "etrics.proto\022\035aperture.policy.monitoring" +
      ".v1\"\252\001\n\021SignalMetricsInfo\022\037\n\013policy_name" +
      "\030\001 \001(\tR\npolicyName\022\037\n\013policy_hash\030\002 \001(\tR" +
      "\npolicyHash\022S\n\016signal_reading\030\003 \003(\0132,.ap" +
      "erture.policy.monitoring.v1.SignalReadin" +
      "gR\rsignalReading\"\\\n\rSignalReading\022\037\n\013sig" +
      "nal_name\030\001 \001(\tR\nsignalName\022\024\n\005valid\030\002 \001(" +
      "\010R\005valid\022\024\n\005value\030\003 \001(\001R\005valueB\275\002\n5com.f" +
      "luxninja.generated.aperture.policy.monit" +
      "oring.v1B\022SignalMetricsProtoP\001ZYgithub.c" +
      "om/fluxninja/aperture/api/gen/proto/go/a" +
      "perture/policy/monitoring/v1;monitoringv" +
      "1\242\002\003APM\252\002\035Aperture.Policy.Monitoring.V1\312" +
      "\002\035Aperture\\Policy\\Monitoring\\V1\342\002)Apertu" +
      "re\\Policy\\Monitoring\\V1\\GPBMetadata\352\002 Ap" +
      "erture::Policy::Monitoring::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_policy_monitoring_v1_SignalMetricsInfo_descriptor,
        new java.lang.String[] { "PolicyName", "PolicyHash", "SignalReading", });
    internal_static_aperture_policy_monitoring_v1_SignalReading_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_aperture_policy_monitoring_v1_SignalReading_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_policy_monitoring_v1_SignalReading_descriptor,
        new java.lang.String[] { "SignalName", "Valid", "Value", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
