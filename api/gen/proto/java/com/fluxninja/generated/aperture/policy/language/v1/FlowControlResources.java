// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * FlowControl Resources
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.FlowControlResources}
 */
public final class FlowControlResources extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.FlowControlResources)
    FlowControlResourcesOrBuilder {
private static final long serialVersionUID = 0L;
  // Use FlowControlResources.newBuilder() to construct.
  private FlowControlResources(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private FlowControlResources() {
    classifiers_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new FlowControlResources();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private FlowControlResources(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              fluxMeters_ = com.google.protobuf.MapField.newMapField(
                  FluxMetersDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter>
            fluxMeters__ = input.readMessage(
                FluxMetersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            fluxMeters_.getMutableMap().put(
                fluxMeters__.getKey(), fluxMeters__.getValue());
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) != 0)) {
              classifiers_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.Classifier>();
              mutable_bitField0_ |= 0x00000002;
            }
            classifiers_.add(
                input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Classifier.parser(), extensionRegistry));
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) != 0)) {
        classifiers_ = java.util.Collections.unmodifiableList(classifiers_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControlResources_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 1:
        return internalGetFluxMeters();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControlResources_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources.class, com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources.Builder.class);
  }

  public static final int FLUX_METERS_FIELD_NUMBER = 1;
  private static final class FluxMetersDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter>newDefaultInstance(
                com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControlResources_FluxMetersEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.fluxninja.generated.aperture.policy.language.v1.FluxMeter.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> fluxMeters_;
  private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter>
  internalGetFluxMeters() {
    if (fluxMeters_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          FluxMetersDefaultEntryHolder.defaultEntry);
    }
    return fluxMeters_;
  }

  public int getFluxMetersCount() {
    return internalGetFluxMeters().getMap().size();
  }
  /**
   * <pre>
   * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
   * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
   */

  @java.lang.Override
  public boolean containsFluxMeters(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetFluxMeters().getMap().containsKey(key);
  }
  /**
   * Use {@link #getFluxMetersMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> getFluxMeters() {
    return getFluxMetersMap();
  }
  /**
   * <pre>
   * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
   * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> getFluxMetersMap() {
    return internalGetFluxMeters().getMap();
  }
  /**
   * <pre>
   * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
   * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter getFluxMetersOrDefault(
      java.lang.String key,
      com.fluxninja.generated.aperture.policy.language.v1.FluxMeter defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> map =
        internalGetFluxMeters().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
   * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
   */
  @java.lang.Override

  public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter getFluxMetersOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> map =
        internalGetFluxMeters().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int CLASSIFIERS_FIELD_NUMBER = 2;
  private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Classifier> classifiers_;
  /**
   * <pre>
   * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
   * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
   */
  @java.lang.Override
  public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Classifier> getClassifiersList() {
    return classifiers_;
  }
  /**
   * <pre>
   * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
   * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder> 
      getClassifiersOrBuilderList() {
    return classifiers_;
  }
  /**
   * <pre>
   * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
   * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
   */
  @java.lang.Override
  public int getClassifiersCount() {
    return classifiers_.size();
  }
  /**
   * <pre>
   * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
   * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Classifier getClassifiers(int index) {
    return classifiers_.get(index);
  }
  /**
   * <pre>
   * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
   * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
   * </pre>
   *
   * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder getClassifiersOrBuilder(
      int index) {
    return classifiers_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetFluxMeters(),
        FluxMetersDefaultEntryHolder.defaultEntry,
        1);
    for (int i = 0; i < classifiers_.size(); i++) {
      output.writeMessage(2, classifiers_.get(i));
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (java.util.Map.Entry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> entry
         : internalGetFluxMeters().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter>
      fluxMeters__ = FluxMetersDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, fluxMeters__);
    }
    for (int i = 0; i < classifiers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, classifiers_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources other = (com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources) obj;

    if (!internalGetFluxMeters().equals(
        other.internalGetFluxMeters())) return false;
    if (!getClassifiersList()
        .equals(other.getClassifiersList())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (!internalGetFluxMeters().getMap().isEmpty()) {
      hash = (37 * hash) + FLUX_METERS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetFluxMeters().hashCode();
    }
    if (getClassifiersCount() > 0) {
      hash = (37 * hash) + CLASSIFIERS_FIELD_NUMBER;
      hash = (53 * hash) + getClassifiersList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * FlowControl Resources
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.FlowControlResources}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.FlowControlResources)
      com.fluxninja.generated.aperture.policy.language.v1.FlowControlResourcesOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControlResources_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetFluxMeters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 1:
          return internalGetMutableFluxMeters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControlResources_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources.class, com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getClassifiersFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      internalGetMutableFluxMeters().clear();
      if (classifiersBuilder_ == null) {
        classifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        classifiersBuilder_.clear();
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowcontrolProto.internal_static_aperture_policy_language_v1_FlowControlResources_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources build() {
      com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources result = new com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources(this);
      int from_bitField0_ = bitField0_;
      result.fluxMeters_ = internalGetFluxMeters();
      result.fluxMeters_.makeImmutable();
      if (classifiersBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          classifiers_ = java.util.Collections.unmodifiableList(classifiers_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.classifiers_ = classifiers_;
      } else {
        result.classifiers_ = classifiersBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources.getDefaultInstance()) return this;
      internalGetMutableFluxMeters().mergeFrom(
          other.internalGetFluxMeters());
      if (classifiersBuilder_ == null) {
        if (!other.classifiers_.isEmpty()) {
          if (classifiers_.isEmpty()) {
            classifiers_ = other.classifiers_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureClassifiersIsMutable();
            classifiers_.addAll(other.classifiers_);
          }
          onChanged();
        }
      } else {
        if (!other.classifiers_.isEmpty()) {
          if (classifiersBuilder_.isEmpty()) {
            classifiersBuilder_.dispose();
            classifiersBuilder_ = null;
            classifiers_ = other.classifiers_;
            bitField0_ = (bitField0_ & ~0x00000002);
            classifiersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getClassifiersFieldBuilder() : null;
          } else {
            classifiersBuilder_.addAllMessages(other.classifiers_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.MapField<
        java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> fluxMeters_;
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter>
    internalGetFluxMeters() {
      if (fluxMeters_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            FluxMetersDefaultEntryHolder.defaultEntry);
      }
      return fluxMeters_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter>
    internalGetMutableFluxMeters() {
      onChanged();;
      if (fluxMeters_ == null) {
        fluxMeters_ = com.google.protobuf.MapField.newMapField(
            FluxMetersDefaultEntryHolder.defaultEntry);
      }
      if (!fluxMeters_.isMutable()) {
        fluxMeters_ = fluxMeters_.copy();
      }
      return fluxMeters_;
    }

    public int getFluxMetersCount() {
      return internalGetFluxMeters().getMap().size();
    }
    /**
     * <pre>
     * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
     * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
     */

    @java.lang.Override
    public boolean containsFluxMeters(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetFluxMeters().getMap().containsKey(key);
    }
    /**
     * Use {@link #getFluxMetersMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> getFluxMeters() {
      return getFluxMetersMap();
    }
    /**
     * <pre>
     * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
     * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> getFluxMetersMap() {
      return internalGetFluxMeters().getMap();
    }
    /**
     * <pre>
     * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
     * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter getFluxMetersOrDefault(
        java.lang.String key,
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> map =
          internalGetFluxMeters().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
     * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
     */
    @java.lang.Override

    public com.fluxninja.generated.aperture.policy.language.v1.FluxMeter getFluxMetersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> map =
          internalGetFluxMeters().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearFluxMeters() {
      internalGetMutableFluxMeters().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
     * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
     */

    public Builder removeFluxMeters(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableFluxMeters().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter>
    getMutableFluxMeters() {
      return internalGetMutableFluxMeters().getMutableMap();
    }
    /**
     * <pre>
     * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
     * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
     */
    public Builder putFluxMeters(
        java.lang.String key,
        com.fluxninja.generated.aperture.policy.language.v1.FluxMeter value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableFluxMeters().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
     * Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
     * </pre>
     *
     * <code>map&lt;string, .aperture.policy.language.v1.FluxMeter&gt; flux_meters = 1 [json_name = "fluxMeters"];</code>
     */

    public Builder putAllFluxMeters(
        java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.FluxMeter> values) {
      internalGetMutableFluxMeters().getMutableMap()
          .putAll(values);
      return this;
    }

    private java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Classifier> classifiers_ =
      java.util.Collections.emptyList();
    private void ensureClassifiersIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        classifiers_ = new java.util.ArrayList<com.fluxninja.generated.aperture.policy.language.v1.Classifier>(classifiers_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Classifier, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder, com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder> classifiersBuilder_;

    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Classifier> getClassifiersList() {
      if (classifiersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(classifiers_);
      } else {
        return classifiersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public int getClassifiersCount() {
      if (classifiersBuilder_ == null) {
        return classifiers_.size();
      } else {
        return classifiersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier getClassifiers(int index) {
      if (classifiersBuilder_ == null) {
        return classifiers_.get(index);
      } else {
        return classifiersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder setClassifiers(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Classifier value) {
      if (classifiersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClassifiersIsMutable();
        classifiers_.set(index, value);
        onChanged();
      } else {
        classifiersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder setClassifiers(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder builderForValue) {
      if (classifiersBuilder_ == null) {
        ensureClassifiersIsMutable();
        classifiers_.set(index, builderForValue.build());
        onChanged();
      } else {
        classifiersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder addClassifiers(com.fluxninja.generated.aperture.policy.language.v1.Classifier value) {
      if (classifiersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClassifiersIsMutable();
        classifiers_.add(value);
        onChanged();
      } else {
        classifiersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder addClassifiers(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Classifier value) {
      if (classifiersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClassifiersIsMutable();
        classifiers_.add(index, value);
        onChanged();
      } else {
        classifiersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder addClassifiers(
        com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder builderForValue) {
      if (classifiersBuilder_ == null) {
        ensureClassifiersIsMutable();
        classifiers_.add(builderForValue.build());
        onChanged();
      } else {
        classifiersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder addClassifiers(
        int index, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder builderForValue) {
      if (classifiersBuilder_ == null) {
        ensureClassifiersIsMutable();
        classifiers_.add(index, builderForValue.build());
        onChanged();
      } else {
        classifiersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder addAllClassifiers(
        java.lang.Iterable<? extends com.fluxninja.generated.aperture.policy.language.v1.Classifier> values) {
      if (classifiersBuilder_ == null) {
        ensureClassifiersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, classifiers_);
        onChanged();
      } else {
        classifiersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder clearClassifiers() {
      if (classifiersBuilder_ == null) {
        classifiers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        classifiersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public Builder removeClassifiers(int index) {
      if (classifiersBuilder_ == null) {
        ensureClassifiersIsMutable();
        classifiers_.remove(index);
        onChanged();
      } else {
        classifiersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder getClassifiersBuilder(
        int index) {
      return getClassifiersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder getClassifiersOrBuilder(
        int index) {
      if (classifiersBuilder_ == null) {
        return classifiers_.get(index);  } else {
        return classifiersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public java.util.List<? extends com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder> 
         getClassifiersOrBuilderList() {
      if (classifiersBuilder_ != null) {
        return classifiersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(classifiers_);
      }
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder addClassifiersBuilder() {
      return getClassifiersFieldBuilder().addBuilder(
          com.fluxninja.generated.aperture.policy.language.v1.Classifier.getDefaultInstance());
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder addClassifiersBuilder(
        int index) {
      return getClassifiersFieldBuilder().addBuilder(
          index, com.fluxninja.generated.aperture.policy.language.v1.Classifier.getDefaultInstance());
    }
    /**
     * <pre>
     * Classifiers are installed in the data-plane and are used to label the requests based on payload content.
     * The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
     * </pre>
     *
     * <code>repeated .aperture.policy.language.v1.Classifier classifiers = 2 [json_name = "classifiers"];</code>
     */
    public java.util.List<com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder> 
         getClassifiersBuilderList() {
      return getClassifiersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Classifier, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder, com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder> 
        getClassifiersFieldBuilder() {
      if (classifiersBuilder_ == null) {
        classifiersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Classifier, com.fluxninja.generated.aperture.policy.language.v1.Classifier.Builder, com.fluxninja.generated.aperture.policy.language.v1.ClassifierOrBuilder>(
                classifiers_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        classifiers_ = null;
      }
      return classifiersBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.FlowControlResources)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.FlowControlResources)
  private static final com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<FlowControlResources>
      PARSER = new com.google.protobuf.AbstractParser<FlowControlResources>() {
    @java.lang.Override
    public FlowControlResources parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new FlowControlResources(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<FlowControlResources> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<FlowControlResources> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.FlowControlResources getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

