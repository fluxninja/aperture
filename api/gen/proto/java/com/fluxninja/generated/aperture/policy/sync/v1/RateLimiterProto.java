// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/sync/v1/rate_limiter.proto

package com.fluxninja.generated.aperture.policy.sync.v1;

public final class RateLimiterProto {
  private RateLimiterProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_policy_sync_v1_RateLimiterWrapper_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_policy_sync_v1_RateLimiterWrapper_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_policy_sync_v1_RateLimiterDynamicConfigWrapper_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_policy_sync_v1_RateLimiterDynamicConfigWrapper_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_policy_sync_v1_RateLimiterDecisionWrapper_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_policy_sync_v1_RateLimiterDecisionWrapper_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_aperture_policy_sync_v1_RateLimiterDecision_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_aperture_policy_sync_v1_RateLimiterDecision_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*aperture/policy/sync/v1/rate_limiter.p" +
      "roto\022\027aperture.policy.sync.v1\032(aperture/" +
      "policy/language/v1/policy.proto\032/apertur" +
      "e/policy/sync/v1/common_attributes.proto" +
      "\"\271\001\n\022RateLimiterWrapper\022V\n\021common_attrib" +
      "utes\030\001 \001(\0132).aperture.policy.sync.v1.Com" +
      "monAttributesR\020commonAttributes\022K\n\014rate_" +
      "limiter\030\002 \001(\0132(.aperture.policy.language" +
      ".v1.RateLimiterR\013rateLimiter\"\360\001\n\037RateLim" +
      "iterDynamicConfigWrapper\022V\n\021common_attri" +
      "butes\030\001 \001(\0132).aperture.policy.sync.v1.Co" +
      "mmonAttributesR\020commonAttributes\022u\n\033rate" +
      "_limiter_dynamic_config\030\002 \001(\01326.aperture" +
      ".policy.language.v1.RateLimiter.DynamicC" +
      "onfigR\030rateLimiterDynamicConfig\"\326\001\n\032Rate" +
      "LimiterDecisionWrapper\022V\n\021common_attribu" +
      "tes\030\001 \001(\0132).aperture.policy.sync.v1.Comm" +
      "onAttributesR\020commonAttributes\022`\n\025rate_l" +
      "imiter_decision\030\002 \001(\0132,.aperture.policy." +
      "sync.v1.RateLimiterDecisionR\023rateLimiter" +
      "Decision\"+\n\023RateLimiterDecision\022\024\n\005limit" +
      "\030\001 \001(\001R\005limitB\221\002\n/com.fluxninja.generate" +
      "d.aperture.policy.sync.v1B\020RateLimiterPr" +
      "otoP\001ZMgithub.com/fluxninja/aperture/api" +
      "/gen/proto/go/aperture/policy/sync/v1;sy" +
      "ncv1\242\002\003APS\252\002\027Aperture.Policy.Sync.V1\312\002\027A" +
      "perture\\Policy\\Sync\\V1\342\002#Aperture\\Policy" +
      "\\Sync\\V1\\GPBMetadata\352\002\032Aperture::Policy:" +
      ":Sync::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.getDescriptor(),
          com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributesProto.getDescriptor(),
        });
    internal_static_aperture_policy_sync_v1_RateLimiterWrapper_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_aperture_policy_sync_v1_RateLimiterWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_policy_sync_v1_RateLimiterWrapper_descriptor,
        new java.lang.String[] { "CommonAttributes", "RateLimiter", });
    internal_static_aperture_policy_sync_v1_RateLimiterDynamicConfigWrapper_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_aperture_policy_sync_v1_RateLimiterDynamicConfigWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_policy_sync_v1_RateLimiterDynamicConfigWrapper_descriptor,
        new java.lang.String[] { "CommonAttributes", "RateLimiterDynamicConfig", });
    internal_static_aperture_policy_sync_v1_RateLimiterDecisionWrapper_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_aperture_policy_sync_v1_RateLimiterDecisionWrapper_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_policy_sync_v1_RateLimiterDecisionWrapper_descriptor,
        new java.lang.String[] { "CommonAttributes", "RateLimiterDecision", });
    internal_static_aperture_policy_sync_v1_RateLimiterDecision_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_aperture_policy_sync_v1_RateLimiterDecision_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_aperture_policy_sync_v1_RateLimiterDecision_descriptor,
        new java.lang.String[] { "Limit", });
    com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.getDescriptor();
    com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributesProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
