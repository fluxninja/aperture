// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface RegoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.Rego)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to queries that define
   * how to extract and propagate flow labels with that key.
   * The name of the label maps to a variable in the rego module, i.e. it maps to `data.&lt;package&gt;.&lt;label&gt;` variable.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rego.LabelProperties&gt; labels = 1 [json_name = "labels"];</code>
   */
  int getLabelsCount();
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to queries that define
   * how to extract and propagate flow labels with that key.
   * The name of the label maps to a variable in the rego module, i.e. it maps to `data.&lt;package&gt;.&lt;label&gt;` variable.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rego.LabelProperties&gt; labels = 1 [json_name = "labels"];</code>
   */
  boolean containsLabels(
      java.lang.String key);
  /**
   * Use {@link #getLabelsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rego.LabelProperties>
  getLabels();
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to queries that define
   * how to extract and propagate flow labels with that key.
   * The name of the label maps to a variable in the rego module, i.e. it maps to `data.&lt;package&gt;.&lt;label&gt;` variable.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rego.LabelProperties&gt; labels = 1 [json_name = "labels"];</code>
   */
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rego.LabelProperties>
  getLabelsMap();
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to queries that define
   * how to extract and propagate flow labels with that key.
   * The name of the label maps to a variable in the rego module, i.e. it maps to `data.&lt;package&gt;.&lt;label&gt;` variable.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rego.LabelProperties&gt; labels = 1 [json_name = "labels"];</code>
   */

  /* nullable */
com.fluxninja.generated.aperture.policy.language.v1.Rego.LabelProperties getLabelsOrDefault(
      java.lang.String key,
      /* nullable */
com.fluxninja.generated.aperture.policy.language.v1.Rego.LabelProperties defaultValue);
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to queries that define
   * how to extract and propagate flow labels with that key.
   * The name of the label maps to a variable in the rego module, i.e. it maps to `data.&lt;package&gt;.&lt;label&gt;` variable.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rego.LabelProperties&gt; labels = 1 [json_name = "labels"];</code>
   */

  com.fluxninja.generated.aperture.policy.language.v1.Rego.LabelProperties getLabelsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Source code of the rego module.
   * :::Note
   * Must include a "package" declaration.
   * :::
   * </pre>
   *
   * <code>string module = 2 [json_name = "module"];</code>
   * @return The module.
   */
  java.lang.String getModule();
  /**
   * <pre>
   * Source code of the rego module.
   * :::Note
   * Must include a "package" declaration.
   * :::
   * </pre>
   *
   * <code>string module = 2 [json_name = "module"];</code>
   * @return The bytes for module.
   */
  com.google.protobuf.ByteString
      getModuleBytes();
}
