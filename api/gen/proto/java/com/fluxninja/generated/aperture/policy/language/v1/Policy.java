// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/policy.proto

package com.fluxninja.generated.aperture.policy.language.v1;

/**
 * <pre>
 * Policy expresses reliability automation workflow that automatically protects services
 * :::info
 * See also [Policy overview](/concepts/policy/policy.md).
 * :::
 * Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
 * </pre>
 *
 * Protobuf type {@code aperture.policy.language.v1.Policy}
 */
public final class Policy extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.language.v1.Policy)
    PolicyOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Policy.newBuilder() to construct.
  private Policy(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Policy() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Policy();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Policy(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.language.v1.Circuit.Builder subBuilder = null;
            if (circuit_ != null) {
              subBuilder = circuit_.toBuilder();
            }
            circuit_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Circuit.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(circuit_);
              circuit_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.Resources.Builder subBuilder = null;
            if (resources_ != null) {
              subBuilder = resources_.toBuilder();
            }
            resources_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.Resources.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(resources_);
              resources_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.language.v1.Policy.class, com.fluxninja.generated.aperture.policy.language.v1.Policy.Builder.class);
  }

  public static final int CIRCUIT_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.language.v1.Circuit circuit_;
  /**
   * <pre>
   * Defines the control-loop logic of the policy.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
   * @return Whether the circuit field is set.
   */
  @java.lang.Override
  public boolean hasCircuit() {
    return circuit_ != null;
  }
  /**
   * <pre>
   * Defines the control-loop logic of the policy.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
   * @return The circuit.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Circuit getCircuit() {
    return circuit_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Circuit.getDefaultInstance() : circuit_;
  }
  /**
   * <pre>
   * Defines the control-loop logic of the policy.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.CircuitOrBuilder getCircuitOrBuilder() {
    return getCircuit();
  }

  public static final int RESOURCES_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.policy.language.v1.Resources resources_;
  /**
   * <pre>
   * Resources (Flux Meters, Classifiers etc.) to setup.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
   * @return Whether the resources field is set.
   */
  @java.lang.Override
  public boolean hasResources() {
    return resources_ != null;
  }
  /**
   * <pre>
   * Resources (Flux Meters, Classifiers etc.) to setup.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
   * @return The resources.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Resources getResources() {
    return resources_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Resources.getDefaultInstance() : resources_;
  }
  /**
   * <pre>
   * Resources (Flux Meters, Classifiers etc.) to setup.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ResourcesOrBuilder getResourcesOrBuilder() {
    return getResources();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (circuit_ != null) {
      output.writeMessage(1, getCircuit());
    }
    if (resources_ != null) {
      output.writeMessage(2, getResources());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (circuit_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCircuit());
    }
    if (resources_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getResources());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.language.v1.Policy)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.language.v1.Policy other = (com.fluxninja.generated.aperture.policy.language.v1.Policy) obj;

    if (hasCircuit() != other.hasCircuit()) return false;
    if (hasCircuit()) {
      if (!getCircuit()
          .equals(other.getCircuit())) return false;
    }
    if (hasResources() != other.hasResources()) return false;
    if (hasResources()) {
      if (!getResources()
          .equals(other.getResources())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCircuit()) {
      hash = (37 * hash) + CIRCUIT_FIELD_NUMBER;
      hash = (53 * hash) + getCircuit().hashCode();
    }
    if (hasResources()) {
      hash = (37 * hash) + RESOURCES_FIELD_NUMBER;
      hash = (53 * hash) + getResources().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.language.v1.Policy parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.language.v1.Policy prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Policy expresses reliability automation workflow that automatically protects services
   * :::info
   * See also [Policy overview](/concepts/policy/policy.md).
   * :::
   * Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
   * </pre>
   *
   * Protobuf type {@code aperture.policy.language.v1.Policy}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.language.v1.Policy)
      com.fluxninja.generated.aperture.policy.language.v1.PolicyOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.language.v1.Policy.class, com.fluxninja.generated.aperture.policy.language.v1.Policy.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.language.v1.Policy.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (circuitBuilder_ == null) {
        circuit_ = null;
      } else {
        circuit_ = null;
        circuitBuilder_ = null;
      }
      if (resourcesBuilder_ == null) {
        resources_ = null;
      } else {
        resources_ = null;
        resourcesBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.PolicyProto.internal_static_aperture_policy_language_v1_Policy_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Policy getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.language.v1.Policy.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Policy build() {
      com.fluxninja.generated.aperture.policy.language.v1.Policy result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.language.v1.Policy buildPartial() {
      com.fluxninja.generated.aperture.policy.language.v1.Policy result = new com.fluxninja.generated.aperture.policy.language.v1.Policy(this);
      if (circuitBuilder_ == null) {
        result.circuit_ = circuit_;
      } else {
        result.circuit_ = circuitBuilder_.build();
      }
      if (resourcesBuilder_ == null) {
        result.resources_ = resources_;
      } else {
        result.resources_ = resourcesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.language.v1.Policy) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.language.v1.Policy)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.language.v1.Policy other) {
      if (other == com.fluxninja.generated.aperture.policy.language.v1.Policy.getDefaultInstance()) return this;
      if (other.hasCircuit()) {
        mergeCircuit(other.getCircuit());
      }
      if (other.hasResources()) {
        mergeResources(other.getResources());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.language.v1.Policy parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.language.v1.Policy) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.Circuit circuit_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Circuit, com.fluxninja.generated.aperture.policy.language.v1.Circuit.Builder, com.fluxninja.generated.aperture.policy.language.v1.CircuitOrBuilder> circuitBuilder_;
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     * @return Whether the circuit field is set.
     */
    public boolean hasCircuit() {
      return circuitBuilder_ != null || circuit_ != null;
    }
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     * @return The circuit.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Circuit getCircuit() {
      if (circuitBuilder_ == null) {
        return circuit_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Circuit.getDefaultInstance() : circuit_;
      } else {
        return circuitBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder setCircuit(com.fluxninja.generated.aperture.policy.language.v1.Circuit value) {
      if (circuitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        circuit_ = value;
        onChanged();
      } else {
        circuitBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder setCircuit(
        com.fluxninja.generated.aperture.policy.language.v1.Circuit.Builder builderForValue) {
      if (circuitBuilder_ == null) {
        circuit_ = builderForValue.build();
        onChanged();
      } else {
        circuitBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder mergeCircuit(com.fluxninja.generated.aperture.policy.language.v1.Circuit value) {
      if (circuitBuilder_ == null) {
        if (circuit_ != null) {
          circuit_ =
            com.fluxninja.generated.aperture.policy.language.v1.Circuit.newBuilder(circuit_).mergeFrom(value).buildPartial();
        } else {
          circuit_ = value;
        }
        onChanged();
      } else {
        circuitBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     */
    public Builder clearCircuit() {
      if (circuitBuilder_ == null) {
        circuit_ = null;
        onChanged();
      } else {
        circuit_ = null;
        circuitBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Circuit.Builder getCircuitBuilder() {
      
      onChanged();
      return getCircuitFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.CircuitOrBuilder getCircuitOrBuilder() {
      if (circuitBuilder_ != null) {
        return circuitBuilder_.getMessageOrBuilder();
      } else {
        return circuit_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.Circuit.getDefaultInstance() : circuit_;
      }
    }
    /**
     * <pre>
     * Defines the control-loop logic of the policy.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Circuit circuit = 1 [json_name = "circuit"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Circuit, com.fluxninja.generated.aperture.policy.language.v1.Circuit.Builder, com.fluxninja.generated.aperture.policy.language.v1.CircuitOrBuilder> 
        getCircuitFieldBuilder() {
      if (circuitBuilder_ == null) {
        circuitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Circuit, com.fluxninja.generated.aperture.policy.language.v1.Circuit.Builder, com.fluxninja.generated.aperture.policy.language.v1.CircuitOrBuilder>(
                getCircuit(),
                getParentForChildren(),
                isClean());
        circuit_ = null;
      }
      return circuitBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.Resources resources_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Resources, com.fluxninja.generated.aperture.policy.language.v1.Resources.Builder, com.fluxninja.generated.aperture.policy.language.v1.ResourcesOrBuilder> resourcesBuilder_;
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     * @return Whether the resources field is set.
     */
    public boolean hasResources() {
      return resourcesBuilder_ != null || resources_ != null;
    }
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     * @return The resources.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Resources getResources() {
      if (resourcesBuilder_ == null) {
        return resources_ == null ? com.fluxninja.generated.aperture.policy.language.v1.Resources.getDefaultInstance() : resources_;
      } else {
        return resourcesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     */
    public Builder setResources(com.fluxninja.generated.aperture.policy.language.v1.Resources value) {
      if (resourcesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        resources_ = value;
        onChanged();
      } else {
        resourcesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     */
    public Builder setResources(
        com.fluxninja.generated.aperture.policy.language.v1.Resources.Builder builderForValue) {
      if (resourcesBuilder_ == null) {
        resources_ = builderForValue.build();
        onChanged();
      } else {
        resourcesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     */
    public Builder mergeResources(com.fluxninja.generated.aperture.policy.language.v1.Resources value) {
      if (resourcesBuilder_ == null) {
        if (resources_ != null) {
          resources_ =
            com.fluxninja.generated.aperture.policy.language.v1.Resources.newBuilder(resources_).mergeFrom(value).buildPartial();
        } else {
          resources_ = value;
        }
        onChanged();
      } else {
        resourcesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     */
    public Builder clearResources() {
      if (resourcesBuilder_ == null) {
        resources_ = null;
        onChanged();
      } else {
        resources_ = null;
        resourcesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.Resources.Builder getResourcesBuilder() {
      
      onChanged();
      return getResourcesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ResourcesOrBuilder getResourcesOrBuilder() {
      if (resourcesBuilder_ != null) {
        return resourcesBuilder_.getMessageOrBuilder();
      } else {
        return resources_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.Resources.getDefaultInstance() : resources_;
      }
    }
    /**
     * <pre>
     * Resources (Flux Meters, Classifiers etc.) to setup.
     * </pre>
     *
     * <code>.aperture.policy.language.v1.Resources resources = 2 [json_name = "resources"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.Resources, com.fluxninja.generated.aperture.policy.language.v1.Resources.Builder, com.fluxninja.generated.aperture.policy.language.v1.ResourcesOrBuilder> 
        getResourcesFieldBuilder() {
      if (resourcesBuilder_ == null) {
        resourcesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.Resources, com.fluxninja.generated.aperture.policy.language.v1.Resources.Builder, com.fluxninja.generated.aperture.policy.language.v1.ResourcesOrBuilder>(
                getResources(),
                getParentForChildren(),
                isClean());
        resources_ = null;
      }
      return resourcesBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.language.v1.Policy)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.language.v1.Policy)
  private static final com.fluxninja.generated.aperture.policy.language.v1.Policy DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.language.v1.Policy();
  }

  public static com.fluxninja.generated.aperture.policy.language.v1.Policy getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Policy>
      PARSER = new com.google.protobuf.AbstractParser<Policy>() {
    @java.lang.Override
    public Policy parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Policy(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Policy> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Policy> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.Policy getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

