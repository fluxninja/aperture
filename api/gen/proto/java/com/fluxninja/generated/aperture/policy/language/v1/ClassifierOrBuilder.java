// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/language/v1/flowcontrol.proto

package com.fluxninja.generated.aperture.policy.language.v1;

public interface ClassifierOrBuilder extends
    // @@protoc_insertion_point(interface_extends:aperture.policy.language.v1.Classifier)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
   * @return Whether the flowSelector field is set.
   */
  boolean hasFlowSelector();
  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
   * @return The flowSelector.
   */
  com.fluxninja.generated.aperture.policy.language.v1.FlowSelector getFlowSelector();
  /**
   * <pre>
   * Defines where to apply the flow classification rule.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.FlowSelector flow_selector = 1 [json_name = "flowSelector"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.FlowSelectorOrBuilder getFlowSelectorOrBuilder();

  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  int getRulesCount();
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  boolean containsRules(
      java.lang.String key);
  /**
   * Use {@link #getRulesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>
  getRules();
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */
  java.util.Map<java.lang.String, com.fluxninja.generated.aperture.policy.language.v1.Rule>
  getRulesMap();
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */

  /* nullable */
com.fluxninja.generated.aperture.policy.language.v1.Rule getRulesOrDefault(
      java.lang.String key,
      /* nullable */
com.fluxninja.generated.aperture.policy.language.v1.Rule defaultValue);
  /**
   * <pre>
   * A map of {key, value} pairs mapping from
   * [flow label](/concepts/flow-control/flow-label.md) keys to rules that define
   * how to extract and propagate flow labels with that key.
   * </pre>
   *
   * <code>map&lt;string, .aperture.policy.language.v1.Rule&gt; rules = 2 [json_name = "rules"];</code>
   */

  com.fluxninja.generated.aperture.policy.language.v1.Rule getRulesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Rego based classification
   * Rego is a policy language used to express complex policies in a concise and declarative way.
   * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
   * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
   * @return Whether the rego field is set.
   */
  boolean hasRego();
  /**
   * <pre>
   * Rego based classification
   * Rego is a policy language used to express complex policies in a concise and declarative way.
   * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
   * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
   * @return The rego.
   */
  com.fluxninja.generated.aperture.policy.language.v1.Rego getRego();
  /**
   * <pre>
   * Rego based classification
   * Rego is a policy language used to express complex policies in a concise and declarative way.
   * It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
   * For simple cases, such as directly reading a value from header or a field from json body, declarative extractors are recommended.
   * </pre>
   *
   * <code>.aperture.policy.language.v1.Rego rego = 3 [json_name = "rego"];</code>
   */
  com.fluxninja.generated.aperture.policy.language.v1.RegoOrBuilder getRegoOrBuilder();
}
