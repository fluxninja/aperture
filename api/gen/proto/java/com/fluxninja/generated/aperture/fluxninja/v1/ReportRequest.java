// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/fluxninja/v1/heartbeat.proto

package com.fluxninja.generated.aperture.fluxninja.v1;

/**
 * Protobuf type {@code aperture.fluxninja.v1.ReportRequest}
 */
public final class ReportRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.fluxninja.v1.ReportRequest)
    ReportRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ReportRequest.newBuilder() to construct.
  private ReportRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ReportRequest() {
    agentGroup_ = "";
    installationMode_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ReportRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ReportRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.info.v1.VersionInfo.Builder subBuilder = null;
            if (versionInfo_ != null) {
              subBuilder = versionInfo_.toBuilder();
            }
            versionInfo_ = input.readMessage(com.fluxninja.generated.aperture.info.v1.VersionInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(versionInfo_);
              versionInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.info.v1.ProcessInfo.Builder subBuilder = null;
            if (processInfo_ != null) {
              subBuilder = processInfo_.toBuilder();
            }
            processInfo_ = input.readMessage(com.fluxninja.generated.aperture.info.v1.ProcessInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(processInfo_);
              processInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            com.fluxninja.generated.aperture.info.v1.HostInfo.Builder subBuilder = null;
            if (hostInfo_ != null) {
              subBuilder = hostInfo_.toBuilder();
            }
            hostInfo_ = input.readMessage(com.fluxninja.generated.aperture.info.v1.HostInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(hostInfo_);
              hostInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            agentGroup_ = s;
            break;
          }
          case 42: {
            com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.Builder subBuilder = null;
            if (controllerInfo_ != null) {
              subBuilder = controllerInfo_.toBuilder();
            }
            controllerInfo_ = input.readMessage(com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(controllerInfo_);
              controllerInfo_ = subBuilder.buildPartial();
            }

            break;
          }
          case 50: {
            com.fluxninja.generated.aperture.peers.v1.Peers.Builder subBuilder = null;
            if (peers_ != null) {
              subBuilder = peers_.toBuilder();
            }
            peers_ = input.readMessage(com.fluxninja.generated.aperture.peers.v1.Peers.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(peers_);
              peers_ = subBuilder.buildPartial();
            }

            break;
          }
          case 66: {
            com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.Builder subBuilder = null;
            if (servicesList_ != null) {
              subBuilder = servicesList_.toBuilder();
            }
            servicesList_ = input.readMessage(com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(servicesList_);
              servicesList_ = subBuilder.buildPartial();
            }

            break;
          }
          case 74: {
            com.fluxninja.generated.aperture.status.v1.GroupStatus.Builder subBuilder = null;
            if (allStatuses_ != null) {
              subBuilder = allStatuses_.toBuilder();
            }
            allStatuses_ = input.readMessage(com.fluxninja.generated.aperture.status.v1.GroupStatus.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(allStatuses_);
              allStatuses_ = subBuilder.buildPartial();
            }

            break;
          }
          case 82: {
            com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.Builder subBuilder = null;
            if (policies_ != null) {
              subBuilder = policies_.toBuilder();
            }
            policies_ = input.readMessage(com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(policies_);
              policies_ = subBuilder.buildPartial();
            }

            break;
          }
          case 90: {
            com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.Builder subBuilder = null;
            if (flowControlPoints_ != null) {
              subBuilder = flowControlPoints_.toBuilder();
            }
            flowControlPoints_ = input.readMessage(com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(flowControlPoints_);
              flowControlPoints_ = subBuilder.buildPartial();
            }

            break;
          }
          case 98: {
            com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.Builder subBuilder = null;
            if (autoScaleKubernetesControlPoints_ != null) {
              subBuilder = autoScaleKubernetesControlPoints_.toBuilder();
            }
            autoScaleKubernetesControlPoints_ = input.readMessage(com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(autoScaleKubernetesControlPoints_);
              autoScaleKubernetesControlPoints_ = subBuilder.buildPartial();
            }

            break;
          }
          case 106: {
            java.lang.String s = input.readStringRequireUtf8();

            installationMode_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.fluxninja.v1.HeartbeatProto.internal_static_aperture_fluxninja_v1_ReportRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.fluxninja.v1.HeartbeatProto.internal_static_aperture_fluxninja_v1_ReportRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest.class, com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest.Builder.class);
  }

  public static final int VERSION_INFO_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.info.v1.VersionInfo versionInfo_;
  /**
   * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
   * @return Whether the versionInfo field is set.
   */
  @java.lang.Override
  public boolean hasVersionInfo() {
    return versionInfo_ != null;
  }
  /**
   * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
   * @return The versionInfo.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.info.v1.VersionInfo getVersionInfo() {
    return versionInfo_ == null ? com.fluxninja.generated.aperture.info.v1.VersionInfo.getDefaultInstance() : versionInfo_;
  }
  /**
   * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.info.v1.VersionInfoOrBuilder getVersionInfoOrBuilder() {
    return getVersionInfo();
  }

  public static final int PROCESS_INFO_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.info.v1.ProcessInfo processInfo_;
  /**
   * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
   * @return Whether the processInfo field is set.
   */
  @java.lang.Override
  public boolean hasProcessInfo() {
    return processInfo_ != null;
  }
  /**
   * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
   * @return The processInfo.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.info.v1.ProcessInfo getProcessInfo() {
    return processInfo_ == null ? com.fluxninja.generated.aperture.info.v1.ProcessInfo.getDefaultInstance() : processInfo_;
  }
  /**
   * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.info.v1.ProcessInfoOrBuilder getProcessInfoOrBuilder() {
    return getProcessInfo();
  }

  public static final int HOST_INFO_FIELD_NUMBER = 3;
  private com.fluxninja.generated.aperture.info.v1.HostInfo hostInfo_;
  /**
   * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
   * @return Whether the hostInfo field is set.
   */
  @java.lang.Override
  public boolean hasHostInfo() {
    return hostInfo_ != null;
  }
  /**
   * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
   * @return The hostInfo.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.info.v1.HostInfo getHostInfo() {
    return hostInfo_ == null ? com.fluxninja.generated.aperture.info.v1.HostInfo.getDefaultInstance() : hostInfo_;
  }
  /**
   * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.info.v1.HostInfoOrBuilder getHostInfoOrBuilder() {
    return getHostInfo();
  }

  public static final int AGENT_GROUP_FIELD_NUMBER = 4;
  private volatile java.lang.Object agentGroup_;
  /**
   * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
   * @return The agentGroup.
   */
  @java.lang.Override
  public java.lang.String getAgentGroup() {
    java.lang.Object ref = agentGroup_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      agentGroup_ = s;
      return s;
    }
  }
  /**
   * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
   * @return The bytes for agentGroup.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAgentGroupBytes() {
    java.lang.Object ref = agentGroup_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      agentGroup_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CONTROLLER_INFO_FIELD_NUMBER = 5;
  private com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo controllerInfo_;
  /**
   * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
   * @return Whether the controllerInfo field is set.
   */
  @java.lang.Override
  public boolean hasControllerInfo() {
    return controllerInfo_ != null;
  }
  /**
   * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
   * @return The controllerInfo.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo getControllerInfo() {
    return controllerInfo_ == null ? com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.getDefaultInstance() : controllerInfo_;
  }
  /**
   * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfoOrBuilder getControllerInfoOrBuilder() {
    return getControllerInfo();
  }

  public static final int PEERS_FIELD_NUMBER = 6;
  private com.fluxninja.generated.aperture.peers.v1.Peers peers_;
  /**
   * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
   * @return Whether the peers field is set.
   */
  @java.lang.Override
  public boolean hasPeers() {
    return peers_ != null;
  }
  /**
   * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
   * @return The peers.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.peers.v1.Peers getPeers() {
    return peers_ == null ? com.fluxninja.generated.aperture.peers.v1.Peers.getDefaultInstance() : peers_;
  }
  /**
   * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.peers.v1.PeersOrBuilder getPeersOrBuilder() {
    return getPeers();
  }

  public static final int SERVICES_LIST_FIELD_NUMBER = 8;
  private com.fluxninja.generated.aperture.fluxninja.v1.ServicesList servicesList_;
  /**
   * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
   * @return Whether the servicesList field is set.
   */
  @java.lang.Override
  public boolean hasServicesList() {
    return servicesList_ != null;
  }
  /**
   * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
   * @return The servicesList.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.fluxninja.v1.ServicesList getServicesList() {
    return servicesList_ == null ? com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.getDefaultInstance() : servicesList_;
  }
  /**
   * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.fluxninja.v1.ServicesListOrBuilder getServicesListOrBuilder() {
    return getServicesList();
  }

  public static final int ALL_STATUSES_FIELD_NUMBER = 9;
  private com.fluxninja.generated.aperture.status.v1.GroupStatus allStatuses_;
  /**
   * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
   * @return Whether the allStatuses field is set.
   */
  @java.lang.Override
  public boolean hasAllStatuses() {
    return allStatuses_ != null;
  }
  /**
   * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
   * @return The allStatuses.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.status.v1.GroupStatus getAllStatuses() {
    return allStatuses_ == null ? com.fluxninja.generated.aperture.status.v1.GroupStatus.getDefaultInstance() : allStatuses_;
  }
  /**
   * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.status.v1.GroupStatusOrBuilder getAllStatusesOrBuilder() {
    return getAllStatuses();
  }

  public static final int POLICIES_FIELD_NUMBER = 10;
  private com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers policies_;
  /**
   * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
   * @return Whether the policies field is set.
   */
  @java.lang.Override
  public boolean hasPolicies() {
    return policies_ != null;
  }
  /**
   * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
   * @return The policies.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers getPolicies() {
    return policies_ == null ? com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.getDefaultInstance() : policies_;
  }
  /**
   * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappersOrBuilder getPoliciesOrBuilder() {
    return getPolicies();
  }

  public static final int FLOW_CONTROL_POINTS_FIELD_NUMBER = 11;
  private com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flowControlPoints_;
  /**
   * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
   * @return Whether the flowControlPoints field is set.
   */
  @java.lang.Override
  public boolean hasFlowControlPoints() {
    return flowControlPoints_ != null;
  }
  /**
   * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
   * @return The flowControlPoints.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints getFlowControlPoints() {
    return flowControlPoints_ == null ? com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.getDefaultInstance() : flowControlPoints_;
  }
  /**
   * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPointsOrBuilder getFlowControlPointsOrBuilder() {
    return getFlowControlPoints();
  }

  public static final int AUTO_SCALE_KUBERNETES_CONTROL_POINTS_FIELD_NUMBER = 12;
  private com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints autoScaleKubernetesControlPoints_;
  /**
   * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
   * @return Whether the autoScaleKubernetesControlPoints field is set.
   */
  @java.lang.Override
  public boolean hasAutoScaleKubernetesControlPoints() {
    return autoScaleKubernetesControlPoints_ != null;
  }
  /**
   * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
   * @return The autoScaleKubernetesControlPoints.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints getAutoScaleKubernetesControlPoints() {
    return autoScaleKubernetesControlPoints_ == null ? com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.getDefaultInstance() : autoScaleKubernetesControlPoints_;
  }
  /**
   * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPointsOrBuilder getAutoScaleKubernetesControlPointsOrBuilder() {
    return getAutoScaleKubernetesControlPoints();
  }

  public static final int INSTALLATION_MODE_FIELD_NUMBER = 13;
  private volatile java.lang.Object installationMode_;
  /**
   * <code>string installation_mode = 13 [json_name = "installationMode"];</code>
   * @return The installationMode.
   */
  @java.lang.Override
  public java.lang.String getInstallationMode() {
    java.lang.Object ref = installationMode_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      installationMode_ = s;
      return s;
    }
  }
  /**
   * <code>string installation_mode = 13 [json_name = "installationMode"];</code>
   * @return The bytes for installationMode.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getInstallationModeBytes() {
    java.lang.Object ref = installationMode_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      installationMode_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (versionInfo_ != null) {
      output.writeMessage(1, getVersionInfo());
    }
    if (processInfo_ != null) {
      output.writeMessage(2, getProcessInfo());
    }
    if (hostInfo_ != null) {
      output.writeMessage(3, getHostInfo());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(agentGroup_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, agentGroup_);
    }
    if (controllerInfo_ != null) {
      output.writeMessage(5, getControllerInfo());
    }
    if (peers_ != null) {
      output.writeMessage(6, getPeers());
    }
    if (servicesList_ != null) {
      output.writeMessage(8, getServicesList());
    }
    if (allStatuses_ != null) {
      output.writeMessage(9, getAllStatuses());
    }
    if (policies_ != null) {
      output.writeMessage(10, getPolicies());
    }
    if (flowControlPoints_ != null) {
      output.writeMessage(11, getFlowControlPoints());
    }
    if (autoScaleKubernetesControlPoints_ != null) {
      output.writeMessage(12, getAutoScaleKubernetesControlPoints());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(installationMode_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 13, installationMode_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (versionInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getVersionInfo());
    }
    if (processInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getProcessInfo());
    }
    if (hostInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getHostInfo());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(agentGroup_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, agentGroup_);
    }
    if (controllerInfo_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getControllerInfo());
    }
    if (peers_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getPeers());
    }
    if (servicesList_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getServicesList());
    }
    if (allStatuses_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getAllStatuses());
    }
    if (policies_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getPolicies());
    }
    if (flowControlPoints_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getFlowControlPoints());
    }
    if (autoScaleKubernetesControlPoints_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getAutoScaleKubernetesControlPoints());
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(installationMode_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, installationMode_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest other = (com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest) obj;

    if (hasVersionInfo() != other.hasVersionInfo()) return false;
    if (hasVersionInfo()) {
      if (!getVersionInfo()
          .equals(other.getVersionInfo())) return false;
    }
    if (hasProcessInfo() != other.hasProcessInfo()) return false;
    if (hasProcessInfo()) {
      if (!getProcessInfo()
          .equals(other.getProcessInfo())) return false;
    }
    if (hasHostInfo() != other.hasHostInfo()) return false;
    if (hasHostInfo()) {
      if (!getHostInfo()
          .equals(other.getHostInfo())) return false;
    }
    if (!getAgentGroup()
        .equals(other.getAgentGroup())) return false;
    if (hasControllerInfo() != other.hasControllerInfo()) return false;
    if (hasControllerInfo()) {
      if (!getControllerInfo()
          .equals(other.getControllerInfo())) return false;
    }
    if (hasPeers() != other.hasPeers()) return false;
    if (hasPeers()) {
      if (!getPeers()
          .equals(other.getPeers())) return false;
    }
    if (hasServicesList() != other.hasServicesList()) return false;
    if (hasServicesList()) {
      if (!getServicesList()
          .equals(other.getServicesList())) return false;
    }
    if (hasAllStatuses() != other.hasAllStatuses()) return false;
    if (hasAllStatuses()) {
      if (!getAllStatuses()
          .equals(other.getAllStatuses())) return false;
    }
    if (hasPolicies() != other.hasPolicies()) return false;
    if (hasPolicies()) {
      if (!getPolicies()
          .equals(other.getPolicies())) return false;
    }
    if (hasFlowControlPoints() != other.hasFlowControlPoints()) return false;
    if (hasFlowControlPoints()) {
      if (!getFlowControlPoints()
          .equals(other.getFlowControlPoints())) return false;
    }
    if (hasAutoScaleKubernetesControlPoints() != other.hasAutoScaleKubernetesControlPoints()) return false;
    if (hasAutoScaleKubernetesControlPoints()) {
      if (!getAutoScaleKubernetesControlPoints()
          .equals(other.getAutoScaleKubernetesControlPoints())) return false;
    }
    if (!getInstallationMode()
        .equals(other.getInstallationMode())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasVersionInfo()) {
      hash = (37 * hash) + VERSION_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getVersionInfo().hashCode();
    }
    if (hasProcessInfo()) {
      hash = (37 * hash) + PROCESS_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getProcessInfo().hashCode();
    }
    if (hasHostInfo()) {
      hash = (37 * hash) + HOST_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getHostInfo().hashCode();
    }
    hash = (37 * hash) + AGENT_GROUP_FIELD_NUMBER;
    hash = (53 * hash) + getAgentGroup().hashCode();
    if (hasControllerInfo()) {
      hash = (37 * hash) + CONTROLLER_INFO_FIELD_NUMBER;
      hash = (53 * hash) + getControllerInfo().hashCode();
    }
    if (hasPeers()) {
      hash = (37 * hash) + PEERS_FIELD_NUMBER;
      hash = (53 * hash) + getPeers().hashCode();
    }
    if (hasServicesList()) {
      hash = (37 * hash) + SERVICES_LIST_FIELD_NUMBER;
      hash = (53 * hash) + getServicesList().hashCode();
    }
    if (hasAllStatuses()) {
      hash = (37 * hash) + ALL_STATUSES_FIELD_NUMBER;
      hash = (53 * hash) + getAllStatuses().hashCode();
    }
    if (hasPolicies()) {
      hash = (37 * hash) + POLICIES_FIELD_NUMBER;
      hash = (53 * hash) + getPolicies().hashCode();
    }
    if (hasFlowControlPoints()) {
      hash = (37 * hash) + FLOW_CONTROL_POINTS_FIELD_NUMBER;
      hash = (53 * hash) + getFlowControlPoints().hashCode();
    }
    if (hasAutoScaleKubernetesControlPoints()) {
      hash = (37 * hash) + AUTO_SCALE_KUBERNETES_CONTROL_POINTS_FIELD_NUMBER;
      hash = (53 * hash) + getAutoScaleKubernetesControlPoints().hashCode();
    }
    hash = (37 * hash) + INSTALLATION_MODE_FIELD_NUMBER;
    hash = (53 * hash) + getInstallationMode().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.fluxninja.v1.ReportRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.fluxninja.v1.ReportRequest)
      com.fluxninja.generated.aperture.fluxninja.v1.ReportRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.fluxninja.v1.HeartbeatProto.internal_static_aperture_fluxninja_v1_ReportRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.fluxninja.v1.HeartbeatProto.internal_static_aperture_fluxninja_v1_ReportRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest.class, com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (versionInfoBuilder_ == null) {
        versionInfo_ = null;
      } else {
        versionInfo_ = null;
        versionInfoBuilder_ = null;
      }
      if (processInfoBuilder_ == null) {
        processInfo_ = null;
      } else {
        processInfo_ = null;
        processInfoBuilder_ = null;
      }
      if (hostInfoBuilder_ == null) {
        hostInfo_ = null;
      } else {
        hostInfo_ = null;
        hostInfoBuilder_ = null;
      }
      agentGroup_ = "";

      if (controllerInfoBuilder_ == null) {
        controllerInfo_ = null;
      } else {
        controllerInfo_ = null;
        controllerInfoBuilder_ = null;
      }
      if (peersBuilder_ == null) {
        peers_ = null;
      } else {
        peers_ = null;
        peersBuilder_ = null;
      }
      if (servicesListBuilder_ == null) {
        servicesList_ = null;
      } else {
        servicesList_ = null;
        servicesListBuilder_ = null;
      }
      if (allStatusesBuilder_ == null) {
        allStatuses_ = null;
      } else {
        allStatuses_ = null;
        allStatusesBuilder_ = null;
      }
      if (policiesBuilder_ == null) {
        policies_ = null;
      } else {
        policies_ = null;
        policiesBuilder_ = null;
      }
      if (flowControlPointsBuilder_ == null) {
        flowControlPoints_ = null;
      } else {
        flowControlPoints_ = null;
        flowControlPointsBuilder_ = null;
      }
      if (autoScaleKubernetesControlPointsBuilder_ == null) {
        autoScaleKubernetesControlPoints_ = null;
      } else {
        autoScaleKubernetesControlPoints_ = null;
        autoScaleKubernetesControlPointsBuilder_ = null;
      }
      installationMode_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.fluxninja.v1.HeartbeatProto.internal_static_aperture_fluxninja_v1_ReportRequest_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest build() {
      com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest buildPartial() {
      com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest result = new com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest(this);
      if (versionInfoBuilder_ == null) {
        result.versionInfo_ = versionInfo_;
      } else {
        result.versionInfo_ = versionInfoBuilder_.build();
      }
      if (processInfoBuilder_ == null) {
        result.processInfo_ = processInfo_;
      } else {
        result.processInfo_ = processInfoBuilder_.build();
      }
      if (hostInfoBuilder_ == null) {
        result.hostInfo_ = hostInfo_;
      } else {
        result.hostInfo_ = hostInfoBuilder_.build();
      }
      result.agentGroup_ = agentGroup_;
      if (controllerInfoBuilder_ == null) {
        result.controllerInfo_ = controllerInfo_;
      } else {
        result.controllerInfo_ = controllerInfoBuilder_.build();
      }
      if (peersBuilder_ == null) {
        result.peers_ = peers_;
      } else {
        result.peers_ = peersBuilder_.build();
      }
      if (servicesListBuilder_ == null) {
        result.servicesList_ = servicesList_;
      } else {
        result.servicesList_ = servicesListBuilder_.build();
      }
      if (allStatusesBuilder_ == null) {
        result.allStatuses_ = allStatuses_;
      } else {
        result.allStatuses_ = allStatusesBuilder_.build();
      }
      if (policiesBuilder_ == null) {
        result.policies_ = policies_;
      } else {
        result.policies_ = policiesBuilder_.build();
      }
      if (flowControlPointsBuilder_ == null) {
        result.flowControlPoints_ = flowControlPoints_;
      } else {
        result.flowControlPoints_ = flowControlPointsBuilder_.build();
      }
      if (autoScaleKubernetesControlPointsBuilder_ == null) {
        result.autoScaleKubernetesControlPoints_ = autoScaleKubernetesControlPoints_;
      } else {
        result.autoScaleKubernetesControlPoints_ = autoScaleKubernetesControlPointsBuilder_.build();
      }
      result.installationMode_ = installationMode_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest) {
        return mergeFrom((com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest other) {
      if (other == com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest.getDefaultInstance()) return this;
      if (other.hasVersionInfo()) {
        mergeVersionInfo(other.getVersionInfo());
      }
      if (other.hasProcessInfo()) {
        mergeProcessInfo(other.getProcessInfo());
      }
      if (other.hasHostInfo()) {
        mergeHostInfo(other.getHostInfo());
      }
      if (!other.getAgentGroup().isEmpty()) {
        agentGroup_ = other.agentGroup_;
        onChanged();
      }
      if (other.hasControllerInfo()) {
        mergeControllerInfo(other.getControllerInfo());
      }
      if (other.hasPeers()) {
        mergePeers(other.getPeers());
      }
      if (other.hasServicesList()) {
        mergeServicesList(other.getServicesList());
      }
      if (other.hasAllStatuses()) {
        mergeAllStatuses(other.getAllStatuses());
      }
      if (other.hasPolicies()) {
        mergePolicies(other.getPolicies());
      }
      if (other.hasFlowControlPoints()) {
        mergeFlowControlPoints(other.getFlowControlPoints());
      }
      if (other.hasAutoScaleKubernetesControlPoints()) {
        mergeAutoScaleKubernetesControlPoints(other.getAutoScaleKubernetesControlPoints());
      }
      if (!other.getInstallationMode().isEmpty()) {
        installationMode_ = other.installationMode_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.fluxninja.generated.aperture.info.v1.VersionInfo versionInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.info.v1.VersionInfo, com.fluxninja.generated.aperture.info.v1.VersionInfo.Builder, com.fluxninja.generated.aperture.info.v1.VersionInfoOrBuilder> versionInfoBuilder_;
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     * @return Whether the versionInfo field is set.
     */
    public boolean hasVersionInfo() {
      return versionInfoBuilder_ != null || versionInfo_ != null;
    }
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     * @return The versionInfo.
     */
    public com.fluxninja.generated.aperture.info.v1.VersionInfo getVersionInfo() {
      if (versionInfoBuilder_ == null) {
        return versionInfo_ == null ? com.fluxninja.generated.aperture.info.v1.VersionInfo.getDefaultInstance() : versionInfo_;
      } else {
        return versionInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public Builder setVersionInfo(com.fluxninja.generated.aperture.info.v1.VersionInfo value) {
      if (versionInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        versionInfo_ = value;
        onChanged();
      } else {
        versionInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public Builder setVersionInfo(
        com.fluxninja.generated.aperture.info.v1.VersionInfo.Builder builderForValue) {
      if (versionInfoBuilder_ == null) {
        versionInfo_ = builderForValue.build();
        onChanged();
      } else {
        versionInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public Builder mergeVersionInfo(com.fluxninja.generated.aperture.info.v1.VersionInfo value) {
      if (versionInfoBuilder_ == null) {
        if (versionInfo_ != null) {
          versionInfo_ =
            com.fluxninja.generated.aperture.info.v1.VersionInfo.newBuilder(versionInfo_).mergeFrom(value).buildPartial();
        } else {
          versionInfo_ = value;
        }
        onChanged();
      } else {
        versionInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public Builder clearVersionInfo() {
      if (versionInfoBuilder_ == null) {
        versionInfo_ = null;
        onChanged();
      } else {
        versionInfo_ = null;
        versionInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public com.fluxninja.generated.aperture.info.v1.VersionInfo.Builder getVersionInfoBuilder() {
      
      onChanged();
      return getVersionInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    public com.fluxninja.generated.aperture.info.v1.VersionInfoOrBuilder getVersionInfoOrBuilder() {
      if (versionInfoBuilder_ != null) {
        return versionInfoBuilder_.getMessageOrBuilder();
      } else {
        return versionInfo_ == null ?
            com.fluxninja.generated.aperture.info.v1.VersionInfo.getDefaultInstance() : versionInfo_;
      }
    }
    /**
     * <code>.aperture.info.v1.VersionInfo version_info = 1 [json_name = "versionInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.info.v1.VersionInfo, com.fluxninja.generated.aperture.info.v1.VersionInfo.Builder, com.fluxninja.generated.aperture.info.v1.VersionInfoOrBuilder> 
        getVersionInfoFieldBuilder() {
      if (versionInfoBuilder_ == null) {
        versionInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.info.v1.VersionInfo, com.fluxninja.generated.aperture.info.v1.VersionInfo.Builder, com.fluxninja.generated.aperture.info.v1.VersionInfoOrBuilder>(
                getVersionInfo(),
                getParentForChildren(),
                isClean());
        versionInfo_ = null;
      }
      return versionInfoBuilder_;
    }

    private com.fluxninja.generated.aperture.info.v1.ProcessInfo processInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.info.v1.ProcessInfo, com.fluxninja.generated.aperture.info.v1.ProcessInfo.Builder, com.fluxninja.generated.aperture.info.v1.ProcessInfoOrBuilder> processInfoBuilder_;
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     * @return Whether the processInfo field is set.
     */
    public boolean hasProcessInfo() {
      return processInfoBuilder_ != null || processInfo_ != null;
    }
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     * @return The processInfo.
     */
    public com.fluxninja.generated.aperture.info.v1.ProcessInfo getProcessInfo() {
      if (processInfoBuilder_ == null) {
        return processInfo_ == null ? com.fluxninja.generated.aperture.info.v1.ProcessInfo.getDefaultInstance() : processInfo_;
      } else {
        return processInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public Builder setProcessInfo(com.fluxninja.generated.aperture.info.v1.ProcessInfo value) {
      if (processInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        processInfo_ = value;
        onChanged();
      } else {
        processInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public Builder setProcessInfo(
        com.fluxninja.generated.aperture.info.v1.ProcessInfo.Builder builderForValue) {
      if (processInfoBuilder_ == null) {
        processInfo_ = builderForValue.build();
        onChanged();
      } else {
        processInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public Builder mergeProcessInfo(com.fluxninja.generated.aperture.info.v1.ProcessInfo value) {
      if (processInfoBuilder_ == null) {
        if (processInfo_ != null) {
          processInfo_ =
            com.fluxninja.generated.aperture.info.v1.ProcessInfo.newBuilder(processInfo_).mergeFrom(value).buildPartial();
        } else {
          processInfo_ = value;
        }
        onChanged();
      } else {
        processInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public Builder clearProcessInfo() {
      if (processInfoBuilder_ == null) {
        processInfo_ = null;
        onChanged();
      } else {
        processInfo_ = null;
        processInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public com.fluxninja.generated.aperture.info.v1.ProcessInfo.Builder getProcessInfoBuilder() {
      
      onChanged();
      return getProcessInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    public com.fluxninja.generated.aperture.info.v1.ProcessInfoOrBuilder getProcessInfoOrBuilder() {
      if (processInfoBuilder_ != null) {
        return processInfoBuilder_.getMessageOrBuilder();
      } else {
        return processInfo_ == null ?
            com.fluxninja.generated.aperture.info.v1.ProcessInfo.getDefaultInstance() : processInfo_;
      }
    }
    /**
     * <code>.aperture.info.v1.ProcessInfo process_info = 2 [json_name = "processInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.info.v1.ProcessInfo, com.fluxninja.generated.aperture.info.v1.ProcessInfo.Builder, com.fluxninja.generated.aperture.info.v1.ProcessInfoOrBuilder> 
        getProcessInfoFieldBuilder() {
      if (processInfoBuilder_ == null) {
        processInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.info.v1.ProcessInfo, com.fluxninja.generated.aperture.info.v1.ProcessInfo.Builder, com.fluxninja.generated.aperture.info.v1.ProcessInfoOrBuilder>(
                getProcessInfo(),
                getParentForChildren(),
                isClean());
        processInfo_ = null;
      }
      return processInfoBuilder_;
    }

    private com.fluxninja.generated.aperture.info.v1.HostInfo hostInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.info.v1.HostInfo, com.fluxninja.generated.aperture.info.v1.HostInfo.Builder, com.fluxninja.generated.aperture.info.v1.HostInfoOrBuilder> hostInfoBuilder_;
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     * @return Whether the hostInfo field is set.
     */
    public boolean hasHostInfo() {
      return hostInfoBuilder_ != null || hostInfo_ != null;
    }
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     * @return The hostInfo.
     */
    public com.fluxninja.generated.aperture.info.v1.HostInfo getHostInfo() {
      if (hostInfoBuilder_ == null) {
        return hostInfo_ == null ? com.fluxninja.generated.aperture.info.v1.HostInfo.getDefaultInstance() : hostInfo_;
      } else {
        return hostInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public Builder setHostInfo(com.fluxninja.generated.aperture.info.v1.HostInfo value) {
      if (hostInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        hostInfo_ = value;
        onChanged();
      } else {
        hostInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public Builder setHostInfo(
        com.fluxninja.generated.aperture.info.v1.HostInfo.Builder builderForValue) {
      if (hostInfoBuilder_ == null) {
        hostInfo_ = builderForValue.build();
        onChanged();
      } else {
        hostInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public Builder mergeHostInfo(com.fluxninja.generated.aperture.info.v1.HostInfo value) {
      if (hostInfoBuilder_ == null) {
        if (hostInfo_ != null) {
          hostInfo_ =
            com.fluxninja.generated.aperture.info.v1.HostInfo.newBuilder(hostInfo_).mergeFrom(value).buildPartial();
        } else {
          hostInfo_ = value;
        }
        onChanged();
      } else {
        hostInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public Builder clearHostInfo() {
      if (hostInfoBuilder_ == null) {
        hostInfo_ = null;
        onChanged();
      } else {
        hostInfo_ = null;
        hostInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public com.fluxninja.generated.aperture.info.v1.HostInfo.Builder getHostInfoBuilder() {
      
      onChanged();
      return getHostInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    public com.fluxninja.generated.aperture.info.v1.HostInfoOrBuilder getHostInfoOrBuilder() {
      if (hostInfoBuilder_ != null) {
        return hostInfoBuilder_.getMessageOrBuilder();
      } else {
        return hostInfo_ == null ?
            com.fluxninja.generated.aperture.info.v1.HostInfo.getDefaultInstance() : hostInfo_;
      }
    }
    /**
     * <code>.aperture.info.v1.HostInfo host_info = 3 [json_name = "hostInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.info.v1.HostInfo, com.fluxninja.generated.aperture.info.v1.HostInfo.Builder, com.fluxninja.generated.aperture.info.v1.HostInfoOrBuilder> 
        getHostInfoFieldBuilder() {
      if (hostInfoBuilder_ == null) {
        hostInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.info.v1.HostInfo, com.fluxninja.generated.aperture.info.v1.HostInfo.Builder, com.fluxninja.generated.aperture.info.v1.HostInfoOrBuilder>(
                getHostInfo(),
                getParentForChildren(),
                isClean());
        hostInfo_ = null;
      }
      return hostInfoBuilder_;
    }

    private java.lang.Object agentGroup_ = "";
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @return The agentGroup.
     */
    public java.lang.String getAgentGroup() {
      java.lang.Object ref = agentGroup_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        agentGroup_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @return The bytes for agentGroup.
     */
    public com.google.protobuf.ByteString
        getAgentGroupBytes() {
      java.lang.Object ref = agentGroup_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        agentGroup_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @param value The agentGroup to set.
     * @return This builder for chaining.
     */
    public Builder setAgentGroup(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      agentGroup_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAgentGroup() {
      
      agentGroup_ = getDefaultInstance().getAgentGroup();
      onChanged();
      return this;
    }
    /**
     * <code>string agent_group = 4 [json_name = "agentGroup"];</code>
     * @param value The bytes for agentGroup to set.
     * @return This builder for chaining.
     */
    public Builder setAgentGroupBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      agentGroup_ = value;
      onChanged();
      return this;
    }

    private com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo controllerInfo_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo, com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.Builder, com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfoOrBuilder> controllerInfoBuilder_;
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     * @return Whether the controllerInfo field is set.
     */
    public boolean hasControllerInfo() {
      return controllerInfoBuilder_ != null || controllerInfo_ != null;
    }
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     * @return The controllerInfo.
     */
    public com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo getControllerInfo() {
      if (controllerInfoBuilder_ == null) {
        return controllerInfo_ == null ? com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.getDefaultInstance() : controllerInfo_;
      } else {
        return controllerInfoBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public Builder setControllerInfo(com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo value) {
      if (controllerInfoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        controllerInfo_ = value;
        onChanged();
      } else {
        controllerInfoBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public Builder setControllerInfo(
        com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.Builder builderForValue) {
      if (controllerInfoBuilder_ == null) {
        controllerInfo_ = builderForValue.build();
        onChanged();
      } else {
        controllerInfoBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public Builder mergeControllerInfo(com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo value) {
      if (controllerInfoBuilder_ == null) {
        if (controllerInfo_ != null) {
          controllerInfo_ =
            com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.newBuilder(controllerInfo_).mergeFrom(value).buildPartial();
        } else {
          controllerInfo_ = value;
        }
        onChanged();
      } else {
        controllerInfoBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public Builder clearControllerInfo() {
      if (controllerInfoBuilder_ == null) {
        controllerInfo_ = null;
        onChanged();
      } else {
        controllerInfo_ = null;
        controllerInfoBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.Builder getControllerInfoBuilder() {
      
      onChanged();
      return getControllerInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    public com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfoOrBuilder getControllerInfoOrBuilder() {
      if (controllerInfoBuilder_ != null) {
        return controllerInfoBuilder_.getMessageOrBuilder();
      } else {
        return controllerInfo_ == null ?
            com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.getDefaultInstance() : controllerInfo_;
      }
    }
    /**
     * <code>.aperture.fluxninja.v1.ControllerInfo controller_info = 5 [json_name = "controllerInfo"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo, com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.Builder, com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfoOrBuilder> 
        getControllerInfoFieldBuilder() {
      if (controllerInfoBuilder_ == null) {
        controllerInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo, com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfo.Builder, com.fluxninja.generated.aperture.fluxninja.v1.ControllerInfoOrBuilder>(
                getControllerInfo(),
                getParentForChildren(),
                isClean());
        controllerInfo_ = null;
      }
      return controllerInfoBuilder_;
    }

    private com.fluxninja.generated.aperture.peers.v1.Peers peers_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.peers.v1.Peers, com.fluxninja.generated.aperture.peers.v1.Peers.Builder, com.fluxninja.generated.aperture.peers.v1.PeersOrBuilder> peersBuilder_;
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     * @return Whether the peers field is set.
     */
    public boolean hasPeers() {
      return peersBuilder_ != null || peers_ != null;
    }
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     * @return The peers.
     */
    public com.fluxninja.generated.aperture.peers.v1.Peers getPeers() {
      if (peersBuilder_ == null) {
        return peers_ == null ? com.fluxninja.generated.aperture.peers.v1.Peers.getDefaultInstance() : peers_;
      } else {
        return peersBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     */
    public Builder setPeers(com.fluxninja.generated.aperture.peers.v1.Peers value) {
      if (peersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        peers_ = value;
        onChanged();
      } else {
        peersBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     */
    public Builder setPeers(
        com.fluxninja.generated.aperture.peers.v1.Peers.Builder builderForValue) {
      if (peersBuilder_ == null) {
        peers_ = builderForValue.build();
        onChanged();
      } else {
        peersBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     */
    public Builder mergePeers(com.fluxninja.generated.aperture.peers.v1.Peers value) {
      if (peersBuilder_ == null) {
        if (peers_ != null) {
          peers_ =
            com.fluxninja.generated.aperture.peers.v1.Peers.newBuilder(peers_).mergeFrom(value).buildPartial();
        } else {
          peers_ = value;
        }
        onChanged();
      } else {
        peersBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     */
    public Builder clearPeers() {
      if (peersBuilder_ == null) {
        peers_ = null;
        onChanged();
      } else {
        peers_ = null;
        peersBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     */
    public com.fluxninja.generated.aperture.peers.v1.Peers.Builder getPeersBuilder() {
      
      onChanged();
      return getPeersFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     */
    public com.fluxninja.generated.aperture.peers.v1.PeersOrBuilder getPeersOrBuilder() {
      if (peersBuilder_ != null) {
        return peersBuilder_.getMessageOrBuilder();
      } else {
        return peers_ == null ?
            com.fluxninja.generated.aperture.peers.v1.Peers.getDefaultInstance() : peers_;
      }
    }
    /**
     * <code>.aperture.peers.v1.Peers peers = 6 [json_name = "peers"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.peers.v1.Peers, com.fluxninja.generated.aperture.peers.v1.Peers.Builder, com.fluxninja.generated.aperture.peers.v1.PeersOrBuilder> 
        getPeersFieldBuilder() {
      if (peersBuilder_ == null) {
        peersBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.peers.v1.Peers, com.fluxninja.generated.aperture.peers.v1.Peers.Builder, com.fluxninja.generated.aperture.peers.v1.PeersOrBuilder>(
                getPeers(),
                getParentForChildren(),
                isClean());
        peers_ = null;
      }
      return peersBuilder_;
    }

    private com.fluxninja.generated.aperture.fluxninja.v1.ServicesList servicesList_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.fluxninja.v1.ServicesList, com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.Builder, com.fluxninja.generated.aperture.fluxninja.v1.ServicesListOrBuilder> servicesListBuilder_;
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     * @return Whether the servicesList field is set.
     */
    public boolean hasServicesList() {
      return servicesListBuilder_ != null || servicesList_ != null;
    }
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     * @return The servicesList.
     */
    public com.fluxninja.generated.aperture.fluxninja.v1.ServicesList getServicesList() {
      if (servicesListBuilder_ == null) {
        return servicesList_ == null ? com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.getDefaultInstance() : servicesList_;
      } else {
        return servicesListBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     */
    public Builder setServicesList(com.fluxninja.generated.aperture.fluxninja.v1.ServicesList value) {
      if (servicesListBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        servicesList_ = value;
        onChanged();
      } else {
        servicesListBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     */
    public Builder setServicesList(
        com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.Builder builderForValue) {
      if (servicesListBuilder_ == null) {
        servicesList_ = builderForValue.build();
        onChanged();
      } else {
        servicesListBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     */
    public Builder mergeServicesList(com.fluxninja.generated.aperture.fluxninja.v1.ServicesList value) {
      if (servicesListBuilder_ == null) {
        if (servicesList_ != null) {
          servicesList_ =
            com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.newBuilder(servicesList_).mergeFrom(value).buildPartial();
        } else {
          servicesList_ = value;
        }
        onChanged();
      } else {
        servicesListBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     */
    public Builder clearServicesList() {
      if (servicesListBuilder_ == null) {
        servicesList_ = null;
        onChanged();
      } else {
        servicesList_ = null;
        servicesListBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     */
    public com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.Builder getServicesListBuilder() {
      
      onChanged();
      return getServicesListFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     */
    public com.fluxninja.generated.aperture.fluxninja.v1.ServicesListOrBuilder getServicesListOrBuilder() {
      if (servicesListBuilder_ != null) {
        return servicesListBuilder_.getMessageOrBuilder();
      } else {
        return servicesList_ == null ?
            com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.getDefaultInstance() : servicesList_;
      }
    }
    /**
     * <code>.aperture.fluxninja.v1.ServicesList services_list = 8 [json_name = "servicesList"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.fluxninja.v1.ServicesList, com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.Builder, com.fluxninja.generated.aperture.fluxninja.v1.ServicesListOrBuilder> 
        getServicesListFieldBuilder() {
      if (servicesListBuilder_ == null) {
        servicesListBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.fluxninja.v1.ServicesList, com.fluxninja.generated.aperture.fluxninja.v1.ServicesList.Builder, com.fluxninja.generated.aperture.fluxninja.v1.ServicesListOrBuilder>(
                getServicesList(),
                getParentForChildren(),
                isClean());
        servicesList_ = null;
      }
      return servicesListBuilder_;
    }

    private com.fluxninja.generated.aperture.status.v1.GroupStatus allStatuses_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.status.v1.GroupStatus, com.fluxninja.generated.aperture.status.v1.GroupStatus.Builder, com.fluxninja.generated.aperture.status.v1.GroupStatusOrBuilder> allStatusesBuilder_;
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     * @return Whether the allStatuses field is set.
     */
    public boolean hasAllStatuses() {
      return allStatusesBuilder_ != null || allStatuses_ != null;
    }
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     * @return The allStatuses.
     */
    public com.fluxninja.generated.aperture.status.v1.GroupStatus getAllStatuses() {
      if (allStatusesBuilder_ == null) {
        return allStatuses_ == null ? com.fluxninja.generated.aperture.status.v1.GroupStatus.getDefaultInstance() : allStatuses_;
      } else {
        return allStatusesBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     */
    public Builder setAllStatuses(com.fluxninja.generated.aperture.status.v1.GroupStatus value) {
      if (allStatusesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        allStatuses_ = value;
        onChanged();
      } else {
        allStatusesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     */
    public Builder setAllStatuses(
        com.fluxninja.generated.aperture.status.v1.GroupStatus.Builder builderForValue) {
      if (allStatusesBuilder_ == null) {
        allStatuses_ = builderForValue.build();
        onChanged();
      } else {
        allStatusesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     */
    public Builder mergeAllStatuses(com.fluxninja.generated.aperture.status.v1.GroupStatus value) {
      if (allStatusesBuilder_ == null) {
        if (allStatuses_ != null) {
          allStatuses_ =
            com.fluxninja.generated.aperture.status.v1.GroupStatus.newBuilder(allStatuses_).mergeFrom(value).buildPartial();
        } else {
          allStatuses_ = value;
        }
        onChanged();
      } else {
        allStatusesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     */
    public Builder clearAllStatuses() {
      if (allStatusesBuilder_ == null) {
        allStatuses_ = null;
        onChanged();
      } else {
        allStatuses_ = null;
        allStatusesBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     */
    public com.fluxninja.generated.aperture.status.v1.GroupStatus.Builder getAllStatusesBuilder() {
      
      onChanged();
      return getAllStatusesFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     */
    public com.fluxninja.generated.aperture.status.v1.GroupStatusOrBuilder getAllStatusesOrBuilder() {
      if (allStatusesBuilder_ != null) {
        return allStatusesBuilder_.getMessageOrBuilder();
      } else {
        return allStatuses_ == null ?
            com.fluxninja.generated.aperture.status.v1.GroupStatus.getDefaultInstance() : allStatuses_;
      }
    }
    /**
     * <code>.aperture.status.v1.GroupStatus all_statuses = 9 [json_name = "allStatuses"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.status.v1.GroupStatus, com.fluxninja.generated.aperture.status.v1.GroupStatus.Builder, com.fluxninja.generated.aperture.status.v1.GroupStatusOrBuilder> 
        getAllStatusesFieldBuilder() {
      if (allStatusesBuilder_ == null) {
        allStatusesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.status.v1.GroupStatus, com.fluxninja.generated.aperture.status.v1.GroupStatus.Builder, com.fluxninja.generated.aperture.status.v1.GroupStatusOrBuilder>(
                getAllStatuses(),
                getParentForChildren(),
                isClean());
        allStatuses_ = null;
      }
      return allStatusesBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers policies_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers, com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.Builder, com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappersOrBuilder> policiesBuilder_;
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     * @return Whether the policies field is set.
     */
    public boolean hasPolicies() {
      return policiesBuilder_ != null || policies_ != null;
    }
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     * @return The policies.
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers getPolicies() {
      if (policiesBuilder_ == null) {
        return policies_ == null ? com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.getDefaultInstance() : policies_;
      } else {
        return policiesBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     */
    public Builder setPolicies(com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers value) {
      if (policiesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        policies_ = value;
        onChanged();
      } else {
        policiesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     */
    public Builder setPolicies(
        com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.Builder builderForValue) {
      if (policiesBuilder_ == null) {
        policies_ = builderForValue.build();
        onChanged();
      } else {
        policiesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     */
    public Builder mergePolicies(com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers value) {
      if (policiesBuilder_ == null) {
        if (policies_ != null) {
          policies_ =
            com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.newBuilder(policies_).mergeFrom(value).buildPartial();
        } else {
          policies_ = value;
        }
        onChanged();
      } else {
        policiesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     */
    public Builder clearPolicies() {
      if (policiesBuilder_ == null) {
        policies_ = null;
        onChanged();
      } else {
        policies_ = null;
        policiesBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.Builder getPoliciesBuilder() {
      
      onChanged();
      return getPoliciesFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappersOrBuilder getPoliciesOrBuilder() {
      if (policiesBuilder_ != null) {
        return policiesBuilder_.getMessageOrBuilder();
      } else {
        return policies_ == null ?
            com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.getDefaultInstance() : policies_;
      }
    }
    /**
     * <code>.aperture.policy.sync.v1.PolicyWrappers policies = 10 [json_name = "policies"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers, com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.Builder, com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappersOrBuilder> 
        getPoliciesFieldBuilder() {
      if (policiesBuilder_ == null) {
        policiesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers, com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappers.Builder, com.fluxninja.generated.aperture.policy.sync.v1.PolicyWrappersOrBuilder>(
                getPolicies(),
                getParentForChildren(),
                isClean());
        policies_ = null;
      }
      return policiesBuilder_;
    }

    private com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flowControlPoints_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints, com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.Builder, com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPointsOrBuilder> flowControlPointsBuilder_;
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     * @return Whether the flowControlPoints field is set.
     */
    public boolean hasFlowControlPoints() {
      return flowControlPointsBuilder_ != null || flowControlPoints_ != null;
    }
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     * @return The flowControlPoints.
     */
    public com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints getFlowControlPoints() {
      if (flowControlPointsBuilder_ == null) {
        return flowControlPoints_ == null ? com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.getDefaultInstance() : flowControlPoints_;
      } else {
        return flowControlPointsBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     */
    public Builder setFlowControlPoints(com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints value) {
      if (flowControlPointsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        flowControlPoints_ = value;
        onChanged();
      } else {
        flowControlPointsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     */
    public Builder setFlowControlPoints(
        com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.Builder builderForValue) {
      if (flowControlPointsBuilder_ == null) {
        flowControlPoints_ = builderForValue.build();
        onChanged();
      } else {
        flowControlPointsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     */
    public Builder mergeFlowControlPoints(com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints value) {
      if (flowControlPointsBuilder_ == null) {
        if (flowControlPoints_ != null) {
          flowControlPoints_ =
            com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.newBuilder(flowControlPoints_).mergeFrom(value).buildPartial();
        } else {
          flowControlPoints_ = value;
        }
        onChanged();
      } else {
        flowControlPointsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     */
    public Builder clearFlowControlPoints() {
      if (flowControlPointsBuilder_ == null) {
        flowControlPoints_ = null;
        onChanged();
      } else {
        flowControlPoints_ = null;
        flowControlPointsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.Builder getFlowControlPointsBuilder() {
      
      onChanged();
      return getFlowControlPointsFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPointsOrBuilder getFlowControlPointsOrBuilder() {
      if (flowControlPointsBuilder_ != null) {
        return flowControlPointsBuilder_.getMessageOrBuilder();
      } else {
        return flowControlPoints_ == null ?
            com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.getDefaultInstance() : flowControlPoints_;
      }
    }
    /**
     * <code>.aperture.flowcontrol.controlpoints.v1.FlowControlPoints flow_control_points = 11 [json_name = "flowControlPoints"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints, com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.Builder, com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPointsOrBuilder> 
        getFlowControlPointsFieldBuilder() {
      if (flowControlPointsBuilder_ == null) {
        flowControlPointsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints, com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPoints.Builder, com.fluxninja.generated.aperture.flowcontrol.controlpoints.v1.FlowControlPointsOrBuilder>(
                getFlowControlPoints(),
                getParentForChildren(),
                isClean());
        flowControlPoints_ = null;
      }
      return flowControlPointsBuilder_;
    }

    private com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints autoScaleKubernetesControlPoints_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints, com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.Builder, com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPointsOrBuilder> autoScaleKubernetesControlPointsBuilder_;
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     * @return Whether the autoScaleKubernetesControlPoints field is set.
     */
    public boolean hasAutoScaleKubernetesControlPoints() {
      return autoScaleKubernetesControlPointsBuilder_ != null || autoScaleKubernetesControlPoints_ != null;
    }
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     * @return The autoScaleKubernetesControlPoints.
     */
    public com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints getAutoScaleKubernetesControlPoints() {
      if (autoScaleKubernetesControlPointsBuilder_ == null) {
        return autoScaleKubernetesControlPoints_ == null ? com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.getDefaultInstance() : autoScaleKubernetesControlPoints_;
      } else {
        return autoScaleKubernetesControlPointsBuilder_.getMessage();
      }
    }
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     */
    public Builder setAutoScaleKubernetesControlPoints(com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints value) {
      if (autoScaleKubernetesControlPointsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        autoScaleKubernetesControlPoints_ = value;
        onChanged();
      } else {
        autoScaleKubernetesControlPointsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     */
    public Builder setAutoScaleKubernetesControlPoints(
        com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.Builder builderForValue) {
      if (autoScaleKubernetesControlPointsBuilder_ == null) {
        autoScaleKubernetesControlPoints_ = builderForValue.build();
        onChanged();
      } else {
        autoScaleKubernetesControlPointsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     */
    public Builder mergeAutoScaleKubernetesControlPoints(com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints value) {
      if (autoScaleKubernetesControlPointsBuilder_ == null) {
        if (autoScaleKubernetesControlPoints_ != null) {
          autoScaleKubernetesControlPoints_ =
            com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.newBuilder(autoScaleKubernetesControlPoints_).mergeFrom(value).buildPartial();
        } else {
          autoScaleKubernetesControlPoints_ = value;
        }
        onChanged();
      } else {
        autoScaleKubernetesControlPointsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     */
    public Builder clearAutoScaleKubernetesControlPoints() {
      if (autoScaleKubernetesControlPointsBuilder_ == null) {
        autoScaleKubernetesControlPoints_ = null;
        onChanged();
      } else {
        autoScaleKubernetesControlPoints_ = null;
        autoScaleKubernetesControlPointsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.Builder getAutoScaleKubernetesControlPointsBuilder() {
      
      onChanged();
      return getAutoScaleKubernetesControlPointsFieldBuilder().getBuilder();
    }
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     */
    public com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPointsOrBuilder getAutoScaleKubernetesControlPointsOrBuilder() {
      if (autoScaleKubernetesControlPointsBuilder_ != null) {
        return autoScaleKubernetesControlPointsBuilder_.getMessageOrBuilder();
      } else {
        return autoScaleKubernetesControlPoints_ == null ?
            com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.getDefaultInstance() : autoScaleKubernetesControlPoints_;
      }
    }
    /**
     * <code>.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints auto_scale_kubernetes_control_points = 12 [json_name = "autoScaleKubernetesControlPoints"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints, com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.Builder, com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPointsOrBuilder> 
        getAutoScaleKubernetesControlPointsFieldBuilder() {
      if (autoScaleKubernetesControlPointsBuilder_ == null) {
        autoScaleKubernetesControlPointsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints, com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints.Builder, com.fluxninja.generated.aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPointsOrBuilder>(
                getAutoScaleKubernetesControlPoints(),
                getParentForChildren(),
                isClean());
        autoScaleKubernetesControlPoints_ = null;
      }
      return autoScaleKubernetesControlPointsBuilder_;
    }

    private java.lang.Object installationMode_ = "";
    /**
     * <code>string installation_mode = 13 [json_name = "installationMode"];</code>
     * @return The installationMode.
     */
    public java.lang.String getInstallationMode() {
      java.lang.Object ref = installationMode_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        installationMode_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string installation_mode = 13 [json_name = "installationMode"];</code>
     * @return The bytes for installationMode.
     */
    public com.google.protobuf.ByteString
        getInstallationModeBytes() {
      java.lang.Object ref = installationMode_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        installationMode_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string installation_mode = 13 [json_name = "installationMode"];</code>
     * @param value The installationMode to set.
     * @return This builder for chaining.
     */
    public Builder setInstallationMode(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      installationMode_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string installation_mode = 13 [json_name = "installationMode"];</code>
     * @return This builder for chaining.
     */
    public Builder clearInstallationMode() {
      
      installationMode_ = getDefaultInstance().getInstallationMode();
      onChanged();
      return this;
    }
    /**
     * <code>string installation_mode = 13 [json_name = "installationMode"];</code>
     * @param value The bytes for installationMode to set.
     * @return This builder for chaining.
     */
    public Builder setInstallationModeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      installationMode_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.fluxninja.v1.ReportRequest)
  }

  // @@protoc_insertion_point(class_scope:aperture.fluxninja.v1.ReportRequest)
  private static final com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest();
  }

  public static com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ReportRequest>
      PARSER = new com.google.protobuf.AbstractParser<ReportRequest>() {
    @java.lang.Override
    public ReportRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ReportRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ReportRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ReportRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.fluxninja.v1.ReportRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

