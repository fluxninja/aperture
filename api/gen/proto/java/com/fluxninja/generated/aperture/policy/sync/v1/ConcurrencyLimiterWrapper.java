// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aperture/policy/sync/v1/concurrency_limiter.proto

package com.fluxninja.generated.aperture.policy.sync.v1;

/**
 * Protobuf type {@code aperture.policy.sync.v1.ConcurrencyLimiterWrapper}
 */
public final class ConcurrencyLimiterWrapper extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:aperture.policy.sync.v1.ConcurrencyLimiterWrapper)
    ConcurrencyLimiterWrapperOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ConcurrencyLimiterWrapper.newBuilder() to construct.
  private ConcurrencyLimiterWrapper(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ConcurrencyLimiterWrapper() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ConcurrencyLimiterWrapper();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ConcurrencyLimiterWrapper(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.Builder subBuilder = null;
            if (commonAttributes_ != null) {
              subBuilder = commonAttributes_.toBuilder();
            }
            commonAttributes_ = input.readMessage(com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(commonAttributes_);
              commonAttributes_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder subBuilder = null;
            if (concurrencyLimiter_ != null) {
              subBuilder = concurrencyLimiter_.toBuilder();
            }
            concurrencyLimiter_ = input.readMessage(com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(concurrencyLimiter_);
              concurrencyLimiter_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (com.google.protobuf.UninitializedMessageException e) {
      throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterProto.internal_static_aperture_policy_sync_v1_ConcurrencyLimiterWrapper_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterProto.internal_static_aperture_policy_sync_v1_ConcurrencyLimiterWrapper_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper.class, com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper.Builder.class);
  }

  public static final int COMMON_ATTRIBUTES_FIELD_NUMBER = 1;
  private com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes commonAttributes_;
  /**
   * <pre>
   * CommonAttributes
   * </pre>
   *
   * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
   * @return Whether the commonAttributes field is set.
   */
  @java.lang.Override
  public boolean hasCommonAttributes() {
    return commonAttributes_ != null;
  }
  /**
   * <pre>
   * CommonAttributes
   * </pre>
   *
   * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
   * @return The commonAttributes.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes getCommonAttributes() {
    return commonAttributes_ == null ? com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.getDefaultInstance() : commonAttributes_;
  }
  /**
   * <pre>
   * CommonAttributes
   * </pre>
   *
   * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributesOrBuilder getCommonAttributesOrBuilder() {
    return getCommonAttributes();
  }

  public static final int CONCURRENCY_LIMITER_FIELD_NUMBER = 2;
  private com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter concurrencyLimiter_;
  /**
   * <pre>
   * Concurrency Limiter
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   * @return Whether the concurrencyLimiter field is set.
   */
  @java.lang.Override
  public boolean hasConcurrencyLimiter() {
    return concurrencyLimiter_ != null;
  }
  /**
   * <pre>
   * Concurrency Limiter
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   * @return The concurrencyLimiter.
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter getConcurrencyLimiter() {
    return concurrencyLimiter_ == null ? com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance() : concurrencyLimiter_;
  }
  /**
   * <pre>
   * Concurrency Limiter
   * </pre>
   *
   * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
   */
  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder getConcurrencyLimiterOrBuilder() {
    return getConcurrencyLimiter();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commonAttributes_ != null) {
      output.writeMessage(1, getCommonAttributes());
    }
    if (concurrencyLimiter_ != null) {
      output.writeMessage(2, getConcurrencyLimiter());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commonAttributes_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getCommonAttributes());
    }
    if (concurrencyLimiter_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getConcurrencyLimiter());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper)) {
      return super.equals(obj);
    }
    com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper other = (com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper) obj;

    if (hasCommonAttributes() != other.hasCommonAttributes()) return false;
    if (hasCommonAttributes()) {
      if (!getCommonAttributes()
          .equals(other.getCommonAttributes())) return false;
    }
    if (hasConcurrencyLimiter() != other.hasConcurrencyLimiter()) return false;
    if (hasConcurrencyLimiter()) {
      if (!getConcurrencyLimiter()
          .equals(other.getConcurrencyLimiter())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasCommonAttributes()) {
      hash = (37 * hash) + COMMON_ATTRIBUTES_FIELD_NUMBER;
      hash = (53 * hash) + getCommonAttributes().hashCode();
    }
    if (hasConcurrencyLimiter()) {
      hash = (37 * hash) + CONCURRENCY_LIMITER_FIELD_NUMBER;
      hash = (53 * hash) + getConcurrencyLimiter().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code aperture.policy.sync.v1.ConcurrencyLimiterWrapper}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:aperture.policy.sync.v1.ConcurrencyLimiterWrapper)
      com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapperOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterProto.internal_static_aperture_policy_sync_v1_ConcurrencyLimiterWrapper_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterProto.internal_static_aperture_policy_sync_v1_ConcurrencyLimiterWrapper_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper.class, com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper.Builder.class);
    }

    // Construct using com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (commonAttributesBuilder_ == null) {
        commonAttributes_ = null;
      } else {
        commonAttributes_ = null;
        commonAttributesBuilder_ = null;
      }
      if (concurrencyLimiterBuilder_ == null) {
        concurrencyLimiter_ = null;
      } else {
        concurrencyLimiter_ = null;
        concurrencyLimiterBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterProto.internal_static_aperture_policy_sync_v1_ConcurrencyLimiterWrapper_descriptor;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper getDefaultInstanceForType() {
      return com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper.getDefaultInstance();
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper build() {
      com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper buildPartial() {
      com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper result = new com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper(this);
      if (commonAttributesBuilder_ == null) {
        result.commonAttributes_ = commonAttributes_;
      } else {
        result.commonAttributes_ = commonAttributesBuilder_.build();
      }
      if (concurrencyLimiterBuilder_ == null) {
        result.concurrencyLimiter_ = concurrencyLimiter_;
      } else {
        result.concurrencyLimiter_ = concurrencyLimiterBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper) {
        return mergeFrom((com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper other) {
      if (other == com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper.getDefaultInstance()) return this;
      if (other.hasCommonAttributes()) {
        mergeCommonAttributes(other.getCommonAttributes());
      }
      if (other.hasConcurrencyLimiter()) {
        mergeConcurrencyLimiter(other.getConcurrencyLimiter());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes commonAttributes_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes, com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.Builder, com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributesOrBuilder> commonAttributesBuilder_;
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     * @return Whether the commonAttributes field is set.
     */
    public boolean hasCommonAttributes() {
      return commonAttributesBuilder_ != null || commonAttributes_ != null;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     * @return The commonAttributes.
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes getCommonAttributes() {
      if (commonAttributesBuilder_ == null) {
        return commonAttributes_ == null ? com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.getDefaultInstance() : commonAttributes_;
      } else {
        return commonAttributesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     */
    public Builder setCommonAttributes(com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes value) {
      if (commonAttributesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        commonAttributes_ = value;
        onChanged();
      } else {
        commonAttributesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     */
    public Builder setCommonAttributes(
        com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.Builder builderForValue) {
      if (commonAttributesBuilder_ == null) {
        commonAttributes_ = builderForValue.build();
        onChanged();
      } else {
        commonAttributesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     */
    public Builder mergeCommonAttributes(com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes value) {
      if (commonAttributesBuilder_ == null) {
        if (commonAttributes_ != null) {
          commonAttributes_ =
            com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.newBuilder(commonAttributes_).mergeFrom(value).buildPartial();
        } else {
          commonAttributes_ = value;
        }
        onChanged();
      } else {
        commonAttributesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     */
    public Builder clearCommonAttributes() {
      if (commonAttributesBuilder_ == null) {
        commonAttributes_ = null;
        onChanged();
      } else {
        commonAttributes_ = null;
        commonAttributesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.Builder getCommonAttributesBuilder() {
      
      onChanged();
      return getCommonAttributesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     */
    public com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributesOrBuilder getCommonAttributesOrBuilder() {
      if (commonAttributesBuilder_ != null) {
        return commonAttributesBuilder_.getMessageOrBuilder();
      } else {
        return commonAttributes_ == null ?
            com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.getDefaultInstance() : commonAttributes_;
      }
    }
    /**
     * <pre>
     * CommonAttributes
     * </pre>
     *
     * <code>.aperture.policy.sync.v1.CommonAttributes common_attributes = 1 [json_name = "commonAttributes"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes, com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.Builder, com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributesOrBuilder> 
        getCommonAttributesFieldBuilder() {
      if (commonAttributesBuilder_ == null) {
        commonAttributesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes, com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributes.Builder, com.fluxninja.generated.aperture.policy.sync.v1.CommonAttributesOrBuilder>(
                getCommonAttributes(),
                getParentForChildren(),
                isClean());
        commonAttributes_ = null;
      }
      return commonAttributesBuilder_;
    }

    private com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter concurrencyLimiter_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder> concurrencyLimiterBuilder_;
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     * @return Whether the concurrencyLimiter field is set.
     */
    public boolean hasConcurrencyLimiter() {
      return concurrencyLimiterBuilder_ != null || concurrencyLimiter_ != null;
    }
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     * @return The concurrencyLimiter.
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter getConcurrencyLimiter() {
      if (concurrencyLimiterBuilder_ == null) {
        return concurrencyLimiter_ == null ? com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance() : concurrencyLimiter_;
      } else {
        return concurrencyLimiterBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder setConcurrencyLimiter(com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter value) {
      if (concurrencyLimiterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        concurrencyLimiter_ = value;
        onChanged();
      } else {
        concurrencyLimiterBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder setConcurrencyLimiter(
        com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder builderForValue) {
      if (concurrencyLimiterBuilder_ == null) {
        concurrencyLimiter_ = builderForValue.build();
        onChanged();
      } else {
        concurrencyLimiterBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder mergeConcurrencyLimiter(com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter value) {
      if (concurrencyLimiterBuilder_ == null) {
        if (concurrencyLimiter_ != null) {
          concurrencyLimiter_ =
            com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.newBuilder(concurrencyLimiter_).mergeFrom(value).buildPartial();
        } else {
          concurrencyLimiter_ = value;
        }
        onChanged();
      } else {
        concurrencyLimiterBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public Builder clearConcurrencyLimiter() {
      if (concurrencyLimiterBuilder_ == null) {
        concurrencyLimiter_ = null;
        onChanged();
      } else {
        concurrencyLimiter_ = null;
        concurrencyLimiterBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder getConcurrencyLimiterBuilder() {
      
      onChanged();
      return getConcurrencyLimiterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    public com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder getConcurrencyLimiterOrBuilder() {
      if (concurrencyLimiterBuilder_ != null) {
        return concurrencyLimiterBuilder_.getMessageOrBuilder();
      } else {
        return concurrencyLimiter_ == null ?
            com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.getDefaultInstance() : concurrencyLimiter_;
      }
    }
    /**
     * <pre>
     * Concurrency Limiter
     * </pre>
     *
     * <code>.aperture.policy.language.v1.ConcurrencyLimiter concurrency_limiter = 2 [json_name = "concurrencyLimiter"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder> 
        getConcurrencyLimiterFieldBuilder() {
      if (concurrencyLimiterBuilder_ == null) {
        concurrencyLimiterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiter.Builder, com.fluxninja.generated.aperture.policy.language.v1.ConcurrencyLimiterOrBuilder>(
                getConcurrencyLimiter(),
                getParentForChildren(),
                isClean());
        concurrencyLimiter_ = null;
      }
      return concurrencyLimiterBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:aperture.policy.sync.v1.ConcurrencyLimiterWrapper)
  }

  // @@protoc_insertion_point(class_scope:aperture.policy.sync.v1.ConcurrencyLimiterWrapper)
  private static final com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper();
  }

  public static com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ConcurrencyLimiterWrapper>
      PARSER = new com.google.protobuf.AbstractParser<ConcurrencyLimiterWrapper>() {
    @java.lang.Override
    public ConcurrencyLimiterWrapper parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ConcurrencyLimiterWrapper(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ConcurrencyLimiterWrapper> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ConcurrencyLimiterWrapper> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.fluxninja.generated.aperture.policy.sync.v1.ConcurrencyLimiterWrapper getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

