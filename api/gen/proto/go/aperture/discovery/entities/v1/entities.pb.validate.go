// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/discovery/entities/v1/entities.proto

package entitiesv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetEntityByIPAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEntityByIPAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntityByIPAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntityByIPAddressRequestMultiError, or nil if none found.
func (m *GetEntityByIPAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntityByIPAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IpAddress

	if len(errors) > 0 {
		return GetEntityByIPAddressRequestMultiError(errors)
	}

	return nil
}

// GetEntityByIPAddressRequestMultiError is an error wrapping multiple
// validation errors returned by GetEntityByIPAddressRequest.ValidateAll() if
// the designated constraints aren't met.
type GetEntityByIPAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntityByIPAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntityByIPAddressRequestMultiError) AllErrors() []error { return m }

// GetEntityByIPAddressRequestValidationError is the validation error returned
// by GetEntityByIPAddressRequest.Validate if the designated constraints
// aren't met.
type GetEntityByIPAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntityByIPAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntityByIPAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntityByIPAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntityByIPAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntityByIPAddressRequestValidationError) ErrorName() string {
	return "GetEntityByIPAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEntityByIPAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntityByIPAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntityByIPAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntityByIPAddressRequestValidationError{}

// Validate checks the field values on GetEntityByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEntityByNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEntityByNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEntityByNameRequestMultiError, or nil if none found.
func (m *GetEntityByNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEntityByNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetEntityByNameRequestMultiError(errors)
	}

	return nil
}

// GetEntityByNameRequestMultiError is an error wrapping multiple validation
// errors returned by GetEntityByNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEntityByNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEntityByNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEntityByNameRequestMultiError) AllErrors() []error { return m }

// GetEntityByNameRequestValidationError is the validation error returned by
// GetEntityByNameRequest.Validate if the designated constraints aren't met.
type GetEntityByNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEntityByNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEntityByNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEntityByNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEntityByNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEntityByNameRequestValidationError) ErrorName() string {
	return "GetEntityByNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEntityByNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEntityByNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEntityByNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEntityByNameRequestValidationError{}

// Validate checks the field values on Entities with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Entities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entities with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntitiesMultiError, or nil
// if none found.
func (m *Entities) ValidateAll() error {
	return m.validate(true)
}

func (m *Entities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntitiesByIpAddress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitiesValidationError{
					field:  "EntitiesByIpAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitiesValidationError{
					field:  "EntitiesByIpAddress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitiesByIpAddress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitiesValidationError{
				field:  "EntitiesByIpAddress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEntitiesByName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntitiesValidationError{
					field:  "EntitiesByName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntitiesValidationError{
					field:  "EntitiesByName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntitiesByName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntitiesValidationError{
				field:  "EntitiesByName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EntitiesMultiError(errors)
	}

	return nil
}

// EntitiesMultiError is an error wrapping multiple validation errors returned
// by Entities.ValidateAll() if the designated constraints aren't met.
type EntitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntitiesMultiError) AllErrors() []error { return m }

// EntitiesValidationError is the validation error returned by
// Entities.Validate if the designated constraints aren't met.
type EntitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntitiesValidationError) ErrorName() string { return "EntitiesValidationError" }

// Error satisfies the builtin error interface
func (e EntitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntitiesValidationError{}

// Validate checks the field values on Entity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Entity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entity with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EntityMultiError, or nil if none found.
func (m *Entity) ValidateAll() error {
	return m.validate(true)
}

func (m *Entity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uid

	// no validation rules for IpAddress

	// no validation rules for Name

	// no validation rules for Namespace

	// no validation rules for NodeName

	if len(errors) > 0 {
		return EntityMultiError(errors)
	}

	return nil
}

// EntityMultiError is an error wrapping multiple validation errors returned by
// Entity.ValidateAll() if the designated constraints aren't met.
type EntityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityMultiError) AllErrors() []error { return m }

// EntityValidationError is the validation error returned by Entity.Validate if
// the designated constraints aren't met.
type EntityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityValidationError) ErrorName() string { return "EntityValidationError" }

// Error satisfies the builtin error interface
func (e EntityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityValidationError{}

// Validate checks the field values on Entities_Entities with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Entities_Entities) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Entities_Entities with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Entities_EntitiesMultiError, or nil if none found.
func (m *Entities_Entities) ValidateAll() error {
	return m.validate(true)
}

func (m *Entities_Entities) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetEntities()))
		i := 0
		for key := range m.GetEntities() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEntities()[key]
			_ = val

			// no validation rules for Entities[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Entities_EntitiesValidationError{
							field:  fmt.Sprintf("Entities[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Entities_EntitiesValidationError{
							field:  fmt.Sprintf("Entities[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Entities_EntitiesValidationError{
						field:  fmt.Sprintf("Entities[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Entities_EntitiesMultiError(errors)
	}

	return nil
}

// Entities_EntitiesMultiError is an error wrapping multiple validation errors
// returned by Entities_Entities.ValidateAll() if the designated constraints
// aren't met.
type Entities_EntitiesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Entities_EntitiesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Entities_EntitiesMultiError) AllErrors() []error { return m }

// Entities_EntitiesValidationError is the validation error returned by
// Entities_Entities.Validate if the designated constraints aren't met.
type Entities_EntitiesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Entities_EntitiesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Entities_EntitiesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Entities_EntitiesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Entities_EntitiesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Entities_EntitiesValidationError) ErrorName() string {
	return "Entities_EntitiesValidationError"
}

// Error satisfies the builtin error interface
func (e Entities_EntitiesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntities_Entities.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Entities_EntitiesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Entities_EntitiesValidationError{}
