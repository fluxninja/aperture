// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package entitycachev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntityCacheServiceClient is the client API for EntityCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityCacheServiceClient interface {
	GetServicesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServicesList, error)
	GetEntityCache(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EntityCache, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*Entity, error)
}

type entityCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityCacheServiceClient(cc grpc.ClientConnInterface) EntityCacheServiceClient {
	return &entityCacheServiceClient{cc}
}

func (c *entityCacheServiceClient) GetServicesList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServicesList, error) {
	out := new(ServicesList)
	err := c.cc.Invoke(ctx, "/aperture.common.entitycache.v1.EntityCacheService/GetServicesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityCacheServiceClient) GetEntityCache(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*EntityCache, error) {
	out := new(EntityCache)
	err := c.cc.Invoke(ctx, "/aperture.common.entitycache.v1.EntityCacheService/GetEntityCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityCacheServiceClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/aperture.common.entitycache.v1.EntityCacheService/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityCacheServiceServer is the server API for EntityCacheService service.
// All implementations should embed UnimplementedEntityCacheServiceServer
// for forward compatibility
type EntityCacheServiceServer interface {
	GetServicesList(context.Context, *emptypb.Empty) (*ServicesList, error)
	GetEntityCache(context.Context, *emptypb.Empty) (*EntityCache, error)
	GetEntity(context.Context, *GetEntityRequest) (*Entity, error)
}

// UnimplementedEntityCacheServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEntityCacheServiceServer struct {
}

func (UnimplementedEntityCacheServiceServer) GetServicesList(context.Context, *emptypb.Empty) (*ServicesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesList not implemented")
}
func (UnimplementedEntityCacheServiceServer) GetEntityCache(context.Context, *emptypb.Empty) (*EntityCache, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityCache not implemented")
}
func (UnimplementedEntityCacheServiceServer) GetEntity(context.Context, *GetEntityRequest) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}

// UnsafeEntityCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityCacheServiceServer will
// result in compilation errors.
type UnsafeEntityCacheServiceServer interface {
	mustEmbedUnimplementedEntityCacheServiceServer()
}

func RegisterEntityCacheServiceServer(s grpc.ServiceRegistrar, srv EntityCacheServiceServer) {
	s.RegisterService(&EntityCacheService_ServiceDesc, srv)
}

func _EntityCacheService_GetServicesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityCacheServiceServer).GetServicesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aperture.common.entitycache.v1.EntityCacheService/GetServicesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityCacheServiceServer).GetServicesList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityCacheService_GetEntityCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityCacheServiceServer).GetEntityCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aperture.common.entitycache.v1.EntityCacheService/GetEntityCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityCacheServiceServer).GetEntityCache(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityCacheService_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityCacheServiceServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aperture.common.entitycache.v1.EntityCacheService/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityCacheServiceServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityCacheService_ServiceDesc is the grpc.ServiceDesc for EntityCacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityCacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aperture.common.entitycache.v1.EntityCacheService",
	HandlerType: (*EntityCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServicesList",
			Handler:    _EntityCacheService_GetServicesList_Handler,
		},
		{
			MethodName: "GetEntityCache",
			Handler:    _EntityCacheService_GetEntityCache_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _EntityCacheService_GetEntity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aperture/common/entitycache/v1/entitycache.proto",
}
