// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: aperture/cmd/v1/cmd.proto

// Messages for aperturectl → controller and controller → agent communication.

package cmdv1

import (
	v11 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/autoscale/kubernetes/controlpoints/v1"
	v12 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/discovery/entities/v1"
	v1 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/flowcontrol/controlpoints/v1"
	v13 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/flowcontrol/preview/v1"
	v14 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/policy/language/v1"
	v15 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/status/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListServicesRequest) Reset() {
	*x = ListServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesRequest) ProtoMessage() {}

func (x *ListServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesRequest.ProtoReflect.Descriptor instead.
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{0}
}

type ListServicesAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	// FIXME: Remove. Controller should be aware which agent group agent belongs to.
	AgentGroup string `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *ListServicesAgentResponse) Reset() {
	*x = ListServicesAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesAgentResponse) ProtoMessage() {}

func (x *ListServicesAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesAgentResponse.ProtoReflect.Descriptor instead.
func (*ListServicesAgentResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{1}
}

func (x *ListServicesAgentResponse) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ListServicesAgentResponse) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type ListServicesControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services    []*GlobalService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	ErrorsCount uint32           `protobuf:"varint,2,opt,name=errors_count,json=errorsCount,proto3" json:"errors_count,omitempty"`
}

func (x *ListServicesControllerResponse) Reset() {
	*x = ListServicesControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesControllerResponse) ProtoMessage() {}

func (x *ListServicesControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesControllerResponse.ProtoReflect.Descriptor instead.
func (*ListServicesControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{2}
}

func (x *ListServicesControllerResponse) GetServices() []*GlobalService {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ListServicesControllerResponse) GetErrorsCount() uint32 {
	if x != nil {
		return x.ErrorsCount
	}
	return 0
}

type ListFlowControlPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFlowControlPointsRequest) Reset() {
	*x = ListFlowControlPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlowControlPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlowControlPointsRequest) ProtoMessage() {}

func (x *ListFlowControlPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlowControlPointsRequest.ProtoReflect.Descriptor instead.
func (*ListFlowControlPointsRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{3}
}

type ListFlowControlPointsAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowControlPoints *v1.FlowControlPoints `protobuf:"bytes,1,opt,name=flow_control_points,json=flowControlPoints,proto3" json:"flow_control_points,omitempty"`
	// FIXME: Remove. Controller should be aware which agent group agent belongs to.
	AgentGroup string `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *ListFlowControlPointsAgentResponse) Reset() {
	*x = ListFlowControlPointsAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlowControlPointsAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlowControlPointsAgentResponse) ProtoMessage() {}

func (x *ListFlowControlPointsAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlowControlPointsAgentResponse.ProtoReflect.Descriptor instead.
func (*ListFlowControlPointsAgentResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{4}
}

func (x *ListFlowControlPointsAgentResponse) GetFlowControlPoints() *v1.FlowControlPoints {
	if x != nil {
		return x.FlowControlPoints
	}
	return nil
}

func (x *ListFlowControlPointsAgentResponse) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type ListFlowControlPointsControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalFlowControlPoints []*GlobalFlowControlPoint `protobuf:"bytes,1,rep,name=global_flow_control_points,json=globalFlowControlPoints,proto3" json:"global_flow_control_points,omitempty"`
	ErrorsCount             uint32                    `protobuf:"varint,2,opt,name=errors_count,json=errorsCount,proto3" json:"errors_count,omitempty"`
}

func (x *ListFlowControlPointsControllerResponse) Reset() {
	*x = ListFlowControlPointsControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFlowControlPointsControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlowControlPointsControllerResponse) ProtoMessage() {}

func (x *ListFlowControlPointsControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlowControlPointsControllerResponse.ProtoReflect.Descriptor instead.
func (*ListFlowControlPointsControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{5}
}

func (x *ListFlowControlPointsControllerResponse) GetGlobalFlowControlPoints() []*GlobalFlowControlPoint {
	if x != nil {
		return x.GlobalFlowControlPoints
	}
	return nil
}

func (x *ListFlowControlPointsControllerResponse) GetErrorsCount() uint32 {
	if x != nil {
		return x.ErrorsCount
	}
	return 0
}

type ListAutoScaleControlPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAutoScaleControlPointsRequest) Reset() {
	*x = ListAutoScaleControlPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAutoScaleControlPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAutoScaleControlPointsRequest) ProtoMessage() {}

func (x *ListAutoScaleControlPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAutoScaleControlPointsRequest.ProtoReflect.Descriptor instead.
func (*ListAutoScaleControlPointsRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{6}
}

type ListAutoScaleControlPointsAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoScaleControlPoints *v11.AutoScaleKubernetesControlPoints `protobuf:"bytes,1,opt,name=auto_scale_control_points,json=autoScaleControlPoints,proto3" json:"auto_scale_control_points,omitempty"`
	AgentGroup             string                                `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *ListAutoScaleControlPointsAgentResponse) Reset() {
	*x = ListAutoScaleControlPointsAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAutoScaleControlPointsAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAutoScaleControlPointsAgentResponse) ProtoMessage() {}

func (x *ListAutoScaleControlPointsAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAutoScaleControlPointsAgentResponse.ProtoReflect.Descriptor instead.
func (*ListAutoScaleControlPointsAgentResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{7}
}

func (x *ListAutoScaleControlPointsAgentResponse) GetAutoScaleControlPoints() *v11.AutoScaleKubernetesControlPoints {
	if x != nil {
		return x.AutoScaleControlPoints
	}
	return nil
}

func (x *ListAutoScaleControlPointsAgentResponse) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type ListAutoScaleControlPointsControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GlobalAutoScaleControlPoints []*GlobalAutoScaleControlPoint `protobuf:"bytes,1,rep,name=global_auto_scale_control_points,json=globalAutoScaleControlPoints,proto3" json:"global_auto_scale_control_points,omitempty"`
	ErrorsCount                  uint32                         `protobuf:"varint,2,opt,name=errors_count,json=errorsCount,proto3" json:"errors_count,omitempty"`
}

func (x *ListAutoScaleControlPointsControllerResponse) Reset() {
	*x = ListAutoScaleControlPointsControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAutoScaleControlPointsControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAutoScaleControlPointsControllerResponse) ProtoMessage() {}

func (x *ListAutoScaleControlPointsControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAutoScaleControlPointsControllerResponse.ProtoReflect.Descriptor instead.
func (*ListAutoScaleControlPointsControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{8}
}

func (x *ListAutoScaleControlPointsControllerResponse) GetGlobalAutoScaleControlPoints() []*GlobalAutoScaleControlPoint {
	if x != nil {
		return x.GlobalAutoScaleControlPoints
	}
	return nil
}

func (x *ListAutoScaleControlPointsControllerResponse) GetErrorsCount() uint32 {
	if x != nil {
		return x.ErrorsCount
	}
	return 0
}

type ListDiscoveryEntitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroup string `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *ListDiscoveryEntitiesRequest) Reset() {
	*x = ListDiscoveryEntitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiscoveryEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiscoveryEntitiesRequest) ProtoMessage() {}

func (x *ListDiscoveryEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiscoveryEntitiesRequest.ProtoReflect.Descriptor instead.
func (*ListDiscoveryEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{9}
}

func (x *ListDiscoveryEntitiesRequest) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type ListDiscoveryEntitiesAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities map[string]*v12.Entity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListDiscoveryEntitiesAgentResponse) Reset() {
	*x = ListDiscoveryEntitiesAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiscoveryEntitiesAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiscoveryEntitiesAgentResponse) ProtoMessage() {}

func (x *ListDiscoveryEntitiesAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiscoveryEntitiesAgentResponse.ProtoReflect.Descriptor instead.
func (*ListDiscoveryEntitiesAgentResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{10}
}

func (x *ListDiscoveryEntitiesAgentResponse) GetEntities() map[string]*v12.Entity {
	if x != nil {
		return x.Entities
	}
	return nil
}

type ListDiscoveryEntitiesControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entities    *ListDiscoveryEntitiesAgentResponse `protobuf:"bytes,1,opt,name=entities,proto3" json:"entities,omitempty"`
	ErrorsCount uint32                              `protobuf:"varint,2,opt,name=errors_count,json=errorsCount,proto3" json:"errors_count,omitempty"`
}

func (x *ListDiscoveryEntitiesControllerResponse) Reset() {
	*x = ListDiscoveryEntitiesControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiscoveryEntitiesControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiscoveryEntitiesControllerResponse) ProtoMessage() {}

func (x *ListDiscoveryEntitiesControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiscoveryEntitiesControllerResponse.ProtoReflect.Descriptor instead.
func (*ListDiscoveryEntitiesControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{11}
}

func (x *ListDiscoveryEntitiesControllerResponse) GetEntities() *ListDiscoveryEntitiesAgentResponse {
	if x != nil {
		return x.Entities
	}
	return nil
}

func (x *ListDiscoveryEntitiesControllerResponse) GetErrorsCount() uint32 {
	if x != nil {
		return x.ErrorsCount
	}
	return 0
}

type ListDiscoveryEntityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to By:
	//
	//	*ListDiscoveryEntityRequest_IpAddress
	//	*ListDiscoveryEntityRequest_Name
	By isListDiscoveryEntityRequest_By `protobuf_oneof:"by"`
}

func (x *ListDiscoveryEntityRequest) Reset() {
	*x = ListDiscoveryEntityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiscoveryEntityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiscoveryEntityRequest) ProtoMessage() {}

func (x *ListDiscoveryEntityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiscoveryEntityRequest.ProtoReflect.Descriptor instead.
func (*ListDiscoveryEntityRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{12}
}

func (m *ListDiscoveryEntityRequest) GetBy() isListDiscoveryEntityRequest_By {
	if m != nil {
		return m.By
	}
	return nil
}

func (x *ListDiscoveryEntityRequest) GetIpAddress() string {
	if x, ok := x.GetBy().(*ListDiscoveryEntityRequest_IpAddress); ok {
		return x.IpAddress
	}
	return ""
}

func (x *ListDiscoveryEntityRequest) GetName() string {
	if x, ok := x.GetBy().(*ListDiscoveryEntityRequest_Name); ok {
		return x.Name
	}
	return ""
}

type isListDiscoveryEntityRequest_By interface {
	isListDiscoveryEntityRequest_By()
}

type ListDiscoveryEntityRequest_IpAddress struct {
	IpAddress string `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3,oneof"`
}

type ListDiscoveryEntityRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ListDiscoveryEntityRequest_IpAddress) isListDiscoveryEntityRequest_By() {}

func (*ListDiscoveryEntityRequest_Name) isListDiscoveryEntityRequest_By() {}

type ListDiscoveryEntityAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *v12.Entity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *ListDiscoveryEntityAgentResponse) Reset() {
	*x = ListDiscoveryEntityAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiscoveryEntityAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiscoveryEntityAgentResponse) ProtoMessage() {}

func (x *ListDiscoveryEntityAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiscoveryEntityAgentResponse.ProtoReflect.Descriptor instead.
func (*ListDiscoveryEntityAgentResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{13}
}

func (x *ListDiscoveryEntityAgentResponse) GetEntity() *v12.Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

type ListAgentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroup string `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *ListAgentsRequest) Reset() {
	*x = ListAgentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsRequest) ProtoMessage() {}

func (x *ListAgentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsRequest.ProtoReflect.Descriptor instead.
func (*ListAgentsRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{14}
}

func (x *ListAgentsRequest) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type ListAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents []string `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{15}
}

func (x *ListAgentsResponse) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

// GlobalFlowControlPoint contains info about a control point on a given
// service with explicit Agent Group.
type GlobalFlowControlPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlowControlPoint *v1.FlowControlPoint `protobuf:"bytes,1,opt,name=flow_control_point,json=flowControlPoint,proto3" json:"flow_control_point,omitempty"`
	AgentGroup       string               `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *GlobalFlowControlPoint) Reset() {
	*x = GlobalFlowControlPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalFlowControlPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalFlowControlPoint) ProtoMessage() {}

func (x *GlobalFlowControlPoint) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalFlowControlPoint.ProtoReflect.Descriptor instead.
func (*GlobalFlowControlPoint) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{16}
}

func (x *GlobalFlowControlPoint) GetFlowControlPoint() *v1.FlowControlPoint {
	if x != nil {
		return x.FlowControlPoint
	}
	return nil
}

func (x *GlobalFlowControlPoint) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type GlobalAutoScaleControlPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoScaleControlPoint *v11.AutoScaleKubernetesControlPoint `protobuf:"bytes,1,opt,name=auto_scale_control_point,json=autoScaleControlPoint,proto3" json:"auto_scale_control_point,omitempty"`
	AgentGroup            string                               `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *GlobalAutoScaleControlPoint) Reset() {
	*x = GlobalAutoScaleControlPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalAutoScaleControlPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalAutoScaleControlPoint) ProtoMessage() {}

func (x *GlobalAutoScaleControlPoint) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalAutoScaleControlPoint.ProtoReflect.Descriptor instead.
func (*GlobalAutoScaleControlPoint) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{17}
}

func (x *GlobalAutoScaleControlPoint) GetAutoScaleControlPoint() *v11.AutoScaleKubernetesControlPoint {
	if x != nil {
		return x.AutoScaleControlPoint
	}
	return nil
}

func (x *GlobalAutoScaleControlPoint) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

// GlobalService is a service with explicit agent group.
type GlobalService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AgentGroup string `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *GlobalService) Reset() {
	*x = GlobalService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalService) ProtoMessage() {}

func (x *GlobalService) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalService.ProtoReflect.Descriptor instead.
func (*GlobalService) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{18}
}

func (x *GlobalService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GlobalService) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type PreviewFlowLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroup string              `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"` // Used only in ctl→controller communication.
	Request    *v13.PreviewRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *PreviewFlowLabelsRequest) Reset() {
	*x = PreviewFlowLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewFlowLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewFlowLabelsRequest) ProtoMessage() {}

func (x *PreviewFlowLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewFlowLabelsRequest.ProtoReflect.Descriptor instead.
func (*PreviewFlowLabelsRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{19}
}

func (x *PreviewFlowLabelsRequest) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

func (x *PreviewFlowLabelsRequest) GetRequest() *v13.PreviewRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type PreviewHTTPRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroup string              `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"` // Used only in ctl→controller communication.
	Request    *v13.PreviewRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *PreviewHTTPRequestsRequest) Reset() {
	*x = PreviewHTTPRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewHTTPRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewHTTPRequestsRequest) ProtoMessage() {}

func (x *PreviewHTTPRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewHTTPRequestsRequest.ProtoReflect.Descriptor instead.
func (*PreviewHTTPRequestsRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{20}
}

func (x *PreviewHTTPRequestsRequest) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

func (x *PreviewHTTPRequestsRequest) GetRequest() *v13.PreviewRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type PreviewFlowLabelsControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v13.PreviewFlowLabelsResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PreviewFlowLabelsControllerResponse) Reset() {
	*x = PreviewFlowLabelsControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewFlowLabelsControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewFlowLabelsControllerResponse) ProtoMessage() {}

func (x *PreviewFlowLabelsControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewFlowLabelsControllerResponse.ProtoReflect.Descriptor instead.
func (*PreviewFlowLabelsControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{21}
}

func (x *PreviewFlowLabelsControllerResponse) GetResponse() *v13.PreviewFlowLabelsResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type PreviewHTTPRequestsControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v13.PreviewHTTPRequestsResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PreviewHTTPRequestsControllerResponse) Reset() {
	*x = PreviewHTTPRequestsControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewHTTPRequestsControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewHTTPRequestsControllerResponse) ProtoMessage() {}

func (x *PreviewHTTPRequestsControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewHTTPRequestsControllerResponse.ProtoReflect.Descriptor instead.
func (*PreviewHTTPRequestsControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{22}
}

func (x *PreviewHTTPRequestsControllerResponse) GetResponse() *v13.PreviewHTTPRequestsResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_aperture_cmd_v1_cmd_proto protoreflect.FileDescriptor

var file_aperture_cmd_v1_cmd_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x42, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x39, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x7f, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xaf, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xb2, 0x01, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x64, 0x0a, 0x1a, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x17,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xd8, 0x01, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x19,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc7, 0x01, 0x0a, 0x2c, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x20, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x1c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3f, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe8, 0x01, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x63, 0x0a, 0x0d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9d, 0x01, 0x0a, 0x27, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x59, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x04, 0x0a, 0x02, 0x62, 0x79, 0x22, 0x62, 0x0a, 0x20, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x34, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x65,
	0x0a, 0x12, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x10, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xc9, 0x01, 0x0a, 0x1b, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x88, 0x01, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x44, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54, 0x54,
	0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7d, 0x0a, 0x23,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x25,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xf8, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x55,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x13, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54, 0x54, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0c, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x7f, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x58, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x73, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0xda, 0x01, 0x0a, 0x27, 0x63,
	0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x43, 0x6d, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x63,
	0x6d, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6d, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x43,
	0x58, 0xaa, 0x02, 0x0f, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6d, 0x64,
	0x2e, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x43,
	0x6d, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x5c, 0x43, 0x6d, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x11, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a,
	0x43, 0x6d, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_cmd_v1_cmd_proto_rawDescOnce sync.Once
	file_aperture_cmd_v1_cmd_proto_rawDescData = file_aperture_cmd_v1_cmd_proto_rawDesc
)

func file_aperture_cmd_v1_cmd_proto_rawDescGZIP() []byte {
	file_aperture_cmd_v1_cmd_proto_rawDescOnce.Do(func() {
		file_aperture_cmd_v1_cmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_cmd_v1_cmd_proto_rawDescData)
	})
	return file_aperture_cmd_v1_cmd_proto_rawDescData
}

var file_aperture_cmd_v1_cmd_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_aperture_cmd_v1_cmd_proto_goTypes = []interface{}{
	(*ListServicesRequest)(nil),                          // 0: aperture.cmd.v1.ListServicesRequest
	(*ListServicesAgentResponse)(nil),                    // 1: aperture.cmd.v1.ListServicesAgentResponse
	(*ListServicesControllerResponse)(nil),               // 2: aperture.cmd.v1.ListServicesControllerResponse
	(*ListFlowControlPointsRequest)(nil),                 // 3: aperture.cmd.v1.ListFlowControlPointsRequest
	(*ListFlowControlPointsAgentResponse)(nil),           // 4: aperture.cmd.v1.ListFlowControlPointsAgentResponse
	(*ListFlowControlPointsControllerResponse)(nil),      // 5: aperture.cmd.v1.ListFlowControlPointsControllerResponse
	(*ListAutoScaleControlPointsRequest)(nil),            // 6: aperture.cmd.v1.ListAutoScaleControlPointsRequest
	(*ListAutoScaleControlPointsAgentResponse)(nil),      // 7: aperture.cmd.v1.ListAutoScaleControlPointsAgentResponse
	(*ListAutoScaleControlPointsControllerResponse)(nil), // 8: aperture.cmd.v1.ListAutoScaleControlPointsControllerResponse
	(*ListDiscoveryEntitiesRequest)(nil),                 // 9: aperture.cmd.v1.ListDiscoveryEntitiesRequest
	(*ListDiscoveryEntitiesAgentResponse)(nil),           // 10: aperture.cmd.v1.ListDiscoveryEntitiesAgentResponse
	(*ListDiscoveryEntitiesControllerResponse)(nil),      // 11: aperture.cmd.v1.ListDiscoveryEntitiesControllerResponse
	(*ListDiscoveryEntityRequest)(nil),                   // 12: aperture.cmd.v1.ListDiscoveryEntityRequest
	(*ListDiscoveryEntityAgentResponse)(nil),             // 13: aperture.cmd.v1.ListDiscoveryEntityAgentResponse
	(*ListAgentsRequest)(nil),                            // 14: aperture.cmd.v1.ListAgentsRequest
	(*ListAgentsResponse)(nil),                           // 15: aperture.cmd.v1.ListAgentsResponse
	(*GlobalFlowControlPoint)(nil),                       // 16: aperture.cmd.v1.GlobalFlowControlPoint
	(*GlobalAutoScaleControlPoint)(nil),                  // 17: aperture.cmd.v1.GlobalAutoScaleControlPoint
	(*GlobalService)(nil),                                // 18: aperture.cmd.v1.GlobalService
	(*PreviewFlowLabelsRequest)(nil),                     // 19: aperture.cmd.v1.PreviewFlowLabelsRequest
	(*PreviewHTTPRequestsRequest)(nil),                   // 20: aperture.cmd.v1.PreviewHTTPRequestsRequest
	(*PreviewFlowLabelsControllerResponse)(nil),          // 21: aperture.cmd.v1.PreviewFlowLabelsControllerResponse
	(*PreviewHTTPRequestsControllerResponse)(nil),        // 22: aperture.cmd.v1.PreviewHTTPRequestsControllerResponse
	nil,                          // 23: aperture.cmd.v1.ListDiscoveryEntitiesAgentResponse.EntitiesEntry
	(*v1.FlowControlPoints)(nil), // 24: aperture.flowcontrol.controlpoints.v1.FlowControlPoints
	(*v11.AutoScaleKubernetesControlPoints)(nil), // 25: aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints
	(*v12.Entity)(nil),                           // 26: aperture.discovery.entities.v1.Entity
	(*v1.FlowControlPoint)(nil),                  // 27: aperture.flowcontrol.controlpoints.v1.FlowControlPoint
	(*v11.AutoScaleKubernetesControlPoint)(nil),  // 28: aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoint
	(*v13.PreviewRequest)(nil),                   // 29: aperture.flowcontrol.preview.v1.PreviewRequest
	(*v13.PreviewFlowLabelsResponse)(nil),        // 30: aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse
	(*v13.PreviewHTTPRequestsResponse)(nil),      // 31: aperture.flowcontrol.preview.v1.PreviewHTTPRequestsResponse
	(*emptypb.Empty)(nil),                        // 32: google.protobuf.Empty
	(*v14.GetPolicyRequest)(nil),                 // 33: aperture.policy.language.v1.GetPolicyRequest
	(*v14.UpsertPolicyRequest)(nil),              // 34: aperture.policy.language.v1.UpsertPolicyRequest
	(*v14.PostDynamicConfigRequest)(nil),         // 35: aperture.policy.language.v1.PostDynamicConfigRequest
	(*v14.GetDynamicConfigRequest)(nil),          // 36: aperture.policy.language.v1.GetDynamicConfigRequest
	(*v14.DeleteDynamicConfigRequest)(nil),       // 37: aperture.policy.language.v1.DeleteDynamicConfigRequest
	(*v14.DeletePolicyRequest)(nil),              // 38: aperture.policy.language.v1.DeletePolicyRequest
	(*v14.GetDecisionsRequest)(nil),              // 39: aperture.policy.language.v1.GetDecisionsRequest
	(*v15.GroupStatusRequest)(nil),               // 40: aperture.status.v1.GroupStatusRequest
	(*v14.GetPoliciesResponse)(nil),              // 41: aperture.policy.language.v1.GetPoliciesResponse
	(*v14.GetPolicyResponse)(nil),                // 42: aperture.policy.language.v1.GetPolicyResponse
	(*v14.UpsertPolicyResponse)(nil),             // 43: aperture.policy.language.v1.UpsertPolicyResponse
	(*v14.GetDynamicConfigResponse)(nil),         // 44: aperture.policy.language.v1.GetDynamicConfigResponse
	(*v14.GetDecisionsResponse)(nil),             // 45: aperture.policy.language.v1.GetDecisionsResponse
	(*v15.GroupStatus)(nil),                      // 46: aperture.status.v1.GroupStatus
}
var file_aperture_cmd_v1_cmd_proto_depIdxs = []int32{
	18, // 0: aperture.cmd.v1.ListServicesControllerResponse.services:type_name -> aperture.cmd.v1.GlobalService
	24, // 1: aperture.cmd.v1.ListFlowControlPointsAgentResponse.flow_control_points:type_name -> aperture.flowcontrol.controlpoints.v1.FlowControlPoints
	16, // 2: aperture.cmd.v1.ListFlowControlPointsControllerResponse.global_flow_control_points:type_name -> aperture.cmd.v1.GlobalFlowControlPoint
	25, // 3: aperture.cmd.v1.ListAutoScaleControlPointsAgentResponse.auto_scale_control_points:type_name -> aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints
	17, // 4: aperture.cmd.v1.ListAutoScaleControlPointsControllerResponse.global_auto_scale_control_points:type_name -> aperture.cmd.v1.GlobalAutoScaleControlPoint
	23, // 5: aperture.cmd.v1.ListDiscoveryEntitiesAgentResponse.entities:type_name -> aperture.cmd.v1.ListDiscoveryEntitiesAgentResponse.EntitiesEntry
	10, // 6: aperture.cmd.v1.ListDiscoveryEntitiesControllerResponse.entities:type_name -> aperture.cmd.v1.ListDiscoveryEntitiesAgentResponse
	26, // 7: aperture.cmd.v1.ListDiscoveryEntityAgentResponse.entity:type_name -> aperture.discovery.entities.v1.Entity
	27, // 8: aperture.cmd.v1.GlobalFlowControlPoint.flow_control_point:type_name -> aperture.flowcontrol.controlpoints.v1.FlowControlPoint
	28, // 9: aperture.cmd.v1.GlobalAutoScaleControlPoint.auto_scale_control_point:type_name -> aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoint
	29, // 10: aperture.cmd.v1.PreviewFlowLabelsRequest.request:type_name -> aperture.flowcontrol.preview.v1.PreviewRequest
	29, // 11: aperture.cmd.v1.PreviewHTTPRequestsRequest.request:type_name -> aperture.flowcontrol.preview.v1.PreviewRequest
	30, // 12: aperture.cmd.v1.PreviewFlowLabelsControllerResponse.response:type_name -> aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse
	31, // 13: aperture.cmd.v1.PreviewHTTPRequestsControllerResponse.response:type_name -> aperture.flowcontrol.preview.v1.PreviewHTTPRequestsResponse
	26, // 14: aperture.cmd.v1.ListDiscoveryEntitiesAgentResponse.EntitiesEntry.value:type_name -> aperture.discovery.entities.v1.Entity
	14, // 15: aperture.cmd.v1.Controller.ListAgents:input_type -> aperture.cmd.v1.ListAgentsRequest
	0,  // 16: aperture.cmd.v1.Controller.ListServices:input_type -> aperture.cmd.v1.ListServicesRequest
	3,  // 17: aperture.cmd.v1.Controller.ListFlowControlPoints:input_type -> aperture.cmd.v1.ListFlowControlPointsRequest
	6,  // 18: aperture.cmd.v1.Controller.ListAutoScaleControlPoints:input_type -> aperture.cmd.v1.ListAutoScaleControlPointsRequest
	9,  // 19: aperture.cmd.v1.Controller.ListDiscoveryEntities:input_type -> aperture.cmd.v1.ListDiscoveryEntitiesRequest
	12, // 20: aperture.cmd.v1.Controller.ListDiscoveryEntity:input_type -> aperture.cmd.v1.ListDiscoveryEntityRequest
	32, // 21: aperture.cmd.v1.Controller.ListPolicies:input_type -> google.protobuf.Empty
	19, // 22: aperture.cmd.v1.Controller.PreviewFlowLabels:input_type -> aperture.cmd.v1.PreviewFlowLabelsRequest
	20, // 23: aperture.cmd.v1.Controller.PreviewHTTPRequests:input_type -> aperture.cmd.v1.PreviewHTTPRequestsRequest
	33, // 24: aperture.cmd.v1.Controller.GetPolicy:input_type -> aperture.policy.language.v1.GetPolicyRequest
	34, // 25: aperture.cmd.v1.Controller.UpsertPolicy:input_type -> aperture.policy.language.v1.UpsertPolicyRequest
	35, // 26: aperture.cmd.v1.Controller.PostDynamicConfig:input_type -> aperture.policy.language.v1.PostDynamicConfigRequest
	36, // 27: aperture.cmd.v1.Controller.GetDynamicConfig:input_type -> aperture.policy.language.v1.GetDynamicConfigRequest
	37, // 28: aperture.cmd.v1.Controller.DeleteDynamicConfig:input_type -> aperture.policy.language.v1.DeleteDynamicConfigRequest
	38, // 29: aperture.cmd.v1.Controller.DeletePolicy:input_type -> aperture.policy.language.v1.DeletePolicyRequest
	39, // 30: aperture.cmd.v1.Controller.GetDecisions:input_type -> aperture.policy.language.v1.GetDecisionsRequest
	40, // 31: aperture.cmd.v1.Controller.GetStatus:input_type -> aperture.status.v1.GroupStatusRequest
	15, // 32: aperture.cmd.v1.Controller.ListAgents:output_type -> aperture.cmd.v1.ListAgentsResponse
	2,  // 33: aperture.cmd.v1.Controller.ListServices:output_type -> aperture.cmd.v1.ListServicesControllerResponse
	5,  // 34: aperture.cmd.v1.Controller.ListFlowControlPoints:output_type -> aperture.cmd.v1.ListFlowControlPointsControllerResponse
	8,  // 35: aperture.cmd.v1.Controller.ListAutoScaleControlPoints:output_type -> aperture.cmd.v1.ListAutoScaleControlPointsControllerResponse
	11, // 36: aperture.cmd.v1.Controller.ListDiscoveryEntities:output_type -> aperture.cmd.v1.ListDiscoveryEntitiesControllerResponse
	13, // 37: aperture.cmd.v1.Controller.ListDiscoveryEntity:output_type -> aperture.cmd.v1.ListDiscoveryEntityAgentResponse
	41, // 38: aperture.cmd.v1.Controller.ListPolicies:output_type -> aperture.policy.language.v1.GetPoliciesResponse
	21, // 39: aperture.cmd.v1.Controller.PreviewFlowLabels:output_type -> aperture.cmd.v1.PreviewFlowLabelsControllerResponse
	22, // 40: aperture.cmd.v1.Controller.PreviewHTTPRequests:output_type -> aperture.cmd.v1.PreviewHTTPRequestsControllerResponse
	42, // 41: aperture.cmd.v1.Controller.GetPolicy:output_type -> aperture.policy.language.v1.GetPolicyResponse
	43, // 42: aperture.cmd.v1.Controller.UpsertPolicy:output_type -> aperture.policy.language.v1.UpsertPolicyResponse
	32, // 43: aperture.cmd.v1.Controller.PostDynamicConfig:output_type -> google.protobuf.Empty
	44, // 44: aperture.cmd.v1.Controller.GetDynamicConfig:output_type -> aperture.policy.language.v1.GetDynamicConfigResponse
	32, // 45: aperture.cmd.v1.Controller.DeleteDynamicConfig:output_type -> google.protobuf.Empty
	32, // 46: aperture.cmd.v1.Controller.DeletePolicy:output_type -> google.protobuf.Empty
	45, // 47: aperture.cmd.v1.Controller.GetDecisions:output_type -> aperture.policy.language.v1.GetDecisionsResponse
	46, // 48: aperture.cmd.v1.Controller.GetStatus:output_type -> aperture.status.v1.GroupStatus
	32, // [32:49] is the sub-list for method output_type
	15, // [15:32] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_aperture_cmd_v1_cmd_proto_init() }
func file_aperture_cmd_v1_cmd_proto_init() {
	if File_aperture_cmd_v1_cmd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aperture_cmd_v1_cmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlowControlPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlowControlPointsAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFlowControlPointsControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAutoScaleControlPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAutoScaleControlPointsAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAutoScaleControlPointsControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiscoveryEntitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiscoveryEntitiesAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiscoveryEntitiesControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiscoveryEntityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDiscoveryEntityAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalFlowControlPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalAutoScaleControlPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewFlowLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewHTTPRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewFlowLabelsControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewHTTPRequestsControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_cmd_v1_cmd_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ListDiscoveryEntityRequest_IpAddress)(nil),
		(*ListDiscoveryEntityRequest_Name)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_cmd_v1_cmd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_cmd_v1_cmd_proto_goTypes,
		DependencyIndexes: file_aperture_cmd_v1_cmd_proto_depIdxs,
		MessageInfos:      file_aperture_cmd_v1_cmd_proto_msgTypes,
	}.Build()
	File_aperture_cmd_v1_cmd_proto = out.File
	file_aperture_cmd_v1_cmd_proto_rawDesc = nil
	file_aperture_cmd_v1_cmd_proto_goTypes = nil
	file_aperture_cmd_v1_cmd_proto_depIdxs = nil
}
