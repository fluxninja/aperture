// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: aperture/cmd/v1/cmd.proto

// Messages for aperturectl → controller and controller → agent communication.

package cmdv1

import (
	v1 "github.com/fluxninja/aperture/api/gen/proto/go/aperture/flowcontrol/preview/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListServicesRequest) Reset() {
	*x = ListServicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesRequest) ProtoMessage() {}

func (x *ListServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesRequest.ProtoReflect.Descriptor instead.
func (*ListServicesRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{0}
}

type ListServicesAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	// FIXME: Remove. Controller should be aware which agent group agent belongs to.
	AgentGroup string `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *ListServicesAgentResponse) Reset() {
	*x = ListServicesAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesAgentResponse) ProtoMessage() {}

func (x *ListServicesAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesAgentResponse.ProtoReflect.Descriptor instead.
func (*ListServicesAgentResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{1}
}

func (x *ListServicesAgentResponse) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ListServicesAgentResponse) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type ListServicesControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services    []*GlobalService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	ErrorsCount uint32           `protobuf:"varint,2,opt,name=errors_count,json=errorsCount,proto3" json:"errors_count,omitempty"`
}

func (x *ListServicesControllerResponse) Reset() {
	*x = ListServicesControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListServicesControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListServicesControllerResponse) ProtoMessage() {}

func (x *ListServicesControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListServicesControllerResponse.ProtoReflect.Descriptor instead.
func (*ListServicesControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{2}
}

func (x *ListServicesControllerResponse) GetServices() []*GlobalService {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *ListServicesControllerResponse) GetErrorsCount() uint32 {
	if x != nil {
		return x.ErrorsCount
	}
	return 0
}

type ListControlPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListControlPointsRequest) Reset() {
	*x = ListControlPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListControlPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListControlPointsRequest) ProtoMessage() {}

func (x *ListControlPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListControlPointsRequest.ProtoReflect.Descriptor instead.
func (*ListControlPointsRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{3}
}

type ListControlPointsAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoints []*ServiceControlPoint `protobuf:"bytes,1,rep,name=control_points,json=controlPoints,proto3" json:"control_points,omitempty"`
	// FIXME: Remove. Controller should be aware which agent group agent belongs to.
	AgentGroup string `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *ListControlPointsAgentResponse) Reset() {
	*x = ListControlPointsAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListControlPointsAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListControlPointsAgentResponse) ProtoMessage() {}

func (x *ListControlPointsAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListControlPointsAgentResponse.ProtoReflect.Descriptor instead.
func (*ListControlPointsAgentResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{4}
}

func (x *ListControlPointsAgentResponse) GetControlPoints() []*ServiceControlPoint {
	if x != nil {
		return x.ControlPoints
	}
	return nil
}

func (x *ListControlPointsAgentResponse) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type ListControlPointsControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoints []*GlobalServiceControlPoint `protobuf:"bytes,1,rep,name=control_points,json=controlPoints,proto3" json:"control_points,omitempty"`
	ErrorsCount   uint32                       `protobuf:"varint,2,opt,name=errors_count,json=errorsCount,proto3" json:"errors_count,omitempty"`
}

func (x *ListControlPointsControllerResponse) Reset() {
	*x = ListControlPointsControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListControlPointsControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListControlPointsControllerResponse) ProtoMessage() {}

func (x *ListControlPointsControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListControlPointsControllerResponse.ProtoReflect.Descriptor instead.
func (*ListControlPointsControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{5}
}

func (x *ListControlPointsControllerResponse) GetControlPoints() []*GlobalServiceControlPoint {
	if x != nil {
		return x.ControlPoints
	}
	return nil
}

func (x *ListControlPointsControllerResponse) GetErrorsCount() uint32 {
	if x != nil {
		return x.ErrorsCount
	}
	return 0
}

type ListAgentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents []string `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
}

func (x *ListAgentsResponse) Reset() {
	*x = ListAgentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAgentsResponse) ProtoMessage() {}

func (x *ListAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAgentsResponse.ProtoReflect.Descriptor instead.
func (*ListAgentsResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{6}
}

func (x *ListAgentsResponse) GetAgents() []string {
	if x != nil {
		return x.Agents
	}
	return nil
}

// ServiceControlPoint contains info about a control point on a given service.
//
// Agent group is implied.
type ServiceControlPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *ServiceControlPoint) Reset() {
	*x = ServiceControlPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceControlPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceControlPoint) ProtoMessage() {}

func (x *ServiceControlPoint) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceControlPoint.ProtoReflect.Descriptor instead.
func (*ServiceControlPoint) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceControlPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceControlPoint) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// GlobalServiceControlPoint contains info about a control point on a given
// service with explicit Agent Group.
type GlobalServiceControlPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	AgentGroup  string `protobuf:"bytes,3,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *GlobalServiceControlPoint) Reset() {
	*x = GlobalServiceControlPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalServiceControlPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalServiceControlPoint) ProtoMessage() {}

func (x *GlobalServiceControlPoint) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalServiceControlPoint.ProtoReflect.Descriptor instead.
func (*GlobalServiceControlPoint) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{8}
}

func (x *GlobalServiceControlPoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GlobalServiceControlPoint) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *GlobalServiceControlPoint) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

// GlobalService is a service with explicit agent group.
type GlobalService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AgentGroup string `protobuf:"bytes,2,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"`
}

func (x *GlobalService) Reset() {
	*x = GlobalService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalService) ProtoMessage() {}

func (x *GlobalService) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalService.ProtoReflect.Descriptor instead.
func (*GlobalService) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{9}
}

func (x *GlobalService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GlobalService) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

type PreviewFlowLabelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroup string             `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"` // Used only in ctl→controller communication.
	Request    *v1.PreviewRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *PreviewFlowLabelsRequest) Reset() {
	*x = PreviewFlowLabelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewFlowLabelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewFlowLabelsRequest) ProtoMessage() {}

func (x *PreviewFlowLabelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewFlowLabelsRequest.ProtoReflect.Descriptor instead.
func (*PreviewFlowLabelsRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{10}
}

func (x *PreviewFlowLabelsRequest) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

func (x *PreviewFlowLabelsRequest) GetRequest() *v1.PreviewRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type PreviewHTTPRequestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroup string             `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty"` // Used only in ctl→controller communication.
	Request    *v1.PreviewRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *PreviewHTTPRequestsRequest) Reset() {
	*x = PreviewHTTPRequestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewHTTPRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewHTTPRequestsRequest) ProtoMessage() {}

func (x *PreviewHTTPRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewHTTPRequestsRequest.ProtoReflect.Descriptor instead.
func (*PreviewHTTPRequestsRequest) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{11}
}

func (x *PreviewHTTPRequestsRequest) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

func (x *PreviewHTTPRequestsRequest) GetRequest() *v1.PreviewRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type PreviewFlowLabelsControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.PreviewFlowLabelsResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PreviewFlowLabelsControllerResponse) Reset() {
	*x = PreviewFlowLabelsControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewFlowLabelsControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewFlowLabelsControllerResponse) ProtoMessage() {}

func (x *PreviewFlowLabelsControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewFlowLabelsControllerResponse.ProtoReflect.Descriptor instead.
func (*PreviewFlowLabelsControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{12}
}

func (x *PreviewFlowLabelsControllerResponse) GetResponse() *v1.PreviewFlowLabelsResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type PreviewHTTPRequestsControllerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *v1.PreviewHTTPRequestsResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *PreviewHTTPRequestsControllerResponse) Reset() {
	*x = PreviewHTTPRequestsControllerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewHTTPRequestsControllerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewHTTPRequestsControllerResponse) ProtoMessage() {}

func (x *PreviewHTTPRequestsControllerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_cmd_v1_cmd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewHTTPRequestsControllerResponse.ProtoReflect.Descriptor instead.
func (*PreviewHTTPRequestsControllerResponse) Descriptor() ([]byte, []int) {
	return file_aperture_cmd_v1_cmd_proto_rawDescGZIP(), []int{13}
}

func (x *PreviewHTTPRequestsControllerResponse) GetResponse() *v1.PreviewHTTPRequestsResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_aperture_cmd_v1_cmd_proto protoreflect.FileDescriptor

var file_aperture_cmd_v1_cmd_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x63, 0x6d, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x2d, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x58, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x7f, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x9b, 0x01, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x73, 0x0a, 0x19, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x44, 0x0a, 0x0d, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x86, 0x01, 0x0a,
	0x18, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x1a, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x7d, 0x0a, 0x23, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x25, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0xa6, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63,
	0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54, 0x54, 0x50, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x48, 0x54, 0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x54,
	0x54, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xd7, 0x01, 0x0a,
	0x27, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6d, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x43, 0x6d, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x63, 0x6d,
	0x64, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6d, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x43, 0x58,
	0xaa, 0x02, 0x0f, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x6d, 0x64, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x0f, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x43, 0x6d,
	0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c,
	0x43, 0x6d, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x11, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x43,
	0x6d, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_cmd_v1_cmd_proto_rawDescOnce sync.Once
	file_aperture_cmd_v1_cmd_proto_rawDescData = file_aperture_cmd_v1_cmd_proto_rawDesc
)

func file_aperture_cmd_v1_cmd_proto_rawDescGZIP() []byte {
	file_aperture_cmd_v1_cmd_proto_rawDescOnce.Do(func() {
		file_aperture_cmd_v1_cmd_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_cmd_v1_cmd_proto_rawDescData)
	})
	return file_aperture_cmd_v1_cmd_proto_rawDescData
}

var file_aperture_cmd_v1_cmd_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_aperture_cmd_v1_cmd_proto_goTypes = []interface{}{
	(*ListServicesRequest)(nil),                   // 0: aperture.cmd.v1.ListServicesRequest
	(*ListServicesAgentResponse)(nil),             // 1: aperture.cmd.v1.ListServicesAgentResponse
	(*ListServicesControllerResponse)(nil),        // 2: aperture.cmd.v1.ListServicesControllerResponse
	(*ListControlPointsRequest)(nil),              // 3: aperture.cmd.v1.ListControlPointsRequest
	(*ListControlPointsAgentResponse)(nil),        // 4: aperture.cmd.v1.ListControlPointsAgentResponse
	(*ListControlPointsControllerResponse)(nil),   // 5: aperture.cmd.v1.ListControlPointsControllerResponse
	(*ListAgentsResponse)(nil),                    // 6: aperture.cmd.v1.ListAgentsResponse
	(*ServiceControlPoint)(nil),                   // 7: aperture.cmd.v1.ServiceControlPoint
	(*GlobalServiceControlPoint)(nil),             // 8: aperture.cmd.v1.GlobalServiceControlPoint
	(*GlobalService)(nil),                         // 9: aperture.cmd.v1.GlobalService
	(*PreviewFlowLabelsRequest)(nil),              // 10: aperture.cmd.v1.PreviewFlowLabelsRequest
	(*PreviewHTTPRequestsRequest)(nil),            // 11: aperture.cmd.v1.PreviewHTTPRequestsRequest
	(*PreviewFlowLabelsControllerResponse)(nil),   // 12: aperture.cmd.v1.PreviewFlowLabelsControllerResponse
	(*PreviewHTTPRequestsControllerResponse)(nil), // 13: aperture.cmd.v1.PreviewHTTPRequestsControllerResponse
	(*v1.PreviewRequest)(nil),                     // 14: aperture.flowcontrol.preview.v1.PreviewRequest
	(*v1.PreviewFlowLabelsResponse)(nil),          // 15: aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse
	(*v1.PreviewHTTPRequestsResponse)(nil),        // 16: aperture.flowcontrol.preview.v1.PreviewHTTPRequestsResponse
	(*emptypb.Empty)(nil),                         // 17: google.protobuf.Empty
}
var file_aperture_cmd_v1_cmd_proto_depIdxs = []int32{
	9,  // 0: aperture.cmd.v1.ListServicesControllerResponse.services:type_name -> aperture.cmd.v1.GlobalService
	7,  // 1: aperture.cmd.v1.ListControlPointsAgentResponse.control_points:type_name -> aperture.cmd.v1.ServiceControlPoint
	8,  // 2: aperture.cmd.v1.ListControlPointsControllerResponse.control_points:type_name -> aperture.cmd.v1.GlobalServiceControlPoint
	14, // 3: aperture.cmd.v1.PreviewFlowLabelsRequest.request:type_name -> aperture.flowcontrol.preview.v1.PreviewRequest
	14, // 4: aperture.cmd.v1.PreviewHTTPRequestsRequest.request:type_name -> aperture.flowcontrol.preview.v1.PreviewRequest
	15, // 5: aperture.cmd.v1.PreviewFlowLabelsControllerResponse.response:type_name -> aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse
	16, // 6: aperture.cmd.v1.PreviewHTTPRequestsControllerResponse.response:type_name -> aperture.flowcontrol.preview.v1.PreviewHTTPRequestsResponse
	17, // 7: aperture.cmd.v1.Controller.ListAgents:input_type -> google.protobuf.Empty
	0,  // 8: aperture.cmd.v1.Controller.ListServices:input_type -> aperture.cmd.v1.ListServicesRequest
	3,  // 9: aperture.cmd.v1.Controller.ListControlPoints:input_type -> aperture.cmd.v1.ListControlPointsRequest
	10, // 10: aperture.cmd.v1.Controller.PreviewFlowLabels:input_type -> aperture.cmd.v1.PreviewFlowLabelsRequest
	11, // 11: aperture.cmd.v1.Controller.PreviewHTTPRequests:input_type -> aperture.cmd.v1.PreviewHTTPRequestsRequest
	6,  // 12: aperture.cmd.v1.Controller.ListAgents:output_type -> aperture.cmd.v1.ListAgentsResponse
	2,  // 13: aperture.cmd.v1.Controller.ListServices:output_type -> aperture.cmd.v1.ListServicesControllerResponse
	5,  // 14: aperture.cmd.v1.Controller.ListControlPoints:output_type -> aperture.cmd.v1.ListControlPointsControllerResponse
	12, // 15: aperture.cmd.v1.Controller.PreviewFlowLabels:output_type -> aperture.cmd.v1.PreviewFlowLabelsControllerResponse
	13, // 16: aperture.cmd.v1.Controller.PreviewHTTPRequests:output_type -> aperture.cmd.v1.PreviewHTTPRequestsControllerResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_aperture_cmd_v1_cmd_proto_init() }
func file_aperture_cmd_v1_cmd_proto_init() {
	if File_aperture_cmd_v1_cmd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aperture_cmd_v1_cmd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListServicesControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListControlPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListControlPointsAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListControlPointsControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAgentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceControlPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalServiceControlPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewFlowLabelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewHTTPRequestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewFlowLabelsControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_cmd_v1_cmd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewHTTPRequestsControllerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_cmd_v1_cmd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_cmd_v1_cmd_proto_goTypes,
		DependencyIndexes: file_aperture_cmd_v1_cmd_proto_depIdxs,
		MessageInfos:      file_aperture_cmd_v1_cmd_proto_msgTypes,
	}.Build()
	File_aperture_cmd_v1_cmd_proto = out.File
	file_aperture_cmd_v1_cmd_proto_rawDesc = nil
	file_aperture_cmd_v1_cmd_proto_goTypes = nil
	file_aperture_cmd_v1_cmd_proto_depIdxs = nil
}
