// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/cmd/v1/cmd.proto

package cmdv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesRequestMultiError, or nil if none found.
func (m *ListServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListServicesRequestMultiError(errors)
	}

	return nil
}

// ListServicesRequestMultiError is an error wrapping multiple validation
// errors returned by ListServicesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesRequestMultiError) AllErrors() []error { return m }

// ListServicesRequestValidationError is the validation error returned by
// ListServicesRequest.Validate if the designated constraints aren't met.
type ListServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesRequestValidationError) ErrorName() string {
	return "ListServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesRequestValidationError{}

// Validate checks the field values on ListServicesAgentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesAgentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListServicesAgentResponseMultiError, or nil if none found.
func (m *ListServicesAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return ListServicesAgentResponseMultiError(errors)
	}

	return nil
}

// ListServicesAgentResponseMultiError is an error wrapping multiple validation
// errors returned by ListServicesAgentResponse.ValidateAll() if the
// designated constraints aren't met.
type ListServicesAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesAgentResponseMultiError) AllErrors() []error { return m }

// ListServicesAgentResponseValidationError is the validation error returned by
// ListServicesAgentResponse.Validate if the designated constraints aren't met.
type ListServicesAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesAgentResponseValidationError) ErrorName() string {
	return "ListServicesAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesAgentResponseValidationError{}

// Validate checks the field values on ListServicesControllerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListServicesControllerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListServicesControllerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListServicesControllerResponseMultiError, or nil if none found.
func (m *ListServicesControllerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListServicesControllerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListServicesControllerResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListServicesControllerResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListServicesControllerResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ErrorsCount

	if len(errors) > 0 {
		return ListServicesControllerResponseMultiError(errors)
	}

	return nil
}

// ListServicesControllerResponseMultiError is an error wrapping multiple
// validation errors returned by ListServicesControllerResponse.ValidateAll()
// if the designated constraints aren't met.
type ListServicesControllerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListServicesControllerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListServicesControllerResponseMultiError) AllErrors() []error { return m }

// ListServicesControllerResponseValidationError is the validation error
// returned by ListServicesControllerResponse.Validate if the designated
// constraints aren't met.
type ListServicesControllerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServicesControllerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServicesControllerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServicesControllerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServicesControllerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServicesControllerResponseValidationError) ErrorName() string {
	return "ListServicesControllerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListServicesControllerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServicesControllerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServicesControllerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServicesControllerResponseValidationError{}

// Validate checks the field values on ListFlowControlPointsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFlowControlPointsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFlowControlPointsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFlowControlPointsRequestMultiError, or nil if none found.
func (m *ListFlowControlPointsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFlowControlPointsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFlowControlPointsRequestMultiError(errors)
	}

	return nil
}

// ListFlowControlPointsRequestMultiError is an error wrapping multiple
// validation errors returned by ListFlowControlPointsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListFlowControlPointsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFlowControlPointsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFlowControlPointsRequestMultiError) AllErrors() []error { return m }

// ListFlowControlPointsRequestValidationError is the validation error returned
// by ListFlowControlPointsRequest.Validate if the designated constraints
// aren't met.
type ListFlowControlPointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlowControlPointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlowControlPointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlowControlPointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlowControlPointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlowControlPointsRequestValidationError) ErrorName() string {
	return "ListFlowControlPointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlowControlPointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlowControlPointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlowControlPointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlowControlPointsRequestValidationError{}

// Validate checks the field values on ListFlowControlPointsAgentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListFlowControlPointsAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFlowControlPointsAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListFlowControlPointsAgentResponseMultiError, or nil if none found.
func (m *ListFlowControlPointsAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFlowControlPointsAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFlowControlPoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListFlowControlPointsAgentResponseValidationError{
					field:  "FlowControlPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListFlowControlPointsAgentResponseValidationError{
					field:  "FlowControlPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlowControlPoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListFlowControlPointsAgentResponseValidationError{
				field:  "FlowControlPoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return ListFlowControlPointsAgentResponseMultiError(errors)
	}

	return nil
}

// ListFlowControlPointsAgentResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListFlowControlPointsAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFlowControlPointsAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFlowControlPointsAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFlowControlPointsAgentResponseMultiError) AllErrors() []error { return m }

// ListFlowControlPointsAgentResponseValidationError is the validation error
// returned by ListFlowControlPointsAgentResponse.Validate if the designated
// constraints aren't met.
type ListFlowControlPointsAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlowControlPointsAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlowControlPointsAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlowControlPointsAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlowControlPointsAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlowControlPointsAgentResponseValidationError) ErrorName() string {
	return "ListFlowControlPointsAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlowControlPointsAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlowControlPointsAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlowControlPointsAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlowControlPointsAgentResponseValidationError{}

// Validate checks the field values on ListFlowControlPointsControllerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListFlowControlPointsControllerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListFlowControlPointsControllerResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListFlowControlPointsControllerResponseMultiError, or nil if none found.
func (m *ListFlowControlPointsControllerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFlowControlPointsControllerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGlobalFlowControlPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFlowControlPointsControllerResponseValidationError{
						field:  fmt.Sprintf("GlobalFlowControlPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFlowControlPointsControllerResponseValidationError{
						field:  fmt.Sprintf("GlobalFlowControlPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFlowControlPointsControllerResponseValidationError{
					field:  fmt.Sprintf("GlobalFlowControlPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ErrorsCount

	if len(errors) > 0 {
		return ListFlowControlPointsControllerResponseMultiError(errors)
	}

	return nil
}

// ListFlowControlPointsControllerResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListFlowControlPointsControllerResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFlowControlPointsControllerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFlowControlPointsControllerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFlowControlPointsControllerResponseMultiError) AllErrors() []error { return m }

// ListFlowControlPointsControllerResponseValidationError is the validation
// error returned by ListFlowControlPointsControllerResponse.Validate if the
// designated constraints aren't met.
type ListFlowControlPointsControllerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlowControlPointsControllerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlowControlPointsControllerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlowControlPointsControllerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlowControlPointsControllerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlowControlPointsControllerResponseValidationError) ErrorName() string {
	return "ListFlowControlPointsControllerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlowControlPointsControllerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlowControlPointsControllerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlowControlPointsControllerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlowControlPointsControllerResponseValidationError{}

// Validate checks the field values on ListAutoScaleControlPointsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListAutoScaleControlPointsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAutoScaleControlPointsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListAutoScaleControlPointsRequestMultiError, or nil if none found.
func (m *ListAutoScaleControlPointsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAutoScaleControlPointsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAutoScaleControlPointsRequestMultiError(errors)
	}

	return nil
}

// ListAutoScaleControlPointsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListAutoScaleControlPointsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAutoScaleControlPointsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAutoScaleControlPointsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAutoScaleControlPointsRequestMultiError) AllErrors() []error { return m }

// ListAutoScaleControlPointsRequestValidationError is the validation error
// returned by ListAutoScaleControlPointsRequest.Validate if the designated
// constraints aren't met.
type ListAutoScaleControlPointsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAutoScaleControlPointsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAutoScaleControlPointsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAutoScaleControlPointsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAutoScaleControlPointsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAutoScaleControlPointsRequestValidationError) ErrorName() string {
	return "ListAutoScaleControlPointsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAutoScaleControlPointsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAutoScaleControlPointsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAutoScaleControlPointsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAutoScaleControlPointsRequestValidationError{}

// Validate checks the field values on ListAutoScaleControlPointsAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListAutoScaleControlPointsAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListAutoScaleControlPointsAgentResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListAutoScaleControlPointsAgentResponseMultiError, or nil if none found.
func (m *ListAutoScaleControlPointsAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAutoScaleControlPointsAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAutoScaleControlPoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListAutoScaleControlPointsAgentResponseValidationError{
					field:  "AutoScaleControlPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListAutoScaleControlPointsAgentResponseValidationError{
					field:  "AutoScaleControlPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAutoScaleControlPoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAutoScaleControlPointsAgentResponseValidationError{
				field:  "AutoScaleControlPoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return ListAutoScaleControlPointsAgentResponseMultiError(errors)
	}

	return nil
}

// ListAutoScaleControlPointsAgentResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListAutoScaleControlPointsAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAutoScaleControlPointsAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAutoScaleControlPointsAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAutoScaleControlPointsAgentResponseMultiError) AllErrors() []error { return m }

// ListAutoScaleControlPointsAgentResponseValidationError is the validation
// error returned by ListAutoScaleControlPointsAgentResponse.Validate if the
// designated constraints aren't met.
type ListAutoScaleControlPointsAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAutoScaleControlPointsAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAutoScaleControlPointsAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAutoScaleControlPointsAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAutoScaleControlPointsAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAutoScaleControlPointsAgentResponseValidationError) ErrorName() string {
	return "ListAutoScaleControlPointsAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAutoScaleControlPointsAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAutoScaleControlPointsAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAutoScaleControlPointsAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAutoScaleControlPointsAgentResponseValidationError{}

// Validate checks the field values on
// ListAutoScaleControlPointsControllerResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAutoScaleControlPointsControllerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListAutoScaleControlPointsControllerResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListAutoScaleControlPointsControllerResponseMultiError, or nil if none found.
func (m *ListAutoScaleControlPointsControllerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAutoScaleControlPointsControllerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetGlobalAutoScaleControlPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAutoScaleControlPointsControllerResponseValidationError{
						field:  fmt.Sprintf("GlobalAutoScaleControlPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAutoScaleControlPointsControllerResponseValidationError{
						field:  fmt.Sprintf("GlobalAutoScaleControlPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAutoScaleControlPointsControllerResponseValidationError{
					field:  fmt.Sprintf("GlobalAutoScaleControlPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ErrorsCount

	if len(errors) > 0 {
		return ListAutoScaleControlPointsControllerResponseMultiError(errors)
	}

	return nil
}

// ListAutoScaleControlPointsControllerResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListAutoScaleControlPointsControllerResponse.ValidateAll() if the
// designated constraints aren't met.
type ListAutoScaleControlPointsControllerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAutoScaleControlPointsControllerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAutoScaleControlPointsControllerResponseMultiError) AllErrors() []error { return m }

// ListAutoScaleControlPointsControllerResponseValidationError is the
// validation error returned by
// ListAutoScaleControlPointsControllerResponse.Validate if the designated
// constraints aren't met.
type ListAutoScaleControlPointsControllerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAutoScaleControlPointsControllerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAutoScaleControlPointsControllerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAutoScaleControlPointsControllerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAutoScaleControlPointsControllerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAutoScaleControlPointsControllerResponseValidationError) ErrorName() string {
	return "ListAutoScaleControlPointsControllerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAutoScaleControlPointsControllerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAutoScaleControlPointsControllerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAutoScaleControlPointsControllerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAutoScaleControlPointsControllerResponseValidationError{}

// Validate checks the field values on ListDiscoveryEntitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDiscoveryEntitiesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiscoveryEntitiesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDiscoveryEntitiesRequestMultiError, or nil if none found.
func (m *ListDiscoveryEntitiesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiscoveryEntitiesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return ListDiscoveryEntitiesRequestMultiError(errors)
	}

	return nil
}

// ListDiscoveryEntitiesRequestMultiError is an error wrapping multiple
// validation errors returned by ListDiscoveryEntitiesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDiscoveryEntitiesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiscoveryEntitiesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiscoveryEntitiesRequestMultiError) AllErrors() []error { return m }

// ListDiscoveryEntitiesRequestValidationError is the validation error returned
// by ListDiscoveryEntitiesRequest.Validate if the designated constraints
// aren't met.
type ListDiscoveryEntitiesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiscoveryEntitiesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiscoveryEntitiesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiscoveryEntitiesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiscoveryEntitiesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiscoveryEntitiesRequestValidationError) ErrorName() string {
	return "ListDiscoveryEntitiesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDiscoveryEntitiesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiscoveryEntitiesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiscoveryEntitiesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiscoveryEntitiesRequestValidationError{}

// Validate checks the field values on ListDiscoveryEntitiesAgentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDiscoveryEntitiesAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiscoveryEntitiesAgentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListDiscoveryEntitiesAgentResponseMultiError, or nil if none found.
func (m *ListDiscoveryEntitiesAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiscoveryEntitiesAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetEntities()))
		i := 0
		for key := range m.GetEntities() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEntities()[key]
			_ = val

			// no validation rules for Entities[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ListDiscoveryEntitiesAgentResponseValidationError{
							field:  fmt.Sprintf("Entities[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ListDiscoveryEntitiesAgentResponseValidationError{
							field:  fmt.Sprintf("Entities[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ListDiscoveryEntitiesAgentResponseValidationError{
						field:  fmt.Sprintf("Entities[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ListDiscoveryEntitiesAgentResponseMultiError(errors)
	}

	return nil
}

// ListDiscoveryEntitiesAgentResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListDiscoveryEntitiesAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDiscoveryEntitiesAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiscoveryEntitiesAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiscoveryEntitiesAgentResponseMultiError) AllErrors() []error { return m }

// ListDiscoveryEntitiesAgentResponseValidationError is the validation error
// returned by ListDiscoveryEntitiesAgentResponse.Validate if the designated
// constraints aren't met.
type ListDiscoveryEntitiesAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiscoveryEntitiesAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiscoveryEntitiesAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiscoveryEntitiesAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiscoveryEntitiesAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiscoveryEntitiesAgentResponseValidationError) ErrorName() string {
	return "ListDiscoveryEntitiesAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDiscoveryEntitiesAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiscoveryEntitiesAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiscoveryEntitiesAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiscoveryEntitiesAgentResponseValidationError{}

// Validate checks the field values on ListDiscoveryEntitiesControllerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListDiscoveryEntitiesControllerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListDiscoveryEntitiesControllerResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListDiscoveryEntitiesControllerResponseMultiError, or nil if none found.
func (m *ListDiscoveryEntitiesControllerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiscoveryEntitiesControllerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntities()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDiscoveryEntitiesControllerResponseValidationError{
					field:  "Entities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDiscoveryEntitiesControllerResponseValidationError{
					field:  "Entities",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntities()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDiscoveryEntitiesControllerResponseValidationError{
				field:  "Entities",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ErrorsCount

	if len(errors) > 0 {
		return ListDiscoveryEntitiesControllerResponseMultiError(errors)
	}

	return nil
}

// ListDiscoveryEntitiesControllerResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListDiscoveryEntitiesControllerResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDiscoveryEntitiesControllerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiscoveryEntitiesControllerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiscoveryEntitiesControllerResponseMultiError) AllErrors() []error { return m }

// ListDiscoveryEntitiesControllerResponseValidationError is the validation
// error returned by ListDiscoveryEntitiesControllerResponse.Validate if the
// designated constraints aren't met.
type ListDiscoveryEntitiesControllerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiscoveryEntitiesControllerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiscoveryEntitiesControllerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiscoveryEntitiesControllerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiscoveryEntitiesControllerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiscoveryEntitiesControllerResponseValidationError) ErrorName() string {
	return "ListDiscoveryEntitiesControllerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDiscoveryEntitiesControllerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiscoveryEntitiesControllerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiscoveryEntitiesControllerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiscoveryEntitiesControllerResponseValidationError{}

// Validate checks the field values on ListDiscoveryEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDiscoveryEntityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiscoveryEntityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDiscoveryEntityRequestMultiError, or nil if none found.
func (m *ListDiscoveryEntityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiscoveryEntityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.By.(type) {
	case *ListDiscoveryEntityRequest_IpAddress:
		if v == nil {
			err := ListDiscoveryEntityRequestValidationError{
				field:  "By",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for IpAddress
	case *ListDiscoveryEntityRequest_Name:
		if v == nil {
			err := ListDiscoveryEntityRequestValidationError{
				field:  "By",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Name
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListDiscoveryEntityRequestMultiError(errors)
	}

	return nil
}

// ListDiscoveryEntityRequestMultiError is an error wrapping multiple
// validation errors returned by ListDiscoveryEntityRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDiscoveryEntityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiscoveryEntityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiscoveryEntityRequestMultiError) AllErrors() []error { return m }

// ListDiscoveryEntityRequestValidationError is the validation error returned
// by ListDiscoveryEntityRequest.Validate if the designated constraints aren't met.
type ListDiscoveryEntityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiscoveryEntityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiscoveryEntityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiscoveryEntityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiscoveryEntityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiscoveryEntityRequestValidationError) ErrorName() string {
	return "ListDiscoveryEntityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDiscoveryEntityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiscoveryEntityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiscoveryEntityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiscoveryEntityRequestValidationError{}

// Validate checks the field values on ListDiscoveryEntityAgentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListDiscoveryEntityAgentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiscoveryEntityAgentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListDiscoveryEntityAgentResponseMultiError, or nil if none found.
func (m *ListDiscoveryEntityAgentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiscoveryEntityAgentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDiscoveryEntityAgentResponseValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDiscoveryEntityAgentResponseValidationError{
					field:  "Entity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDiscoveryEntityAgentResponseValidationError{
				field:  "Entity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDiscoveryEntityAgentResponseMultiError(errors)
	}

	return nil
}

// ListDiscoveryEntityAgentResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListDiscoveryEntityAgentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDiscoveryEntityAgentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiscoveryEntityAgentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiscoveryEntityAgentResponseMultiError) AllErrors() []error { return m }

// ListDiscoveryEntityAgentResponseValidationError is the validation error
// returned by ListDiscoveryEntityAgentResponse.Validate if the designated
// constraints aren't met.
type ListDiscoveryEntityAgentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiscoveryEntityAgentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiscoveryEntityAgentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiscoveryEntityAgentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiscoveryEntityAgentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiscoveryEntityAgentResponseValidationError) ErrorName() string {
	return "ListDiscoveryEntityAgentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDiscoveryEntityAgentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiscoveryEntityAgentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiscoveryEntityAgentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiscoveryEntityAgentResponseValidationError{}

// Validate checks the field values on ListAgentsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListAgentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentsRequestMultiError, or nil if none found.
func (m *ListAgentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return ListAgentsRequestMultiError(errors)
	}

	return nil
}

// ListAgentsRequestMultiError is an error wrapping multiple validation errors
// returned by ListAgentsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListAgentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentsRequestMultiError) AllErrors() []error { return m }

// ListAgentsRequestValidationError is the validation error returned by
// ListAgentsRequest.Validate if the designated constraints aren't met.
type ListAgentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentsRequestValidationError) ErrorName() string {
	return "ListAgentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentsRequestValidationError{}

// Validate checks the field values on ListAgentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAgentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAgentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAgentsResponseMultiError, or nil if none found.
func (m *ListAgentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAgentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAgentsResponseMultiError(errors)
	}

	return nil
}

// ListAgentsResponseMultiError is an error wrapping multiple validation errors
// returned by ListAgentsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListAgentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAgentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAgentsResponseMultiError) AllErrors() []error { return m }

// ListAgentsResponseValidationError is the validation error returned by
// ListAgentsResponse.Validate if the designated constraints aren't met.
type ListAgentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAgentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAgentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAgentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAgentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAgentsResponseValidationError) ErrorName() string {
	return "ListAgentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAgentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAgentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAgentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAgentsResponseValidationError{}

// Validate checks the field values on GlobalFlowControlPoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalFlowControlPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalFlowControlPoint with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalFlowControlPointMultiError, or nil if none found.
func (m *GlobalFlowControlPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalFlowControlPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFlowControlPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalFlowControlPointValidationError{
					field:  "FlowControlPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalFlowControlPointValidationError{
					field:  "FlowControlPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlowControlPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalFlowControlPointValidationError{
				field:  "FlowControlPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return GlobalFlowControlPointMultiError(errors)
	}

	return nil
}

// GlobalFlowControlPointMultiError is an error wrapping multiple validation
// errors returned by GlobalFlowControlPoint.ValidateAll() if the designated
// constraints aren't met.
type GlobalFlowControlPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalFlowControlPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalFlowControlPointMultiError) AllErrors() []error { return m }

// GlobalFlowControlPointValidationError is the validation error returned by
// GlobalFlowControlPoint.Validate if the designated constraints aren't met.
type GlobalFlowControlPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalFlowControlPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalFlowControlPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalFlowControlPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalFlowControlPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalFlowControlPointValidationError) ErrorName() string {
	return "GlobalFlowControlPointValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalFlowControlPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalFlowControlPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalFlowControlPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalFlowControlPointValidationError{}

// Validate checks the field values on GlobalAutoScaleControlPoint with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GlobalAutoScaleControlPoint) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalAutoScaleControlPoint with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GlobalAutoScaleControlPointMultiError, or nil if none found.
func (m *GlobalAutoScaleControlPoint) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalAutoScaleControlPoint) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAutoScaleControlPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalAutoScaleControlPointValidationError{
					field:  "AutoScaleControlPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalAutoScaleControlPointValidationError{
					field:  "AutoScaleControlPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAutoScaleControlPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalAutoScaleControlPointValidationError{
				field:  "AutoScaleControlPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return GlobalAutoScaleControlPointMultiError(errors)
	}

	return nil
}

// GlobalAutoScaleControlPointMultiError is an error wrapping multiple
// validation errors returned by GlobalAutoScaleControlPoint.ValidateAll() if
// the designated constraints aren't met.
type GlobalAutoScaleControlPointMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalAutoScaleControlPointMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalAutoScaleControlPointMultiError) AllErrors() []error { return m }

// GlobalAutoScaleControlPointValidationError is the validation error returned
// by GlobalAutoScaleControlPoint.Validate if the designated constraints
// aren't met.
type GlobalAutoScaleControlPointValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalAutoScaleControlPointValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalAutoScaleControlPointValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalAutoScaleControlPointValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalAutoScaleControlPointValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalAutoScaleControlPointValidationError) ErrorName() string {
	return "GlobalAutoScaleControlPointValidationError"
}

// Error satisfies the builtin error interface
func (e GlobalAutoScaleControlPointValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalAutoScaleControlPoint.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalAutoScaleControlPointValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalAutoScaleControlPointValidationError{}

// Validate checks the field values on GlobalService with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalService with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalServiceMultiError, or
// nil if none found.
func (m *GlobalService) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return GlobalServiceMultiError(errors)
	}

	return nil
}

// GlobalServiceMultiError is an error wrapping multiple validation errors
// returned by GlobalService.ValidateAll() if the designated constraints
// aren't met.
type GlobalServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalServiceMultiError) AllErrors() []error { return m }

// GlobalServiceValidationError is the validation error returned by
// GlobalService.Validate if the designated constraints aren't met.
type GlobalServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalServiceValidationError) ErrorName() string { return "GlobalServiceValidationError" }

// Error satisfies the builtin error interface
func (e GlobalServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalServiceValidationError{}

// Validate checks the field values on PreviewFlowLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewFlowLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewFlowLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewFlowLabelsRequestMultiError, or nil if none found.
func (m *PreviewFlowLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewFlowLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentGroup

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewFlowLabelsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewFlowLabelsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewFlowLabelsRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PreviewFlowLabelsRequestMultiError(errors)
	}

	return nil
}

// PreviewFlowLabelsRequestMultiError is an error wrapping multiple validation
// errors returned by PreviewFlowLabelsRequest.ValidateAll() if the designated
// constraints aren't met.
type PreviewFlowLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewFlowLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewFlowLabelsRequestMultiError) AllErrors() []error { return m }

// PreviewFlowLabelsRequestValidationError is the validation error returned by
// PreviewFlowLabelsRequest.Validate if the designated constraints aren't met.
type PreviewFlowLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewFlowLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewFlowLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewFlowLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewFlowLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewFlowLabelsRequestValidationError) ErrorName() string {
	return "PreviewFlowLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewFlowLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewFlowLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewFlowLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewFlowLabelsRequestValidationError{}

// Validate checks the field values on PreviewHTTPRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewHTTPRequestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewHTTPRequestsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewHTTPRequestsRequestMultiError, or nil if none found.
func (m *PreviewHTTPRequestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewHTTPRequestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AgentGroup

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewHTTPRequestsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewHTTPRequestsRequestValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewHTTPRequestsRequestValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PreviewHTTPRequestsRequestMultiError(errors)
	}

	return nil
}

// PreviewHTTPRequestsRequestMultiError is an error wrapping multiple
// validation errors returned by PreviewHTTPRequestsRequest.ValidateAll() if
// the designated constraints aren't met.
type PreviewHTTPRequestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewHTTPRequestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewHTTPRequestsRequestMultiError) AllErrors() []error { return m }

// PreviewHTTPRequestsRequestValidationError is the validation error returned
// by PreviewHTTPRequestsRequest.Validate if the designated constraints aren't met.
type PreviewHTTPRequestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewHTTPRequestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewHTTPRequestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewHTTPRequestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewHTTPRequestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewHTTPRequestsRequestValidationError) ErrorName() string {
	return "PreviewHTTPRequestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewHTTPRequestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewHTTPRequestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewHTTPRequestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewHTTPRequestsRequestValidationError{}

// Validate checks the field values on PreviewFlowLabelsControllerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PreviewFlowLabelsControllerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewFlowLabelsControllerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PreviewFlowLabelsControllerResponseMultiError, or nil if none found.
func (m *PreviewFlowLabelsControllerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewFlowLabelsControllerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewFlowLabelsControllerResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewFlowLabelsControllerResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewFlowLabelsControllerResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PreviewFlowLabelsControllerResponseMultiError(errors)
	}

	return nil
}

// PreviewFlowLabelsControllerResponseMultiError is an error wrapping multiple
// validation errors returned by
// PreviewFlowLabelsControllerResponse.ValidateAll() if the designated
// constraints aren't met.
type PreviewFlowLabelsControllerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewFlowLabelsControllerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewFlowLabelsControllerResponseMultiError) AllErrors() []error { return m }

// PreviewFlowLabelsControllerResponseValidationError is the validation error
// returned by PreviewFlowLabelsControllerResponse.Validate if the designated
// constraints aren't met.
type PreviewFlowLabelsControllerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewFlowLabelsControllerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewFlowLabelsControllerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewFlowLabelsControllerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewFlowLabelsControllerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewFlowLabelsControllerResponseValidationError) ErrorName() string {
	return "PreviewFlowLabelsControllerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewFlowLabelsControllerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewFlowLabelsControllerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewFlowLabelsControllerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewFlowLabelsControllerResponseValidationError{}

// Validate checks the field values on PreviewHTTPRequestsControllerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PreviewHTTPRequestsControllerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewHTTPRequestsControllerResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PreviewHTTPRequestsControllerResponseMultiError, or nil if none found.
func (m *PreviewHTTPRequestsControllerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewHTTPRequestsControllerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResponse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewHTTPRequestsControllerResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewHTTPRequestsControllerResponseValidationError{
					field:  "Response",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResponse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewHTTPRequestsControllerResponseValidationError{
				field:  "Response",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PreviewHTTPRequestsControllerResponseMultiError(errors)
	}

	return nil
}

// PreviewHTTPRequestsControllerResponseMultiError is an error wrapping
// multiple validation errors returned by
// PreviewHTTPRequestsControllerResponse.ValidateAll() if the designated
// constraints aren't met.
type PreviewHTTPRequestsControllerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewHTTPRequestsControllerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewHTTPRequestsControllerResponseMultiError) AllErrors() []error { return m }

// PreviewHTTPRequestsControllerResponseValidationError is the validation error
// returned by PreviewHTTPRequestsControllerResponse.Validate if the
// designated constraints aren't met.
type PreviewHTTPRequestsControllerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewHTTPRequestsControllerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewHTTPRequestsControllerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewHTTPRequestsControllerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewHTTPRequestsControllerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewHTTPRequestsControllerResponseValidationError) ErrorName() string {
	return "PreviewHTTPRequestsControllerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewHTTPRequestsControllerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewHTTPRequestsControllerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewHTTPRequestsControllerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewHTTPRequestsControllerResponseValidationError{}
