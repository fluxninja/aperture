// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aperture/cloud/cmd/v1/cmd.proto

// Messages for aperturectl â†’ cloud controller communication.

package cmdv1

import (
	context "context"
	v1 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/policy/language/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloudController_UpsertPolicy_FullMethodName = "/aperture.cloud.cmd.v1.CloudController/UpsertPolicy"
	CloudController_DeletePolicy_FullMethodName = "/aperture.cloud.cmd.v1.CloudController/DeletePolicy"
)

// CloudControllerClient is the client API for CloudController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudControllerClient interface {
	UpsertPolicy(ctx context.Context, in *v1.UpsertPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePolicy(ctx context.Context, in *v1.DeletePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudControllerClient(cc grpc.ClientConnInterface) CloudControllerClient {
	return &cloudControllerClient{cc}
}

func (c *cloudControllerClient) UpsertPolicy(ctx context.Context, in *v1.UpsertPolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudController_UpsertPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudControllerClient) DeletePolicy(ctx context.Context, in *v1.DeletePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudController_DeletePolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudControllerServer is the server API for CloudController service.
// All implementations should embed UnimplementedCloudControllerServer
// for forward compatibility
type CloudControllerServer interface {
	UpsertPolicy(context.Context, *v1.UpsertPolicyRequest) (*emptypb.Empty, error)
	DeletePolicy(context.Context, *v1.DeletePolicyRequest) (*emptypb.Empty, error)
}

// UnimplementedCloudControllerServer should be embedded to have forward compatible implementations.
type UnimplementedCloudControllerServer struct {
}

func (UnimplementedCloudControllerServer) UpsertPolicy(context.Context, *v1.UpsertPolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPolicy not implemented")
}
func (UnimplementedCloudControllerServer) DeletePolicy(context.Context, *v1.DeletePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}

// UnsafeCloudControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudControllerServer will
// result in compilation errors.
type UnsafeCloudControllerServer interface {
	mustEmbedUnimplementedCloudControllerServer()
}

func RegisterCloudControllerServer(s grpc.ServiceRegistrar, srv CloudControllerServer) {
	s.RegisterService(&CloudController_ServiceDesc, srv)
}

func _CloudController_UpsertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpsertPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudControllerServer).UpsertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudController_UpsertPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudControllerServer).UpsertPolicy(ctx, req.(*v1.UpsertPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudController_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudControllerServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudController_DeletePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudControllerServer).DeletePolicy(ctx, req.(*v1.DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudController_ServiceDesc is the grpc.ServiceDesc for CloudController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aperture.cloud.cmd.v1.CloudController",
	HandlerType: (*CloudControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertPolicy",
			Handler:    _CloudController_UpsertPolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _CloudController_DeletePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aperture/cloud/cmd/v1/cmd.proto",
}
