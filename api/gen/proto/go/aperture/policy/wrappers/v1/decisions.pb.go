// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: aperture/policy/wrappers/v1/decisions.proto

package wrappersv1

import (
	v1 "github.com/fluxninja/aperture/api/gen/proto/go/aperture/policy/decisions/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoadShedDecisionWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommonAttributes
	CommonAttributes *CommonAttributes `protobuf:"bytes,1,opt,name=common_attributes,json=commonAttributes,proto3" json:"common_attributes,omitempty"`
	// Load Shed Decision
	LoadShedDecision *v1.LoadShedDecision `protobuf:"bytes,2,opt,name=load_shed_decision,json=loadShedDecision,proto3" json:"load_shed_decision,omitempty"`
}

func (x *LoadShedDecisionWrapper) Reset() {
	*x = LoadShedDecisionWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadShedDecisionWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadShedDecisionWrapper) ProtoMessage() {}

func (x *LoadShedDecisionWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadShedDecisionWrapper.ProtoReflect.Descriptor instead.
func (*LoadShedDecisionWrapper) Descriptor() ([]byte, []int) {
	return file_aperture_policy_wrappers_v1_decisions_proto_rawDescGZIP(), []int{0}
}

func (x *LoadShedDecisionWrapper) GetCommonAttributes() *CommonAttributes {
	if x != nil {
		return x.CommonAttributes
	}
	return nil
}

func (x *LoadShedDecisionWrapper) GetLoadShedDecision() *v1.LoadShedDecision {
	if x != nil {
		return x.LoadShedDecision
	}
	return nil
}

type TokensDecisionWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommonAttributes
	CommonAttributes *CommonAttributes `protobuf:"bytes,1,opt,name=common_attributes,json=commonAttributes,proto3" json:"common_attributes,omitempty"`
	// Tokens Decision
	TokensDecision *v1.TokensDecision `protobuf:"bytes,2,opt,name=tokens_decision,json=tokensDecision,proto3" json:"tokens_decision,omitempty"`
}

func (x *TokensDecisionWrapper) Reset() {
	*x = TokensDecisionWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokensDecisionWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokensDecisionWrapper) ProtoMessage() {}

func (x *TokensDecisionWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokensDecisionWrapper.ProtoReflect.Descriptor instead.
func (*TokensDecisionWrapper) Descriptor() ([]byte, []int) {
	return file_aperture_policy_wrappers_v1_decisions_proto_rawDescGZIP(), []int{1}
}

func (x *TokensDecisionWrapper) GetCommonAttributes() *CommonAttributes {
	if x != nil {
		return x.CommonAttributes
	}
	return nil
}

func (x *TokensDecisionWrapper) GetTokensDecision() *v1.TokensDecision {
	if x != nil {
		return x.TokensDecision
	}
	return nil
}

type RateLimiterDecisionWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CommonAttributes
	CommonAttributes *CommonAttributes `protobuf:"bytes,1,opt,name=common_attributes,json=commonAttributes,proto3" json:"common_attributes,omitempty"`
	// Rate Limiter Decision
	RateLimiterDecision *v1.RateLimiterDecision `protobuf:"bytes,2,opt,name=rate_limiter_decision,json=rateLimiterDecision,proto3" json:"rate_limiter_decision,omitempty"`
}

func (x *RateLimiterDecisionWrapper) Reset() {
	*x = RateLimiterDecisionWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiterDecisionWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiterDecisionWrapper) ProtoMessage() {}

func (x *RateLimiterDecisionWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiterDecisionWrapper.ProtoReflect.Descriptor instead.
func (*RateLimiterDecisionWrapper) Descriptor() ([]byte, []int) {
	return file_aperture_policy_wrappers_v1_decisions_proto_rawDescGZIP(), []int{2}
}

func (x *RateLimiterDecisionWrapper) GetCommonAttributes() *CommonAttributes {
	if x != nil {
		return x.CommonAttributes
	}
	return nil
}

func (x *RateLimiterDecisionWrapper) GetRateLimiterDecision() *v1.RateLimiterDecision {
	if x != nil {
		return x.RateLimiterDecision
	}
	return nil
}

var File_aperture_policy_wrappers_v1_decisions_proto protoreflect.FileDescriptor

var file_aperture_policy_wrappers_v1_decisions_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x2c, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x64, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x5a,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x12, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xca, 0x01, 0x0a, 0x15, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x01, 0x0a, 0x1a, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x65, 0x0a, 0x15, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x13, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x97, 0x02, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69,
	0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x50, 0x57, 0xaa, 0x02, 0x1b, 0x41, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1e, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x3a, 0x3a, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_wrappers_v1_decisions_proto_rawDescOnce sync.Once
	file_aperture_policy_wrappers_v1_decisions_proto_rawDescData = file_aperture_policy_wrappers_v1_decisions_proto_rawDesc
)

func file_aperture_policy_wrappers_v1_decisions_proto_rawDescGZIP() []byte {
	file_aperture_policy_wrappers_v1_decisions_proto_rawDescOnce.Do(func() {
		file_aperture_policy_wrappers_v1_decisions_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_wrappers_v1_decisions_proto_rawDescData)
	})
	return file_aperture_policy_wrappers_v1_decisions_proto_rawDescData
}

var file_aperture_policy_wrappers_v1_decisions_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_aperture_policy_wrappers_v1_decisions_proto_goTypes = []interface{}{
	(*LoadShedDecisionWrapper)(nil),    // 0: aperture.policy.wrappers.v1.LoadShedDecisionWrapper
	(*TokensDecisionWrapper)(nil),      // 1: aperture.policy.wrappers.v1.TokensDecisionWrapper
	(*RateLimiterDecisionWrapper)(nil), // 2: aperture.policy.wrappers.v1.RateLimiterDecisionWrapper
	(*CommonAttributes)(nil),           // 3: aperture.policy.wrappers.v1.CommonAttributes
	(*v1.LoadShedDecision)(nil),        // 4: aperture.policy.decisions.v1.LoadShedDecision
	(*v1.TokensDecision)(nil),          // 5: aperture.policy.decisions.v1.TokensDecision
	(*v1.RateLimiterDecision)(nil),     // 6: aperture.policy.decisions.v1.RateLimiterDecision
}
var file_aperture_policy_wrappers_v1_decisions_proto_depIdxs = []int32{
	3, // 0: aperture.policy.wrappers.v1.LoadShedDecisionWrapper.common_attributes:type_name -> aperture.policy.wrappers.v1.CommonAttributes
	4, // 1: aperture.policy.wrappers.v1.LoadShedDecisionWrapper.load_shed_decision:type_name -> aperture.policy.decisions.v1.LoadShedDecision
	3, // 2: aperture.policy.wrappers.v1.TokensDecisionWrapper.common_attributes:type_name -> aperture.policy.wrappers.v1.CommonAttributes
	5, // 3: aperture.policy.wrappers.v1.TokensDecisionWrapper.tokens_decision:type_name -> aperture.policy.decisions.v1.TokensDecision
	3, // 4: aperture.policy.wrappers.v1.RateLimiterDecisionWrapper.common_attributes:type_name -> aperture.policy.wrappers.v1.CommonAttributes
	6, // 5: aperture.policy.wrappers.v1.RateLimiterDecisionWrapper.rate_limiter_decision:type_name -> aperture.policy.decisions.v1.RateLimiterDecision
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_aperture_policy_wrappers_v1_decisions_proto_init() }
func file_aperture_policy_wrappers_v1_decisions_proto_init() {
	if File_aperture_policy_wrappers_v1_decisions_proto != nil {
		return
	}
	file_aperture_policy_wrappers_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadShedDecisionWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokensDecisionWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_wrappers_v1_decisions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiterDecisionWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_wrappers_v1_decisions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aperture_policy_wrappers_v1_decisions_proto_goTypes,
		DependencyIndexes: file_aperture_policy_wrappers_v1_decisions_proto_depIdxs,
		MessageInfos:      file_aperture_policy_wrappers_v1_decisions_proto_msgTypes,
	}.Build()
	File_aperture_policy_wrappers_v1_decisions_proto = out.File
	file_aperture_policy_wrappers_v1_decisions_proto_rawDesc = nil
	file_aperture_policy_wrappers_v1_decisions_proto_goTypes = nil
	file_aperture_policy_wrappers_v1_decisions_proto_depIdxs = nil
}
