// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: aperture/policy/language/v1/autoscale.proto

package languagev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes which pods a control or observability
// component should apply to.
type KubernetesObjectSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which [agent-group](/concepts/flow-control/flow-selector.md#agent-group) this
	// selector applies to.
	AgentGroup string `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty" default:"default"` // @gotags: default:"default"
	// Kubernetes namespace that the resource belongs to.
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty" validate:"required"` // @gotags: validate:"required"
	// API version of Kubernetes resource
	ApiVersion string `protobuf:"bytes,3,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty" validate:"required"` // @gotags: validate:"required"
	// Kubernetes resource type.
	Kind string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty" validate:"required"` // @gotags: validate:"required"
	// Kubernetes resource name.
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *KubernetesObjectSelector) Reset() {
	*x = KubernetesObjectSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesObjectSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesObjectSelector) ProtoMessage() {}

func (x *KubernetesObjectSelector) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesObjectSelector.ProtoReflect.Descriptor instead.
func (*KubernetesObjectSelector) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesObjectSelector) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

func (x *KubernetesObjectSelector) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KubernetesObjectSelector) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *KubernetesObjectSelector) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *KubernetesObjectSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// AutoScale components are used to scale a service.
type AutoScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//
	//	*AutoScale_PodScaler
	//	*AutoScale_AutoScaler
	//	*AutoScale_PodAutoScaler
	Component isAutoScale_Component `protobuf_oneof:"component"`
}

func (x *AutoScale) Reset() {
	*x = AutoScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScale) ProtoMessage() {}

func (x *AutoScale) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScale.ProtoReflect.Descriptor instead.
func (*AutoScale) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{1}
}

func (m *AutoScale) GetComponent() isAutoScale_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *AutoScale) GetPodScaler() *PodScaler {
	if x, ok := x.GetComponent().(*AutoScale_PodScaler); ok {
		return x.PodScaler
	}
	return nil
}

func (x *AutoScale) GetAutoScaler() *AutoScaler {
	if x, ok := x.GetComponent().(*AutoScale_AutoScaler); ok {
		return x.AutoScaler
	}
	return nil
}

func (x *AutoScale) GetPodAutoScaler() *PodAutoScaler {
	if x, ok := x.GetComponent().(*AutoScale_PodAutoScaler); ok {
		return x.PodAutoScaler
	}
	return nil
}

type isAutoScale_Component interface {
	isAutoScale_Component()
}

type AutoScale_PodScaler struct {
	// PodScaler provides pod horizontal scaling functionality for scalable Kubernetes resources.
	PodScaler *PodScaler `protobuf:"bytes,1,opt,name=pod_scaler,json=podScaler,proto3,oneof"`
}

type AutoScale_AutoScaler struct {
	// _AutoScaler_ provides auto scaling functionality for any scalable resource.
	AutoScaler *AutoScaler `protobuf:"bytes,2,opt,name=auto_scaler,json=autoScaler,proto3,oneof"`
}

type AutoScale_PodAutoScaler struct {
	// _PodAutoScaler_ provides auto scaling functionality for scalable Kubernetes resource.
	PodAutoScaler *PodAutoScaler `protobuf:"bytes,3,opt,name=pod_auto_scaler,json=podAutoScaler,proto3,oneof"`
}

func (*AutoScale_PodScaler) isAutoScale_Component() {}

func (*AutoScale_AutoScaler) isAutoScale_Component() {}

func (*AutoScale_PodAutoScaler) isAutoScale_Component() {}

// Component for scaling pods based on a signal.
type PodScaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Kubernetes object on which horizontal scaling is applied.
	KubernetesObjectSelector *KubernetesObjectSelector `protobuf:"bytes,1,opt,name=kubernetes_object_selector,json=kubernetesObjectSelector,proto3" json:"kubernetes_object_selector,omitempty" validate:"required"` // @gotags: validate:"required"
	// Reports actual and configured number of replicas.
	ScaleReporter *PodScaler_ScaleReporter `protobuf:"bytes,2,opt,name=scale_reporter,json=scaleReporter,proto3" json:"scale_reporter,omitempty"`
	// Actuates scaling of pods based on a signal.
	ScaleActuator *PodScaler_ScaleActuator `protobuf:"bytes,3,opt,name=scale_actuator,json=scaleActuator,proto3" json:"scale_actuator,omitempty"`
}

func (x *PodScaler) Reset() {
	*x = PodScaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodScaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodScaler) ProtoMessage() {}

func (x *PodScaler) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodScaler.ProtoReflect.Descriptor instead.
func (*PodScaler) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{2}
}

func (x *PodScaler) GetKubernetesObjectSelector() *KubernetesObjectSelector {
	if x != nil {
		return x.KubernetesObjectSelector
	}
	return nil
}

func (x *PodScaler) GetScaleReporter() *PodScaler_ScaleReporter {
	if x != nil {
		return x.ScaleReporter
	}
	return nil
}

func (x *PodScaler) GetScaleActuator() *PodScaler_ScaleActuator {
	if x != nil {
		return x.ScaleActuator
	}
	return nil
}

// Increasing Gradient defines a controller for scaling out based on Gradient Controller.
type IncreasingGradient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Gradient.
	InPorts *IncreasingGradient_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Gradient parameters for the controller. Defaults and constraints:
	// * `slope` = 1
	// * `min_gradient` = 1 (can't be changed)
	// * `max_gradient` = +Inf (must be greater than 1)
	Parameters *IncreasingGradient_Parameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *IncreasingGradient) Reset() {
	*x = IncreasingGradient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreasingGradient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreasingGradient) ProtoMessage() {}

func (x *IncreasingGradient) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreasingGradient.ProtoReflect.Descriptor instead.
func (*IncreasingGradient) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{3}
}

func (x *IncreasingGradient) GetInPorts() *IncreasingGradient_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *IncreasingGradient) GetParameters() *IncreasingGradient_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Decreasing Gradient defines a controller for scaling in based on Gradient Controller.
type DecreasingGradient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Gradient.
	InPorts *DecreasingGradient_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Gradient parameters for the controller. Defaults and constraints:
	// * `slope` = 1
	// * `min_gradient` = -Inf (must be less than 1)
	// * `max_gradient` = 1 (can't be changed)
	Parameters *DecreasingGradient_Parameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *DecreasingGradient) Reset() {
	*x = DecreasingGradient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecreasingGradient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecreasingGradient) ProtoMessage() {}

func (x *DecreasingGradient) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecreasingGradient.ProtoReflect.Descriptor instead.
func (*DecreasingGradient) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{4}
}

func (x *DecreasingGradient) GetInPorts() *DecreasingGradient_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *DecreasingGradient) GetParameters() *DecreasingGradient_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ScaleOutController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controller
	Controller *ScaleOutController_Controller `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration for embedded Alerter.
	AlerterParameters *Alerter_Parameters `protobuf:"bytes,2,opt,name=alerter_parameters,json=alerterParameters,proto3" json:"alerter_parameters,omitempty"`
}

func (x *ScaleOutController) Reset() {
	*x = ScaleOutController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleOutController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleOutController) ProtoMessage() {}

func (x *ScaleOutController) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleOutController.ProtoReflect.Descriptor instead.
func (*ScaleOutController) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{5}
}

func (x *ScaleOutController) GetController() *ScaleOutController_Controller {
	if x != nil {
		return x.Controller
	}
	return nil
}

func (x *ScaleOutController) GetAlerterParameters() *Alerter_Parameters {
	if x != nil {
		return x.AlerterParameters
	}
	return nil
}

type ScaleInController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Controller
	Controller *ScaleInController_Controller `protobuf:"bytes,1,opt,name=controller,proto3" json:"controller,omitempty"`
	// Configuration for embedded Alerter.
	AlerterParameters *Alerter_Parameters `protobuf:"bytes,2,opt,name=alerter_parameters,json=alerterParameters,proto3" json:"alerter_parameters,omitempty"`
}

func (x *ScaleInController) Reset() {
	*x = ScaleInController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleInController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleInController) ProtoMessage() {}

func (x *ScaleInController) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleInController.ProtoReflect.Descriptor instead.
func (*ScaleInController) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{6}
}

func (x *ScaleInController) GetController() *ScaleInController_Controller {
	if x != nil {
		return x.Controller
	}
	return nil
}

func (x *ScaleInController) GetAlerterParameters() *Alerter_Parameters {
	if x != nil {
		return x.AlerterParameters
	}
	return nil
}

// KubernetesReplicas defines a horizontal pod scaler for Kubernetes.
type KubernetesReplicas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Kubernetes object on which horizontal scaling is applied.
	KubernetesObjectSelector *KubernetesObjectSelector `protobuf:"bytes,1,opt,name=kubernetes_object_selector,json=kubernetesObjectSelector,proto3" json:"kubernetes_object_selector,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration key for DynamicConfig
	DynamicConfigKey string `protobuf:"bytes,2,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration.
	DefaultConfig *PodScaler_ScaleActuator_DynamicConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *KubernetesReplicas) Reset() {
	*x = KubernetesReplicas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesReplicas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesReplicas) ProtoMessage() {}

func (x *KubernetesReplicas) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesReplicas.ProtoReflect.Descriptor instead.
func (*KubernetesReplicas) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{7}
}

func (x *KubernetesReplicas) GetKubernetesObjectSelector() *KubernetesObjectSelector {
	if x != nil {
		return x.KubernetesObjectSelector
	}
	return nil
}

func (x *KubernetesReplicas) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *KubernetesReplicas) GetDefaultConfig() *PodScaler_ScaleActuator_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// _AutoScaler_ provides auto scaling functionality for any scalable resource. Multiple _Controllers_ can be defined on the _AutoScaler_ for performing scale-out or scale-in. The _AutoScaler_ can interface with infrastructure APIs such as Kubernetes to perform auto scale.
type AutoScaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the _AutoScaler_.
	OutPorts *AutoScaler_Outs   `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	Scaler   *AutoScaler_Scaler `protobuf:"bytes,2,opt,name=scaler,proto3" json:"scaler,omitempty" validate:"required"` // @gotags: validate:"required"
	// The minimum scale to which the _AutoScaler_ can scale-in. For example, in case of KubernetesReplicas Scaler, this is the minimum number of replicas.
	MinScale int64 `protobuf:"varint,3,opt,name=min_scale,json=minScale,proto3" json:"min_scale,omitempty" default:"0" validate:"gte=0"` // @gotags: default:"0" validate:"gte=0"
	// The maximum scale to which the _AutoScaler_ can scale-out. For example, in case of KubernetesReplicas Scaler, this is the maximum number of replicas.
	MaxScale int64 `protobuf:"varint,4,opt,name=max_scale,json=maxScale,proto3" json:"max_scale,omitempty" default:"9223372036854775807" validate:"gt=0"` // @gotags: default:"9223372036854775807" validate:"gt=0"
	// List of _Controllers_ for scaling out.
	ScaleOutControllers []*ScaleOutController `protobuf:"bytes,5,rep,name=scale_out_controllers,json=scaleOutControllers,proto3" json:"scale_out_controllers,omitempty"`
	// List of _Controllers_ for scaling in.
	ScaleInControllers []*ScaleInController `protobuf:"bytes,6,rep,name=scale_in_controllers,json=scaleInControllers,proto3" json:"scale_in_controllers,omitempty"`
	// The maximum increase of scale (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 10% of current scale value.
	MaxScaleOutPercentage float64 `protobuf:"fixed64,8,opt,name=max_scale_out_percentage,json=maxScaleOutPercentage,proto3" json:"max_scale_out_percentage,omitempty" default:"10"` // @gotags: default:"10"
	// The maximum decrease of scale (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 1% of current scale value.
	MaxScaleInPercentage float64 `protobuf:"fixed64,7,opt,name=max_scale_in_percentage,json=maxScaleInPercentage,proto3" json:"max_scale_in_percentage,omitempty" default:"1"` // @gotags: default:"1"
	// The amount of time to wait after a scale-out operation for another scale-out or scale-in operation.
	ScaleOutCooldown *durationpb.Duration `protobuf:"bytes,9,opt,name=scale_out_cooldown,json=scaleOutCooldown,proto3" json:"scale_out_cooldown,omitempty" default:"30s"` // @gotags: default:"30s"
	// The amount of time to wait after a scale-in operation for another scale-in operation.
	ScaleInCooldown *durationpb.Duration `protobuf:"bytes,10,opt,name=scale_in_cooldown,json=scaleInCooldown,proto3" json:"scale_in_cooldown,omitempty" default:"120s"` // @gotags: default:"120s"
	// Cooldown override percentage defines a threshold change in scale-out beyond which previous cooldown is overridden.
	// For example, if the cooldown is 5 minutes and the cooldown override percentage is 10%, then if the
	// scale-increases by 10% or more, the previous cooldown is cancelled. Defaults to 50%.
	CooldownOverridePercentage float64 `protobuf:"fixed64,11,opt,name=cooldown_override_percentage,json=cooldownOverridePercentage,proto3" json:"cooldown_override_percentage,omitempty" default:"50"` // @gotags: default:"50"
	// Configuration for scale-out Alerter.
	ScaleOutAlerterParameters *Alerter_Parameters `protobuf:"bytes,12,opt,name=scale_out_alerter_parameters,json=scaleOutAlerterParameters,proto3" json:"scale_out_alerter_parameters,omitempty"`
	// Configuration for scale-in Alerter.
	ScaleInAlerterParameters *Alerter_Parameters `protobuf:"bytes,13,opt,name=scale_in_alerter_parameters,json=scaleInAlerterParameters,proto3" json:"scale_in_alerter_parameters,omitempty"`
}

func (x *AutoScaler) Reset() {
	*x = AutoScaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScaler) ProtoMessage() {}

func (x *AutoScaler) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScaler.ProtoReflect.Descriptor instead.
func (*AutoScaler) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{8}
}

func (x *AutoScaler) GetOutPorts() *AutoScaler_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *AutoScaler) GetScaler() *AutoScaler_Scaler {
	if x != nil {
		return x.Scaler
	}
	return nil
}

func (x *AutoScaler) GetMinScale() int64 {
	if x != nil {
		return x.MinScale
	}
	return 0
}

func (x *AutoScaler) GetMaxScale() int64 {
	if x != nil {
		return x.MaxScale
	}
	return 0
}

func (x *AutoScaler) GetScaleOutControllers() []*ScaleOutController {
	if x != nil {
		return x.ScaleOutControllers
	}
	return nil
}

func (x *AutoScaler) GetScaleInControllers() []*ScaleInController {
	if x != nil {
		return x.ScaleInControllers
	}
	return nil
}

func (x *AutoScaler) GetMaxScaleOutPercentage() float64 {
	if x != nil {
		return x.MaxScaleOutPercentage
	}
	return 0
}

func (x *AutoScaler) GetMaxScaleInPercentage() float64 {
	if x != nil {
		return x.MaxScaleInPercentage
	}
	return 0
}

func (x *AutoScaler) GetScaleOutCooldown() *durationpb.Duration {
	if x != nil {
		return x.ScaleOutCooldown
	}
	return nil
}

func (x *AutoScaler) GetScaleInCooldown() *durationpb.Duration {
	if x != nil {
		return x.ScaleInCooldown
	}
	return nil
}

func (x *AutoScaler) GetCooldownOverridePercentage() float64 {
	if x != nil {
		return x.CooldownOverridePercentage
	}
	return 0
}

func (x *AutoScaler) GetScaleOutAlerterParameters() *Alerter_Parameters {
	if x != nil {
		return x.ScaleOutAlerterParameters
	}
	return nil
}

func (x *AutoScaler) GetScaleInAlerterParameters() *Alerter_Parameters {
	if x != nil {
		return x.ScaleInAlerterParameters
	}
	return nil
}

// _PodAutoScaler_ provides auto scaling functionality for scalable Kubernetes resource. Multiple _Controllers_ can be defined on the _PodAutoScaler_ for performing scale-out or scale-in. The _PodAutoScaler_ interfaces with Kubernetes infrastructure APIs to perform auto scale.
type PodAutoScaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the _PodAutoScaler_.
	OutPorts  *PodAutoScaler_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	PodScaler *KubernetesReplicas `protobuf:"bytes,2,opt,name=pod_scaler,json=podScaler,proto3" json:"pod_scaler,omitempty" validate:"required"` // @gotags: validate:"required"
	// The minimum replicas to which the _PodAutoScaler_ can scale-in.
	MinReplicas int64 `protobuf:"varint,3,opt,name=min_replicas,json=minReplicas,proto3" json:"min_replicas,omitempty" default:"0" validate:"gte=0"` // @gotags: default:"0" validate:"gte=0"
	// The maximum scale to which the _PodAutoScaler_ can scale-out.
	MaxReplicas int64 `protobuf:"varint,4,opt,name=max_replicas,json=maxReplicas,proto3" json:"max_replicas,omitempty" default:"9223372036854775807" validate:"gt=0"` // @gotags: default:"9223372036854775807" validate:"gt=0"
	// List of _Controllers_ for scaling out.
	ScaleOutControllers []*ScaleOutController `protobuf:"bytes,5,rep,name=scale_out_controllers,json=scaleOutControllers,proto3" json:"scale_out_controllers,omitempty"`
	// List of _Controllers_ for scaling in.
	ScaleInControllers []*ScaleInController `protobuf:"bytes,6,rep,name=scale_in_controllers,json=scaleInControllers,proto3" json:"scale_in_controllers,omitempty"`
	// The maximum increase of replicas (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 10% of current scale value.
	MaxScaleOutPercentage float64 `protobuf:"fixed64,8,opt,name=max_scale_out_percentage,json=maxScaleOutPercentage,proto3" json:"max_scale_out_percentage,omitempty" default:"10"` // @gotags: default:"10"
	// The maximum decrease of replicas (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 1% of current scale value.
	MaxScaleInPercentage float64 `protobuf:"fixed64,7,opt,name=max_scale_in_percentage,json=maxScaleInPercentage,proto3" json:"max_scale_in_percentage,omitempty" default:"1"` // @gotags: default:"1"
	// The amount of time to wait after a scale-out operation for another scale-out or scale-in operation.
	ScaleOutCooldown *durationpb.Duration `protobuf:"bytes,9,opt,name=scale_out_cooldown,json=scaleOutCooldown,proto3" json:"scale_out_cooldown,omitempty" default:"30s"` // @gotags: default:"30s"
	// The amount of time to wait after a scale-in operation for another scale-in operation.
	ScaleInCooldown *durationpb.Duration `protobuf:"bytes,10,opt,name=scale_in_cooldown,json=scaleInCooldown,proto3" json:"scale_in_cooldown,omitempty" default:"120s"` // @gotags: default:"120s"
	// Cooldown override percentage defines a threshold change in scale-out beyond which previous cooldown is overridden.
	// For example, if the cooldown is 5 minutes and the cooldown override percentage is 10%, then if the
	// scale-increases by 10% or more, the previous cooldown is cancelled. Defaults to 50%.
	CooldownOverridePercentage float64 `protobuf:"fixed64,11,opt,name=cooldown_override_percentage,json=cooldownOverridePercentage,proto3" json:"cooldown_override_percentage,omitempty" default:"50"` // @gotags: default:"50"
	// Configuration for scale-out Alerter.
	ScaleOutAlerterParameters *Alerter_Parameters `protobuf:"bytes,12,opt,name=scale_out_alerter_parameters,json=scaleOutAlerterParameters,proto3" json:"scale_out_alerter_parameters,omitempty"`
	// Configuration for scale-in Alerter.
	ScaleInAlerterParameters *Alerter_Parameters `protobuf:"bytes,13,opt,name=scale_in_alerter_parameters,json=scaleInAlerterParameters,proto3" json:"scale_in_alerter_parameters,omitempty"`
}

func (x *PodAutoScaler) Reset() {
	*x = PodAutoScaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodAutoScaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodAutoScaler) ProtoMessage() {}

func (x *PodAutoScaler) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodAutoScaler.ProtoReflect.Descriptor instead.
func (*PodAutoScaler) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{9}
}

func (x *PodAutoScaler) GetOutPorts() *PodAutoScaler_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *PodAutoScaler) GetPodScaler() *KubernetesReplicas {
	if x != nil {
		return x.PodScaler
	}
	return nil
}

func (x *PodAutoScaler) GetMinReplicas() int64 {
	if x != nil {
		return x.MinReplicas
	}
	return 0
}

func (x *PodAutoScaler) GetMaxReplicas() int64 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

func (x *PodAutoScaler) GetScaleOutControllers() []*ScaleOutController {
	if x != nil {
		return x.ScaleOutControllers
	}
	return nil
}

func (x *PodAutoScaler) GetScaleInControllers() []*ScaleInController {
	if x != nil {
		return x.ScaleInControllers
	}
	return nil
}

func (x *PodAutoScaler) GetMaxScaleOutPercentage() float64 {
	if x != nil {
		return x.MaxScaleOutPercentage
	}
	return 0
}

func (x *PodAutoScaler) GetMaxScaleInPercentage() float64 {
	if x != nil {
		return x.MaxScaleInPercentage
	}
	return 0
}

func (x *PodAutoScaler) GetScaleOutCooldown() *durationpb.Duration {
	if x != nil {
		return x.ScaleOutCooldown
	}
	return nil
}

func (x *PodAutoScaler) GetScaleInCooldown() *durationpb.Duration {
	if x != nil {
		return x.ScaleInCooldown
	}
	return nil
}

func (x *PodAutoScaler) GetCooldownOverridePercentage() float64 {
	if x != nil {
		return x.CooldownOverridePercentage
	}
	return 0
}

func (x *PodAutoScaler) GetScaleOutAlerterParameters() *Alerter_Parameters {
	if x != nil {
		return x.ScaleOutAlerterParameters
	}
	return nil
}

func (x *PodAutoScaler) GetScaleInAlerterParameters() *Alerter_Parameters {
	if x != nil {
		return x.ScaleInAlerterParameters
	}
	return nil
}

// Reports actual and configured number of replicas.
type PodScaler_ScaleReporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the PodScaler component.
	OutPorts *PodScaler_ScaleReporter_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *PodScaler_ScaleReporter) Reset() {
	*x = PodScaler_ScaleReporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodScaler_ScaleReporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodScaler_ScaleReporter) ProtoMessage() {}

func (x *PodScaler_ScaleReporter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodScaler_ScaleReporter.ProtoReflect.Descriptor instead.
func (*PodScaler_ScaleReporter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PodScaler_ScaleReporter) GetOutPorts() *PodScaler_ScaleReporter_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Actuates scaling of pods based on a signal.
type PodScaler_ScaleActuator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the PodScaler component.
	InPorts *PodScaler_ScaleActuator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Configuration key for DynamicConfig
	DynamicConfigKey string `protobuf:"bytes,2,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration.
	DefaultConfig *PodScaler_ScaleActuator_DynamicConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *PodScaler_ScaleActuator) Reset() {
	*x = PodScaler_ScaleActuator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodScaler_ScaleActuator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodScaler_ScaleActuator) ProtoMessage() {}

func (x *PodScaler_ScaleActuator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodScaler_ScaleActuator.ProtoReflect.Descriptor instead.
func (*PodScaler_ScaleActuator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{2, 1}
}

func (x *PodScaler_ScaleActuator) GetInPorts() *PodScaler_ScaleActuator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *PodScaler_ScaleActuator) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *PodScaler_ScaleActuator) GetDefaultConfig() *PodScaler_ScaleActuator_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Outputs for the PodScaler component.
type PodScaler_ScaleReporter_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of replicas that are currently running.
	ActualReplicas *OutPort `protobuf:"bytes,1,opt,name=actual_replicas,json=actualReplicas,proto3" json:"actual_replicas,omitempty"`
	// The number of replicas that are desired.
	ConfiguredReplicas *OutPort `protobuf:"bytes,2,opt,name=configured_replicas,json=configuredReplicas,proto3" json:"configured_replicas,omitempty"`
}

func (x *PodScaler_ScaleReporter_Outs) Reset() {
	*x = PodScaler_ScaleReporter_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodScaler_ScaleReporter_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodScaler_ScaleReporter_Outs) ProtoMessage() {}

func (x *PodScaler_ScaleReporter_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodScaler_ScaleReporter_Outs.ProtoReflect.Descriptor instead.
func (*PodScaler_ScaleReporter_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *PodScaler_ScaleReporter_Outs) GetActualReplicas() *OutPort {
	if x != nil {
		return x.ActualReplicas
	}
	return nil
}

func (x *PodScaler_ScaleReporter_Outs) GetConfiguredReplicas() *OutPort {
	if x != nil {
		return x.ConfiguredReplicas
	}
	return nil
}

// Dynamic Configuration for ScaleActuator
type PodScaler_ScaleActuator_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Decides whether to run the pod scaler in dry-run mode. Dry run mode ensures that no scaling is invoked by this pod scaler.
	// Useful for observing the behavior of Scaler without disrupting any real traffic.
	DryRun bool `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *PodScaler_ScaleActuator_DynamicConfig) Reset() {
	*x = PodScaler_ScaleActuator_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodScaler_ScaleActuator_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodScaler_ScaleActuator_DynamicConfig) ProtoMessage() {}

func (x *PodScaler_ScaleActuator_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodScaler_ScaleActuator_DynamicConfig.ProtoReflect.Descriptor instead.
func (*PodScaler_ScaleActuator_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *PodScaler_ScaleActuator_DynamicConfig) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

// Inputs for the PodScaler component.
type PodScaler_ScaleActuator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredReplicas *InPort `protobuf:"bytes,1,opt,name=desired_replicas,json=desiredReplicas,proto3" json:"desired_replicas,omitempty"`
}

func (x *PodScaler_ScaleActuator_Ins) Reset() {
	*x = PodScaler_ScaleActuator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodScaler_ScaleActuator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodScaler_ScaleActuator_Ins) ProtoMessage() {}

func (x *PodScaler_ScaleActuator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodScaler_ScaleActuator_Ins.ProtoReflect.Descriptor instead.
func (*PodScaler_ScaleActuator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *PodScaler_ScaleActuator_Ins) GetDesiredReplicas() *InPort {
	if x != nil {
		return x.DesiredReplicas
	}
	return nil
}

// This allows subset of parameters with constrained values compared to a regular gradient controller. For full documentation of these parameters, refer to the [GradientControllerParameters](#gradient-controller-parameters).
type IncreasingGradient_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slope       float64 `protobuf:"fixed64,1,opt,name=slope,proto3" json:"slope,omitempty" default:"1.0"`                                // @gotags: default:"1.0"
	MaxGradient float64 `protobuf:"fixed64,3,opt,name=max_gradient,json=maxGradient,proto3" json:"max_gradient,omitempty" default:"1.79769313486231570814527423731704356798070e+308" validate:"gte=1.0"` // @gotags: default:"1.79769313486231570814527423731704356798070e+308" validate:"gte=1.0"
}

func (x *IncreasingGradient_Parameters) Reset() {
	*x = IncreasingGradient_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreasingGradient_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreasingGradient_Parameters) ProtoMessage() {}

func (x *IncreasingGradient_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreasingGradient_Parameters.ProtoReflect.Descriptor instead.
func (*IncreasingGradient_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{3, 0}
}

func (x *IncreasingGradient_Parameters) GetSlope() float64 {
	if x != nil {
		return x.Slope
	}
	return 0
}

func (x *IncreasingGradient_Parameters) GetMaxGradient() float64 {
	if x != nil {
		return x.MaxGradient
	}
	return 0
}

// Inputs for Gradient.
type IncreasingGradient_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signal to use for scale-out.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// The setpoint to use for scale-out.
	Setpoint *InPort `protobuf:"bytes,2,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
}

func (x *IncreasingGradient_Ins) Reset() {
	*x = IncreasingGradient_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncreasingGradient_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncreasingGradient_Ins) ProtoMessage() {}

func (x *IncreasingGradient_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncreasingGradient_Ins.ProtoReflect.Descriptor instead.
func (*IncreasingGradient_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{3, 1}
}

func (x *IncreasingGradient_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *IncreasingGradient_Ins) GetSetpoint() *InPort {
	if x != nil {
		return x.Setpoint
	}
	return nil
}

// This allows subset of parameters with constrained values compared to a regular gradient controller. For full documentation of these parameters, refer to the [GradientControllerParameters](#gradient-controller-parameters).
type DecreasingGradient_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Slope       float64 `protobuf:"fixed64,1,opt,name=slope,proto3" json:"slope,omitempty" default:"1.0"`                                // @gotags: default:"1.0"
	MinGradient float64 `protobuf:"fixed64,2,opt,name=min_gradient,json=minGradient,proto3" json:"min_gradient,omitempty" default:"-1.79769313486231570814527423731704356798070e+308" validate:"lte=1.0"` // @gotags: default:"-1.79769313486231570814527423731704356798070e+308" validate:"lte=1.0"
}

func (x *DecreasingGradient_Parameters) Reset() {
	*x = DecreasingGradient_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecreasingGradient_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecreasingGradient_Parameters) ProtoMessage() {}

func (x *DecreasingGradient_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecreasingGradient_Parameters.ProtoReflect.Descriptor instead.
func (*DecreasingGradient_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DecreasingGradient_Parameters) GetSlope() float64 {
	if x != nil {
		return x.Slope
	}
	return 0
}

func (x *DecreasingGradient_Parameters) GetMinGradient() float64 {
	if x != nil {
		return x.MinGradient
	}
	return 0
}

// Inputs for Gradient.
type DecreasingGradient_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signal to use for scale-in.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// The setpoint to use for scale-in.
	Setpoint *InPort `protobuf:"bytes,2,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
}

func (x *DecreasingGradient_Ins) Reset() {
	*x = DecreasingGradient_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecreasingGradient_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecreasingGradient_Ins) ProtoMessage() {}

func (x *DecreasingGradient_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecreasingGradient_Ins.ProtoReflect.Descriptor instead.
func (*DecreasingGradient_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{4, 1}
}

func (x *DecreasingGradient_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *DecreasingGradient_Ins) GetSetpoint() *InPort {
	if x != nil {
		return x.Setpoint
	}
	return nil
}

type ScaleOutController_Controller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Controller:
	//
	//	*ScaleOutController_Controller_Gradient
	Controller isScaleOutController_Controller_Controller `protobuf_oneof:"controller"`
}

func (x *ScaleOutController_Controller) Reset() {
	*x = ScaleOutController_Controller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleOutController_Controller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleOutController_Controller) ProtoMessage() {}

func (x *ScaleOutController_Controller) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleOutController_Controller.ProtoReflect.Descriptor instead.
func (*ScaleOutController_Controller) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{5, 0}
}

func (m *ScaleOutController_Controller) GetController() isScaleOutController_Controller_Controller {
	if m != nil {
		return m.Controller
	}
	return nil
}

func (x *ScaleOutController_Controller) GetGradient() *IncreasingGradient {
	if x, ok := x.GetController().(*ScaleOutController_Controller_Gradient); ok {
		return x.Gradient
	}
	return nil
}

type isScaleOutController_Controller_Controller interface {
	isScaleOutController_Controller_Controller()
}

type ScaleOutController_Controller_Gradient struct {
	Gradient *IncreasingGradient `protobuf:"bytes,1,opt,name=gradient,proto3,oneof"`
}

func (*ScaleOutController_Controller_Gradient) isScaleOutController_Controller_Controller() {}

type ScaleInController_Controller struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Controller:
	//
	//	*ScaleInController_Controller_Gradient
	Controller isScaleInController_Controller_Controller `protobuf_oneof:"controller"`
}

func (x *ScaleInController_Controller) Reset() {
	*x = ScaleInController_Controller{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaleInController_Controller) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaleInController_Controller) ProtoMessage() {}

func (x *ScaleInController_Controller) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaleInController_Controller.ProtoReflect.Descriptor instead.
func (*ScaleInController_Controller) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{6, 0}
}

func (m *ScaleInController_Controller) GetController() isScaleInController_Controller_Controller {
	if m != nil {
		return m.Controller
	}
	return nil
}

func (x *ScaleInController_Controller) GetGradient() *DecreasingGradient {
	if x, ok := x.GetController().(*ScaleInController_Controller_Gradient); ok {
		return x.Gradient
	}
	return nil
}

type isScaleInController_Controller_Controller interface {
	isScaleInController_Controller_Controller()
}

type ScaleInController_Controller_Gradient struct {
	Gradient *DecreasingGradient `protobuf:"bytes,1,opt,name=gradient,proto3,oneof"`
}

func (*ScaleInController_Controller_Gradient) isScaleInController_Controller_Controller() {}

type AutoScaler_Scaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Scaler:
	//
	//	*AutoScaler_Scaler_KubernetesReplicas
	Scaler isAutoScaler_Scaler_Scaler `protobuf_oneof:"scaler"`
}

func (x *AutoScaler_Scaler) Reset() {
	*x = AutoScaler_Scaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScaler_Scaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScaler_Scaler) ProtoMessage() {}

func (x *AutoScaler_Scaler) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScaler_Scaler.ProtoReflect.Descriptor instead.
func (*AutoScaler_Scaler) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{8, 0}
}

func (m *AutoScaler_Scaler) GetScaler() isAutoScaler_Scaler_Scaler {
	if m != nil {
		return m.Scaler
	}
	return nil
}

func (x *AutoScaler_Scaler) GetKubernetesReplicas() *KubernetesReplicas {
	if x, ok := x.GetScaler().(*AutoScaler_Scaler_KubernetesReplicas); ok {
		return x.KubernetesReplicas
	}
	return nil
}

type isAutoScaler_Scaler_Scaler interface {
	isAutoScaler_Scaler_Scaler()
}

type AutoScaler_Scaler_KubernetesReplicas struct {
	KubernetesReplicas *KubernetesReplicas `protobuf:"bytes,1,opt,name=kubernetes_replicas,json=kubernetesReplicas,proto3,oneof"`
}

func (*AutoScaler_Scaler_KubernetesReplicas) isAutoScaler_Scaler_Scaler() {}

// Outputs for _AutoScaler_.
type AutoScaler_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualScale     *OutPort `protobuf:"bytes,1,opt,name=actual_scale,json=actualScale,proto3" json:"actual_scale,omitempty"`
	ConfiguredScale *OutPort `protobuf:"bytes,2,opt,name=configured_scale,json=configuredScale,proto3" json:"configured_scale,omitempty"`
	DesiredScale    *OutPort `protobuf:"bytes,3,opt,name=desired_scale,json=desiredScale,proto3" json:"desired_scale,omitempty"`
}

func (x *AutoScaler_Outs) Reset() {
	*x = AutoScaler_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScaler_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScaler_Outs) ProtoMessage() {}

func (x *AutoScaler_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScaler_Outs.ProtoReflect.Descriptor instead.
func (*AutoScaler_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{8, 1}
}

func (x *AutoScaler_Outs) GetActualScale() *OutPort {
	if x != nil {
		return x.ActualScale
	}
	return nil
}

func (x *AutoScaler_Outs) GetConfiguredScale() *OutPort {
	if x != nil {
		return x.ConfiguredScale
	}
	return nil
}

func (x *AutoScaler_Outs) GetDesiredScale() *OutPort {
	if x != nil {
		return x.DesiredScale
	}
	return nil
}

// Outputs for _PodAutoScaler_.
type PodAutoScaler_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualReplicas     *OutPort `protobuf:"bytes,1,opt,name=actual_replicas,json=actualReplicas,proto3" json:"actual_replicas,omitempty"`
	ConfiguredReplicas *OutPort `protobuf:"bytes,2,opt,name=configured_replicas,json=configuredReplicas,proto3" json:"configured_replicas,omitempty"`
	DesiredReplicas    *OutPort `protobuf:"bytes,3,opt,name=desired_replicas,json=desiredReplicas,proto3" json:"desired_replicas,omitempty"`
}

func (x *PodAutoScaler_Outs) Reset() {
	*x = PodAutoScaler_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodAutoScaler_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodAutoScaler_Outs) ProtoMessage() {}

func (x *PodAutoScaler_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_autoscale_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodAutoScaler_Outs.ProtoReflect.Descriptor instead.
func (*PodAutoScaler_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP(), []int{9, 0}
}

func (x *PodAutoScaler_Outs) GetActualReplicas() *OutPort {
	if x != nil {
		return x.ActualReplicas
	}
	return nil
}

func (x *PodAutoScaler_Outs) GetConfiguredReplicas() *OutPort {
	if x != nil {
		return x.ConfiguredReplicas
	}
	return nil
}

func (x *PodAutoScaler_Outs) GetDesiredReplicas() *OutPort {
	if x != nil {
		return x.DesiredReplicas
	}
	return nil
}

var File_aperture_policy_language_v1_autoscale_proto protoreflect.FileDescriptor

var file_aperture_policy_language_v1_autoscale_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x27, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x09, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x54, 0x0a,
	0x0f, 0x70, 0x6f, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x22, 0xd4, 0x07, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x73,
	0x0a, 0x1a, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x18, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x12, 0x5b, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x96, 0x02,
	0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12,
	0x56, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xac, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73,
	0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x0e, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x55, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x1a, 0xfe, 0x02, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x69, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x28, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x1a, 0x55, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x8d, 0x03, 0x0a, 0x12, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5a,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x45, 0x0a, 0x0a, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x1a, 0x83, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x8d, 0x03, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x4e,
	0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5a,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x45, 0x0a, 0x0a, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x1a, 0x83, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x12, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x5a,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x12, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x69, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x69, 0x6e, 0x67, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x22, 0xb9, 0x02, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x69, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x47,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x67, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x22, 0xa2, 0x02, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x73, 0x0a, 0x1a, 0x6b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x18, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a,
	0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x69, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xaa, 0x0a, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x46, 0x0a, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x52, 0x06, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x63, 0x0a, 0x15, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x60, 0x0a, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6d, 0x61, 0x78,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49,
	0x6e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f, 0x6f,
	0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x1a, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x1c, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x6e, 0x0a,
	0x1b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x18, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x76, 0x0a,
	0x06, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x48, 0x00, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x1a, 0xeb, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x22, 0xde, 0x09, 0x0a, 0x0d, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x63, 0x0a, 0x15, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x60,
	0x0a, 0x14, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x52, 0x12, 0x73, 0x63,
	0x61, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x47, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75,
	0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x45, 0x0a, 0x11, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x12, 0x40, 0x0a, 0x1c, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1a, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x70, 0x0a, 0x1c, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x19, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x4f, 0x75, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x6e, 0x0a, 0x1b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x18, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x49, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0xfd, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x4d, 0x0a,
	0x0f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x55, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x42, 0xab, 0x02, 0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x75,
	0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e,
	0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x50, 0x4c, 0xaa, 0x02, 0x1b, 0x41, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x1e, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_language_v1_autoscale_proto_rawDescOnce sync.Once
	file_aperture_policy_language_v1_autoscale_proto_rawDescData = file_aperture_policy_language_v1_autoscale_proto_rawDesc
)

func file_aperture_policy_language_v1_autoscale_proto_rawDescGZIP() []byte {
	file_aperture_policy_language_v1_autoscale_proto_rawDescOnce.Do(func() {
		file_aperture_policy_language_v1_autoscale_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_language_v1_autoscale_proto_rawDescData)
	})
	return file_aperture_policy_language_v1_autoscale_proto_rawDescData
}

var file_aperture_policy_language_v1_autoscale_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_aperture_policy_language_v1_autoscale_proto_goTypes = []interface{}{
	(*KubernetesObjectSelector)(nil),              // 0: aperture.policy.language.v1.KubernetesObjectSelector
	(*AutoScale)(nil),                             // 1: aperture.policy.language.v1.AutoScale
	(*PodScaler)(nil),                             // 2: aperture.policy.language.v1.PodScaler
	(*IncreasingGradient)(nil),                    // 3: aperture.policy.language.v1.IncreasingGradient
	(*DecreasingGradient)(nil),                    // 4: aperture.policy.language.v1.DecreasingGradient
	(*ScaleOutController)(nil),                    // 5: aperture.policy.language.v1.ScaleOutController
	(*ScaleInController)(nil),                     // 6: aperture.policy.language.v1.ScaleInController
	(*KubernetesReplicas)(nil),                    // 7: aperture.policy.language.v1.KubernetesReplicas
	(*AutoScaler)(nil),                            // 8: aperture.policy.language.v1.AutoScaler
	(*PodAutoScaler)(nil),                         // 9: aperture.policy.language.v1.PodAutoScaler
	(*PodScaler_ScaleReporter)(nil),               // 10: aperture.policy.language.v1.PodScaler.ScaleReporter
	(*PodScaler_ScaleActuator)(nil),               // 11: aperture.policy.language.v1.PodScaler.ScaleActuator
	(*PodScaler_ScaleReporter_Outs)(nil),          // 12: aperture.policy.language.v1.PodScaler.ScaleReporter.Outs
	(*PodScaler_ScaleActuator_DynamicConfig)(nil), // 13: aperture.policy.language.v1.PodScaler.ScaleActuator.DynamicConfig
	(*PodScaler_ScaleActuator_Ins)(nil),           // 14: aperture.policy.language.v1.PodScaler.ScaleActuator.Ins
	(*IncreasingGradient_Parameters)(nil),         // 15: aperture.policy.language.v1.IncreasingGradient.Parameters
	(*IncreasingGradient_Ins)(nil),                // 16: aperture.policy.language.v1.IncreasingGradient.Ins
	(*DecreasingGradient_Parameters)(nil),         // 17: aperture.policy.language.v1.DecreasingGradient.Parameters
	(*DecreasingGradient_Ins)(nil),                // 18: aperture.policy.language.v1.DecreasingGradient.Ins
	(*ScaleOutController_Controller)(nil),         // 19: aperture.policy.language.v1.ScaleOutController.Controller
	(*ScaleInController_Controller)(nil),          // 20: aperture.policy.language.v1.ScaleInController.Controller
	(*AutoScaler_Scaler)(nil),                     // 21: aperture.policy.language.v1.AutoScaler.Scaler
	(*AutoScaler_Outs)(nil),                       // 22: aperture.policy.language.v1.AutoScaler.Outs
	(*PodAutoScaler_Outs)(nil),                    // 23: aperture.policy.language.v1.PodAutoScaler.Outs
	(*Alerter_Parameters)(nil),                    // 24: aperture.policy.language.v1.Alerter.Parameters
	(*durationpb.Duration)(nil),                   // 25: google.protobuf.Duration
	(*OutPort)(nil),                               // 26: aperture.policy.language.v1.OutPort
	(*InPort)(nil),                                // 27: aperture.policy.language.v1.InPort
}
var file_aperture_policy_language_v1_autoscale_proto_depIdxs = []int32{
	2,  // 0: aperture.policy.language.v1.AutoScale.pod_scaler:type_name -> aperture.policy.language.v1.PodScaler
	8,  // 1: aperture.policy.language.v1.AutoScale.auto_scaler:type_name -> aperture.policy.language.v1.AutoScaler
	9,  // 2: aperture.policy.language.v1.AutoScale.pod_auto_scaler:type_name -> aperture.policy.language.v1.PodAutoScaler
	0,  // 3: aperture.policy.language.v1.PodScaler.kubernetes_object_selector:type_name -> aperture.policy.language.v1.KubernetesObjectSelector
	10, // 4: aperture.policy.language.v1.PodScaler.scale_reporter:type_name -> aperture.policy.language.v1.PodScaler.ScaleReporter
	11, // 5: aperture.policy.language.v1.PodScaler.scale_actuator:type_name -> aperture.policy.language.v1.PodScaler.ScaleActuator
	16, // 6: aperture.policy.language.v1.IncreasingGradient.in_ports:type_name -> aperture.policy.language.v1.IncreasingGradient.Ins
	15, // 7: aperture.policy.language.v1.IncreasingGradient.parameters:type_name -> aperture.policy.language.v1.IncreasingGradient.Parameters
	18, // 8: aperture.policy.language.v1.DecreasingGradient.in_ports:type_name -> aperture.policy.language.v1.DecreasingGradient.Ins
	17, // 9: aperture.policy.language.v1.DecreasingGradient.parameters:type_name -> aperture.policy.language.v1.DecreasingGradient.Parameters
	19, // 10: aperture.policy.language.v1.ScaleOutController.controller:type_name -> aperture.policy.language.v1.ScaleOutController.Controller
	24, // 11: aperture.policy.language.v1.ScaleOutController.alerter_parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	20, // 12: aperture.policy.language.v1.ScaleInController.controller:type_name -> aperture.policy.language.v1.ScaleInController.Controller
	24, // 13: aperture.policy.language.v1.ScaleInController.alerter_parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	0,  // 14: aperture.policy.language.v1.KubernetesReplicas.kubernetes_object_selector:type_name -> aperture.policy.language.v1.KubernetesObjectSelector
	13, // 15: aperture.policy.language.v1.KubernetesReplicas.default_config:type_name -> aperture.policy.language.v1.PodScaler.ScaleActuator.DynamicConfig
	22, // 16: aperture.policy.language.v1.AutoScaler.out_ports:type_name -> aperture.policy.language.v1.AutoScaler.Outs
	21, // 17: aperture.policy.language.v1.AutoScaler.scaler:type_name -> aperture.policy.language.v1.AutoScaler.Scaler
	5,  // 18: aperture.policy.language.v1.AutoScaler.scale_out_controllers:type_name -> aperture.policy.language.v1.ScaleOutController
	6,  // 19: aperture.policy.language.v1.AutoScaler.scale_in_controllers:type_name -> aperture.policy.language.v1.ScaleInController
	25, // 20: aperture.policy.language.v1.AutoScaler.scale_out_cooldown:type_name -> google.protobuf.Duration
	25, // 21: aperture.policy.language.v1.AutoScaler.scale_in_cooldown:type_name -> google.protobuf.Duration
	24, // 22: aperture.policy.language.v1.AutoScaler.scale_out_alerter_parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	24, // 23: aperture.policy.language.v1.AutoScaler.scale_in_alerter_parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	23, // 24: aperture.policy.language.v1.PodAutoScaler.out_ports:type_name -> aperture.policy.language.v1.PodAutoScaler.Outs
	7,  // 25: aperture.policy.language.v1.PodAutoScaler.pod_scaler:type_name -> aperture.policy.language.v1.KubernetesReplicas
	5,  // 26: aperture.policy.language.v1.PodAutoScaler.scale_out_controllers:type_name -> aperture.policy.language.v1.ScaleOutController
	6,  // 27: aperture.policy.language.v1.PodAutoScaler.scale_in_controllers:type_name -> aperture.policy.language.v1.ScaleInController
	25, // 28: aperture.policy.language.v1.PodAutoScaler.scale_out_cooldown:type_name -> google.protobuf.Duration
	25, // 29: aperture.policy.language.v1.PodAutoScaler.scale_in_cooldown:type_name -> google.protobuf.Duration
	24, // 30: aperture.policy.language.v1.PodAutoScaler.scale_out_alerter_parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	24, // 31: aperture.policy.language.v1.PodAutoScaler.scale_in_alerter_parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	12, // 32: aperture.policy.language.v1.PodScaler.ScaleReporter.out_ports:type_name -> aperture.policy.language.v1.PodScaler.ScaleReporter.Outs
	14, // 33: aperture.policy.language.v1.PodScaler.ScaleActuator.in_ports:type_name -> aperture.policy.language.v1.PodScaler.ScaleActuator.Ins
	13, // 34: aperture.policy.language.v1.PodScaler.ScaleActuator.default_config:type_name -> aperture.policy.language.v1.PodScaler.ScaleActuator.DynamicConfig
	26, // 35: aperture.policy.language.v1.PodScaler.ScaleReporter.Outs.actual_replicas:type_name -> aperture.policy.language.v1.OutPort
	26, // 36: aperture.policy.language.v1.PodScaler.ScaleReporter.Outs.configured_replicas:type_name -> aperture.policy.language.v1.OutPort
	27, // 37: aperture.policy.language.v1.PodScaler.ScaleActuator.Ins.desired_replicas:type_name -> aperture.policy.language.v1.InPort
	27, // 38: aperture.policy.language.v1.IncreasingGradient.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	27, // 39: aperture.policy.language.v1.IncreasingGradient.Ins.setpoint:type_name -> aperture.policy.language.v1.InPort
	27, // 40: aperture.policy.language.v1.DecreasingGradient.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	27, // 41: aperture.policy.language.v1.DecreasingGradient.Ins.setpoint:type_name -> aperture.policy.language.v1.InPort
	3,  // 42: aperture.policy.language.v1.ScaleOutController.Controller.gradient:type_name -> aperture.policy.language.v1.IncreasingGradient
	4,  // 43: aperture.policy.language.v1.ScaleInController.Controller.gradient:type_name -> aperture.policy.language.v1.DecreasingGradient
	7,  // 44: aperture.policy.language.v1.AutoScaler.Scaler.kubernetes_replicas:type_name -> aperture.policy.language.v1.KubernetesReplicas
	26, // 45: aperture.policy.language.v1.AutoScaler.Outs.actual_scale:type_name -> aperture.policy.language.v1.OutPort
	26, // 46: aperture.policy.language.v1.AutoScaler.Outs.configured_scale:type_name -> aperture.policy.language.v1.OutPort
	26, // 47: aperture.policy.language.v1.AutoScaler.Outs.desired_scale:type_name -> aperture.policy.language.v1.OutPort
	26, // 48: aperture.policy.language.v1.PodAutoScaler.Outs.actual_replicas:type_name -> aperture.policy.language.v1.OutPort
	26, // 49: aperture.policy.language.v1.PodAutoScaler.Outs.configured_replicas:type_name -> aperture.policy.language.v1.OutPort
	26, // 50: aperture.policy.language.v1.PodAutoScaler.Outs.desired_replicas:type_name -> aperture.policy.language.v1.OutPort
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_aperture_policy_language_v1_autoscale_proto_init() }
func file_aperture_policy_language_v1_autoscale_proto_init() {
	if File_aperture_policy_language_v1_autoscale_proto != nil {
		return
	}
	file_aperture_policy_language_v1_ports_proto_init()
	file_aperture_policy_language_v1_std_components_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesObjectSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodScaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreasingGradient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecreasingGradient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleOutController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleInController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesReplicas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoScaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodAutoScaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodScaler_ScaleReporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodScaler_ScaleActuator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodScaler_ScaleReporter_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodScaler_ScaleActuator_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodScaler_ScaleActuator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreasingGradient_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncreasingGradient_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecreasingGradient_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecreasingGradient_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleOutController_Controller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScaleInController_Controller); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoScaler_Scaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoScaler_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_autoscale_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodAutoScaler_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_policy_language_v1_autoscale_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AutoScale_PodScaler)(nil),
		(*AutoScale_AutoScaler)(nil),
		(*AutoScale_PodAutoScaler)(nil),
	}
	file_aperture_policy_language_v1_autoscale_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*ScaleOutController_Controller_Gradient)(nil),
	}
	file_aperture_policy_language_v1_autoscale_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ScaleInController_Controller_Gradient)(nil),
	}
	file_aperture_policy_language_v1_autoscale_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*AutoScaler_Scaler_KubernetesReplicas)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_language_v1_autoscale_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aperture_policy_language_v1_autoscale_proto_goTypes,
		DependencyIndexes: file_aperture_policy_language_v1_autoscale_proto_depIdxs,
		MessageInfos:      file_aperture_policy_language_v1_autoscale_proto_msgTypes,
	}.Build()
	File_aperture_policy_language_v1_autoscale_proto = out.File
	file_aperture_policy_language_v1_autoscale_proto_rawDesc = nil
	file_aperture_policy_language_v1_autoscale_proto_goTypes = nil
	file_aperture_policy_language_v1_autoscale_proto_depIdxs = nil
}
