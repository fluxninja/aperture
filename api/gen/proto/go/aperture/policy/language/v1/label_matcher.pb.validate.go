// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/language/v1/label_matcher.proto

package languagev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LabelMatcher with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LabelMatcher) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelMatcher with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LabelMatcherMultiError, or
// nil if none found.
func (m *LabelMatcher) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelMatcher) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MatchLabels

	for idx, item := range m.GetMatchExpressions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelMatcherValidationError{
						field:  fmt.Sprintf("MatchExpressions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelMatcherValidationError{
						field:  fmt.Sprintf("MatchExpressions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelMatcherValidationError{
					field:  fmt.Sprintf("MatchExpressions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetExpression()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LabelMatcherValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LabelMatcherValidationError{
					field:  "Expression",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpression()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LabelMatcherValidationError{
				field:  "Expression",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMatchList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelMatcherValidationError{
						field:  fmt.Sprintf("MatchList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelMatcherValidationError{
						field:  fmt.Sprintf("MatchList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelMatcherValidationError{
					field:  fmt.Sprintf("MatchList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LabelMatcherMultiError(errors)
	}

	return nil
}

// LabelMatcherMultiError is an error wrapping multiple validation errors
// returned by LabelMatcher.ValidateAll() if the designated constraints aren't met.
type LabelMatcherMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelMatcherMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelMatcherMultiError) AllErrors() []error { return m }

// LabelMatcherValidationError is the validation error returned by
// LabelMatcher.Validate if the designated constraints aren't met.
type LabelMatcherValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelMatcherValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelMatcherValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelMatcherValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelMatcherValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelMatcherValidationError) ErrorName() string { return "LabelMatcherValidationError" }

// Error satisfies the builtin error interface
func (e LabelMatcherValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelMatcher.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelMatcherValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelMatcherValidationError{}

// Validate checks the field values on MatchRequirement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MatchRequirement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MatchRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MatchRequirementMultiError, or nil if none found.
func (m *MatchRequirement) ValidateAll() error {
	return m.validate(true)
}

func (m *MatchRequirement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Operator

	if len(errors) > 0 {
		return MatchRequirementMultiError(errors)
	}

	return nil
}

// MatchRequirementMultiError is an error wrapping multiple validation errors
// returned by MatchRequirement.ValidateAll() if the designated constraints
// aren't met.
type MatchRequirementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatchRequirementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatchRequirementMultiError) AllErrors() []error { return m }

// MatchRequirementValidationError is the validation error returned by
// MatchRequirement.Validate if the designated constraints aren't met.
type MatchRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchRequirementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchRequirementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchRequirementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchRequirementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchRequirementValidationError) ErrorName() string { return "MatchRequirementValidationError" }

// Error satisfies the builtin error interface
func (e MatchRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchRequirementValidationError{}

// Validate checks the field values on Expression with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Expression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expression with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExpressionMultiError, or
// nil if none found.
func (m *Expression) ValidateAll() error {
	return m.validate(true)
}

func (m *Expression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Variant.(type) {
	case *Expression_Not:
		if v == nil {
			err := ExpressionValidationError{
				field:  "Variant",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetNot()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "Not",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "Not",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNot()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpressionValidationError{
					field:  "Not",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expression_All:
		if v == nil {
			err := ExpressionValidationError{
				field:  "Variant",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAll()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "All",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "All",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAll()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpressionValidationError{
					field:  "All",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expression_Any:
		if v == nil {
			err := ExpressionValidationError{
				field:  "Variant",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAny()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "Any",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "Any",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAny()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpressionValidationError{
					field:  "Any",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expression_LabelExists:
		if v == nil {
			err := ExpressionValidationError{
				field:  "Variant",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for LabelExists
	case *Expression_LabelEquals:
		if v == nil {
			err := ExpressionValidationError{
				field:  "Variant",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLabelEquals()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "LabelEquals",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "LabelEquals",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLabelEquals()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpressionValidationError{
					field:  "LabelEquals",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Expression_LabelMatches:
		if v == nil {
			err := ExpressionValidationError{
				field:  "Variant",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLabelMatches()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "LabelMatches",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExpressionValidationError{
						field:  "LabelMatches",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLabelMatches()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExpressionValidationError{
					field:  "LabelMatches",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ExpressionMultiError(errors)
	}

	return nil
}

// ExpressionMultiError is an error wrapping multiple validation errors
// returned by Expression.ValidateAll() if the designated constraints aren't met.
type ExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExpressionMultiError) AllErrors() []error { return m }

// ExpressionValidationError is the validation error returned by
// Expression.Validate if the designated constraints aren't met.
type ExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExpressionValidationError) ErrorName() string { return "ExpressionValidationError" }

// Error satisfies the builtin error interface
func (e ExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExpressionValidationError{}

// Validate checks the field values on EqualsExpression with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EqualsExpression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EqualsExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EqualsExpressionMultiError, or nil if none found.
func (m *EqualsExpression) ValidateAll() error {
	return m.validate(true)
}

func (m *EqualsExpression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for Value

	if len(errors) > 0 {
		return EqualsExpressionMultiError(errors)
	}

	return nil
}

// EqualsExpressionMultiError is an error wrapping multiple validation errors
// returned by EqualsExpression.ValidateAll() if the designated constraints
// aren't met.
type EqualsExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EqualsExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EqualsExpressionMultiError) AllErrors() []error { return m }

// EqualsExpressionValidationError is the validation error returned by
// EqualsExpression.Validate if the designated constraints aren't met.
type EqualsExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EqualsExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EqualsExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EqualsExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EqualsExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EqualsExpressionValidationError) ErrorName() string { return "EqualsExpressionValidationError" }

// Error satisfies the builtin error interface
func (e EqualsExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEqualsExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EqualsExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EqualsExpressionValidationError{}

// Validate checks the field values on MatchesExpression with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MatchesExpression) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MatchesExpression with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MatchesExpressionMultiError, or nil if none found.
func (m *MatchesExpression) ValidateAll() error {
	return m.validate(true)
}

func (m *MatchesExpression) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Label

	// no validation rules for Regex

	if len(errors) > 0 {
		return MatchesExpressionMultiError(errors)
	}

	return nil
}

// MatchesExpressionMultiError is an error wrapping multiple validation errors
// returned by MatchesExpression.ValidateAll() if the designated constraints
// aren't met.
type MatchesExpressionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MatchesExpressionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MatchesExpressionMultiError) AllErrors() []error { return m }

// MatchesExpressionValidationError is the validation error returned by
// MatchesExpression.Validate if the designated constraints aren't met.
type MatchesExpressionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MatchesExpressionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MatchesExpressionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MatchesExpressionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MatchesExpressionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MatchesExpressionValidationError) ErrorName() string {
	return "MatchesExpressionValidationError"
}

// Error satisfies the builtin error interface
func (e MatchesExpressionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMatchesExpression.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MatchesExpressionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MatchesExpressionValidationError{}

// Validate checks the field values on Expression_List with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Expression_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Expression_List with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Expression_ListMultiError, or nil if none found.
func (m *Expression_List) ValidateAll() error {
	return m.validate(true)
}

func (m *Expression_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOf() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Expression_ListValidationError{
						field:  fmt.Sprintf("Of[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Expression_ListValidationError{
						field:  fmt.Sprintf("Of[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Expression_ListValidationError{
					field:  fmt.Sprintf("Of[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Expression_ListMultiError(errors)
	}

	return nil
}

// Expression_ListMultiError is an error wrapping multiple validation errors
// returned by Expression_List.ValidateAll() if the designated constraints
// aren't met.
type Expression_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Expression_ListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Expression_ListMultiError) AllErrors() []error { return m }

// Expression_ListValidationError is the validation error returned by
// Expression_List.Validate if the designated constraints aren't met.
type Expression_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Expression_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Expression_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Expression_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Expression_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Expression_ListValidationError) ErrorName() string { return "Expression_ListValidationError" }

// Error satisfies the builtin error interface
func (e Expression_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExpression_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Expression_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Expression_ListValidationError{}
