// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/language/v1/ports.proto

package languagev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InPort with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InPort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InPort with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in InPortMultiError, or nil if none found.
func (m *InPort) ValidateAll() error {
	return m.validate(true)
}

func (m *InPort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Value.(type) {
	case *InPort_SignalName:
		if v == nil {
			err := InPortValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SignalName
	case *InPort_ConstantSignal:
		if v == nil {
			err := InPortValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConstantSignal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InPortValidationError{
						field:  "ConstantSignal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InPortValidationError{
						field:  "ConstantSignal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConstantSignal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InPortValidationError{
					field:  "ConstantSignal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InPortMultiError(errors)
	}

	return nil
}

// InPortMultiError is an error wrapping multiple validation errors returned by
// InPort.ValidateAll() if the designated constraints aren't met.
type InPortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InPortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InPortMultiError) AllErrors() []error { return m }

// InPortValidationError is the validation error returned by InPort.Validate if
// the designated constraints aren't met.
type InPortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InPortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InPortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InPortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InPortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InPortValidationError) ErrorName() string { return "InPortValidationError" }

// Error satisfies the builtin error interface
func (e InPortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InPortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InPortValidationError{}

// Validate checks the field values on OutPort with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OutPort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OutPort with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OutPortMultiError, or nil if none found.
func (m *OutPort) ValidateAll() error {
	return m.validate(true)
}

func (m *OutPort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignalName

	if len(errors) > 0 {
		return OutPortMultiError(errors)
	}

	return nil
}

// OutPortMultiError is an error wrapping multiple validation errors returned
// by OutPort.ValidateAll() if the designated constraints aren't met.
type OutPortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OutPortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OutPortMultiError) AllErrors() []error { return m }

// OutPortValidationError is the validation error returned by OutPort.Validate
// if the designated constraints aren't met.
type OutPortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutPortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutPortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutPortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutPortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutPortValidationError) ErrorName() string { return "OutPortValidationError" }

// Error satisfies the builtin error interface
func (e OutPortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutPort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutPortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutPortValidationError{}

// Validate checks the field values on ConstantSignal with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConstantSignal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConstantSignal with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConstantSignalMultiError,
// or nil if none found.
func (m *ConstantSignal) ValidateAll() error {
	return m.validate(true)
}

func (m *ConstantSignal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Const.(type) {
	case *ConstantSignal_SpecialValue:
		if v == nil {
			err := ConstantSignalValidationError{
				field:  "Const",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SpecialValue
	case *ConstantSignal_Value:
		if v == nil {
			err := ConstantSignalValidationError{
				field:  "Const",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Value
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ConstantSignalMultiError(errors)
	}

	return nil
}

// ConstantSignalMultiError is an error wrapping multiple validation errors
// returned by ConstantSignal.ValidateAll() if the designated constraints
// aren't met.
type ConstantSignalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstantSignalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstantSignalMultiError) AllErrors() []error { return m }

// ConstantSignalValidationError is the validation error returned by
// ConstantSignal.Validate if the designated constraints aren't met.
type ConstantSignalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstantSignalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstantSignalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstantSignalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstantSignalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstantSignalValidationError) ErrorName() string { return "ConstantSignalValidationError" }

// Error satisfies the builtin error interface
func (e ConstantSignalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstantSignal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstantSignalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstantSignalValidationError{}
