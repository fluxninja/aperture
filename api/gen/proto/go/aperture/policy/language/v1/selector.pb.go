// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: aperture/policy/language/v1/selector.proto

package languagev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroup   string        `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty" default:"default"`       // @gotags: default:"default"
	Service      string        `protobuf:"bytes,3,opt,name=service,proto3" json:"service,omitempty" validate:"required"`                               // @gotags: validate:"required"
	ControlPoint *ControlPoint `protobuf:"bytes,4,opt,name=control_point,json=controlPoint,proto3" json:"control_point,omitempty" validate:"required"` // @gotags: validate:"required"
	LabelMatcher *LabelMatcher `protobuf:"bytes,5,opt,name=label_matcher,json=labelMatcher,proto3" json:"label_matcher,omitempty"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_selector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_selector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_selector_proto_rawDescGZIP(), []int{0}
}

func (x *Selector) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

func (x *Selector) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *Selector) GetControlPoint() *ControlPoint {
	if x != nil {
		return x.ControlPoint
	}
	return nil
}

func (x *Selector) GetLabelMatcher() *LabelMatcher {
	if x != nil {
		return x.LabelMatcher
	}
	return nil
}

type ControlPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @gotags: validate:"required"
	//
	// Types that are assignable to Controlpoint:
	//	*ControlPoint_Feature
	//	*ControlPoint_Traffic
	Controlpoint isControlPoint_Controlpoint `protobuf_oneof:"controlpoint" validate:"required"`
}

func (x *ControlPoint) Reset() {
	*x = ControlPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_selector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlPoint) ProtoMessage() {}

func (x *ControlPoint) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_selector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlPoint.ProtoReflect.Descriptor instead.
func (*ControlPoint) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_selector_proto_rawDescGZIP(), []int{1}
}

func (m *ControlPoint) GetControlpoint() isControlPoint_Controlpoint {
	if m != nil {
		return m.Controlpoint
	}
	return nil
}

func (x *ControlPoint) GetFeature() string {
	if x, ok := x.GetControlpoint().(*ControlPoint_Feature); ok {
		return x.Feature
	}
	return ""
}

func (x *ControlPoint) GetTraffic() string {
	if x, ok := x.GetControlpoint().(*ControlPoint_Traffic); ok {
		return x.Traffic
	}
	return ""
}

type isControlPoint_Controlpoint interface {
	isControlPoint_Controlpoint()
}

type ControlPoint_Feature struct {
	Feature string `protobuf:"bytes,1,opt,name=feature,proto3,oneof" validate:"required"` //@gotags: validate:"required"
}

type ControlPoint_Traffic struct {
	Traffic string `protobuf:"bytes,2,opt,name=traffic,proto3,oneof" validate:"required,oneof=ingress egress"` // @gotags: validate:"required,oneof=ingress egress"
}

func (*ControlPoint_Feature) isControlPoint_Controlpoint() {}

func (*ControlPoint_Traffic) isControlPoint_Controlpoint() {}

var File_aperture_policy_language_v1_selector_proto protoreflect.FileDescriptor

var file_aperture_policy_language_v1_selector_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x10, 0x0a, 0x08, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b,
	0x32, 0x29, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x2e, 0x52, 0x0a, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0xc2, 0x01, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0xa7, 0x01, 0x92, 0x41, 0xa3, 0x01,
	0x32, 0x82, 0x01, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x28,
	0x6e, 0x61, 0x6d, 0x65, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x0a, 0x49, 0x6e, 0x20, 0x6b, 0x38, 0x73, 0x2c, 0x20, 0x74,
	0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x46, 0x51, 0x44, 0x4e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x3a, 0x20, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x20, 0x6d, 0x61, 0x79, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x20,
	0x74, 0x6f, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbe, 0x01, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x6e, 0x92, 0x41, 0x6b, 0x32, 0x4b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x57, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x74, 0x6f,
	0x2e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x9e, 0x09,
	0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x42, 0xcd, 0x08, 0x92, 0x41, 0xc9, 0x08, 0x32, 0xc6, 0x08, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x73,
	0x20, 0x74, 0x6f, 0x20, 0x61, 0x64, 0x64, 0x20, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x6e, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6d, 0x75,
	0x73, 0x74, 0x20, 0x61, 0x6c, 0x73, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x61, 0x74, 0x69, 0x73,
	0x66, 0x69, 0x65, 0x64, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x29, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74,
	0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x0a, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61,
	0x72, 0x79, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x2e, 0x0a, 0x46, 0x6f, 0x72, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2c, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65,
	0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x66,
	0x6c, 0x6f, 0x77, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74,
	0x65, 0x3a, 0x20, 0x46, 0x6f, 0x72, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x6c,
	0x79, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x77, 0x65, 0x72, 0x65, 0x20, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x2a, 0x2a,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x2a, 0x2a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x0a, 0x0a, 0x49, 0x6e, 0x20, 0x63, 0x61,
	0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6b, 0x38, 0x73, 0x2c, 0x20, 0x69, 0x6e, 0x66, 0x72, 0x61,
	0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x20, 0x28,
	0x6e, 0x6f, 0x74, 0x65, 0x3a, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x6d, 0x69, 0x67, 0x68,
	0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x29, 0x2e,
	0x0a, 0x46, 0x6c, 0x6f, 0x77, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x60, 0x66, 0x6c, 0x6f, 0x77,
	0x5f, 0x60, 0x0a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x60, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x60, 0x2e, 0x0a, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x60, 0x69, 0x64, 0x60, 0x20, 0x28, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x20, 0x61, 0x73, 0x20, 0x60, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x60, 0x29, 0x2c, 0x20, 0x60, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x60, 0x2c, 0x20,
	0x60, 0x70, 0x61, 0x74, 0x68, 0x60, 0x2c, 0x20, 0x60, 0x68, 0x6f, 0x73, 0x74, 0x60, 0x2c, 0x20,
	0x60, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x60, 0x2c, 0x20, 0x60, 0x73, 0x69, 0x7a, 0x65, 0x60,
	0x2c, 0x20, 0x60, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x60, 0x0a, 0x28, 0x6d, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x5b, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5d, 0x28, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x62, 0x6c, 0x6f, 0x62, 0x2f, 0x36, 0x33, 0x37, 0x61, 0x39,
	0x32, 0x61, 0x35, 0x36, 0x65, 0x32, 0x37, 0x33, 0x39, 0x62, 0x35, 0x66, 0x37, 0x38, 0x34, 0x34,
	0x31, 0x63, 0x33, 0x33, 0x37, 0x31, 0x37, 0x31, 0x39, 0x36, 0x38, 0x66, 0x31, 0x38, 0x62, 0x34,
	0x36, 0x65, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x23, 0x4c, 0x31, 0x30, 0x32, 0x29, 0x29, 0x2e, 0x0a, 0x41, 0x6c,
	0x73, 0x6f, 0x2c, 0x20, 0x28, 0x6e, 0x6f, 0x6e, 0x2d, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x29,
	0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x73, 0x20, 0x60, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x3c, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3e, 0x60, 0x2e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x3a, 0x20,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x20,
	0x61, 0x72, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x22, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x3a, 0xa3,
	0x03, 0x92, 0x41, 0x9f, 0x03, 0x0a, 0x40, 0x32, 0x3e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x73, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20,
	0x6f, 0x72, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x20, 0x74, 0x6f, 0x2e, 0x32, 0xda, 0x02, 0x7b, 0x22, 0x27, 0x79, 0x61, 0x6d,
	0x6c, 0x22, 0x3a, 0x7b, 0x22, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x3a, 0x7b,
	0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x31, 0x2e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x2c, 0x22,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x3a, 0x7b,
	0x22, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x22, 0x3a, 0x22, 0x69, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x20, 0x23, 0x20, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x60, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x60, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x60, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x60, 0x2e, 0x22,
	0x7d, 0x2c, 0x22, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x22, 0x3a, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x65, 0x72, 0x22, 0x3a, 0x22,
	0x67, 0x6f, 0x6c, 0x64, 0x22, 0x7d, 0x2c, 0x22, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x6b, 0x65,
	0x79, 0x22, 0x3a, 0x22, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x2c, 0x22, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x3a, 0x22, 0x49, 0x6e, 0x22, 0x2c, 0x22, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x3a, 0x5b, 0x22, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x22, 0x2c, 0x22, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x5d, 0x7d, 0x2c, 0x7b, 0x22, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x22, 0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x22,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x22, 0x3a, 0x22, 0x5e, 0x28, 0x3f, 0x21, 0x2e, 0x2a, 0x43, 0x68,
	0x72, 0x6f, 0x6d, 0x65, 0x29, 0x2e, 0x2a, 0x53, 0x61, 0x66, 0x61, 0x72, 0x69, 0x22, 0x7d, 0x5d,
	0x7d, 0x7d, 0x7d, 0x7d, 0x22, 0xcb, 0x07, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0xf3, 0x01, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd6, 0x01, 0x92, 0x41, 0xd2, 0x01, 0x32, 0xb1,
	0x01, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x46, 0x6c, 0x75, 0x6e, 0x78, 0x4e, 0x69,
	0x6e, 0x6a, 0x61, 0x20, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x27, 0x73, 0x20, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x0a, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x20,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x74, 0x68,
	0x61, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x22, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x64, 0x20, 0x6f, 0x66, 0x66, 0x22, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x75,
	0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x22, 0x6e, 0x61, 0x6d,
	0x65, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x27, 0x73, 0x20, 0x53, 0x70, 0x61, 0x6e, 0x22, 0x2e, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x3a,
	0x20, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x6f, 0x6e, 0x6c,
	0x79, 0x2e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0xf5, 0x03, 0x0a, 0x07,
	0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0xd8, 0x03,
	0x92, 0x41, 0xd4, 0x03, 0x32, 0x9e, 0x03, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2c, 0x20,
	0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x22, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x20, 0x6f, 0x72, 0x20, 0x22, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2e, 0x0a, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x68, 0x6f, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x0a, 0x55, 0x73, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x20,
	0x28, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x61, 0x20, 0x77, 0x65, 0x62, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x0a, 0x0a, 0x2a, 0x20, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a,
	0x20, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x61, 0x74, 0x6f, 0x6d, 0x20,
	0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x20, 0x48, 0x54, 0x54, 0x50, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x0a, 0x2a, 0x20, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x65, 0x76, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x2f, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x69, 0x6e, 0x67, 0x20,
	0x66, 0x6c, 0x6f, 0x77, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x61, 0x67, 0x67, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x82, 0x03, 0x30, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x1a, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x20, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x3a, 0xbc, 0x01, 0x92, 0x41, 0xb8, 0x01, 0x0a, 0xb5, 0x01, 0x32, 0xb2, 0x01,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20,
	0x61, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x75, 0x6c, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x74,
	0x6f, 0x2e, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20,
	0x69, 0x73, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x22, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x20, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x42, 0x96, 0x02, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x41, 0x50, 0x4c, 0xaa, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x27, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x41, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_language_v1_selector_proto_rawDescOnce sync.Once
	file_aperture_policy_language_v1_selector_proto_rawDescData = file_aperture_policy_language_v1_selector_proto_rawDesc
)

func file_aperture_policy_language_v1_selector_proto_rawDescGZIP() []byte {
	file_aperture_policy_language_v1_selector_proto_rawDescOnce.Do(func() {
		file_aperture_policy_language_v1_selector_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_language_v1_selector_proto_rawDescData)
	})
	return file_aperture_policy_language_v1_selector_proto_rawDescData
}

var file_aperture_policy_language_v1_selector_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_aperture_policy_language_v1_selector_proto_goTypes = []interface{}{
	(*Selector)(nil),     // 0: aperture.policy.language.v1.Selector
	(*ControlPoint)(nil), // 1: aperture.policy.language.v1.ControlPoint
	(*LabelMatcher)(nil), // 2: aperture.policy.language.v1.LabelMatcher
}
var file_aperture_policy_language_v1_selector_proto_depIdxs = []int32{
	1, // 0: aperture.policy.language.v1.Selector.control_point:type_name -> aperture.policy.language.v1.ControlPoint
	2, // 1: aperture.policy.language.v1.Selector.label_matcher:type_name -> aperture.policy.language.v1.LabelMatcher
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_aperture_policy_language_v1_selector_proto_init() }
func file_aperture_policy_language_v1_selector_proto_init() {
	if File_aperture_policy_language_v1_selector_proto != nil {
		return
	}
	file_aperture_policy_language_v1_labelmatcher_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_language_v1_selector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_selector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_policy_language_v1_selector_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ControlPoint_Feature)(nil),
		(*ControlPoint_Traffic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_language_v1_selector_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aperture_policy_language_v1_selector_proto_goTypes,
		DependencyIndexes: file_aperture_policy_language_v1_selector_proto_depIdxs,
		MessageInfos:      file_aperture_policy_language_v1_selector_proto_msgTypes,
	}.Build()
	File_aperture_policy_language_v1_selector_proto = out.File
	file_aperture_policy_language_v1_selector_proto_rawDesc = nil
	file_aperture_policy_language_v1_selector_proto_goTypes = nil
	file_aperture_policy_language_v1_selector_proto_depIdxs = nil
}
