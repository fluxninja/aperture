// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: aperture/policy/language/v1/std_components.proto

package languagev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Gradient controller is a type of controller which tries to adjust the
// control variable proportionally to the relative difference between setpoint
// and actual value of the signal
//
// The `gradient` describes a corrective factor that should be applied to the
// control variable to get the signal closer to the setpoint. It's computed as follows:
//
// $$
// \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
// $$
//
// `gradient` is then clamped to `[min_gradient, max_gradient]` range.
//
// The output of gradient controller is computed as follows:
// $$
// \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
// $$
//
// Note the additional `optimize` signal, that can be used to "nudge" the
// controller into desired idle state.
//
// The output can be _optionally_ clamped to desired range using `max` and
// `min` input.
type GradientController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports of the Gradient Controller.
	InPorts *GradientController_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports of the Gradient Controller.
	OutPorts *GradientController_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Gradient Parameters.
	Parameters *GradientController_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration key for DynamicConfig
	DynamicConfigKey string `protobuf:"bytes,4,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration.
	DefaultConfig *GradientController_DynamicConfig `protobuf:"bytes,5,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GradientController) Reset() {
	*x = GradientController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController) ProtoMessage() {}

func (x *GradientController) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController.ProtoReflect.Descriptor instead.
func (*GradientController) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{0}
}

func (x *GradientController) GetInPorts() *GradientController_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *GradientController) GetOutPorts() *GradientController_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *GradientController) GetParameters() *GradientController_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *GradientController) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *GradientController) GetDefaultConfig() *GradientController_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Exponential Moving Average (EMA) is a type of moving average that applies exponentially more weight to recent signal readings
//
// At any time EMA component operates in one of the following states:
//  1. Warm up state: The first `warmup_window` samples are used to compute the initial EMA.
//     If an invalid reading is received during the `warmup_window`, the last good average is emitted and the state gets reset back to beginning of warm up state.
//  2. Normal state: The EMA is computed using following formula.
//
// The EMA for a series $Y$ is calculated recursively as:
// <!-- vale off -->
// $$
// \text{EMA} _t =
// \begin{cases}
//
//	Y_0, &\text{for } t = 0 \\
//	\alpha Y_t + (1 - \alpha) \text{EMA}_{t-1}, &\text{for }t > 0
//
// \end{cases}
// $$
//
// The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
// A higher $\alpha$ discounts older observations faster.
// The $\alpha$ is computed using ema\_window:
//
// $$
// \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
// $$
// <!-- vale on -->
type EMA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the EMA component.
	InPorts *EMA_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the EMA component.
	OutPorts *EMA_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Parameters for the EMA component.
	Parameters *EMA_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *EMA) Reset() {
	*x = EMA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA) ProtoMessage() {}

func (x *EMA) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA.ProtoReflect.Descriptor instead.
func (*EMA) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{1}
}

func (x *EMA) GetInPorts() *EMA_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *EMA) GetOutPorts() *EMA_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *EMA) GetParameters() *EMA_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Simple Moving Average (SMA) is a type of moving average that computes the average of a fixed number of signal readings.
type SMA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the SMA component.
	InPorts *SMA_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the SMA component.
	OutPorts *SMA_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Parameters for the SMA component.
	Parameters *SMA_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *SMA) Reset() {
	*x = SMA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMA) ProtoMessage() {}

func (x *SMA) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMA.ProtoReflect.Descriptor instead.
func (*SMA) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{2}
}

func (x *SMA) GetInPorts() *SMA_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *SMA) GetOutPorts() *SMA_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *SMA) GetParameters() *SMA_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Type of Combinator that computes the arithmetic operation on the operand signals
type ArithmeticCombinator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Arithmetic Combinator component.
	InPorts *ArithmeticCombinator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Arithmetic Combinator component.
	OutPorts *ArithmeticCombinator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Operator of the arithmetic operation.
	//
	// The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
	// In case of XOR and bit shifts, value of signals is cast to integers before performing the operation.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=add sub mul div xor lshift rshift"` // @gotags: validate:"oneof=add sub mul div xor lshift rshift"
}

func (x *ArithmeticCombinator) Reset() {
	*x = ArithmeticCombinator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator) ProtoMessage() {}

func (x *ArithmeticCombinator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{3}
}

func (x *ArithmeticCombinator) GetInPorts() *ArithmeticCombinator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *ArithmeticCombinator) GetOutPorts() *ArithmeticCombinator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *ArithmeticCombinator) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

// Type of Combinator that computes the comparison operation on LHS and RHS signals
//
// The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.
//
// This component also supports time-based response (the output)
// transitions between 1.0 or 0.0 signal if the decider condition is
// true or false for at least `true_for` or `false_for` duration. If
// `true_for` and `false_for` durations are zero then the transitions are
// instantaneous.
type Decider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Decider component.
	InPorts *Decider_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Decider component.
	OutPorts *Decider_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Comparison operator that computes operation on LHS and RHS input signals.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=gt lt gte lte eq neq"` // @gotags: validate:"oneof=gt lt gte lte eq neq"
	// Duration of time to wait before changing to true state.
	// If the duration is zero, the change will happen instantaneously.```
	TrueFor *durationpb.Duration `protobuf:"bytes,4,opt,name=true_for,json=trueFor,proto3" json:"true_for,omitempty" default:"0s"` // @gotags: default:"0s"
	// Duration of time to wait before changing to false state.
	// If the duration is zero, the change will happen instantaneously.
	FalseFor *durationpb.Duration `protobuf:"bytes,5,opt,name=false_for,json=falseFor,proto3" json:"false_for,omitempty" default:"0s"` // @gotags: default:"0s"
}

func (x *Decider) Reset() {
	*x = Decider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider) ProtoMessage() {}

func (x *Decider) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider.ProtoReflect.Descriptor instead.
func (*Decider) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{4}
}

func (x *Decider) GetInPorts() *Decider_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Decider) GetOutPorts() *Decider_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Decider) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Decider) GetTrueFor() *durationpb.Duration {
	if x != nil {
		return x.TrueFor
	}
	return nil
}

func (x *Decider) GetFalseFor() *durationpb.Duration {
	if x != nil {
		return x.FalseFor
	}
	return nil
}

// Type of Combinator that switches between `on_signal` and `off_signal` signals based on switch input
//
// `on_signal` will be returned if switch input is valid and not equal to 0.0 ,
//
//	otherwise `off_signal` will be returned.
type Switcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Switcher component.
	InPorts *Switcher_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Switcher component.
	OutPorts *Switcher_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Switcher) Reset() {
	*x = Switcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher) ProtoMessage() {}

func (x *Switcher) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher.ProtoReflect.Descriptor instead.
func (*Switcher) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{5}
}

func (x *Switcher) GetInPorts() *Switcher_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Switcher) GetOutPorts() *Switcher_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Component that emits a variable value as an output signal, can be defined in dynamic configuration.
type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the Variable component.
	OutPorts *Variable_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Configuration key for DynamicConfig.
	DynamicConfigKey string `protobuf:"bytes,2,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration.
	DefaultConfig *Variable_DynamicConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{6}
}

func (x *Variable) GetOutPorts() *Variable_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Variable) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *Variable) GetDefaultConfig() *Variable_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Takes an input signal and emits the output after applying the specified unary operator
//
// $$
// \text{output} = \unary_operator{\text{input}}
// $$
type UnaryOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the UnaryOperator component.
	InPorts *UnaryOperator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the UnaryOperator component.
	OutPorts *UnaryOperator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Unary Operator to apply.
	//
	// The unary operator can be one of the following:
	// * `abs`: Absolute value with the sign removed.
	// * `acos`: `arccosine`, in radians.
	// * `acosh`: Inverse hyperbolic cosine.
	// * `asin`: `arcsine`, in radians.
	// * `asinh`: Inverse hyperbolic sine.
	// * `atan`: `arctangent`, in radians.
	// * `atanh`: Inverse hyperbolic tangent.
	// * `cbrt`: Cube root.
	// * `ceil`: Least integer value greater than or equal to input signal.
	// * `cos`: `cosine`, in radians.
	// * `cosh`: Hyperbolic cosine.
	// * `erf`: Error function.
	// * `erfc`: Complementary error function.
	// * `erfcinv`: Inverse complementary error function.
	// * `erfinv`: Inverse error function.
	// * `exp`: The base-e exponential of input signal.
	// * `exp2`: The base-2 exponential of input signal.
	// * `expm1`: The base-e exponential of input signal minus 1.
	// * `floor`: Greatest integer value less than or equal to input signal.
	// * `gamma`: Gamma function.
	// * `j0`: Bessel function of the first kind of order 0.
	// * `j1`: Bessel function of the first kind of order 1.
	// * `lgamma`: Natural logarithm of the absolute value of the gamma function.
	// * `log`: Natural logarithm of input signal.
	// * `log10`: Base-10 logarithm of input signal.
	// * `log1p`: Natural logarithm of input signal plus 1.
	// * `log2`: Base-2 logarithm of input signal.
	// * `round`: Round to nearest integer.
	// * `roundtoeven`: Round to nearest integer, with ties going to the nearest even integer.
	// * `sin`: `sine`, in radians.
	// * `sinh`: Hyperbolic sine.
	// * `sqrt`: Square root.
	// * `tan`: `tangent`, in radians.
	// * `tanh`: Hyperbolic tangent.
	// * `trunc`: Truncate to integer.
	// * `y0`: Bessel function of the second kind of order 0.
	// * `y1`: Bessel function of the second kind of order 1.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=abs acos acosh asin asinh atan atanh cbrt ceil cos cosh erf erfc erfcinv erfinv exp exp2 expm1 floor gamma j0 j1 lgamma log log10 log1p log2 round roundtoeven sin sinh sqrt tan tanh trunc y0 y1"` // @gotags: validate:"oneof=abs acos acosh asin asinh atan atanh cbrt ceil cos cosh erf erfc erfcinv erfinv exp exp2 expm1 floor gamma j0 j1 lgamma log log10 log1p log2 round roundtoeven sin sinh sqrt tan tanh trunc y0 y1"
}

func (x *UnaryOperator) Reset() {
	*x = UnaryOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryOperator) ProtoMessage() {}

func (x *UnaryOperator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryOperator.ProtoReflect.Descriptor instead.
func (*UnaryOperator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{7}
}

func (x *UnaryOperator) GetInPorts() *UnaryOperator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *UnaryOperator) GetOutPorts() *UnaryOperator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *UnaryOperator) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

// Extrapolates the input signal by repeating the last valid value during the period in which it is invalid
//
// It does so until `maximum_extrapolation_interval` is reached, beyond which it emits invalid signal unless input signal becomes valid again.
type Extrapolator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Extrapolator component.
	InPorts *Extrapolator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Extrapolator component.
	OutPorts *Extrapolator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Parameters for the Extrapolator component.
	Parameters *Extrapolator_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Extrapolator) Reset() {
	*x = Extrapolator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator) ProtoMessage() {}

func (x *Extrapolator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator.ProtoReflect.Descriptor instead.
func (*Extrapolator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{8}
}

func (x *Extrapolator) GetInPorts() *Extrapolator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Extrapolator) GetOutPorts() *Extrapolator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Extrapolator) GetParameters() *Extrapolator_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Takes a list of input signals and emits the signal with the maximum value
//
// Max: output = max([]inputs).
type Max struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Max component.
	InPorts *Max_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Max component.
	OutPorts *Max_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Max) Reset() {
	*x = Max{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max) ProtoMessage() {}

func (x *Max) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max.ProtoReflect.Descriptor instead.
func (*Max) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{9}
}

func (x *Max) GetInPorts() *Max_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Max) GetOutPorts() *Max_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Takes an array of input signals and emits the signal with the minimum value
// Min: output = min([]inputs).
type Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Min component.
	InPorts *Min_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Min component.
	OutPorts *Min_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Min) Reset() {
	*x = Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min) ProtoMessage() {}

func (x *Min) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min.ProtoReflect.Descriptor instead.
func (*Min) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{10}
}

func (x *Min) GetInPorts() *Min_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Min) GetOutPorts() *Min_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Logical AND.
//
// Signals are mapped to Boolean values as follows:
// * Zero is treated as false.
// * Any non-zero is treated as true.
// * Invalid inputs are considered unknown.
//
//	:::note
//
//	Treating invalid inputs as "unknowns" has a consequence that the result
//	might end up being valid even when some inputs are invalid. For example, `unknown && false == false`,
//	because the result would end up false no matter if
//	first signal was true or false. Conversely, `unknown && true == unknown`.
//
//	:::
type And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the And component.
	InPorts *And_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the And component.
	OutPorts *And_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *And) Reset() {
	*x = And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{11}
}

func (x *And) GetInPorts() *And_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *And) GetOutPorts() *And_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Logical OR.
//
// See [And component](#and) on how signals are mapped onto Boolean values.
type Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Or component.
	InPorts *Or_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Or component.
	OutPorts *Or_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Or) Reset() {
	*x = Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or) ProtoMessage() {}

func (x *Or) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or.ProtoReflect.Descriptor instead.
func (*Or) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{12}
}

func (x *Or) GetInPorts() *Or_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Or) GetOutPorts() *Or_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Logical NOT.
//
// See [And component](#and) on how signals are mapped onto Boolean values.
type Inverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Inverter component.
	InPorts *Inverter_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Inverter component.
	OutPorts *Inverter_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Inverter) Reset() {
	*x = Inverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inverter) ProtoMessage() {}

func (x *Inverter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inverter.ProtoReflect.Descriptor instead.
func (*Inverter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{13}
}

func (x *Inverter) GetInPorts() *Inverter_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Inverter) GetOutPorts() *Inverter_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Picks the first valid input signal from the array of input signals and emits it as an output signal
type FirstValid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the FirstValid component.
	InPorts *FirstValid_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the FirstValid component.
	OutPorts *FirstValid_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *FirstValid) Reset() {
	*x = FirstValid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid) ProtoMessage() {}

func (x *FirstValid) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid.ProtoReflect.Descriptor instead.
func (*FirstValid) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{14}
}

func (x *FirstValid) GetInPorts() *FirstValid_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *FirstValid) GetOutPorts() *FirstValid_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Alerter reacts to a signal and generates alert to send to alert manager.
type Alerter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Alerter component.
	InPorts *Alerter_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Alerter configuration
	Parameters *Alerter_Parameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Alerter) Reset() {
	*x = Alerter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerter) ProtoMessage() {}

func (x *Alerter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerter.ProtoReflect.Descriptor instead.
func (*Alerter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{15}
}

func (x *Alerter) GetInPorts() *Alerter_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Alerter) GetParameters() *Alerter_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Accumulates sum of signal every tick.
type Integrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Integrator component.
	InPorts *Integrator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Integrator component.
	OutPorts *Integrator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Integrator) Reset() {
	*x = Integrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrator) ProtoMessage() {}

func (x *Integrator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrator.ProtoReflect.Descriptor instead.
func (*Integrator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{16}
}

func (x *Integrator) GetInPorts() *Integrator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Integrator) GetOutPorts() *Integrator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Differentiator calculates rate of change per tick.
type Differentiator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Differentiator component.
	InPorts *Differentiator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Differentiator component.
	OutPorts *Differentiator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// The window of time over which differentiator operates.
	Window *durationpb.Duration `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty" default:"5s"` // @gotags: default:"5s"
}

func (x *Differentiator) Reset() {
	*x = Differentiator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Differentiator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Differentiator) ProtoMessage() {}

func (x *Differentiator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Differentiator.ProtoReflect.Descriptor instead.
func (*Differentiator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{17}
}

func (x *Differentiator) GetInPorts() *Differentiator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Differentiator) GetOutPorts() *Differentiator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Differentiator) GetWindow() *durationpb.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

// Generates 0 and 1 in turns.
type PulseGenerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the PulseGenerator component.
	OutPorts *PulseGenerator_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Emitting 1 for the `true_for` duration.
	TrueFor *durationpb.Duration `protobuf:"bytes,2,opt,name=true_for,json=trueFor,proto3" json:"true_for,omitempty" default:"5s"` // @gotags: default:"5s"
	// Emitting 0 for the `false_for` duration.
	FalseFor *durationpb.Duration `protobuf:"bytes,3,opt,name=false_for,json=falseFor,proto3" json:"false_for,omitempty" default:"5s"` // @gotags: default:"5s"
}

func (x *PulseGenerator) Reset() {
	*x = PulseGenerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulseGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseGenerator) ProtoMessage() {}

func (x *PulseGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseGenerator.ProtoReflect.Descriptor instead.
func (*PulseGenerator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{18}
}

func (x *PulseGenerator) GetOutPorts() *PulseGenerator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *PulseGenerator) GetTrueFor() *durationpb.Duration {
	if x != nil {
		return x.TrueFor
	}
	return nil
}

func (x *PulseGenerator) GetFalseFor() *durationpb.Duration {
	if x != nil {
		return x.FalseFor
	}
	return nil
}

// Holds the last valid signal value for the specified duration then waits for next valid value to hold.
// If it is holding a value that means it ignores both valid and invalid new signals until the `hold_for` duration is finished.
type Holder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Holder component.
	InPorts *Holder_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Holder component.
	OutPorts *Holder_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Holding the last valid signal value for the `hold_for` duration.
	HoldFor *durationpb.Duration `protobuf:"bytes,3,opt,name=hold_for,json=holdFor,proto3" json:"hold_for,omitempty" default:"5s"` // @gotags: default:"5s"
}

func (x *Holder) Reset() {
	*x = Holder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder) ProtoMessage() {}

func (x *Holder) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder.ProtoReflect.Descriptor instead.
func (*Holder) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{19}
}

func (x *Holder) GetInPorts() *Holder_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Holder) GetOutPorts() *Holder_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Holder) GetHoldFor() *durationpb.Duration {
	if x != nil {
		return x.HoldFor
	}
	return nil
}

// Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
type NestedSignalIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the NestedSignalIngress component.
	OutPorts *NestedSignalIngress_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Name of the port.
	PortName string `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *NestedSignalIngress) Reset() {
	*x = NestedSignalIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedSignalIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedSignalIngress) ProtoMessage() {}

func (x *NestedSignalIngress) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedSignalIngress.ProtoReflect.Descriptor instead.
func (*NestedSignalIngress) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{20}
}

func (x *NestedSignalIngress) GetOutPorts() *NestedSignalIngress_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *NestedSignalIngress) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

// Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
type NestedSignalEgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the NestedSignalEgress component.
	InPorts *NestedSignalEgress_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Name of the port.
	PortName string `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *NestedSignalEgress) Reset() {
	*x = NestedSignalEgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedSignalEgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedSignalEgress) ProtoMessage() {}

func (x *NestedSignalEgress) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedSignalEgress.ProtoReflect.Descriptor instead.
func (*NestedSignalEgress) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{21}
}

func (x *NestedSignalEgress) GetInPorts() *NestedSignalEgress_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *NestedSignalEgress) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

// The _Signal Generator_ component generates a smooth and continuous signal
// by following a sequence of specified steps. Each step has two parameters:
//   - `target_output`: The desired output value at the end of the step.
//   - `duration`: The time it takes for the signal to change linearly from the
//     previous step's `target_output` to the current step's `target_output`.
//
// The output signal starts at the `target_output` of the first step and
// changes linearly between steps based on their `duration`. The _Signal
// Generator_ can be controlled to move forwards, backwards, or reset to the
// beginning based on input signals.
type SignalGenerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts  *SignalGenerator_Ins  `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts *SignalGenerator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Parameters for the _Signal Generator_ component.
	Parameters *SignalGenerator_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *SignalGenerator) Reset() {
	*x = SignalGenerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGenerator) ProtoMessage() {}

func (x *SignalGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGenerator.ProtoReflect.Descriptor instead.
func (*SignalGenerator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{22}
}

func (x *SignalGenerator) GetInPorts() *SignalGenerator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *SignalGenerator) GetOutPorts() *SignalGenerator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *SignalGenerator) GetParameters() *SignalGenerator_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Gradient Parameters.
type GradientController_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Slope controls the aggressiveness and direction of the Gradient Controller.
	//
	// Slope is used as exponent on the signal to setpoint ratio in computation
	// of the gradient (see the [main description](#gradient-controller) for
	// exact equation). This parameter decides how aggressive the controller
	// responds to the deviation of signal from the setpoint.
	// for example:
	// * $\text{slope} = 1$: when signal is too high, increase control variable,
	// * $\text{slope} = -1$: when signal is too high, decrease control variable,
	// * $\text{slope} = -0.5$: when signal is too high, decrease control variable gradually.
	//
	// The sign of slope depends on correlation between the signal and control variable:
	// * Use $\text{slope} < 0$ if there is a _positive_ correlation between the signal and
	// the control variable (for example, Per-pod CPU usage and total concurrency).
	// * Use $\text{slope} > 0$ if there is a _negative_ correlation between the signal and
	// the control variable (for example, Per-pod CPU usage and number of pods).
	//
	// :::note
	//
	// You need to set _negative_ slope for a _positive_ correlation, as you're
	// describing the _action_ which controller should make when the signal
	// increases.
	//
	// :::
	//
	// The magnitude of slope describes how aggressively should the controller
	// react to a deviation of signal.
	// With $|\text{slope}| = 1$, the controller will aim to bring the signal to
	// the setpoint in one tick (assuming linear correlation with signal and setpoint).
	// Smaller magnitudes of slope will make the controller adjust the control
	// variable gradually.
	//
	// Setting $|\text{slope}| < 1$ (for example, $\pm0.8$) is recommended.
	// If you experience overshooting, consider lowering the magnitude even more.
	// Values of $|\text{slope}| > 1$ aren't recommended.
	//
	// :::note
	//
	// Remember that the gradient and output signal can be (optionally) clamped,
	// so the _slope_ might not fully describe aggressiveness of the controller.
	//
	// :::
	Slope float64 `protobuf:"fixed64,1,opt,name=slope,proto3" json:"slope,omitempty" validate:"required"` // @gotags: validate:"required"
	// Minimum gradient which clamps the computed gradient value to the range, `[min_gradient, max_gradient]`.
	MinGradient float64 `protobuf:"fixed64,2,opt,name=min_gradient,json=minGradient,proto3" json:"min_gradient,omitempty" default:"-1.79769313486231570814527423731704356798070e+308"` // @gotags: default:"-1.79769313486231570814527423731704356798070e+308"
	// Maximum gradient which clamps the computed gradient value to the range, `[min_gradient, max_gradient]`.
	MaxGradient float64 `protobuf:"fixed64,3,opt,name=max_gradient,json=maxGradient,proto3" json:"max_gradient,omitempty" default:"1.79769313486231570814527423731704356798070e+308"` // @gotags: default:"1.79769313486231570814527423731704356798070e+308"
}

func (x *GradientController_Parameters) Reset() {
	*x = GradientController_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Parameters) ProtoMessage() {}

func (x *GradientController_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Parameters.ProtoReflect.Descriptor instead.
func (*GradientController_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GradientController_Parameters) GetSlope() float64 {
	if x != nil {
		return x.Slope
	}
	return 0
}

func (x *GradientController_Parameters) GetMinGradient() float64 {
	if x != nil {
		return x.MinGradient
	}
	return 0
}

func (x *GradientController_Parameters) GetMaxGradient() float64 {
	if x != nil {
		return x.MaxGradient
	}
	return 0
}

// Dynamic Configuration for a Controller
type GradientController_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Decides whether the controller runs in `manual_mode`.
	// In manual mode, the controller does not adjust the control variable It emits the same output as the control variable input.
	ManualMode bool `protobuf:"varint,1,opt,name=manual_mode,json=manualMode,proto3" json:"manual_mode,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *GradientController_DynamicConfig) Reset() {
	*x = GradientController_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_DynamicConfig) ProtoMessage() {}

func (x *GradientController_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_DynamicConfig.ProtoReflect.Descriptor instead.
func (*GradientController_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{0, 1}
}

func (x *GradientController_DynamicConfig) GetManualMode() bool {
	if x != nil {
		return x.ManualMode
	}
	return false
}

// Inputs for the Gradient Controller component.
type GradientController_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal to be used for the gradient computation.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// Setpoint to be used for the gradient computation.
	Setpoint *InPort `protobuf:"bytes,2,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
	// Optimize signal is added to the output of the gradient calculation.
	Optimize *InPort `protobuf:"bytes,3,opt,name=optimize,proto3" json:"optimize,omitempty"`
	// Maximum value to limit the output signal.
	Max *InPort `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	// Minimum value to limit the output signal.
	Min *InPort `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	// Actual current value of the control variable.
	//
	// This signal is multiplied by the gradient to produce the output.
	ControlVariable *InPort `protobuf:"bytes,6,opt,name=control_variable,json=controlVariable,proto3" json:"control_variable,omitempty"`
}

func (x *GradientController_Ins) Reset() {
	*x = GradientController_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Ins) ProtoMessage() {}

func (x *GradientController_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Ins.ProtoReflect.Descriptor instead.
func (*GradientController_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{0, 2}
}

func (x *GradientController_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *GradientController_Ins) GetSetpoint() *InPort {
	if x != nil {
		return x.Setpoint
	}
	return nil
}

func (x *GradientController_Ins) GetOptimize() *InPort {
	if x != nil {
		return x.Optimize
	}
	return nil
}

func (x *GradientController_Ins) GetMax() *InPort {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *GradientController_Ins) GetMin() *InPort {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *GradientController_Ins) GetControlVariable() *InPort {
	if x != nil {
		return x.ControlVariable
	}
	return nil
}

// Outputs for the Gradient Controller component.
type GradientController_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Computed desired value of the control variable.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GradientController_Outs) Reset() {
	*x = GradientController_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Outs) ProtoMessage() {}

func (x *GradientController_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Outs.ProtoReflect.Descriptor instead.
func (*GradientController_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{0, 3}
}

func (x *GradientController_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the EMA component.
type EMA_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal to be used for the EMA computation.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Upper bound of the moving average.
	//
	// When the signal exceeds `max_envelope` it is multiplied by
	// `correction_factor_on_max_envelope_violation` **once per tick**.
	//
	// :::note
	//
	// If the signal deviates from `max_envelope` faster than the correction
	// faster, it might end up exceeding the envelope.
	//
	// :::
	MaxEnvelope *InPort `protobuf:"bytes,2,opt,name=max_envelope,json=maxEnvelope,proto3" json:"max_envelope,omitempty"`
	// Lower bound of the moving average.
	//
	// Behavior is similar to `max_envelope`.
	MinEnvelope *InPort `protobuf:"bytes,3,opt,name=min_envelope,json=minEnvelope,proto3" json:"min_envelope,omitempty"`
}

func (x *EMA_Ins) Reset() {
	*x = EMA_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Ins) ProtoMessage() {}

func (x *EMA_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Ins.ProtoReflect.Descriptor instead.
func (*EMA_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{1, 0}
}

func (x *EMA_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EMA_Ins) GetMaxEnvelope() *InPort {
	if x != nil {
		return x.MaxEnvelope
	}
	return nil
}

func (x *EMA_Ins) GetMinEnvelope() *InPort {
	if x != nil {
		return x.MinEnvelope
	}
	return nil
}

// Outputs for the EMA component.
type EMA_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exponential moving average of the series of reading as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *EMA_Outs) Reset() {
	*x = EMA_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Outs) ProtoMessage() {}

func (x *EMA_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Outs.ProtoReflect.Descriptor instead.
func (*EMA_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{1, 1}
}

func (x *EMA_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Parameters for the EMA component.
type EMA_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration of EMA sampling window.
	EmaWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=ema_window,json=emaWindow,proto3" json:"ema_window,omitempty" validate:"required"` // @gotags: validate:"required"
	// Duration of EMA warming up window.
	//
	// The initial value of the EMA is the average of signal readings received during the warm up window.
	WarmupWindow *durationpb.Duration `protobuf:"bytes,2,opt,name=warmup_window,json=warmupWindow,proto3" json:"warmup_window,omitempty" validate:"required"` // @gotags: validate:"required"
	// Correction factor to apply on the output value if its in violation of the min envelope.
	CorrectionFactorOnMinEnvelopeViolation float64 `protobuf:"fixed64,3,opt,name=correction_factor_on_min_envelope_violation,json=correctionFactorOnMinEnvelopeViolation,proto3" json:"correction_factor_on_min_envelope_violation,omitempty" validate:"gte=1.0" default:"1.0"` // @gotags: validate:"gte=1.0" default:"1.0"
	// Correction factor to apply on the output value if its in violation of the max envelope.
	CorrectionFactorOnMaxEnvelopeViolation float64 `protobuf:"fixed64,4,opt,name=correction_factor_on_max_envelope_violation,json=correctionFactorOnMaxEnvelopeViolation,proto3" json:"correction_factor_on_max_envelope_violation,omitempty" validate:"gte=0,lte=1.0" default:"1.0"` // @gotags: validate:"gte=0,lte=1.0" default:"1.0"
	// Whether the output is valid during the warm-up stage.
	ValidDuringWarmup bool `protobuf:"varint,5,opt,name=valid_during_warmup,json=validDuringWarmup,proto3" json:"valid_during_warmup,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *EMA_Parameters) Reset() {
	*x = EMA_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Parameters) ProtoMessage() {}

func (x *EMA_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Parameters.ProtoReflect.Descriptor instead.
func (*EMA_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{1, 2}
}

func (x *EMA_Parameters) GetEmaWindow() *durationpb.Duration {
	if x != nil {
		return x.EmaWindow
	}
	return nil
}

func (x *EMA_Parameters) GetWarmupWindow() *durationpb.Duration {
	if x != nil {
		return x.WarmupWindow
	}
	return nil
}

func (x *EMA_Parameters) GetCorrectionFactorOnMinEnvelopeViolation() float64 {
	if x != nil {
		return x.CorrectionFactorOnMinEnvelopeViolation
	}
	return 0
}

func (x *EMA_Parameters) GetCorrectionFactorOnMaxEnvelopeViolation() float64 {
	if x != nil {
		return x.CorrectionFactorOnMaxEnvelopeViolation
	}
	return 0
}

func (x *EMA_Parameters) GetValidDuringWarmup() bool {
	if x != nil {
		return x.ValidDuringWarmup
	}
	return false
}

type SMA_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal to be used for the moving average computation.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *SMA_Ins) Reset() {
	*x = SMA_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMA_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMA_Ins) ProtoMessage() {}

func (x *SMA_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMA_Ins.ProtoReflect.Descriptor instead.
func (*SMA_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SMA_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

type SMA_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Computed moving average.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *SMA_Outs) Reset() {
	*x = SMA_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMA_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMA_Outs) ProtoMessage() {}

func (x *SMA_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMA_Outs.ProtoReflect.Descriptor instead.
func (*SMA_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SMA_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

type SMA_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Window of time over which the moving average is computed.
	SmaWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=sma_window,json=smaWindow,proto3" json:"sma_window,omitempty" validate:"required"` // @gotags: validate:"required"
	// Whether the output is valid during the warm-up stage.
	ValidDuringWarmup bool `protobuf:"varint,2,opt,name=valid_during_warmup,json=validDuringWarmup,proto3" json:"valid_during_warmup,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *SMA_Parameters) Reset() {
	*x = SMA_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMA_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMA_Parameters) ProtoMessage() {}

func (x *SMA_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMA_Parameters.ProtoReflect.Descriptor instead.
func (*SMA_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{2, 2}
}

func (x *SMA_Parameters) GetSmaWindow() *durationpb.Duration {
	if x != nil {
		return x.SmaWindow
	}
	return nil
}

func (x *SMA_Parameters) GetValidDuringWarmup() bool {
	if x != nil {
		return x.ValidDuringWarmup
	}
	return false
}

// Inputs for the Arithmetic Combinator component.
type ArithmeticCombinator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left hand side of the arithmetic operation.
	Lhs *InPort `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Right hand side of the arithmetic operation.
	Rhs *InPort `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *ArithmeticCombinator_Ins) Reset() {
	*x = ArithmeticCombinator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator_Ins) ProtoMessage() {}

func (x *ArithmeticCombinator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator_Ins.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ArithmeticCombinator_Ins) GetLhs() *InPort {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *ArithmeticCombinator_Ins) GetRhs() *InPort {
	if x != nil {
		return x.Rhs
	}
	return nil
}

// Outputs for the Arithmetic Combinator component.
type ArithmeticCombinator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of arithmetic operation.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ArithmeticCombinator_Outs) Reset() {
	*x = ArithmeticCombinator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator_Outs) ProtoMessage() {}

func (x *ArithmeticCombinator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator_Outs.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{3, 1}
}

func (x *ArithmeticCombinator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Decider component.
type Decider_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left hand side input signal for the comparison operation.
	Lhs *InPort `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Right hand side input signal for the comparison operation.
	Rhs *InPort `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *Decider_Ins) Reset() {
	*x = Decider_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider_Ins) ProtoMessage() {}

func (x *Decider_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider_Ins.ProtoReflect.Descriptor instead.
func (*Decider_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Decider_Ins) GetLhs() *InPort {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *Decider_Ins) GetRhs() *InPort {
	if x != nil {
		return x.Rhs
	}
	return nil
}

// Outputs for the Decider component.
type Decider_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selected signal (1.0 or 0.0).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Decider_Outs) Reset() {
	*x = Decider_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider_Outs) ProtoMessage() {}

func (x *Decider_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider_Outs.ProtoReflect.Descriptor instead.
func (*Decider_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Decider_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Switcher component.
type Switcher_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output signal when switch is valid and not 0.0.
	OnSignal *InPort `protobuf:"bytes,1,opt,name=on_signal,json=onSignal,proto3" json:"on_signal,omitempty"`
	// Output signal when switch is invalid or 0.0.
	OffSignal *InPort `protobuf:"bytes,2,opt,name=off_signal,json=offSignal,proto3" json:"off_signal,omitempty"`
	// Decides whether to return `on_signal` or `off_signal`.
	Switch *InPort `protobuf:"bytes,3,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (x *Switcher_Ins) Reset() {
	*x = Switcher_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher_Ins) ProtoMessage() {}

func (x *Switcher_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher_Ins.ProtoReflect.Descriptor instead.
func (*Switcher_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{5, 0}
}

func (x *Switcher_Ins) GetOnSignal() *InPort {
	if x != nil {
		return x.OnSignal
	}
	return nil
}

func (x *Switcher_Ins) GetOffSignal() *InPort {
	if x != nil {
		return x.OffSignal
	}
	return nil
}

func (x *Switcher_Ins) GetSwitch() *InPort {
	if x != nil {
		return x.Switch
	}
	return nil
}

// Outputs for the Switcher component.
type Switcher_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selected signal (`on_signal` or `off_signal`).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Switcher_Outs) Reset() {
	*x = Switcher_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher_Outs) ProtoMessage() {}

func (x *Switcher_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher_Outs.ProtoReflect.Descriptor instead.
func (*Switcher_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{5, 1}
}

func (x *Switcher_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

type Variable_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstantSignal *ConstantSignal `protobuf:"bytes,1,opt,name=constant_signal,json=constantSignal,proto3" json:"constant_signal,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Variable_DynamicConfig) Reset() {
	*x = Variable_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_DynamicConfig) ProtoMessage() {}

func (x *Variable_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_DynamicConfig.ProtoReflect.Descriptor instead.
func (*Variable_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Variable_DynamicConfig) GetConstantSignal() *ConstantSignal {
	if x != nil {
		return x.ConstantSignal
	}
	return nil
}

// Outputs for the Variable component.
type Variable_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value is emitted to the output port.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Variable_Outs) Reset() {
	*x = Variable_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_Outs) ProtoMessage() {}

func (x *Variable_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_Outs.ProtoReflect.Descriptor instead.
func (*Variable_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{6, 1}
}

func (x *Variable_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the UnaryOperator component.
type UnaryOperator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *UnaryOperator_Ins) Reset() {
	*x = UnaryOperator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryOperator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryOperator_Ins) ProtoMessage() {}

func (x *UnaryOperator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryOperator_Ins.ProtoReflect.Descriptor instead.
func (*UnaryOperator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{7, 0}
}

func (x *UnaryOperator_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the UnaryOperator component.
type UnaryOperator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *UnaryOperator_Outs) Reset() {
	*x = UnaryOperator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryOperator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryOperator_Outs) ProtoMessage() {}

func (x *UnaryOperator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryOperator_Outs.ProtoReflect.Descriptor instead.
func (*UnaryOperator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{7, 1}
}

func (x *UnaryOperator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Parameters for the Extrapolator component.
type Extrapolator_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum time interval to repeat the last valid value of input signal.
	MaxExtrapolationInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=max_extrapolation_interval,json=maxExtrapolationInterval,proto3" json:"max_extrapolation_interval,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Extrapolator_Parameters) Reset() {
	*x = Extrapolator_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Parameters) ProtoMessage() {}

func (x *Extrapolator_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Parameters.ProtoReflect.Descriptor instead.
func (*Extrapolator_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Extrapolator_Parameters) GetMaxExtrapolationInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxExtrapolationInterval
	}
	return nil
}

// Inputs for the Extrapolator component.
type Extrapolator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal for the Extrapolator component.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Extrapolator_Ins) Reset() {
	*x = Extrapolator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Ins) ProtoMessage() {}

func (x *Extrapolator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Ins.ProtoReflect.Descriptor instead.
func (*Extrapolator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Extrapolator_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the Extrapolator component.
type Extrapolator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extrapolated signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Extrapolator_Outs) Reset() {
	*x = Extrapolator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Outs) ProtoMessage() {}

func (x *Extrapolator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Outs.ProtoReflect.Descriptor instead.
func (*Extrapolator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{8, 2}
}

func (x *Extrapolator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Max component.
type Max_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Max_Ins) Reset() {
	*x = Max_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max_Ins) ProtoMessage() {}

func (x *Max_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max_Ins.ProtoReflect.Descriptor instead.
func (*Max_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Max_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output for the Max component.
type Max_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal with maximum value as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Max_Outs) Reset() {
	*x = Max_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max_Outs) ProtoMessage() {}

func (x *Max_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max_Outs.ProtoReflect.Descriptor instead.
func (*Max_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{9, 1}
}

func (x *Max_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Min component.
type Min_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Min_Ins) Reset() {
	*x = Min_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min_Ins) ProtoMessage() {}

func (x *Min_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min_Ins.ProtoReflect.Descriptor instead.
func (*Min_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Min_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output ports for the Min component.
type Min_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal with minimum value as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Min_Outs) Reset() {
	*x = Min_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min_Outs) ProtoMessage() {}

func (x *Min_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min_Outs.ProtoReflect.Descriptor instead.
func (*Min_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Min_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the And component.
type And_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *And_Ins) Reset() {
	*x = And_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And_Ins) ProtoMessage() {}

func (x *And_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And_Ins.ProtoReflect.Descriptor instead.
func (*And_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{11, 0}
}

func (x *And_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output ports for the And component.
type And_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of logical AND of all the input signals.
	//
	// Will always be 0 (false), 1 (true) or invalid (unknown).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *And_Outs) Reset() {
	*x = And_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And_Outs) ProtoMessage() {}

func (x *And_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And_Outs.ProtoReflect.Descriptor instead.
func (*And_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{11, 1}
}

func (x *And_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Or component.
type Or_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Or_Ins) Reset() {
	*x = Or_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or_Ins) ProtoMessage() {}

func (x *Or_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or_Ins.ProtoReflect.Descriptor instead.
func (*Or_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Or_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output ports for the Or component.
type Or_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of logical OR of all the input signals.
	//
	// Will always be 0 (false), 1 (true) or invalid (unknown).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Or_Outs) Reset() {
	*x = Or_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or_Outs) ProtoMessage() {}

func (x *Or_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or_Outs.ProtoReflect.Descriptor instead.
func (*Or_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Or_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Inverter component.
type Inverter_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal to be negated.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Inverter_Ins) Reset() {
	*x = Inverter_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inverter_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inverter_Ins) ProtoMessage() {}

func (x *Inverter_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inverter_Ins.ProtoReflect.Descriptor instead.
func (*Inverter_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Inverter_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Output ports for the Inverter component.
type Inverter_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical negation of the input signal.
	//
	// Will always be 0 (false), 1 (true) or invalid (unknown).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Inverter_Outs) Reset() {
	*x = Inverter_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inverter_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inverter_Outs) ProtoMessage() {}

func (x *Inverter_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inverter_Outs.ProtoReflect.Descriptor instead.
func (*Inverter_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Inverter_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the FirstValid component.
type FirstValid_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *FirstValid_Ins) Reset() {
	*x = FirstValid_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid_Ins) ProtoMessage() {}

func (x *FirstValid_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid_Ins.ProtoReflect.Descriptor instead.
func (*FirstValid_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{14, 0}
}

func (x *FirstValid_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Outputs for the FirstValid component.
type FirstValid_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First valid input signal as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *FirstValid_Outs) Reset() {
	*x = FirstValid_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid_Outs) ProtoMessage() {}

func (x *FirstValid_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid_Outs.ProtoReflect.Descriptor instead.
func (*FirstValid_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{14, 1}
}

func (x *FirstValid_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Alerter Parameters configure parameters such as alert name, severity, resolve timeout, alert channels and labels.
type Alerter_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the alert.
	AlertName string `protobuf:"bytes,1,opt,name=alert_name,json=alertName,proto3" json:"alert_name,omitempty" validate:"required"` // @gotags: validate:"required"
	// Severity of the alert, one of 'info', 'warn' or 'crit'.
	Severity string `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty" default:"info" validate:"oneof=info warn crit"` // @gotags: default:"info" validate:"oneof=info warn crit"
	// Duration of alert resolver.
	ResolveTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=resolve_timeout,json=resolveTimeout,proto3" json:"resolve_timeout,omitempty" default:"5s"` // @gotags: default:"5s"
	// A list of alert channel strings.
	AlertChannels []string `protobuf:"bytes,4,rep,name=alert_channels,json=alertChannels,proto3" json:"alert_channels,omitempty"`
	// Additional labels to add to alert.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Alerter_Parameters) Reset() {
	*x = Alerter_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerter_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerter_Parameters) ProtoMessage() {}

func (x *Alerter_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerter_Parameters.ProtoReflect.Descriptor instead.
func (*Alerter_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Alerter_Parameters) GetAlertName() string {
	if x != nil {
		return x.AlertName
	}
	return ""
}

func (x *Alerter_Parameters) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Alerter_Parameters) GetResolveTimeout() *durationpb.Duration {
	if x != nil {
		return x.ResolveTimeout
	}
	return nil
}

func (x *Alerter_Parameters) GetAlertChannels() []string {
	if x != nil {
		return x.AlertChannels
	}
	return nil
}

func (x *Alerter_Parameters) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Inputs for the Alerter component.
type Alerter_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal which Alerter is monitoring. If the signal greater than 0, Alerter generates an alert.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *Alerter_Ins) Reset() {
	*x = Alerter_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerter_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerter_Ins) ProtoMessage() {}

func (x *Alerter_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerter_Ins.ProtoReflect.Descriptor instead.
func (*Alerter_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Alerter_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

// Inputs for the Integrator component.
type Integrator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input signal.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Resets the integrator output to zero when reset signal is valid and non-zero. Reset also resets the max and min constraints.
	Reset_ *InPort `protobuf:"bytes,2,opt,name=reset,proto3" json:"reset,omitempty"`
	// The maximum output.
	Max *InPort `protobuf:"bytes,3,opt,name=max,proto3" json:"max,omitempty"`
	// The minimum output.
	Min *InPort `protobuf:"bytes,4,opt,name=min,proto3" json:"min,omitempty"`
}

func (x *Integrator_Ins) Reset() {
	*x = Integrator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrator_Ins) ProtoMessage() {}

func (x *Integrator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrator_Ins.ProtoReflect.Descriptor instead.
func (*Integrator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{16, 0}
}

func (x *Integrator_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Integrator_Ins) GetReset_() *InPort {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *Integrator_Ins) GetMax() *InPort {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *Integrator_Ins) GetMin() *InPort {
	if x != nil {
		return x.Min
	}
	return nil
}

// Outputs for the Integrator component.
type Integrator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Integrator_Outs) Reset() {
	*x = Integrator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrator_Outs) ProtoMessage() {}

func (x *Integrator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrator_Outs.ProtoReflect.Descriptor instead.
func (*Integrator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{16, 1}
}

func (x *Integrator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Differentiator component.
type Differentiator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Differentiator_Ins) Reset() {
	*x = Differentiator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Differentiator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Differentiator_Ins) ProtoMessage() {}

func (x *Differentiator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Differentiator_Ins.ProtoReflect.Descriptor instead.
func (*Differentiator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Differentiator_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the Differentiator component.
type Differentiator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Differentiator_Outs) Reset() {
	*x = Differentiator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Differentiator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Differentiator_Outs) ProtoMessage() {}

func (x *Differentiator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Differentiator_Outs.ProtoReflect.Descriptor instead.
func (*Differentiator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Differentiator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Outputs for the PulseGenerator component.
type PulseGenerator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PulseGenerator_Outs) Reset() {
	*x = PulseGenerator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulseGenerator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseGenerator_Outs) ProtoMessage() {}

func (x *PulseGenerator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseGenerator_Outs.ProtoReflect.Descriptor instead.
func (*PulseGenerator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{18, 0}
}

func (x *PulseGenerator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Holder component.
type Holder_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input signal.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Resets the holder output to the current input signal when reset signal is valid and non-zero.
	Reset_ *InPort `protobuf:"bytes,2,opt,name=reset,proto3" json:"reset,omitempty"`
}

func (x *Holder_Ins) Reset() {
	*x = Holder_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder_Ins) ProtoMessage() {}

func (x *Holder_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder_Ins.ProtoReflect.Descriptor instead.
func (*Holder_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Holder_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Holder_Ins) GetReset_() *InPort {
	if x != nil {
		return x.Reset_
	}
	return nil
}

// Outputs for the Holder component.
type Holder_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Holder_Outs) Reset() {
	*x = Holder_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder_Outs) ProtoMessage() {}

func (x *Holder_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder_Outs.ProtoReflect.Descriptor instead.
func (*Holder_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{19, 1}
}

func (x *Holder_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Outputs for the NestedSignalIngress component.
type NestedSignalIngress_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ingress signal.
	Signal *OutPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *NestedSignalIngress_Outs) Reset() {
	*x = NestedSignalIngress_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedSignalIngress_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedSignalIngress_Outs) ProtoMessage() {}

func (x *NestedSignalIngress_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedSignalIngress_Outs.ProtoReflect.Descriptor instead.
func (*NestedSignalIngress_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{20, 0}
}

func (x *NestedSignalIngress_Outs) GetSignal() *OutPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

// Inputs for the NestedSignalEgress component.
type NestedSignalEgress_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Egress signal.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *NestedSignalEgress_Ins) Reset() {
	*x = NestedSignalEgress_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedSignalEgress_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedSignalEgress_Ins) ProtoMessage() {}

func (x *NestedSignalEgress_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedSignalEgress_Ins.ProtoReflect.Descriptor instead.
func (*NestedSignalEgress_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{21, 0}
}

func (x *NestedSignalEgress_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

// Parameters for the _Signal Generator_ component.
type SignalGenerator_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Steps []*SignalGenerator_Parameters_Step `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty" validate:"required,gt=0,dive"` // @gotags: validate:"required,gt=0,dive"
}

func (x *SignalGenerator_Parameters) Reset() {
	*x = SignalGenerator_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGenerator_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGenerator_Parameters) ProtoMessage() {}

func (x *SignalGenerator_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGenerator_Parameters.ProtoReflect.Descriptor instead.
func (*SignalGenerator_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{22, 0}
}

func (x *SignalGenerator_Parameters) GetSteps() []*SignalGenerator_Parameters_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

// Inputs for the _Signal Generator_ component.
type SignalGenerator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to progress the _Signal Generator_ towards the next step.
	Forward *InPort `protobuf:"bytes,1,opt,name=forward,proto3" json:"forward,omitempty"`
	// Whether to progress the _Signal Generator_ towards the previous step.
	Backward *InPort `protobuf:"bytes,2,opt,name=backward,proto3" json:"backward,omitempty"`
	// Whether to reset the _Signal Generator_ to the first step.
	Reset_ *InPort `protobuf:"bytes,3,opt,name=reset,proto3" json:"reset,omitempty"`
}

func (x *SignalGenerator_Ins) Reset() {
	*x = SignalGenerator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGenerator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGenerator_Ins) ProtoMessage() {}

func (x *SignalGenerator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGenerator_Ins.ProtoReflect.Descriptor instead.
func (*SignalGenerator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{22, 1}
}

func (x *SignalGenerator_Ins) GetForward() *InPort {
	if x != nil {
		return x.Forward
	}
	return nil
}

func (x *SignalGenerator_Ins) GetBackward() *InPort {
	if x != nil {
		return x.Backward
	}
	return nil
}

func (x *SignalGenerator_Ins) GetReset_() *InPort {
	if x != nil {
		return x.Reset_
	}
	return nil
}

// Outputs for the _Signal Generator_ component.
type SignalGenerator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The generated signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	// A Boolean signal indicating whether the _Signal Generator_ is at the start of signal generation.
	AtStart *OutPort `protobuf:"bytes,2,opt,name=at_start,json=atStart,proto3" json:"at_start,omitempty"`
	// A Boolean signal indicating whether the _Signal Generator_ is at the end of signal generation.
	AtEnd *OutPort `protobuf:"bytes,3,opt,name=at_end,json=atEnd,proto3" json:"at_end,omitempty"`
}

func (x *SignalGenerator_Outs) Reset() {
	*x = SignalGenerator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGenerator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGenerator_Outs) ProtoMessage() {}

func (x *SignalGenerator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGenerator_Outs.ProtoReflect.Descriptor instead.
func (*SignalGenerator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{22, 2}
}

func (x *SignalGenerator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *SignalGenerator_Outs) GetAtStart() *OutPort {
	if x != nil {
		return x.AtStart
	}
	return nil
}

func (x *SignalGenerator_Outs) GetAtEnd() *OutPort {
	if x != nil {
		return x.AtEnd
	}
	return nil
}

type SignalGenerator_Parameters_Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the step.
	TargetOutput *ConstantSignal `protobuf:"bytes,1,opt,name=target_output,json=targetOutput,proto3" json:"target_output,omitempty"`
	// Duration for which the step is active.
	Duration *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *SignalGenerator_Parameters_Step) Reset() {
	*x = SignalGenerator_Parameters_Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalGenerator_Parameters_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalGenerator_Parameters_Step) ProtoMessage() {}

func (x *SignalGenerator_Parameters_Step) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_std_components_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalGenerator_Parameters_Step.ProtoReflect.Descriptor instead.
func (*SignalGenerator_Parameters_Step) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_std_components_proto_rawDescGZIP(), []int{22, 0, 0}
}

func (x *SignalGenerator_Parameters_Step) GetTargetOutput() *ConstantSignal {
	if x != nil {
		return x.TargetOutput
	}
	return nil
}

func (x *SignalGenerator_Parameters_Step) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_aperture_policy_language_v1_std_components_proto protoreflect.FileDescriptor

var file_aperture_policy_language_v1_std_components_proto_rawDesc = []byte{
	0x0a, 0x30, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1b, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x27, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x08, 0x0a, 0x12, 0x47, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x4e, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x51, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x5a, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x64, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0x68, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x30, 0x0a, 0x0d,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x82,
	0x03, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x65, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x35, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xe3, 0x06, 0x0a, 0x03, 0x45, 0x4d,
	0x41, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0xd0, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x46,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0xf0, 0x02, 0x0a,
	0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x65,
	0x6d, 0x61, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x5b, 0x0a, 0x2b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x69,
	0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x69,
	0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x2b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x26, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x61, 0x78, 0x45, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x22,
	0xd7, 0x03, 0x0a, 0x03, 0x53, 0x4d, 0x41, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4d, 0x41, 0x2e, 0x49, 0x6e, 0x73, 0x52,
	0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4d, 0x41, 0x2e, 0x4f, 0x75,
	0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x4d, 0x41, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x40, 0x0a, 0x03, 0x49, 0x6e, 0x73,
	0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x44, 0x0a, 0x04, 0x4f,
	0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x1a, 0x76, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x38, 0x0a, 0x0a, 0x73, 0x6d, 0x61, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x73, 0x6d, 0x61, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x22, 0x94, 0x03, 0x0a, 0x14, 0x41, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d,
	0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x73, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x03,
	0x6c, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03,
	0x6c, 0x68, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x72, 0x68, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0xdb, 0x03, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08,
	0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x46, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x74, 0x72, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x46, 0x6f, 0x72, 0x1a, 0x73, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x68,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x6c, 0x68,
	0x73, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x03, 0x72, 0x68, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xaa,
	0x03, 0x0a, 0x08, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x47, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x03, 0x49,
	0x6e, 0x73, 0x12, 0x40, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x6f,
	0x66, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x08,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x65, 0x0a, 0x0d, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xcc, 0x02, 0x0a, 0x0d, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x40, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x54, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x40, 0x0a, 0x03,
	0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x44,
	0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x3f, 0x0a, 0x08,
	0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78,
	0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x78, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x03,
	0x4d, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04,
	0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x64, 0x2e, 0x49,
	0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x64,
	0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a,
	0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x02, 0x4f, 0x72,
	0x12, 0x3e, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa1, 0x02,
	0x0a, 0x08, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x47, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x40, 0x0a, 0x03, 0x49, 0x6e, 0x73,
	0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x44, 0x0a, 0x04, 0x4f,
	0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0xa9, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x52,
	0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa8, 0x04,
	0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4f,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0xc2, 0x02, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xd1, 0x03, 0x0a, 0x0a, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x49, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xe9, 0x01, 0x0a, 0x03, 0x49,
	0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a,
	0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x35, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xe6, 0x02, 0x0a,
	0x0e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x4a, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49,
	0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x40, 0x0a,
	0x03, 0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x72, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x09, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x46, 0x6f, 0x72, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x8c, 0x03, 0x0a, 0x06,
	0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x68, 0x6f, 0x6c, 0x64, 0x46, 0x6f, 0x72, 0x1a, 0x7b, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xc5, 0x01, 0x0a, 0x12, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x4e, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x42, 0x0a,
	0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x22, 0x84, 0x07, 0x0a, 0x0f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xf2, 0x01, 0x0a, 0x0a,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74,
	0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x1a, 0x8f,
	0x01, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0xc0, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x77,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08,
	0x62, 0x61, 0x63, 0x6b, 0x77, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x1a, 0xc2, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x61, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x07, 0x61, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x61,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x42, 0xaf, 0x02, 0x0a, 0x33, 0x63, 0x6f, 0x6d,
	0x2e, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x42, 0x12, 0x53, 0x74, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03,
	0x41, 0x50, 0x4c, 0xaa, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x27, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x41, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_aperture_policy_language_v1_std_components_proto_rawDescOnce sync.Once
	file_aperture_policy_language_v1_std_components_proto_rawDescData = file_aperture_policy_language_v1_std_components_proto_rawDesc
)

func file_aperture_policy_language_v1_std_components_proto_rawDescGZIP() []byte {
	file_aperture_policy_language_v1_std_components_proto_rawDescOnce.Do(func() {
		file_aperture_policy_language_v1_std_components_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_language_v1_std_components_proto_rawDescData)
	})
	return file_aperture_policy_language_v1_std_components_proto_rawDescData
}

var file_aperture_policy_language_v1_std_components_proto_msgTypes = make([]protoimpl.MessageInfo, 74)
var file_aperture_policy_language_v1_std_components_proto_goTypes = []interface{}{
	(*GradientController)(nil),               // 0: aperture.policy.language.v1.GradientController
	(*EMA)(nil),                              // 1: aperture.policy.language.v1.EMA
	(*SMA)(nil),                              // 2: aperture.policy.language.v1.SMA
	(*ArithmeticCombinator)(nil),             // 3: aperture.policy.language.v1.ArithmeticCombinator
	(*Decider)(nil),                          // 4: aperture.policy.language.v1.Decider
	(*Switcher)(nil),                         // 5: aperture.policy.language.v1.Switcher
	(*Variable)(nil),                         // 6: aperture.policy.language.v1.Variable
	(*UnaryOperator)(nil),                    // 7: aperture.policy.language.v1.UnaryOperator
	(*Extrapolator)(nil),                     // 8: aperture.policy.language.v1.Extrapolator
	(*Max)(nil),                              // 9: aperture.policy.language.v1.Max
	(*Min)(nil),                              // 10: aperture.policy.language.v1.Min
	(*And)(nil),                              // 11: aperture.policy.language.v1.And
	(*Or)(nil),                               // 12: aperture.policy.language.v1.Or
	(*Inverter)(nil),                         // 13: aperture.policy.language.v1.Inverter
	(*FirstValid)(nil),                       // 14: aperture.policy.language.v1.FirstValid
	(*Alerter)(nil),                          // 15: aperture.policy.language.v1.Alerter
	(*Integrator)(nil),                       // 16: aperture.policy.language.v1.Integrator
	(*Differentiator)(nil),                   // 17: aperture.policy.language.v1.Differentiator
	(*PulseGenerator)(nil),                   // 18: aperture.policy.language.v1.PulseGenerator
	(*Holder)(nil),                           // 19: aperture.policy.language.v1.Holder
	(*NestedSignalIngress)(nil),              // 20: aperture.policy.language.v1.NestedSignalIngress
	(*NestedSignalEgress)(nil),               // 21: aperture.policy.language.v1.NestedSignalEgress
	(*SignalGenerator)(nil),                  // 22: aperture.policy.language.v1.SignalGenerator
	(*GradientController_Parameters)(nil),    // 23: aperture.policy.language.v1.GradientController.Parameters
	(*GradientController_DynamicConfig)(nil), // 24: aperture.policy.language.v1.GradientController.DynamicConfig
	(*GradientController_Ins)(nil),           // 25: aperture.policy.language.v1.GradientController.Ins
	(*GradientController_Outs)(nil),          // 26: aperture.policy.language.v1.GradientController.Outs
	(*EMA_Ins)(nil),                          // 27: aperture.policy.language.v1.EMA.Ins
	(*EMA_Outs)(nil),                         // 28: aperture.policy.language.v1.EMA.Outs
	(*EMA_Parameters)(nil),                   // 29: aperture.policy.language.v1.EMA.Parameters
	(*SMA_Ins)(nil),                          // 30: aperture.policy.language.v1.SMA.Ins
	(*SMA_Outs)(nil),                         // 31: aperture.policy.language.v1.SMA.Outs
	(*SMA_Parameters)(nil),                   // 32: aperture.policy.language.v1.SMA.Parameters
	(*ArithmeticCombinator_Ins)(nil),         // 33: aperture.policy.language.v1.ArithmeticCombinator.Ins
	(*ArithmeticCombinator_Outs)(nil),        // 34: aperture.policy.language.v1.ArithmeticCombinator.Outs
	(*Decider_Ins)(nil),                      // 35: aperture.policy.language.v1.Decider.Ins
	(*Decider_Outs)(nil),                     // 36: aperture.policy.language.v1.Decider.Outs
	(*Switcher_Ins)(nil),                     // 37: aperture.policy.language.v1.Switcher.Ins
	(*Switcher_Outs)(nil),                    // 38: aperture.policy.language.v1.Switcher.Outs
	(*Variable_DynamicConfig)(nil),           // 39: aperture.policy.language.v1.Variable.DynamicConfig
	(*Variable_Outs)(nil),                    // 40: aperture.policy.language.v1.Variable.Outs
	(*UnaryOperator_Ins)(nil),                // 41: aperture.policy.language.v1.UnaryOperator.Ins
	(*UnaryOperator_Outs)(nil),               // 42: aperture.policy.language.v1.UnaryOperator.Outs
	(*Extrapolator_Parameters)(nil),          // 43: aperture.policy.language.v1.Extrapolator.Parameters
	(*Extrapolator_Ins)(nil),                 // 44: aperture.policy.language.v1.Extrapolator.Ins
	(*Extrapolator_Outs)(nil),                // 45: aperture.policy.language.v1.Extrapolator.Outs
	(*Max_Ins)(nil),                          // 46: aperture.policy.language.v1.Max.Ins
	(*Max_Outs)(nil),                         // 47: aperture.policy.language.v1.Max.Outs
	(*Min_Ins)(nil),                          // 48: aperture.policy.language.v1.Min.Ins
	(*Min_Outs)(nil),                         // 49: aperture.policy.language.v1.Min.Outs
	(*And_Ins)(nil),                          // 50: aperture.policy.language.v1.And.Ins
	(*And_Outs)(nil),                         // 51: aperture.policy.language.v1.And.Outs
	(*Or_Ins)(nil),                           // 52: aperture.policy.language.v1.Or.Ins
	(*Or_Outs)(nil),                          // 53: aperture.policy.language.v1.Or.Outs
	(*Inverter_Ins)(nil),                     // 54: aperture.policy.language.v1.Inverter.Ins
	(*Inverter_Outs)(nil),                    // 55: aperture.policy.language.v1.Inverter.Outs
	(*FirstValid_Ins)(nil),                   // 56: aperture.policy.language.v1.FirstValid.Ins
	(*FirstValid_Outs)(nil),                  // 57: aperture.policy.language.v1.FirstValid.Outs
	(*Alerter_Parameters)(nil),               // 58: aperture.policy.language.v1.Alerter.Parameters
	(*Alerter_Ins)(nil),                      // 59: aperture.policy.language.v1.Alerter.Ins
	nil,                                      // 60: aperture.policy.language.v1.Alerter.Parameters.LabelsEntry
	(*Integrator_Ins)(nil),                   // 61: aperture.policy.language.v1.Integrator.Ins
	(*Integrator_Outs)(nil),                  // 62: aperture.policy.language.v1.Integrator.Outs
	(*Differentiator_Ins)(nil),               // 63: aperture.policy.language.v1.Differentiator.Ins
	(*Differentiator_Outs)(nil),              // 64: aperture.policy.language.v1.Differentiator.Outs
	(*PulseGenerator_Outs)(nil),              // 65: aperture.policy.language.v1.PulseGenerator.Outs
	(*Holder_Ins)(nil),                       // 66: aperture.policy.language.v1.Holder.Ins
	(*Holder_Outs)(nil),                      // 67: aperture.policy.language.v1.Holder.Outs
	(*NestedSignalIngress_Outs)(nil),         // 68: aperture.policy.language.v1.NestedSignalIngress.Outs
	(*NestedSignalEgress_Ins)(nil),           // 69: aperture.policy.language.v1.NestedSignalEgress.Ins
	(*SignalGenerator_Parameters)(nil),       // 70: aperture.policy.language.v1.SignalGenerator.Parameters
	(*SignalGenerator_Ins)(nil),              // 71: aperture.policy.language.v1.SignalGenerator.Ins
	(*SignalGenerator_Outs)(nil),             // 72: aperture.policy.language.v1.SignalGenerator.Outs
	(*SignalGenerator_Parameters_Step)(nil),  // 73: aperture.policy.language.v1.SignalGenerator.Parameters.Step
	(*durationpb.Duration)(nil),              // 74: google.protobuf.Duration
	(*InPort)(nil),                           // 75: aperture.policy.language.v1.InPort
	(*OutPort)(nil),                          // 76: aperture.policy.language.v1.OutPort
	(*ConstantSignal)(nil),                   // 77: aperture.policy.language.v1.ConstantSignal
}
var file_aperture_policy_language_v1_std_components_proto_depIdxs = []int32{
	25,  // 0: aperture.policy.language.v1.GradientController.in_ports:type_name -> aperture.policy.language.v1.GradientController.Ins
	26,  // 1: aperture.policy.language.v1.GradientController.out_ports:type_name -> aperture.policy.language.v1.GradientController.Outs
	23,  // 2: aperture.policy.language.v1.GradientController.parameters:type_name -> aperture.policy.language.v1.GradientController.Parameters
	24,  // 3: aperture.policy.language.v1.GradientController.default_config:type_name -> aperture.policy.language.v1.GradientController.DynamicConfig
	27,  // 4: aperture.policy.language.v1.EMA.in_ports:type_name -> aperture.policy.language.v1.EMA.Ins
	28,  // 5: aperture.policy.language.v1.EMA.out_ports:type_name -> aperture.policy.language.v1.EMA.Outs
	29,  // 6: aperture.policy.language.v1.EMA.parameters:type_name -> aperture.policy.language.v1.EMA.Parameters
	30,  // 7: aperture.policy.language.v1.SMA.in_ports:type_name -> aperture.policy.language.v1.SMA.Ins
	31,  // 8: aperture.policy.language.v1.SMA.out_ports:type_name -> aperture.policy.language.v1.SMA.Outs
	32,  // 9: aperture.policy.language.v1.SMA.parameters:type_name -> aperture.policy.language.v1.SMA.Parameters
	33,  // 10: aperture.policy.language.v1.ArithmeticCombinator.in_ports:type_name -> aperture.policy.language.v1.ArithmeticCombinator.Ins
	34,  // 11: aperture.policy.language.v1.ArithmeticCombinator.out_ports:type_name -> aperture.policy.language.v1.ArithmeticCombinator.Outs
	35,  // 12: aperture.policy.language.v1.Decider.in_ports:type_name -> aperture.policy.language.v1.Decider.Ins
	36,  // 13: aperture.policy.language.v1.Decider.out_ports:type_name -> aperture.policy.language.v1.Decider.Outs
	74,  // 14: aperture.policy.language.v1.Decider.true_for:type_name -> google.protobuf.Duration
	74,  // 15: aperture.policy.language.v1.Decider.false_for:type_name -> google.protobuf.Duration
	37,  // 16: aperture.policy.language.v1.Switcher.in_ports:type_name -> aperture.policy.language.v1.Switcher.Ins
	38,  // 17: aperture.policy.language.v1.Switcher.out_ports:type_name -> aperture.policy.language.v1.Switcher.Outs
	40,  // 18: aperture.policy.language.v1.Variable.out_ports:type_name -> aperture.policy.language.v1.Variable.Outs
	39,  // 19: aperture.policy.language.v1.Variable.default_config:type_name -> aperture.policy.language.v1.Variable.DynamicConfig
	41,  // 20: aperture.policy.language.v1.UnaryOperator.in_ports:type_name -> aperture.policy.language.v1.UnaryOperator.Ins
	42,  // 21: aperture.policy.language.v1.UnaryOperator.out_ports:type_name -> aperture.policy.language.v1.UnaryOperator.Outs
	44,  // 22: aperture.policy.language.v1.Extrapolator.in_ports:type_name -> aperture.policy.language.v1.Extrapolator.Ins
	45,  // 23: aperture.policy.language.v1.Extrapolator.out_ports:type_name -> aperture.policy.language.v1.Extrapolator.Outs
	43,  // 24: aperture.policy.language.v1.Extrapolator.parameters:type_name -> aperture.policy.language.v1.Extrapolator.Parameters
	46,  // 25: aperture.policy.language.v1.Max.in_ports:type_name -> aperture.policy.language.v1.Max.Ins
	47,  // 26: aperture.policy.language.v1.Max.out_ports:type_name -> aperture.policy.language.v1.Max.Outs
	48,  // 27: aperture.policy.language.v1.Min.in_ports:type_name -> aperture.policy.language.v1.Min.Ins
	49,  // 28: aperture.policy.language.v1.Min.out_ports:type_name -> aperture.policy.language.v1.Min.Outs
	50,  // 29: aperture.policy.language.v1.And.in_ports:type_name -> aperture.policy.language.v1.And.Ins
	51,  // 30: aperture.policy.language.v1.And.out_ports:type_name -> aperture.policy.language.v1.And.Outs
	52,  // 31: aperture.policy.language.v1.Or.in_ports:type_name -> aperture.policy.language.v1.Or.Ins
	53,  // 32: aperture.policy.language.v1.Or.out_ports:type_name -> aperture.policy.language.v1.Or.Outs
	54,  // 33: aperture.policy.language.v1.Inverter.in_ports:type_name -> aperture.policy.language.v1.Inverter.Ins
	55,  // 34: aperture.policy.language.v1.Inverter.out_ports:type_name -> aperture.policy.language.v1.Inverter.Outs
	56,  // 35: aperture.policy.language.v1.FirstValid.in_ports:type_name -> aperture.policy.language.v1.FirstValid.Ins
	57,  // 36: aperture.policy.language.v1.FirstValid.out_ports:type_name -> aperture.policy.language.v1.FirstValid.Outs
	59,  // 37: aperture.policy.language.v1.Alerter.in_ports:type_name -> aperture.policy.language.v1.Alerter.Ins
	58,  // 38: aperture.policy.language.v1.Alerter.parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	61,  // 39: aperture.policy.language.v1.Integrator.in_ports:type_name -> aperture.policy.language.v1.Integrator.Ins
	62,  // 40: aperture.policy.language.v1.Integrator.out_ports:type_name -> aperture.policy.language.v1.Integrator.Outs
	63,  // 41: aperture.policy.language.v1.Differentiator.in_ports:type_name -> aperture.policy.language.v1.Differentiator.Ins
	64,  // 42: aperture.policy.language.v1.Differentiator.out_ports:type_name -> aperture.policy.language.v1.Differentiator.Outs
	74,  // 43: aperture.policy.language.v1.Differentiator.window:type_name -> google.protobuf.Duration
	65,  // 44: aperture.policy.language.v1.PulseGenerator.out_ports:type_name -> aperture.policy.language.v1.PulseGenerator.Outs
	74,  // 45: aperture.policy.language.v1.PulseGenerator.true_for:type_name -> google.protobuf.Duration
	74,  // 46: aperture.policy.language.v1.PulseGenerator.false_for:type_name -> google.protobuf.Duration
	66,  // 47: aperture.policy.language.v1.Holder.in_ports:type_name -> aperture.policy.language.v1.Holder.Ins
	67,  // 48: aperture.policy.language.v1.Holder.out_ports:type_name -> aperture.policy.language.v1.Holder.Outs
	74,  // 49: aperture.policy.language.v1.Holder.hold_for:type_name -> google.protobuf.Duration
	68,  // 50: aperture.policy.language.v1.NestedSignalIngress.out_ports:type_name -> aperture.policy.language.v1.NestedSignalIngress.Outs
	69,  // 51: aperture.policy.language.v1.NestedSignalEgress.in_ports:type_name -> aperture.policy.language.v1.NestedSignalEgress.Ins
	71,  // 52: aperture.policy.language.v1.SignalGenerator.in_ports:type_name -> aperture.policy.language.v1.SignalGenerator.Ins
	72,  // 53: aperture.policy.language.v1.SignalGenerator.out_ports:type_name -> aperture.policy.language.v1.SignalGenerator.Outs
	70,  // 54: aperture.policy.language.v1.SignalGenerator.parameters:type_name -> aperture.policy.language.v1.SignalGenerator.Parameters
	75,  // 55: aperture.policy.language.v1.GradientController.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	75,  // 56: aperture.policy.language.v1.GradientController.Ins.setpoint:type_name -> aperture.policy.language.v1.InPort
	75,  // 57: aperture.policy.language.v1.GradientController.Ins.optimize:type_name -> aperture.policy.language.v1.InPort
	75,  // 58: aperture.policy.language.v1.GradientController.Ins.max:type_name -> aperture.policy.language.v1.InPort
	75,  // 59: aperture.policy.language.v1.GradientController.Ins.min:type_name -> aperture.policy.language.v1.InPort
	75,  // 60: aperture.policy.language.v1.GradientController.Ins.control_variable:type_name -> aperture.policy.language.v1.InPort
	76,  // 61: aperture.policy.language.v1.GradientController.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 62: aperture.policy.language.v1.EMA.Ins.input:type_name -> aperture.policy.language.v1.InPort
	75,  // 63: aperture.policy.language.v1.EMA.Ins.max_envelope:type_name -> aperture.policy.language.v1.InPort
	75,  // 64: aperture.policy.language.v1.EMA.Ins.min_envelope:type_name -> aperture.policy.language.v1.InPort
	76,  // 65: aperture.policy.language.v1.EMA.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	74,  // 66: aperture.policy.language.v1.EMA.Parameters.ema_window:type_name -> google.protobuf.Duration
	74,  // 67: aperture.policy.language.v1.EMA.Parameters.warmup_window:type_name -> google.protobuf.Duration
	75,  // 68: aperture.policy.language.v1.SMA.Ins.input:type_name -> aperture.policy.language.v1.InPort
	76,  // 69: aperture.policy.language.v1.SMA.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	74,  // 70: aperture.policy.language.v1.SMA.Parameters.sma_window:type_name -> google.protobuf.Duration
	75,  // 71: aperture.policy.language.v1.ArithmeticCombinator.Ins.lhs:type_name -> aperture.policy.language.v1.InPort
	75,  // 72: aperture.policy.language.v1.ArithmeticCombinator.Ins.rhs:type_name -> aperture.policy.language.v1.InPort
	76,  // 73: aperture.policy.language.v1.ArithmeticCombinator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 74: aperture.policy.language.v1.Decider.Ins.lhs:type_name -> aperture.policy.language.v1.InPort
	75,  // 75: aperture.policy.language.v1.Decider.Ins.rhs:type_name -> aperture.policy.language.v1.InPort
	76,  // 76: aperture.policy.language.v1.Decider.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 77: aperture.policy.language.v1.Switcher.Ins.on_signal:type_name -> aperture.policy.language.v1.InPort
	75,  // 78: aperture.policy.language.v1.Switcher.Ins.off_signal:type_name -> aperture.policy.language.v1.InPort
	75,  // 79: aperture.policy.language.v1.Switcher.Ins.switch:type_name -> aperture.policy.language.v1.InPort
	76,  // 80: aperture.policy.language.v1.Switcher.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	77,  // 81: aperture.policy.language.v1.Variable.DynamicConfig.constant_signal:type_name -> aperture.policy.language.v1.ConstantSignal
	76,  // 82: aperture.policy.language.v1.Variable.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 83: aperture.policy.language.v1.UnaryOperator.Ins.input:type_name -> aperture.policy.language.v1.InPort
	76,  // 84: aperture.policy.language.v1.UnaryOperator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	74,  // 85: aperture.policy.language.v1.Extrapolator.Parameters.max_extrapolation_interval:type_name -> google.protobuf.Duration
	75,  // 86: aperture.policy.language.v1.Extrapolator.Ins.input:type_name -> aperture.policy.language.v1.InPort
	76,  // 87: aperture.policy.language.v1.Extrapolator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 88: aperture.policy.language.v1.Max.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	76,  // 89: aperture.policy.language.v1.Max.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 90: aperture.policy.language.v1.Min.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	76,  // 91: aperture.policy.language.v1.Min.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 92: aperture.policy.language.v1.And.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	76,  // 93: aperture.policy.language.v1.And.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 94: aperture.policy.language.v1.Or.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	76,  // 95: aperture.policy.language.v1.Or.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 96: aperture.policy.language.v1.Inverter.Ins.input:type_name -> aperture.policy.language.v1.InPort
	76,  // 97: aperture.policy.language.v1.Inverter.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 98: aperture.policy.language.v1.FirstValid.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	76,  // 99: aperture.policy.language.v1.FirstValid.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	74,  // 100: aperture.policy.language.v1.Alerter.Parameters.resolve_timeout:type_name -> google.protobuf.Duration
	60,  // 101: aperture.policy.language.v1.Alerter.Parameters.labels:type_name -> aperture.policy.language.v1.Alerter.Parameters.LabelsEntry
	75,  // 102: aperture.policy.language.v1.Alerter.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	75,  // 103: aperture.policy.language.v1.Integrator.Ins.input:type_name -> aperture.policy.language.v1.InPort
	75,  // 104: aperture.policy.language.v1.Integrator.Ins.reset:type_name -> aperture.policy.language.v1.InPort
	75,  // 105: aperture.policy.language.v1.Integrator.Ins.max:type_name -> aperture.policy.language.v1.InPort
	75,  // 106: aperture.policy.language.v1.Integrator.Ins.min:type_name -> aperture.policy.language.v1.InPort
	76,  // 107: aperture.policy.language.v1.Integrator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 108: aperture.policy.language.v1.Differentiator.Ins.input:type_name -> aperture.policy.language.v1.InPort
	76,  // 109: aperture.policy.language.v1.Differentiator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	76,  // 110: aperture.policy.language.v1.PulseGenerator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	75,  // 111: aperture.policy.language.v1.Holder.Ins.input:type_name -> aperture.policy.language.v1.InPort
	75,  // 112: aperture.policy.language.v1.Holder.Ins.reset:type_name -> aperture.policy.language.v1.InPort
	76,  // 113: aperture.policy.language.v1.Holder.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	76,  // 114: aperture.policy.language.v1.NestedSignalIngress.Outs.signal:type_name -> aperture.policy.language.v1.OutPort
	75,  // 115: aperture.policy.language.v1.NestedSignalEgress.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	73,  // 116: aperture.policy.language.v1.SignalGenerator.Parameters.steps:type_name -> aperture.policy.language.v1.SignalGenerator.Parameters.Step
	75,  // 117: aperture.policy.language.v1.SignalGenerator.Ins.forward:type_name -> aperture.policy.language.v1.InPort
	75,  // 118: aperture.policy.language.v1.SignalGenerator.Ins.backward:type_name -> aperture.policy.language.v1.InPort
	75,  // 119: aperture.policy.language.v1.SignalGenerator.Ins.reset:type_name -> aperture.policy.language.v1.InPort
	76,  // 120: aperture.policy.language.v1.SignalGenerator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	76,  // 121: aperture.policy.language.v1.SignalGenerator.Outs.at_start:type_name -> aperture.policy.language.v1.OutPort
	76,  // 122: aperture.policy.language.v1.SignalGenerator.Outs.at_end:type_name -> aperture.policy.language.v1.OutPort
	77,  // 123: aperture.policy.language.v1.SignalGenerator.Parameters.Step.target_output:type_name -> aperture.policy.language.v1.ConstantSignal
	74,  // 124: aperture.policy.language.v1.SignalGenerator.Parameters.Step.duration:type_name -> google.protobuf.Duration
	125, // [125:125] is the sub-list for method output_type
	125, // [125:125] is the sub-list for method input_type
	125, // [125:125] is the sub-list for extension type_name
	125, // [125:125] is the sub-list for extension extendee
	0,   // [0:125] is the sub-list for field type_name
}

func init() { file_aperture_policy_language_v1_std_components_proto_init() }
func file_aperture_policy_language_v1_std_components_proto_init() {
	if File_aperture_policy_language_v1_std_components_proto != nil {
		return
	}
	file_aperture_policy_language_v1_ports_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_language_v1_std_components_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Differentiator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulseGenerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedSignalIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedSignalEgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGenerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMA_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMA_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMA_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryOperator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryOperator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inverter_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inverter_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerter_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerter_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Differentiator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Differentiator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulseGenerator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedSignalIngress_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedSignalEgress_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGenerator_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGenerator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGenerator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_std_components_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalGenerator_Parameters_Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_language_v1_std_components_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   74,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aperture_policy_language_v1_std_components_proto_goTypes,
		DependencyIndexes: file_aperture_policy_language_v1_std_components_proto_depIdxs,
		MessageInfos:      file_aperture_policy_language_v1_std_components_proto_msgTypes,
	}.Build()
	File_aperture_policy_language_v1_std_components_proto = out.File
	file_aperture_policy_language_v1_std_components_proto_rawDesc = nil
	file_aperture_policy_language_v1_std_components_proto_goTypes = nil
	file_aperture_policy_language_v1_std_components_proto_depIdxs = nil
}
