// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: aperture/policy/language/v1/telemetry_collector.proto

package languagev1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TelemetryCollector defines the telemetry configuration to be synced with the agents.
// It consists of two parts:
// - Agent Group: Agent group to sync telemetry configuration with
// - Infra Meters: OTel compatible metrics pipelines
type TelemetryCollector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentGroup string `protobuf:"bytes,1,opt,name=agent_group,json=agentGroup,proto3" json:"agent_group,omitempty" default:"default"` // @gotags: default:"default"
	// _Infra Meters_ configure custom metrics OpenTelemetry collector pipelines, which will
	// receive and process telemetry at the agents and send metrics to the configured Prometheus.
	// Key in this map refers to OTel pipeline name. Prefixing pipeline name with `metrics/`
	// is optional, as all the components and pipeline names would be normalized.
	//
	// Example:
	//
	// ```yaml
	//
	//	 telemetry_collectors:
	//	   - agent_group: default
	//	     infra_meters:
	//		      rabbitmq:
	//		        processors:
	//		          batch:
	//		            send_batch_size: 10
	//		            timeout: 10s
	//		        receivers:
	//		          rabbitmq:
	//		            collection_interval: 10s
	//		            endpoint: http://<rabbitmq-svc-fqdn>:15672
	//		            password: secretpassword
	//		            username: admin
	//		        per_agent_group: true
	//
	// ```
	InfraMeters map[string]*InfraMeter `protobuf:"bytes,2,rep,name=infra_meters,json=infraMeters,proto3" json:"infra_meters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TelemetryCollector) Reset() {
	*x = TelemetryCollector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryCollector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryCollector) ProtoMessage() {}

func (x *TelemetryCollector) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryCollector.ProtoReflect.Descriptor instead.
func (*TelemetryCollector) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_telemetry_collector_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryCollector) GetAgentGroup() string {
	if x != nil {
		return x.AgentGroup
	}
	return ""
}

func (x *TelemetryCollector) GetInfraMeters() map[string]*InfraMeter {
	if x != nil {
		return x.InfraMeters
	}
	return nil
}

// InfraMeter is a resource that sets up OpenTelemetry pipelines.
// It defines receivers, processors, and a single metrics pipeline
// which will be exported to the configured Prometheus instance.
// Environment variables can be used in the configuration using format `${ENV_VAR_NAME}`.
//
// :::info
//
// See also [Get Started / Setup Integrations / Metrics](/get-started/integrations/metrics/metrics.md).
//
// :::
type InfraMeter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Receivers define receivers to be used in custom metrics pipelines. This should
	// be in [OTel format](https://opentelemetry.io/docs/collector/configuration/#receivers).
	Receivers map[string]*structpb.Struct `protobuf:"bytes,1,rep,name=receivers,proto3" json:"receivers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Processors define processors to be used in custom metrics pipelines. This should
	// be in [OTel format](https://opentelemetry.io/docs/collector/configuration/#processors).
	Processors map[string]*structpb.Struct `protobuf:"bytes,2,rep,name=processors,proto3" json:"processors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Pipeline is an OTel metrics pipeline definition, which **only** uses receivers
	// and processors defined above. Exporter would be added automatically.
	//
	// If there are no processors defined or only one processor is defined, the
	// pipeline definition can be omitted. In such cases, the pipeline will
	// automatically use all given receivers and the defined processor (if
	// any).  However, if there are more than one processor, the pipeline must
	// be defined explicitly.
	Pipeline *InfraMeter_MetricsPipeline `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty" validate:"required"` // @gotags: validate:"required"
	// PerAgentGroup marks the pipeline to be instantiated only once per agent
	// group. This is helpful for receivers that scrape for example, some cluster-wide
	// metrics. When not set, pipeline will be instantiated on every Agent.
	PerAgentGroup bool `protobuf:"varint,4,opt,name=per_agent_group,json=perAgentGroup,proto3" json:"per_agent_group,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *InfraMeter) Reset() {
	*x = InfraMeter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfraMeter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfraMeter) ProtoMessage() {}

func (x *InfraMeter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfraMeter.ProtoReflect.Descriptor instead.
func (*InfraMeter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_telemetry_collector_proto_rawDescGZIP(), []int{1}
}

func (x *InfraMeter) GetReceivers() map[string]*structpb.Struct {
	if x != nil {
		return x.Receivers
	}
	return nil
}

func (x *InfraMeter) GetProcessors() map[string]*structpb.Struct {
	if x != nil {
		return x.Processors
	}
	return nil
}

func (x *InfraMeter) GetPipeline() *InfraMeter_MetricsPipeline {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *InfraMeter) GetPerAgentGroup() bool {
	if x != nil {
		return x.PerAgentGroup
	}
	return false
}

// MetricsPipelineConfig defines a custom metrics pipeline.
type InfraMeter_MetricsPipeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receivers  []string `protobuf:"bytes,1,rep,name=receivers,proto3" json:"receivers,omitempty"`
	Processors []string `protobuf:"bytes,2,rep,name=processors,proto3" json:"processors,omitempty"`
}

func (x *InfraMeter_MetricsPipeline) Reset() {
	*x = InfraMeter_MetricsPipeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfraMeter_MetricsPipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfraMeter_MetricsPipeline) ProtoMessage() {}

func (x *InfraMeter_MetricsPipeline) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfraMeter_MetricsPipeline.ProtoReflect.Descriptor instead.
func (*InfraMeter_MetricsPipeline) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_telemetry_collector_proto_rawDescGZIP(), []int{1, 0}
}

func (x *InfraMeter_MetricsPipeline) GetReceivers() []string {
	if x != nil {
		return x.Receivers
	}
	return nil
}

func (x *InfraMeter_MetricsPipeline) GetProcessors() []string {
	if x != nil {
		return x.Processors
	}
	return nil
}

var File_aperture_policy_language_v1_telemetry_collector_proto protoreflect.FileDescriptor

var file_aperture_policy_language_v1_telemetry_collector_proto_rawDesc = []byte{
	0x0a, 0x35, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x63, 0x0a, 0x0c, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x40, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x67, 0x0a, 0x10, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x04, 0x0a, 0x0a, 0x49, 0x6e, 0x66,
	0x72, 0x61, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x73, 0x12, 0x57, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x66, 0x72, 0x61, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x72, 0x61, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x08, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x70,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x4f, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x73, 0x1a, 0x55, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0xb7, 0x02, 0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x75, 0x78,
	0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x17, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x41, 0x50, 0x4c, 0xaa, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5c,
	0x56, 0x31, 0xe2, 0x02, 0x27, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x41,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a,
	0x3a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_language_v1_telemetry_collector_proto_rawDescOnce sync.Once
	file_aperture_policy_language_v1_telemetry_collector_proto_rawDescData = file_aperture_policy_language_v1_telemetry_collector_proto_rawDesc
)

func file_aperture_policy_language_v1_telemetry_collector_proto_rawDescGZIP() []byte {
	file_aperture_policy_language_v1_telemetry_collector_proto_rawDescOnce.Do(func() {
		file_aperture_policy_language_v1_telemetry_collector_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_language_v1_telemetry_collector_proto_rawDescData)
	})
	return file_aperture_policy_language_v1_telemetry_collector_proto_rawDescData
}

var file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_aperture_policy_language_v1_telemetry_collector_proto_goTypes = []interface{}{
	(*TelemetryCollector)(nil),         // 0: aperture.policy.language.v1.TelemetryCollector
	(*InfraMeter)(nil),                 // 1: aperture.policy.language.v1.InfraMeter
	nil,                                // 2: aperture.policy.language.v1.TelemetryCollector.InfraMetersEntry
	(*InfraMeter_MetricsPipeline)(nil), // 3: aperture.policy.language.v1.InfraMeter.MetricsPipeline
	nil,                                // 4: aperture.policy.language.v1.InfraMeter.ReceiversEntry
	nil,                                // 5: aperture.policy.language.v1.InfraMeter.ProcessorsEntry
	(*structpb.Struct)(nil),            // 6: google.protobuf.Struct
}
var file_aperture_policy_language_v1_telemetry_collector_proto_depIdxs = []int32{
	2, // 0: aperture.policy.language.v1.TelemetryCollector.infra_meters:type_name -> aperture.policy.language.v1.TelemetryCollector.InfraMetersEntry
	4, // 1: aperture.policy.language.v1.InfraMeter.receivers:type_name -> aperture.policy.language.v1.InfraMeter.ReceiversEntry
	5, // 2: aperture.policy.language.v1.InfraMeter.processors:type_name -> aperture.policy.language.v1.InfraMeter.ProcessorsEntry
	3, // 3: aperture.policy.language.v1.InfraMeter.pipeline:type_name -> aperture.policy.language.v1.InfraMeter.MetricsPipeline
	1, // 4: aperture.policy.language.v1.TelemetryCollector.InfraMetersEntry.value:type_name -> aperture.policy.language.v1.InfraMeter
	6, // 5: aperture.policy.language.v1.InfraMeter.ReceiversEntry.value:type_name -> google.protobuf.Struct
	6, // 6: aperture.policy.language.v1.InfraMeter.ProcessorsEntry.value:type_name -> google.protobuf.Struct
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_aperture_policy_language_v1_telemetry_collector_proto_init() }
func file_aperture_policy_language_v1_telemetry_collector_proto_init() {
	if File_aperture_policy_language_v1_telemetry_collector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryCollector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfraMeter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfraMeter_MetricsPipeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_language_v1_telemetry_collector_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aperture_policy_language_v1_telemetry_collector_proto_goTypes,
		DependencyIndexes: file_aperture_policy_language_v1_telemetry_collector_proto_depIdxs,
		MessageInfos:      file_aperture_policy_language_v1_telemetry_collector_proto_msgTypes,
	}.Build()
	File_aperture_policy_language_v1_telemetry_collector_proto = out.File
	file_aperture_policy_language_v1_telemetry_collector_proto_rawDesc = nil
	file_aperture_policy_language_v1_telemetry_collector_proto_goTypes = nil
	file_aperture_policy_language_v1_telemetry_collector_proto_depIdxs = nil
}
