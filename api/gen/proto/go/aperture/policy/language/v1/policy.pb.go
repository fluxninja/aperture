// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: aperture/policy/language/v1/policy.proto

package languagev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies *Policies `protobuf:"bytes,1,opt,name=policies,proto3" json:"policies,omitempty"`
}

func (x *GetPoliciesResponse) Reset() {
	*x = GetPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesResponse) ProtoMessage() {}

func (x *GetPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesResponse.ProtoReflect.Descriptor instead.
func (*GetPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{0}
}

func (x *GetPoliciesResponse) GetPolicies() *Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies map[string]*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Policies) Reset() {
	*x = Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Policies) GetPolicies() map[string]*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Policy expresses reliability automation workflow that automatically protects services
//
// :::info
// See also [Policy overview](/concepts/policy/policy.md).
// :::
//
// Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the control-loop logic of the policy.
	Circuit *Circuit `protobuf:"bytes,1,opt,name=circuit,proto3" json:"circuit,omitempty"`
	// Resources (Flux Meters, Classifiers etc.) to setup.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Policy) GetCircuit() *Circuit {
	if x != nil {
		return x.Circuit
	}
	return nil
}

func (x *Policy) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Circuit is defined as a dataflow graph of inter-connected components
//
// :::info
// See also [Circuit overview](/concepts/policy/circuit.md).
// :::
//
// Signals flow between components via ports.
// As signals traverse the circuit, they get processed, stored within components or get acted upon (e.g. load-shed, rate-limit, auto-scale etc.).
// Circuit is evaluated periodically in order to respond to changes in signal readings.
//
// :::info
// **Signal**
//
// Signals are floating-point values.
//
// A signal can also have a special **Invalid** value. It's usually used to
// communicate that signal doesn't have a meaningful value at the moment, eg.
// [PromQL](#v1-prom-q-l) emits such a value if it cannot execute a query.
// Components know when their input signals are invalid and can act
// accordingly. They can either propagate the invalidness, by making their
// output itself invalid (like eg.
// [ArithmeticCombinator](#v1-arithmetic-combinator)) or use some different
// logic, like eg. [Extrapolator](#v1-extrapolator). Refer to a component's
// docs on how exactly it handles invalid inputs.
// :::
type Circuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
	// This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
	EvaluationInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=evaluation_interval,json=evaluationInterval,proto3" json:"evaluation_interval,omitempty" default:"0.5s"` // @gotags: default:"0.5s"
	// Defines a signal processing graph as a list of components.
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Circuit) Reset() {
	*x = Circuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circuit) ProtoMessage() {}

func (x *Circuit) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circuit.ProtoReflect.Descriptor instead.
func (*Circuit) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Circuit) GetEvaluationInterval() *durationpb.Duration {
	if x != nil {
		return x.EvaluationInterval
	}
	return nil
}

func (x *Circuit) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// Resources that need to be setup for the policy to function
//
// :::info
// See also [Resources overview](/concepts/policy/resources.md).
// :::
//
// Resources are typically Flux Meters, Classifiers, etc. that can be used to create on-demand metrics or label the flows.
type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
	//
	// Flux Meter created metrics can be consumed as input to the circuit via the PromQL component.
	FluxMeters map[string]*FluxMeter `protobuf:"bytes,1,rep,name=flux_meters,json=fluxMeters,proto3" json:"flux_meters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"dive"` // @gotags: validate:"dive"
	// Classifiers are installed in the data-plane and are used to label the requests based on payload content.
	//
	// The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
	Classifiers []*Classifier `protobuf:"bytes,2,rep,name=classifiers,proto3" json:"classifiers,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{4}
}

func (x *Resources) GetFluxMeters() map[string]*FluxMeter {
	if x != nil {
		return x.FluxMeters
	}
	return nil
}

func (x *Resources) GetClassifiers() []*Classifier {
	if x != nil {
		return x.Classifiers
	}
	return nil
}

// Computational block that form the circuit
//
// :::info
// See also [Components overview](/concepts/policy/circuit.md#components).
// :::
//
// Signals flow into the components via input ports and results are emitted on output ports.
// Components are wired to each other based on signal names forming an execution graph of the circuit.
//
// :::note
// Loops are broken by the runtime at the earliest component index that is part of the loop.
// The looped signals are saved in the tick they are generated and served in the subsequent tick.
// :::
//
// There are three categories of components:
// * "source" components – they take some sort of input from "the real world" and output
//   a signal based on this input. Example: [PromQL](#v1-prom-q-l). In the UI
//   they're represented by green color.
// * signal processor components – "pure" components that don't interact with the "real world".
//   Examples: [GradientController](#v1-gradient-controller), [Max](#v1-max).
//   :::note
//   Signal processor components's output can depend on their internal state, in addition to the inputs.
//   Eg. see the [Exponential Moving Average filter](#v1-e-m-a).
//   :::
// * "sink" components – they affect the real world.
//   [ConcurrencyLimiter.LoadActuator](#v1-concurrency-limiter) and [RateLimiter](#v1-rate-limiter).
//   In the UI, represented by orange color.  Sink components usually come in pairs with a
//   "sources" component which emits a feedback signal, like
//   `accepted_concurrency` emitted by ConcurrencyLimiter.Scheduler.
//
// :::tip
// Sometimes you may want to use a constant value as one of component's inputs.
// You can create an input port containing the constant value instead of being connected to a signal.
// To do so, use the [InPort](#v1-in_port)'s .withConstantSignal(constant_signal) method.
// You can also use it to provide special math values such as NaN and +- Inf.
// If You need to provide the same constant signal to multiple components,
// You can use the [Variable](#v1-variable) component.
// :::
//
// See also [Policy](#v1-policy) for a higher-level explanation of circuits.
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//	*Component_GradientController
	//	*Component_Ema
	//	*Component_ArithmeticCombinator
	//	*Component_Decider
	//	*Component_Switcher
	//	*Component_Variable
	//	*Component_Sqrt
	//	*Component_Extrapolator
	//	*Component_Max
	//	*Component_Min
	//	*Component_FirstValid
	//	*Component_Alerter
	//	*Component_Integrator
	//	*Component_Differentiator
	//	*Component_And
	//	*Component_Or
	//	*Component_Inverter
	//	*Component_PulseGenerator
	//	*Component_Holder
	//	*Component_NestedCircuit
	//	*Component_NestedSignalIngress
	//	*Component_NestedSignalEgress
	//	*Component_Query
	//	*Component_FlowControl
	//	*Component_AutoScale
	Component isComponent_Component `protobuf_oneof:"component"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{5}
}

func (m *Component) GetComponent() isComponent_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *Component) GetGradientController() *GradientController {
	if x, ok := x.GetComponent().(*Component_GradientController); ok {
		return x.GradientController
	}
	return nil
}

func (x *Component) GetEma() *EMA {
	if x, ok := x.GetComponent().(*Component_Ema); ok {
		return x.Ema
	}
	return nil
}

func (x *Component) GetArithmeticCombinator() *ArithmeticCombinator {
	if x, ok := x.GetComponent().(*Component_ArithmeticCombinator); ok {
		return x.ArithmeticCombinator
	}
	return nil
}

func (x *Component) GetDecider() *Decider {
	if x, ok := x.GetComponent().(*Component_Decider); ok {
		return x.Decider
	}
	return nil
}

func (x *Component) GetSwitcher() *Switcher {
	if x, ok := x.GetComponent().(*Component_Switcher); ok {
		return x.Switcher
	}
	return nil
}

func (x *Component) GetVariable() *Variable {
	if x, ok := x.GetComponent().(*Component_Variable); ok {
		return x.Variable
	}
	return nil
}

func (x *Component) GetSqrt() *Sqrt {
	if x, ok := x.GetComponent().(*Component_Sqrt); ok {
		return x.Sqrt
	}
	return nil
}

func (x *Component) GetExtrapolator() *Extrapolator {
	if x, ok := x.GetComponent().(*Component_Extrapolator); ok {
		return x.Extrapolator
	}
	return nil
}

func (x *Component) GetMax() *Max {
	if x, ok := x.GetComponent().(*Component_Max); ok {
		return x.Max
	}
	return nil
}

func (x *Component) GetMin() *Min {
	if x, ok := x.GetComponent().(*Component_Min); ok {
		return x.Min
	}
	return nil
}

func (x *Component) GetFirstValid() *FirstValid {
	if x, ok := x.GetComponent().(*Component_FirstValid); ok {
		return x.FirstValid
	}
	return nil
}

func (x *Component) GetAlerter() *Alerter {
	if x, ok := x.GetComponent().(*Component_Alerter); ok {
		return x.Alerter
	}
	return nil
}

func (x *Component) GetIntegrator() *Integrator {
	if x, ok := x.GetComponent().(*Component_Integrator); ok {
		return x.Integrator
	}
	return nil
}

func (x *Component) GetDifferentiator() *Differentiator {
	if x, ok := x.GetComponent().(*Component_Differentiator); ok {
		return x.Differentiator
	}
	return nil
}

func (x *Component) GetAnd() *And {
	if x, ok := x.GetComponent().(*Component_And); ok {
		return x.And
	}
	return nil
}

func (x *Component) GetOr() *Or {
	if x, ok := x.GetComponent().(*Component_Or); ok {
		return x.Or
	}
	return nil
}

func (x *Component) GetInverter() *Inverter {
	if x, ok := x.GetComponent().(*Component_Inverter); ok {
		return x.Inverter
	}
	return nil
}

func (x *Component) GetPulseGenerator() *PulseGenerator {
	if x, ok := x.GetComponent().(*Component_PulseGenerator); ok {
		return x.PulseGenerator
	}
	return nil
}

func (x *Component) GetHolder() *Holder {
	if x, ok := x.GetComponent().(*Component_Holder); ok {
		return x.Holder
	}
	return nil
}

func (x *Component) GetNestedCircuit() *NestedCircuit {
	if x, ok := x.GetComponent().(*Component_NestedCircuit); ok {
		return x.NestedCircuit
	}
	return nil
}

func (x *Component) GetNestedSignalIngress() *NestedSignalIngress {
	if x, ok := x.GetComponent().(*Component_NestedSignalIngress); ok {
		return x.NestedSignalIngress
	}
	return nil
}

func (x *Component) GetNestedSignalEgress() *NestedSignalEgress {
	if x, ok := x.GetComponent().(*Component_NestedSignalEgress); ok {
		return x.NestedSignalEgress
	}
	return nil
}

func (x *Component) GetQuery() *Query {
	if x, ok := x.GetComponent().(*Component_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Component) GetFlowControl() *FlowControl {
	if x, ok := x.GetComponent().(*Component_FlowControl); ok {
		return x.FlowControl
	}
	return nil
}

func (x *Component) GetAutoScale() *AutoScale {
	if x, ok := x.GetComponent().(*Component_AutoScale); ok {
		return x.AutoScale
	}
	return nil
}

type isComponent_Component interface {
	isComponent_Component()
}

type Component_GradientController struct {
	// Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
	// This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
	GradientController *GradientController `protobuf:"bytes,1,opt,name=gradient_controller,json=gradientController,proto3,oneof"`
}

type Component_Ema struct {
	// Exponential Moving Average filter.
	Ema *EMA `protobuf:"bytes,2,opt,name=ema,proto3,oneof"`
}

type Component_ArithmeticCombinator struct {
	// Applies the given operator on input operands (signals) and emits the result.
	ArithmeticCombinator *ArithmeticCombinator `protobuf:"bytes,3,opt,name=arithmetic_combinator,json=arithmeticCombinator,proto3,oneof"`
}

type Component_Decider struct {
	// Decider emits the binary result of comparison operator on two operands.
	Decider *Decider `protobuf:"bytes,4,opt,name=decider,proto3,oneof"`
}

type Component_Switcher struct {
	// Switcher acts as a switch that emits one of the two signals based on third signal.
	Switcher *Switcher `protobuf:"bytes,5,opt,name=switcher,proto3,oneof"`
}

type Component_Variable struct {
	// Emits a variable signal which can be set to invalid.
	Variable *Variable `protobuf:"bytes,9,opt,name=variable,proto3,oneof"`
}

type Component_Sqrt struct {
	// Takes an input signal and emits the square root of the input signal.
	Sqrt *Sqrt `protobuf:"bytes,10,opt,name=sqrt,proto3,oneof"`
}

type Component_Extrapolator struct {
	// Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
	Extrapolator *Extrapolator `protobuf:"bytes,11,opt,name=extrapolator,proto3,oneof"`
}

type Component_Max struct {
	// Emits the maximum of the input signals.
	Max *Max `protobuf:"bytes,12,opt,name=max,proto3,oneof"`
}

type Component_Min struct {
	// Emits the minimum of the input signals.
	Min *Min `protobuf:"bytes,13,opt,name=min,proto3,oneof"`
}

type Component_FirstValid struct {
	// Picks the first valid input signal and emits it.
	FirstValid *FirstValid `protobuf:"bytes,14,opt,name=first_valid,json=firstValid,proto3,oneof"`
}

type Component_Alerter struct {
	// Alerter reacts to a signal and generates alert to send to alert manager.
	Alerter *Alerter `protobuf:"bytes,15,opt,name=alerter,proto3,oneof"`
}

type Component_Integrator struct {
	// Accumulates sum of signal every tick.
	Integrator *Integrator `protobuf:"bytes,16,opt,name=integrator,proto3,oneof"`
}

type Component_Differentiator struct {
	// Differentiator calculates rate of change per tick.
	Differentiator *Differentiator `protobuf:"bytes,17,opt,name=differentiator,proto3,oneof"`
}

type Component_And struct {
	// Logical AND.
	And *And `protobuf:"bytes,19,opt,name=and,proto3,oneof"`
}

type Component_Or struct {
	// Logical OR.
	Or *Or `protobuf:"bytes,20,opt,name=or,proto3,oneof"`
}

type Component_Inverter struct {
	// Logical NOT.
	Inverter *Inverter `protobuf:"bytes,21,opt,name=inverter,proto3,oneof"`
}

type Component_PulseGenerator struct {
	// Generates 0 and 1 in turns.
	PulseGenerator *PulseGenerator `protobuf:"bytes,22,opt,name=pulse_generator,json=pulseGenerator,proto3,oneof"`
}

type Component_Holder struct {
	// Holds the last valid signal value for the specified duration then waits for next valid value to hold.
	Holder *Holder `protobuf:"bytes,23,opt,name=holder,proto3,oneof"`
}

type Component_NestedCircuit struct {
	// Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
	NestedCircuit *NestedCircuit `protobuf:"bytes,24,opt,name=nested_circuit,json=nestedCircuit,proto3,oneof"`
}

type Component_NestedSignalIngress struct {
	// Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
	NestedSignalIngress *NestedSignalIngress `protobuf:"bytes,25,opt,name=nested_signal_ingress,json=nestedSignalIngress,proto3,oneof"`
}

type Component_NestedSignalEgress struct {
	// Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
	NestedSignalEgress *NestedSignalEgress `protobuf:"bytes,26,opt,name=nested_signal_egress,json=nestedSignalEgress,proto3,oneof"`
}

type Component_Query struct {
	// Query components that are query databases such as Prometheus.
	Query *Query `protobuf:"bytes,100,opt,name=query,proto3,oneof"`
}

type Component_FlowControl struct {
	// FlowControl components are used to regulate requests flow.
	FlowControl *FlowControl `protobuf:"bytes,101,opt,name=flow_control,json=flowControl,proto3,oneof"`
}

type Component_AutoScale struct {
	// AutoScale components are used to scale the service.
	AutoScale *AutoScale `protobuf:"bytes,102,opt,name=auto_scale,json=autoScale,proto3,oneof"`
}

func (*Component_GradientController) isComponent_Component() {}

func (*Component_Ema) isComponent_Component() {}

func (*Component_ArithmeticCombinator) isComponent_Component() {}

func (*Component_Decider) isComponent_Component() {}

func (*Component_Switcher) isComponent_Component() {}

func (*Component_Variable) isComponent_Component() {}

func (*Component_Sqrt) isComponent_Component() {}

func (*Component_Extrapolator) isComponent_Component() {}

func (*Component_Max) isComponent_Component() {}

func (*Component_Min) isComponent_Component() {}

func (*Component_FirstValid) isComponent_Component() {}

func (*Component_Alerter) isComponent_Component() {}

func (*Component_Integrator) isComponent_Component() {}

func (*Component_Differentiator) isComponent_Component() {}

func (*Component_And) isComponent_Component() {}

func (*Component_Or) isComponent_Component() {}

func (*Component_Inverter) isComponent_Component() {}

func (*Component_PulseGenerator) isComponent_Component() {}

func (*Component_Holder) isComponent_Component() {}

func (*Component_NestedCircuit) isComponent_Component() {}

func (*Component_NestedSignalIngress) isComponent_Component() {}

func (*Component_NestedSignalEgress) isComponent_Component() {}

func (*Component_Query) isComponent_Component() {}

func (*Component_FlowControl) isComponent_Component() {}

func (*Component_AutoScale) isComponent_Component() {}

// Query components that are query databases such as Prometheus.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//	*Query_Promql
	Component isQuery_Component `protobuf_oneof:"component"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{6}
}

func (m *Query) GetComponent() isQuery_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *Query) GetPromql() *PromQL {
	if x, ok := x.GetComponent().(*Query_Promql); ok {
		return x.Promql
	}
	return nil
}

type isQuery_Component interface {
	isQuery_Component()
}

type Query_Promql struct {
	// Periodically runs a Prometheus query in the background and emits the result.
	Promql *PromQL `protobuf:"bytes,1,opt,name=promql,proto3,oneof"`
}

func (*Query_Promql) isQuery_Component() {}

// FlowControl components are used to regulate requests flow.
type FlowControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//	*FlowControl_RateLimiter
	//	*FlowControl_ConcurrencyLimiter
	//	*FlowControl_AimdConcurrencyController
	Component isFlowControl_Component `protobuf_oneof:"component"`
}

func (x *FlowControl) Reset() {
	*x = FlowControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlowControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowControl) ProtoMessage() {}

func (x *FlowControl) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowControl.ProtoReflect.Descriptor instead.
func (*FlowControl) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{7}
}

func (m *FlowControl) GetComponent() isFlowControl_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *FlowControl) GetRateLimiter() *RateLimiter {
	if x, ok := x.GetComponent().(*FlowControl_RateLimiter); ok {
		return x.RateLimiter
	}
	return nil
}

func (x *FlowControl) GetConcurrencyLimiter() *ConcurrencyLimiter {
	if x, ok := x.GetComponent().(*FlowControl_ConcurrencyLimiter); ok {
		return x.ConcurrencyLimiter
	}
	return nil
}

func (x *FlowControl) GetAimdConcurrencyController() *AIMDConcurrencyController {
	if x, ok := x.GetComponent().(*FlowControl_AimdConcurrencyController); ok {
		return x.AimdConcurrencyController
	}
	return nil
}

type isFlowControl_Component interface {
	isFlowControl_Component()
}

type FlowControl_RateLimiter struct {
	// Rate Limiter provides service protection by applying rate limiter.
	RateLimiter *RateLimiter `protobuf:"bytes,1,opt,name=rate_limiter,json=rateLimiter,proto3,oneof"`
}

type FlowControl_ConcurrencyLimiter struct {
	// Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
	ConcurrencyLimiter *ConcurrencyLimiter `protobuf:"bytes,2,opt,name=concurrency_limiter,json=concurrencyLimiter,proto3,oneof"`
}

type FlowControl_AimdConcurrencyController struct {
	// AIMD Concurrency control component is based on Additive Increase and Multiplicative Decrease of Concurrency. It takes a signal and setpoint as inputs and reduces concurrency limits proportionally (or any arbitrary power) based on deviation of the signal from setpoint. Internally implemented as a nested circuit.
	AimdConcurrencyController *AIMDConcurrencyController `protobuf:"bytes,3,opt,name=aimd_concurrency_controller,json=aimdConcurrencyController,proto3,oneof"`
}

func (*FlowControl_RateLimiter) isFlowControl_Component() {}

func (*FlowControl_ConcurrencyLimiter) isFlowControl_Component() {}

func (*FlowControl_AimdConcurrencyController) isFlowControl_Component() {}

// AutoScale components are used to scale a service.
type AutoScale struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//	*AutoScale_HorizontalPodScaler
	Component isAutoScale_Component `protobuf_oneof:"component"`
}

func (x *AutoScale) Reset() {
	*x = AutoScale{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoScale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoScale) ProtoMessage() {}

func (x *AutoScale) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoScale.ProtoReflect.Descriptor instead.
func (*AutoScale) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{8}
}

func (m *AutoScale) GetComponent() isAutoScale_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *AutoScale) GetHorizontalPodScaler() *HorizontalPodScaler {
	if x, ok := x.GetComponent().(*AutoScale_HorizontalPodScaler); ok {
		return x.HorizontalPodScaler
	}
	return nil
}

type isAutoScale_Component interface {
	isAutoScale_Component()
}

type AutoScale_HorizontalPodScaler struct {
	// HorizontalPodScaler provides pod horizontal scaling functionality for scalable Kubernetes resources.
	HorizontalPodScaler *HorizontalPodScaler `protobuf:"bytes,1,opt,name=horizontal_pod_scaler,json=horizontalPodScaler,proto3,oneof"`
}

func (*AutoScale_HorizontalPodScaler) isAutoScale_Component() {}

// Components receive input from other components via InPorts
type InPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*InPort_SignalName
	//	*InPort_ConstantSignal
	Value isInPort_Value `protobuf_oneof:"value"`
}

func (x *InPort) Reset() {
	*x = InPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InPort) ProtoMessage() {}

func (x *InPort) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InPort.ProtoReflect.Descriptor instead.
func (*InPort) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{9}
}

func (m *InPort) GetValue() isInPort_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *InPort) GetSignalName() string {
	if x, ok := x.GetValue().(*InPort_SignalName); ok {
		return x.SignalName
	}
	return ""
}

func (x *InPort) GetConstantSignal() *ConstantSignal {
	if x, ok := x.GetValue().(*InPort_ConstantSignal); ok {
		return x.ConstantSignal
	}
	return nil
}

type isInPort_Value interface {
	isInPort_Value()
}

type InPort_SignalName struct {
	// Name of the incoming Signal on the InPort.
	SignalName string `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3,oneof"`
}

type InPort_ConstantSignal struct {
	// Constant value to be used for this InPort instead of a signal.
	ConstantSignal *ConstantSignal `protobuf:"bytes,2,opt,name=constant_signal,json=constantSignal,proto3,oneof"`
}

func (*InPort_SignalName) isInPort_Value() {}

func (*InPort_ConstantSignal) isInPort_Value() {}

// Components produce output for other components via OutPorts
type OutPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the outgoing Signal on the OutPort.
	SignalName string `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
}

func (x *OutPort) Reset() {
	*x = OutPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPort) ProtoMessage() {}

func (x *OutPort) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPort.ProtoReflect.Descriptor instead.
func (*OutPort) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{10}
}

func (x *OutPort) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

// Gradient controller is a type of controller which tries to adjust the
// control variable proportionally to the relative difference between setpoint
// and actual value of the signal
//
// The `gradient` describes a corrective factor that should be applied to the
// control variable to get the signal closer to the setpoint. It is computed as follows:
//
// $$
// \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
// $$
//
// `gradient` is then clamped to [min_gradient, max_gradient] range.
//
// The output of gradient controller is computed as follows:
// $$
// \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
// $$
//
// Note the additional `optimize` signal, that can be used to "nudge" the
// controller into desired idle state.
//
// The output can be _optionally_ clamped to desired range using `max` and
// `min` input.
type GradientController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports of the Gradient Controller.
	InPorts *GradientController_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports of the Gradient Controller.
	OutPorts *GradientController_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Gradient Parameters.
	Parameters *GradientController_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration key for DynamicConfig
	DynamicConfigKey string `protobuf:"bytes,4,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration.
	DefaultConfig *GradientController_DynamicConfig `protobuf:"bytes,5,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *GradientController) Reset() {
	*x = GradientController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController) ProtoMessage() {}

func (x *GradientController) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController.ProtoReflect.Descriptor instead.
func (*GradientController) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11}
}

func (x *GradientController) GetInPorts() *GradientController_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *GradientController) GetOutPorts() *GradientController_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *GradientController) GetParameters() *GradientController_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *GradientController) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *GradientController) GetDefaultConfig() *GradientController_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Exponential Moving Average (EMA) is a type of moving average that applies exponentially more weight to recent signal readings
//
// At any time EMA component operates in one of the following states:
// 1. Warm up state: The first warmup_window samples are used to compute the initial EMA.
//    If an invalid reading is received during the warmup_window, the last good average is emitted and the state gets reset back to beginning of Warm up state.
// 2. Normal state: The EMA is computed using following formula.
//
// The EMA for a series $Y$ is calculated recursively as:
//
// $$
// \text{EMA} _t =
// \begin{cases}
//   Y_0, &\text{for } t = 0 \\
//   \alpha Y_t + (1 - \alpha) \text{EMA} _{t-1}, &\text{for }t > 0
// \end{cases}
// $$
//
// The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
// A higher $\alpha$ discounts older observations faster.
// The $\alpha$ is computed using ema\_window:
//
// $$
// \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
// $$
//
// The EMA filter also employs a min-max-envelope logic during warm up stage, explained [here](#v1-e-m-a-ins).
type EMA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the EMA component.
	InPorts *EMA_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the EMA component.
	OutPorts *EMA_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Parameters for the EMA component.
	Parameters *EMA_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *EMA) Reset() {
	*x = EMA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA) ProtoMessage() {}

func (x *EMA) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA.ProtoReflect.Descriptor instead.
func (*EMA) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12}
}

func (x *EMA) GetInPorts() *EMA_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *EMA) GetOutPorts() *EMA_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *EMA) GetParameters() *EMA_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Type of combinator that computes the arithmetic operation on the operand signals
type ArithmeticCombinator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Arithmetic Combinator component.
	InPorts *ArithmeticCombinator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Arithmetic Combinator component.
	OutPorts *ArithmeticCombinator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Operator of the arithmetic operation.
	//
	// The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
	// In case of XOR and bitshifts, value of signals is cast to integers before performing the operation.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=add sub mul div xor lshift rshift"` // @gotags: validate:"oneof=add sub mul div xor lshift rshift"
}

func (x *ArithmeticCombinator) Reset() {
	*x = ArithmeticCombinator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator) ProtoMessage() {}

func (x *ArithmeticCombinator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{13}
}

func (x *ArithmeticCombinator) GetInPorts() *ArithmeticCombinator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *ArithmeticCombinator) GetOutPorts() *ArithmeticCombinator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *ArithmeticCombinator) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

// Type of combinator that computes the comparison operation on lhs and rhs signals
//
// The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.
//
// This component also supports time-based response, i.e. the output
// transitions between 1.0 or 0.0 signal if the decider condition is
// true or false for at least "true_for" or "false_for" duration. If
// `true_for` and `false_for` durations are zero then the transitions are
// instantaneous.
type Decider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Decider component.
	InPorts *Decider_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Decider component.
	OutPorts *Decider_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Comparison operator that computes operation on lhs and rhs input signals.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=gt lt gte lte eq neq"` // @gotags: validate:"oneof=gt lt gte lte eq neq"
	// Duration of time to wait before a transition to true state.
	// If the duration is zero, the transition will happen instantaneously.
	TrueFor *durationpb.Duration `protobuf:"bytes,4,opt,name=true_for,json=trueFor,proto3" json:"true_for,omitempty" default:"0s"` // @gotags: default:"0s"
	// Duration of time to wait before a transition to false state.
	// If the duration is zero, the transition will happen instantaneously.
	FalseFor *durationpb.Duration `protobuf:"bytes,5,opt,name=false_for,json=falseFor,proto3" json:"false_for,omitempty" default:"0s"` // @gotags: default:"0s"
}

func (x *Decider) Reset() {
	*x = Decider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider) ProtoMessage() {}

func (x *Decider) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider.ProtoReflect.Descriptor instead.
func (*Decider) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14}
}

func (x *Decider) GetInPorts() *Decider_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Decider) GetOutPorts() *Decider_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Decider) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Decider) GetTrueFor() *durationpb.Duration {
	if x != nil {
		return x.TrueFor
	}
	return nil
}

func (x *Decider) GetFalseFor() *durationpb.Duration {
	if x != nil {
		return x.FalseFor
	}
	return nil
}

// Type of combinator that switches between `on_true` and `on_false` signals based on switch input
//
// `on_true` will be returned if switch input is valid and not equal to 0.0 ,
//  otherwise `on_false` will be returned.
type Switcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Switcher component.
	InPorts *Switcher_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Switcher component.
	OutPorts *Switcher_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Switcher) Reset() {
	*x = Switcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher) ProtoMessage() {}

func (x *Switcher) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher.ProtoReflect.Descriptor instead.
func (*Switcher) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{15}
}

func (x *Switcher) GetInPorts() *Switcher_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Switcher) GetOutPorts() *Switcher_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Limits the traffic on a control point to specified rate
//
// :::info
// See also [Rate Limiter overview](/concepts/integrations/flow-control/components/rate-limiter.md).
// :::
//
// Ratelimiting is done separately on per-label-value basis. Use _label\_key_
// to select which label should be used as key.
type RateLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts *RateLimiter_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty" validate:"required"` // @gotags: validate:"required"
	// Which control point to apply this ratelimiter to.
	FlowSelector *FlowSelector `protobuf:"bytes,2,opt,name=flow_selector,json=flowSelector,proto3" json:"flow_selector,omitempty" validate:"required"` // @gotags: validate:"required"
	// Parameters for the RateLimiter component
	Parameters *RateLimiter_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration key for DynamicConfig
	DynamicConfigKey string `protobuf:"bytes,4,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration
	DefaultConfig *RateLimiter_DynamicConfig `protobuf:"bytes,5,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *RateLimiter) Reset() {
	*x = RateLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter) ProtoMessage() {}

func (x *RateLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter.ProtoReflect.Descriptor instead.
func (*RateLimiter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16}
}

func (x *RateLimiter) GetInPorts() *RateLimiter_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *RateLimiter) GetFlowSelector() *FlowSelector {
	if x != nil {
		return x.FlowSelector
	}
	return nil
}

func (x *RateLimiter) GetParameters() *RateLimiter_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *RateLimiter) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *RateLimiter) GetDefaultConfig() *RateLimiter_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Concurrency Limiter is an actuator component that regulates flows in order to provide active service protection
//
// :::info
// See also [Concurrency Limiter overview](/concepts/integrations/flow-control/components/concurrency-limiter.md).
// :::
//
// It is based on the actuation strategy (e.g. load actuator) and workload scheduling which is based on Weighted Fair Queuing principles.
// Concurrency is calculated in terms of total tokens which translate to (avg. latency \* in-flight requests), i.e. Little's Law.
//
// ConcurrencyLimiter configuration is split into two parts: An actuation
// strategy and a scheduler. Right now, only `load_actuator` strategy is available.
type ConcurrencyLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flow Selector decides the service and flows at which the concurrency limiter is applied.
	FlowSelector *FlowSelector `protobuf:"bytes,1,opt,name=flow_selector,json=flowSelector,proto3" json:"flow_selector,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration of Weighted Fair Queuing-based workload scheduler.
	//
	// Contains configuration of per-agent scheduler, and also defines some
	// output signals.
	Scheduler *Scheduler `protobuf:"bytes,2,opt,name=scheduler,proto3" json:"scheduler,omitempty" validate:"required"` // @gotags: validate:"required"
	// Types that are assignable to ActuationStrategy:
	//	*ConcurrencyLimiter_LoadActuator
	ActuationStrategy isConcurrencyLimiter_ActuationStrategy `protobuf_oneof:"actuation_strategy"`
}

func (x *ConcurrencyLimiter) Reset() {
	*x = ConcurrencyLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimiter) ProtoMessage() {}

func (x *ConcurrencyLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimiter.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimiter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{17}
}

func (x *ConcurrencyLimiter) GetFlowSelector() *FlowSelector {
	if x != nil {
		return x.FlowSelector
	}
	return nil
}

func (x *ConcurrencyLimiter) GetScheduler() *Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (m *ConcurrencyLimiter) GetActuationStrategy() isConcurrencyLimiter_ActuationStrategy {
	if m != nil {
		return m.ActuationStrategy
	}
	return nil
}

func (x *ConcurrencyLimiter) GetLoadActuator() *LoadActuator {
	if x, ok := x.GetActuationStrategy().(*ConcurrencyLimiter_LoadActuator); ok {
		return x.LoadActuator
	}
	return nil
}

type isConcurrencyLimiter_ActuationStrategy interface {
	isConcurrencyLimiter_ActuationStrategy()
}

type ConcurrencyLimiter_LoadActuator struct {
	// Actuator based on limiting the accepted concurrency under incoming concurrency * load multiplier.
	//
	// Actuation strategy defines the input signal that will drive the scheduler.
	LoadActuator *LoadActuator `protobuf:"bytes,3,opt,name=load_actuator,json=loadActuator,proto3,oneof"`
}

func (*ConcurrencyLimiter_LoadActuator) isConcurrencyLimiter_ActuationStrategy() {}

// Weighted Fair Queuing-based workload scheduler
//
// :::note
// Each Agent instantiates an independent copy of the scheduler, but output
// signals for accepted and incoming concurrency are aggregated across all agents.
// :::
//
// See [ConcurrencyLimiter](#v1-concurrency-limiter) for more context.
type Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the Scheduler component.
	OutPorts *Scheduler_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Scheduler parameters.
	Parameters *Scheduler_Parameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Scheduler) Reset() {
	*x = Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler) ProtoMessage() {}

func (x *Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler.ProtoReflect.Descriptor instead.
func (*Scheduler) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18}
}

func (x *Scheduler) GetOutPorts() *Scheduler_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Scheduler) GetParameters() *Scheduler_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Takes the load multiplier input signal and publishes it to the schedulers in the data-plane
type LoadActuator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Load Actuator component.
	InPorts *LoadActuator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Configuration key for DynamicConfig.
	DynamicConfigKey string `protobuf:"bytes,2,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration.
	DefaultConfig *LoadActuator_DynamicConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
	// Configuration for embedded alerter.
	AlerterParameters *Alerter_Parameters `protobuf:"bytes,4,opt,name=alerter_parameters,json=alerterParameters,proto3" json:"alerter_parameters,omitempty"`
}

func (x *LoadActuator) Reset() {
	*x = LoadActuator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadActuator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadActuator) ProtoMessage() {}

func (x *LoadActuator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadActuator.ProtoReflect.Descriptor instead.
func (*LoadActuator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{19}
}

func (x *LoadActuator) GetInPorts() *LoadActuator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *LoadActuator) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *LoadActuator) GetDefaultConfig() *LoadActuator_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

func (x *LoadActuator) GetAlerterParameters() *Alerter_Parameters {
	if x != nil {
		return x.AlerterParameters
	}
	return nil
}

// Component that runs a Prometheus query periodically and returns the result as an output signal
type PromQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the PromQL component.
	OutPorts *PromQL_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Describes the Prometheus query to be run.
	//
	// :::caution
	// TODO we should describe how to construct the query, eg. how to employ the
	// fluxmeters here or link to appropriate place in docs.
	// :::
	QueryString string `protobuf:"bytes,2,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	// Describes the interval between successive evaluations of the Prometheus query.
	EvaluationInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=evaluation_interval,json=evaluationInterval,proto3" json:"evaluation_interval,omitempty" default:"10s"` // @gotags: default:"10s"
}

func (x *PromQL) Reset() {
	*x = PromQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromQL) ProtoMessage() {}

func (x *PromQL) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromQL.ProtoReflect.Descriptor instead.
func (*PromQL) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{20}
}

func (x *PromQL) GetOutPorts() *PromQL_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *PromQL) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *PromQL) GetEvaluationInterval() *durationpb.Duration {
	if x != nil {
		return x.EvaluationInterval
	}
	return nil
}

// Special constant input for ports and Variable component. Can provide either a constant value or special Nan/+-Inf value.
type ConstantSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Const:
	//	*ConstantSignal_SpecialValue
	//	*ConstantSignal_Value
	Const isConstantSignal_Const `protobuf_oneof:"const"`
}

func (x *ConstantSignal) Reset() {
	*x = ConstantSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstantSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantSignal) ProtoMessage() {}

func (x *ConstantSignal) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantSignal.ProtoReflect.Descriptor instead.
func (*ConstantSignal) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{21}
}

func (m *ConstantSignal) GetConst() isConstantSignal_Const {
	if m != nil {
		return m.Const
	}
	return nil
}

func (x *ConstantSignal) GetSpecialValue() string {
	if x, ok := x.GetConst().(*ConstantSignal_SpecialValue); ok {
		return x.SpecialValue
	}
	return ""
}

func (x *ConstantSignal) GetValue() float64 {
	if x, ok := x.GetConst().(*ConstantSignal_Value); ok {
		return x.Value
	}
	return 0
}

type isConstantSignal_Const interface {
	isConstantSignal_Const()
}

type ConstantSignal_SpecialValue struct {
	SpecialValue string `protobuf:"bytes,1,opt,name=special_value,json=specialValue,proto3,oneof" validate:"oneof=NaN +Inf -Inf"` // @gotags: validate:"oneof=NaN +Inf -Inf"
}

type ConstantSignal_Value struct {
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3,oneof"`
}

func (*ConstantSignal_SpecialValue) isConstantSignal_Const() {}

func (*ConstantSignal_Value) isConstantSignal_Const() {}

// Component that emits a variable value as an output signal, can be defined in dynamic configuration.
type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the Variable component.
	OutPorts *Variable_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Configuration key for DynamicConfig.
	DynamicConfigKey string `protobuf:"bytes,2,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration.
	DefaultConfig *Variable_DynamicConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{22}
}

func (x *Variable) GetOutPorts() *Variable_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Variable) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *Variable) GetDefaultConfig() *Variable_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Takes an input signal and emits the square root of it multiplied by scale as an output
//
// $$
// \text{output} = \text{scale} \sqrt{\text{input}}
// $$
type Sqrt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Sqrt component.
	InPorts *Sqrt_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Sqrt component.
	OutPorts *Sqrt_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Scaling factor to be multiplied with the square root of the input signal.
	Scale float64 `protobuf:"fixed64,3,opt,name=scale,proto3" json:"scale,omitempty"` // @gotags default:"1.0"
}

func (x *Sqrt) Reset() {
	*x = Sqrt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt) ProtoMessage() {}

func (x *Sqrt) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt.ProtoReflect.Descriptor instead.
func (*Sqrt) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{23}
}

func (x *Sqrt) GetInPorts() *Sqrt_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Sqrt) GetOutPorts() *Sqrt_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Sqrt) GetScale() float64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

// Extrapolates the input signal by repeating the last valid value during the period in which it is invalid
//
// It does so until `maximum_extrapolation_interval` is reached, beyond which it emits invalid signal unless input signal becomes valid again.
type Extrapolator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Extrapolator component.
	InPorts *Extrapolator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Extrapolator component.
	OutPorts *Extrapolator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Parameters for the Extrapolator component.
	Parameters *Extrapolator_Parameters `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Extrapolator) Reset() {
	*x = Extrapolator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator) ProtoMessage() {}

func (x *Extrapolator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator.ProtoReflect.Descriptor instead.
func (*Extrapolator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{24}
}

func (x *Extrapolator) GetInPorts() *Extrapolator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Extrapolator) GetOutPorts() *Extrapolator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Extrapolator) GetParameters() *Extrapolator_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Takes a list of input signals and emits the signal with the maximum value
//
// Max: output = max([]inputs).
type Max struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Max component.
	InPorts *Max_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Max component.
	OutPorts *Max_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Max) Reset() {
	*x = Max{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max) ProtoMessage() {}

func (x *Max) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max.ProtoReflect.Descriptor instead.
func (*Max) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{25}
}

func (x *Max) GetInPorts() *Max_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Max) GetOutPorts() *Max_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Takes an array of input signals and emits the signal with the minimum value
// Min: output = min([]inputs).
type Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Min component.
	InPorts *Min_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Min component.
	OutPorts *Min_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Min) Reset() {
	*x = Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min) ProtoMessage() {}

func (x *Min) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min.ProtoReflect.Descriptor instead.
func (*Min) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{26}
}

func (x *Min) GetInPorts() *Min_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Min) GetOutPorts() *Min_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Logical AND.
//
// Signals are mapped to boolean values as follows:
// * Zero is treated as false.
// * Any non-zero is treated as true.
// * Invalid inputs are considered unknown.
//
//   :::note
//   Treating invalid inputs as "unknowns" has a consequence that the result
//   might end up being valid even when some inputs are invalid. Eg. `unknown && false == false`,
//   because the result would end up false no matter if
//   first signal was true or false. On the other hand, `unknown && true == unknown`.
//   :::
type And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the And component.
	InPorts *And_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the And component.
	OutPorts *And_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *And) Reset() {
	*x = And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{27}
}

func (x *And) GetInPorts() *And_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *And) GetOutPorts() *And_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Logical OR.
//
// See [And component](#v1-and) on how signals are mapped onto boolean values.
type Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Or component.
	InPorts *Or_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Or component.
	OutPorts *Or_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Or) Reset() {
	*x = Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or) ProtoMessage() {}

func (x *Or) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or.ProtoReflect.Descriptor instead.
func (*Or) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{28}
}

func (x *Or) GetInPorts() *Or_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Or) GetOutPorts() *Or_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Logical NOT.
//
// See [And component](#v1-and) on how signals are mapped onto boolean values.
type Inverter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Inverter component.
	InPorts *Inverter_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Inverter component.
	OutPorts *Inverter_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Inverter) Reset() {
	*x = Inverter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inverter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inverter) ProtoMessage() {}

func (x *Inverter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inverter.ProtoReflect.Descriptor instead.
func (*Inverter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{29}
}

func (x *Inverter) GetInPorts() *Inverter_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Inverter) GetOutPorts() *Inverter_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Picks the first valid input signal from the array of input signals and emits it as an output signal
type FirstValid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the FirstValid component.
	InPorts *FirstValid_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the FirstValid component.
	OutPorts *FirstValid_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *FirstValid) Reset() {
	*x = FirstValid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid) ProtoMessage() {}

func (x *FirstValid) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid.ProtoReflect.Descriptor instead.
func (*FirstValid) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{30}
}

func (x *FirstValid) GetInPorts() *FirstValid_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *FirstValid) GetOutPorts() *FirstValid_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Alerter reacts to a signal and generates alert to send to alert manager.
type Alerter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Alerter component.
	InPorts *Alerter_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Alerter configuration
	Parameters *Alerter_Parameters `protobuf:"bytes,2,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Alerter) Reset() {
	*x = Alerter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerter) ProtoMessage() {}

func (x *Alerter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerter.ProtoReflect.Descriptor instead.
func (*Alerter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{31}
}

func (x *Alerter) GetInPorts() *Alerter_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Alerter) GetParameters() *Alerter_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Accumulates sum of signal every tick.
type Integrator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Integrator component.
	InPorts *Integrator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Integrator component.
	OutPorts *Integrator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Integrator) Reset() {
	*x = Integrator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrator) ProtoMessage() {}

func (x *Integrator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrator.ProtoReflect.Descriptor instead.
func (*Integrator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{32}
}

func (x *Integrator) GetInPorts() *Integrator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Integrator) GetOutPorts() *Integrator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Differentiator calculates rate of change per tick.
type Differentiator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Differentiator component.
	InPorts *Differentiator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Differentiator component.
	OutPorts *Differentiator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// The window of time over which differentiator operates.
	Window *durationpb.Duration `protobuf:"bytes,3,opt,name=window,proto3" json:"window,omitempty" default:"5s"` // @gotags: default:"5s"
}

func (x *Differentiator) Reset() {
	*x = Differentiator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Differentiator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Differentiator) ProtoMessage() {}

func (x *Differentiator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Differentiator.ProtoReflect.Descriptor instead.
func (*Differentiator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{33}
}

func (x *Differentiator) GetInPorts() *Differentiator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Differentiator) GetOutPorts() *Differentiator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Differentiator) GetWindow() *durationpb.Duration {
	if x != nil {
		return x.Window
	}
	return nil
}

type HorizontalPodScaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Kubernetes object on which horizontal scaling is applied.
	KubernetesObjectSelector *KubernetesObjectSelector          `protobuf:"bytes,1,opt,name=kubernetes_object_selector,json=kubernetesObjectSelector,proto3" json:"kubernetes_object_selector,omitempty" validate:"required"` // @gotags: validate:"required"
	ScaleReporter            *HorizontalPodScaler_ScaleReporter `protobuf:"bytes,2,opt,name=scale_reporter,json=scaleReporter,proto3" json:"scale_reporter,omitempty"`
	ScaleActuator            *HorizontalPodScaler_ScaleActuator `protobuf:"bytes,3,opt,name=scale_actuator,json=scaleActuator,proto3" json:"scale_actuator,omitempty"`
}

func (x *HorizontalPodScaler) Reset() {
	*x = HorizontalPodScaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodScaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodScaler) ProtoMessage() {}

func (x *HorizontalPodScaler) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodScaler.ProtoReflect.Descriptor instead.
func (*HorizontalPodScaler) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{34}
}

func (x *HorizontalPodScaler) GetKubernetesObjectSelector() *KubernetesObjectSelector {
	if x != nil {
		return x.KubernetesObjectSelector
	}
	return nil
}

func (x *HorizontalPodScaler) GetScaleReporter() *HorizontalPodScaler_ScaleReporter {
	if x != nil {
		return x.ScaleReporter
	}
	return nil
}

func (x *HorizontalPodScaler) GetScaleActuator() *HorizontalPodScaler_ScaleActuator {
	if x != nil {
		return x.ScaleActuator
	}
	return nil
}

// Generates 0 and 1 in turns.
type PulseGenerator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPorts *PulseGenerator_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Emitting 1 for the true_for duration.
	TrueFor *durationpb.Duration `protobuf:"bytes,2,opt,name=true_for,json=trueFor,proto3" json:"true_for,omitempty" default:"5s"` // @gotags: default:"5s"
	// Emitting 0 for the false_for duration.
	FalseFor *durationpb.Duration `protobuf:"bytes,3,opt,name=false_for,json=falseFor,proto3" json:"false_for,omitempty" default:"5s"` // @gotags: default:"5s"
}

func (x *PulseGenerator) Reset() {
	*x = PulseGenerator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulseGenerator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseGenerator) ProtoMessage() {}

func (x *PulseGenerator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseGenerator.ProtoReflect.Descriptor instead.
func (*PulseGenerator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{35}
}

func (x *PulseGenerator) GetOutPorts() *PulseGenerator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *PulseGenerator) GetTrueFor() *durationpb.Duration {
	if x != nil {
		return x.TrueFor
	}
	return nil
}

func (x *PulseGenerator) GetFalseFor() *durationpb.Duration {
	if x != nil {
		return x.FalseFor
	}
	return nil
}

// Holds the last valid signal value for the specified duration then waits for next valid value to hold.
// If it's holding a value that means it ignores both valid and invalid new signals until the hold_for duration is finished.
type Holder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts  *Holder_Ins  `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts *Holder_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Holding the last valid signal value for the hold_for duration.
	HoldFor *durationpb.Duration `protobuf:"bytes,3,opt,name=hold_for,json=holdFor,proto3" json:"hold_for,omitempty" default:"5s"` // @gotags: default:"5s"
}

func (x *Holder) Reset() {
	*x = Holder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder) ProtoMessage() {}

func (x *Holder) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder.ProtoReflect.Descriptor instead.
func (*Holder) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{36}
}

func (x *Holder) GetInPorts() *Holder_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Holder) GetOutPorts() *Holder_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Holder) GetHoldFor() *durationpb.Duration {
	if x != nil {
		return x.HoldFor
	}
	return nil
}

// Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
type NestedCircuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPortsMap  map[string]*InPort  `protobuf:"bytes,1,rep,name=in_ports_map,json=inPortsMap,proto3" json:"in_ports_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OutPortsMap map[string]*OutPort `protobuf:"bytes,2,rep,name=out_ports_map,json=outPortsMap,proto3" json:"out_ports_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Components  []*Component        `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty" validate:"dive"` // @gotags: validate:"dive"
	// Name of the nested circuit component. This name is displayed by graph visualization tools.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Short description of the nested circuit component. This description is displayed by graph visualization tools.
	ShortDescription string `protobuf:"bytes,5,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
}

func (x *NestedCircuit) Reset() {
	*x = NestedCircuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedCircuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedCircuit) ProtoMessage() {}

func (x *NestedCircuit) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedCircuit.ProtoReflect.Descriptor instead.
func (*NestedCircuit) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{37}
}

func (x *NestedCircuit) GetInPortsMap() map[string]*InPort {
	if x != nil {
		return x.InPortsMap
	}
	return nil
}

func (x *NestedCircuit) GetOutPortsMap() map[string]*OutPort {
	if x != nil {
		return x.OutPortsMap
	}
	return nil
}

func (x *NestedCircuit) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *NestedCircuit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NestedCircuit) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

// Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
type NestedSignalIngress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the NestedSignalIngress component.
	OutPorts *NestedSignalIngress_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	PortName string                    `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *NestedSignalIngress) Reset() {
	*x = NestedSignalIngress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedSignalIngress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedSignalIngress) ProtoMessage() {}

func (x *NestedSignalIngress) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedSignalIngress.ProtoReflect.Descriptor instead.
func (*NestedSignalIngress) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{38}
}

func (x *NestedSignalIngress) GetOutPorts() *NestedSignalIngress_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *NestedSignalIngress) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

// Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
type NestedSignalEgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the NestedSignalEgress component.
	InPorts  *NestedSignalEgress_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	PortName string                  `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *NestedSignalEgress) Reset() {
	*x = NestedSignalEgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedSignalEgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedSignalEgress) ProtoMessage() {}

func (x *NestedSignalEgress) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedSignalEgress.ProtoReflect.Descriptor instead.
func (*NestedSignalEgress) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{39}
}

func (x *NestedSignalEgress) GetInPorts() *NestedSignalEgress_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *NestedSignalEgress) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

// High level concurrency control component. Baselines a signal via exponential moving average and applies concurrency limits based on deviation of signal from the baseline. Internally implemented as a nested circuit.
type AIMDConcurrencyController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the AIMDConcurrencyController component.
	InPorts *AIMDConcurrencyController_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the AIMDConcurrencyController component.
	OutPorts *AIMDConcurrencyController_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Flow Selector decides the service and flows at which the concurrency limiter is applied.
	FlowSelector *FlowSelector `protobuf:"bytes,3,opt,name=flow_selector,json=flowSelector,proto3" json:"flow_selector,omitempty" validate:"required"` // @gotags: validate:"required"
	// Scheduler parameters.
	SchedulerParameters *Scheduler_Parameters `protobuf:"bytes,4,opt,name=scheduler_parameters,json=schedulerParameters,proto3" json:"scheduler_parameters,omitempty" validate:"required"` // @gotags: validate:"required"
	// Gradient parameters for the controller. Defaults to:
	// * slope = -1
	// * min_gradient = 0.1
	// * max_gradient = 1
	GradientParameters *GradientController_Parameters `protobuf:"bytes,5,opt,name=gradient_parameters,json=gradientParameters,proto3" json:"gradient_parameters,omitempty"`
	// Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.
	ConcurrencyLimitMultiplier float64 `protobuf:"fixed64,6,opt,name=concurrency_limit_multiplier,json=concurrencyLimitMultiplier,proto3" json:"concurrency_limit_multiplier,omitempty" default:"2.0"` // @gotags: default:"2.0"
	// Linear increment to concurrency in each execution tick when the system is not in overloaded state.
	ConcurrencyLinearIncrement float64 `protobuf:"fixed64,7,opt,name=concurrency_linear_increment,json=concurrencyLinearIncrement,proto3" json:"concurrency_linear_increment,omitempty" default:"5.0"` // @gotags: default:"5.0"
	// Scale factor to multiply square root of current accepted concurrrency. This, along with concurrencyLinearIncrement helps calculate overall concurrency increment in each tick. Concurrency is rapidly ramped up in each execution cycle during normal (non-overload) state (integral effect).
	ConcurrencySqrtIncrementMultiplier float64 `protobuf:"fixed64,8,opt,name=concurrency_sqrt_increment_multiplier,json=concurrencySqrtIncrementMultiplier,proto3" json:"concurrency_sqrt_increment_multiplier,omitempty" default:"1.0"` // @gotags: default:"1.0"
	// Configuration for embedded alerter.
	AlerterParameters *Alerter_Parameters `protobuf:"bytes,9,opt,name=alerter_parameters,json=alerterParameters,proto3" json:"alerter_parameters,omitempty"`
	// Configuration key for load actuation dry run.
	DryRunDynamicConfigKey string `protobuf:"bytes,10,opt,name=dry_run_dynamic_config_key,json=dryRunDynamicConfigKey,proto3" json:"dry_run_dynamic_config_key,omitempty"`
}

func (x *AIMDConcurrencyController) Reset() {
	*x = AIMDConcurrencyController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIMDConcurrencyController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIMDConcurrencyController) ProtoMessage() {}

func (x *AIMDConcurrencyController) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIMDConcurrencyController.ProtoReflect.Descriptor instead.
func (*AIMDConcurrencyController) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{40}
}

func (x *AIMDConcurrencyController) GetInPorts() *AIMDConcurrencyController_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *AIMDConcurrencyController) GetOutPorts() *AIMDConcurrencyController_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *AIMDConcurrencyController) GetFlowSelector() *FlowSelector {
	if x != nil {
		return x.FlowSelector
	}
	return nil
}

func (x *AIMDConcurrencyController) GetSchedulerParameters() *Scheduler_Parameters {
	if x != nil {
		return x.SchedulerParameters
	}
	return nil
}

func (x *AIMDConcurrencyController) GetGradientParameters() *GradientController_Parameters {
	if x != nil {
		return x.GradientParameters
	}
	return nil
}

func (x *AIMDConcurrencyController) GetConcurrencyLimitMultiplier() float64 {
	if x != nil {
		return x.ConcurrencyLimitMultiplier
	}
	return 0
}

func (x *AIMDConcurrencyController) GetConcurrencyLinearIncrement() float64 {
	if x != nil {
		return x.ConcurrencyLinearIncrement
	}
	return 0
}

func (x *AIMDConcurrencyController) GetConcurrencySqrtIncrementMultiplier() float64 {
	if x != nil {
		return x.ConcurrencySqrtIncrementMultiplier
	}
	return 0
}

func (x *AIMDConcurrencyController) GetAlerterParameters() *Alerter_Parameters {
	if x != nil {
		return x.AlerterParameters
	}
	return nil
}

func (x *AIMDConcurrencyController) GetDryRunDynamicConfigKey() string {
	if x != nil {
		return x.DryRunDynamicConfigKey
	}
	return ""
}

// Gradient Parameters.
type GradientController_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Slope controls the aggressiveness and direction of the Gradient Controller.
	//
	// Slope is used as exponent on the signal to setpoint ratio in computation
	// of the gradient (see the [main description](#v1-gradient-controller) for
	// exact equation). Good intuition for this parameter is "What should the
	// Gradient Controller do to the control variable when signal is too high",
	// eg.:
	// * $\text{slope} = 1$: when signal is too high, increase control variable,
	// * $\text{slope} = -1$: when signal is too high, decrease control variable,
	// * $\text{slope} = -0.5$: when signal is too high, decrease control variable slowly.
	//
	// The sign of slope depends on correlation between the signal and control variable:
	// * Use $\text{slope} < 0$ if signal and control variable are _positively_
	// correlated (eg. Per-pod CPU usage and total concurrency).
	// * Use $\text{slope} > 0$ if signal and control variable are _negatively_
	// correlated (eg. Per-pod CPU usage and number of pods).
	//
	// :::note
	// You need to set _negative_ slope for a _positive_ correlation, as you're
	// describing the _action_ which controller should make when the signal
	// increases.
	// :::
	//
	// The magnitude of slope describes how aggressively should the controller
	// react to a deviation of signal.
	// With $|\text{slope}| = 1$, the controller will aim to bring the signal to
	// the setpoint in one tick (assuming linear correlation with signal and setpoint).
	// Smaller magnitudes of slope will make the controller adjust the control
	// variable more slowly.
	//
	// We recommend setting $|\text{slope}| < 1$ (eg. $\pm0.8$).
	// If you experience overshooting, consider lowering the magnitude even more.
	// Values of $|\text{slope}| > 1$ are not recommended.
	//
	// :::note
	// Remember that the gradient and output signal can be (optionally) clamped,
	// so the _slope_ might not fully describe aggressiveness of the controller.
	// :::
	Slope float64 `protobuf:"fixed64,1,opt,name=slope,proto3" json:"slope,omitempty" validate:"required"` // @gotags: validate:"required"
	// Minimum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].
	MinGradient float64 `protobuf:"fixed64,2,opt,name=min_gradient,json=minGradient,proto3" json:"min_gradient,omitempty" default:"-1.79769313486231570814527423731704356798070e+308"` // @gotags: default:"-1.79769313486231570814527423731704356798070e+308"
	// Maximum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].
	MaxGradient float64 `protobuf:"fixed64,3,opt,name=max_gradient,json=maxGradient,proto3" json:"max_gradient,omitempty" default:"1.79769313486231570814527423731704356798070e+308"` // @gotags: default:"1.79769313486231570814527423731704356798070e+308"
}

func (x *GradientController_Parameters) Reset() {
	*x = GradientController_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Parameters) ProtoMessage() {}

func (x *GradientController_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Parameters.ProtoReflect.Descriptor instead.
func (*GradientController_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11, 0}
}

func (x *GradientController_Parameters) GetSlope() float64 {
	if x != nil {
		return x.Slope
	}
	return 0
}

func (x *GradientController_Parameters) GetMinGradient() float64 {
	if x != nil {
		return x.MinGradient
	}
	return 0
}

func (x *GradientController_Parameters) GetMaxGradient() float64 {
	if x != nil {
		return x.MaxGradient
	}
	return 0
}

// Dynamic Configuration for a Controller
type GradientController_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Decides whether the controller runs in "manual_mode".
	// In manual mode, the controller does not adjust the control variable I.E. emits the same output as the control variable input.
	ManualMode bool `protobuf:"varint,1,opt,name=manual_mode,json=manualMode,proto3" json:"manual_mode,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *GradientController_DynamicConfig) Reset() {
	*x = GradientController_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_DynamicConfig) ProtoMessage() {}

func (x *GradientController_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_DynamicConfig.ProtoReflect.Descriptor instead.
func (*GradientController_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11, 1}
}

func (x *GradientController_DynamicConfig) GetManualMode() bool {
	if x != nil {
		return x.ManualMode
	}
	return false
}

// Inputs for the Gradient Controller component.
type GradientController_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal to be used for the gradient computation.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// Setpoint to be used for the gradient computation.
	Setpoint *InPort `protobuf:"bytes,2,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
	// Optimize signal is added to the output of the gradient calculation.
	Optimize *InPort `protobuf:"bytes,3,opt,name=optimize,proto3" json:"optimize,omitempty"`
	// Maximum value to limit the output signal.
	Max *InPort `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	// Minimum value to limit the output signal.
	Min *InPort `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	// Actual current value of the control variable.
	//
	// This signal is multiplied by the gradient to produce the output.
	ControlVariable *InPort `protobuf:"bytes,6,opt,name=control_variable,json=controlVariable,proto3" json:"control_variable,omitempty"`
}

func (x *GradientController_Ins) Reset() {
	*x = GradientController_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Ins) ProtoMessage() {}

func (x *GradientController_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Ins.ProtoReflect.Descriptor instead.
func (*GradientController_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11, 2}
}

func (x *GradientController_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *GradientController_Ins) GetSetpoint() *InPort {
	if x != nil {
		return x.Setpoint
	}
	return nil
}

func (x *GradientController_Ins) GetOptimize() *InPort {
	if x != nil {
		return x.Optimize
	}
	return nil
}

func (x *GradientController_Ins) GetMax() *InPort {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *GradientController_Ins) GetMin() *InPort {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *GradientController_Ins) GetControlVariable() *InPort {
	if x != nil {
		return x.ControlVariable
	}
	return nil
}

// Outputs for the Gradient Controller component.
type GradientController_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Computed desired value of the control variable.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GradientController_Outs) Reset() {
	*x = GradientController_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Outs) ProtoMessage() {}

func (x *GradientController_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Outs.ProtoReflect.Descriptor instead.
func (*GradientController_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11, 3}
}

func (x *GradientController_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the EMA component.
type EMA_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal to be used for the EMA computation.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Upper bound of the moving average.
	//
	// Used during the warm-up stage: if the signal would exceed `max_envelope`
	// it's multiplied by `correction_factor_on_max_envelope_violation` **once per tick**.
	//
	// :::note
	// If the signal deviates from `max_envelope` faster than the correction
	// faster, it might end up exceeding the envelope.
	// :::
	//
	// :::note
	// The envelope logic is **not** used outside the warm-up stage!
	// :::
	MaxEnvelope *InPort `protobuf:"bytes,2,opt,name=max_envelope,json=maxEnvelope,proto3" json:"max_envelope,omitempty"`
	// Lower bound of the moving average.
	//
	// Used during the warm-up stage analogously to `max_envelope`.
	MinEnvelope *InPort `protobuf:"bytes,3,opt,name=min_envelope,json=minEnvelope,proto3" json:"min_envelope,omitempty"`
}

func (x *EMA_Ins) Reset() {
	*x = EMA_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Ins) ProtoMessage() {}

func (x *EMA_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Ins.ProtoReflect.Descriptor instead.
func (*EMA_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 0}
}

func (x *EMA_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EMA_Ins) GetMaxEnvelope() *InPort {
	if x != nil {
		return x.MaxEnvelope
	}
	return nil
}

func (x *EMA_Ins) GetMinEnvelope() *InPort {
	if x != nil {
		return x.MinEnvelope
	}
	return nil
}

// Outputs for the EMA component.
type EMA_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exponential moving average of the series of reading as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *EMA_Outs) Reset() {
	*x = EMA_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Outs) ProtoMessage() {}

func (x *EMA_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Outs.ProtoReflect.Descriptor instead.
func (*EMA_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 1}
}

func (x *EMA_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Parameters for the EMA component.
type EMA_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Duration of EMA sampling window.
	EmaWindow *durationpb.Duration `protobuf:"bytes,1,opt,name=ema_window,json=emaWindow,proto3" json:"ema_window,omitempty" default:"5s"` // @gotags: default:"5s"
	// Duration of EMA warming up window.
	//
	// The initial value of the EMA is the average of signal readings received during the warm-up window.
	WarmupWindow *durationpb.Duration `protobuf:"bytes,2,opt,name=warmup_window,json=warmupWindow,proto3" json:"warmup_window,omitempty" default:"0s"` // @gotags: default:"0s"
	// Correction factor to apply on the output value if its in violation of the min envelope.
	CorrectionFactorOnMinEnvelopeViolation float64 `protobuf:"fixed64,3,opt,name=correction_factor_on_min_envelope_violation,json=correctionFactorOnMinEnvelopeViolation,proto3" json:"correction_factor_on_min_envelope_violation,omitempty" validate:"gte=1.0" default:"1.0"` // @gotags: validate:"gte=1.0" default:"1.0"
	// Correction factor to apply on the output value if its in violation of the max envelope.
	CorrectionFactorOnMaxEnvelopeViolation float64 `protobuf:"fixed64,4,opt,name=correction_factor_on_max_envelope_violation,json=correctionFactorOnMaxEnvelopeViolation,proto3" json:"correction_factor_on_max_envelope_violation,omitempty" validate:"gte=0,lte=1.0" default:"1.0"` // @gotags: validate:"gte=0,lte=1.0" default:"1.0"
	// Whether the output is valid during the warm-up stage.
	ValidDuringWarmup bool `protobuf:"varint,5,opt,name=valid_during_warmup,json=validDuringWarmup,proto3" json:"valid_during_warmup,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *EMA_Parameters) Reset() {
	*x = EMA_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Parameters) ProtoMessage() {}

func (x *EMA_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Parameters.ProtoReflect.Descriptor instead.
func (*EMA_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 2}
}

func (x *EMA_Parameters) GetEmaWindow() *durationpb.Duration {
	if x != nil {
		return x.EmaWindow
	}
	return nil
}

func (x *EMA_Parameters) GetWarmupWindow() *durationpb.Duration {
	if x != nil {
		return x.WarmupWindow
	}
	return nil
}

func (x *EMA_Parameters) GetCorrectionFactorOnMinEnvelopeViolation() float64 {
	if x != nil {
		return x.CorrectionFactorOnMinEnvelopeViolation
	}
	return 0
}

func (x *EMA_Parameters) GetCorrectionFactorOnMaxEnvelopeViolation() float64 {
	if x != nil {
		return x.CorrectionFactorOnMaxEnvelopeViolation
	}
	return 0
}

func (x *EMA_Parameters) GetValidDuringWarmup() bool {
	if x != nil {
		return x.ValidDuringWarmup
	}
	return false
}

// Inputs for the Arithmetic Combinator component.
type ArithmeticCombinator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left hand side of the arithmetic operation.
	Lhs *InPort `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Right hand side of the arithmetic operation.
	Rhs *InPort `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *ArithmeticCombinator_Ins) Reset() {
	*x = ArithmeticCombinator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator_Ins) ProtoMessage() {}

func (x *ArithmeticCombinator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator_Ins.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ArithmeticCombinator_Ins) GetLhs() *InPort {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *ArithmeticCombinator_Ins) GetRhs() *InPort {
	if x != nil {
		return x.Rhs
	}
	return nil
}

// Outputs for the Arithmetic Combinator component.
type ArithmeticCombinator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of arithmetic operation.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ArithmeticCombinator_Outs) Reset() {
	*x = ArithmeticCombinator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator_Outs) ProtoMessage() {}

func (x *ArithmeticCombinator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator_Outs.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{13, 1}
}

func (x *ArithmeticCombinator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Decider component.
type Decider_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left hand side input signal for the comparison operation.
	Lhs *InPort `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Right hand side input signal for the comparison operation.
	Rhs *InPort `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *Decider_Ins) Reset() {
	*x = Decider_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider_Ins) ProtoMessage() {}

func (x *Decider_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider_Ins.ProtoReflect.Descriptor instead.
func (*Decider_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Decider_Ins) GetLhs() *InPort {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *Decider_Ins) GetRhs() *InPort {
	if x != nil {
		return x.Rhs
	}
	return nil
}

// Outputs for the Decider component.
type Decider_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selected signal (1.0 or 0.0).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Decider_Outs) Reset() {
	*x = Decider_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider_Outs) ProtoMessage() {}

func (x *Decider_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider_Outs.ProtoReflect.Descriptor instead.
func (*Decider_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14, 1}
}

func (x *Decider_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Switcher component.
type Switcher_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output signal when switch is valid and not 0.0.
	OnTrue *InPort `protobuf:"bytes,1,opt,name=on_true,json=onTrue,proto3" json:"on_true,omitempty"`
	// Output signal when switch is invalid or 0.0.
	OnFalse *InPort `protobuf:"bytes,2,opt,name=on_false,json=onFalse,proto3" json:"on_false,omitempty"`
	// Decides whether to return on_true or on_false.
	Switch *InPort `protobuf:"bytes,3,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (x *Switcher_Ins) Reset() {
	*x = Switcher_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher_Ins) ProtoMessage() {}

func (x *Switcher_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher_Ins.ProtoReflect.Descriptor instead.
func (*Switcher_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Switcher_Ins) GetOnTrue() *InPort {
	if x != nil {
		return x.OnTrue
	}
	return nil
}

func (x *Switcher_Ins) GetOnFalse() *InPort {
	if x != nil {
		return x.OnFalse
	}
	return nil
}

func (x *Switcher_Ins) GetSwitch() *InPort {
	if x != nil {
		return x.Switch
	}
	return nil
}

// Outputs for the Switcher component.
type Switcher_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selected signal (on_true or on_false).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Switcher_Outs) Reset() {
	*x = Switcher_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher_Outs) ProtoMessage() {}

func (x *Switcher_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher_Outs.ProtoReflect.Descriptor instead.
func (*Switcher_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{15, 1}
}

func (x *Switcher_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

type RateLimiter_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time after which the limit for a given label value will be reset.
	LimitResetInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=limit_reset_interval,json=limitResetInterval,proto3" json:"limit_reset_interval,omitempty" default:"60s"` // @gotags: default:"60s"
	// Specifies which label the ratelimiter should be keyed by.
	//
	// Rate limiting is done independently for each value of the
	// [label](/concepts/integrations/flow-control/flow-label.md) with given key.
	// Eg., to give each user a separate limit, assuming you have a _user_ flow
	// label set up, set `label_key: "user"`.
	LabelKey string `protobuf:"bytes,2,opt,name=label_key,json=labelKey,proto3" json:"label_key,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration of lazy-syncing behaviour of ratelimiter
	LazySync *RateLimiter_Parameters_LazySync `protobuf:"bytes,3,opt,name=lazy_sync,json=lazySync,proto3" json:"lazy_sync,omitempty"`
}

func (x *RateLimiter_Parameters) Reset() {
	*x = RateLimiter_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_Parameters) ProtoMessage() {}

func (x *RateLimiter_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_Parameters.ProtoReflect.Descriptor instead.
func (*RateLimiter_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 0}
}

func (x *RateLimiter_Parameters) GetLimitResetInterval() *durationpb.Duration {
	if x != nil {
		return x.LimitResetInterval
	}
	return nil
}

func (x *RateLimiter_Parameters) GetLabelKey() string {
	if x != nil {
		return x.LabelKey
	}
	return ""
}

func (x *RateLimiter_Parameters) GetLazySync() *RateLimiter_Parameters_LazySync {
	if x != nil {
		return x.LazySync
	}
	return nil
}

type RateLimiter_Override struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of the label for which the override should be applied.
	LabelValue string `protobuf:"bytes,1,opt,name=label_value,json=labelValue,proto3" json:"label_value,omitempty" validate:"required"` // @gotags: validate:"required"
	// Amount by which the _in\_ports.limit_ should be multiplied for this label value.
	LimitScaleFactor float64 `protobuf:"fixed64,2,opt,name=limit_scale_factor,json=limitScaleFactor,proto3" json:"limit_scale_factor,omitempty" default:"1.0"` // @gotags: default:"1.0"
}

func (x *RateLimiter_Override) Reset() {
	*x = RateLimiter_Override{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_Override) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_Override) ProtoMessage() {}

func (x *RateLimiter_Override) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_Override.ProtoReflect.Descriptor instead.
func (*RateLimiter_Override) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 1}
}

func (x *RateLimiter_Override) GetLabelValue() string {
	if x != nil {
		return x.LabelValue
	}
	return ""
}

func (x *RateLimiter_Override) GetLimitScaleFactor() float64 {
	if x != nil {
		return x.LimitScaleFactor
	}
	return 0
}

// Dynamic Configuration for the rate limiter
type RateLimiter_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to specify different limits for particular label values.
	Overrides []*RateLimiter_Override `protobuf:"bytes,1,rep,name=overrides,proto3" json:"overrides,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *RateLimiter_DynamicConfig) Reset() {
	*x = RateLimiter_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_DynamicConfig) ProtoMessage() {}

func (x *RateLimiter_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_DynamicConfig.ProtoReflect.Descriptor instead.
func (*RateLimiter_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 2}
}

func (x *RateLimiter_DynamicConfig) GetOverrides() []*RateLimiter_Override {
	if x != nil {
		return x.Overrides
	}
	return nil
}

// Inputs for the RateLimiter component
type RateLimiter_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of flows allowed per _limit\_reset\_interval_ per each label.
	// Negative values disable the ratelimiter.
	//
	// :::tip
	// Negative limit can be useful to _conditionally_ enable the ratelimiter
	// under certain circumstances. [Decider](#v1-decider) might be helpful.
	// :::
	Limit *InPort `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *RateLimiter_Ins) Reset() {
	*x = RateLimiter_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_Ins) ProtoMessage() {}

func (x *RateLimiter_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_Ins.ProtoReflect.Descriptor instead.
func (*RateLimiter_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 3}
}

func (x *RateLimiter_Ins) GetLimit() *InPort {
	if x != nil {
		return x.Limit
	}
	return nil
}

type RateLimiter_Parameters_LazySync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enables lazy sync
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" default:"false"` // @gotags: default:"false"
	// Number of times to lazy sync within the _limit\_reset\_interval_.
	NumSync uint32 `protobuf:"varint,2,opt,name=num_sync,json=numSync,proto3" json:"num_sync,omitempty" default:"5" validate:"gt=0"` // @gotags: default:"5" validate:"gt=0"
}

func (x *RateLimiter_Parameters_LazySync) Reset() {
	*x = RateLimiter_Parameters_LazySync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_Parameters_LazySync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_Parameters_LazySync) ProtoMessage() {}

func (x *RateLimiter_Parameters_LazySync) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_Parameters_LazySync.ProtoReflect.Descriptor instead.
func (*RateLimiter_Parameters_LazySync) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 0, 0}
}

func (x *RateLimiter_Parameters_LazySync) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RateLimiter_Parameters_LazySync) GetNumSync() uint32 {
	if x != nil {
		return x.NumSync
	}
	return 0
}

// Workload defines a class of requests that preferably have similar properties such as response latency or desired priority.
type Scheduler_Workload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameters associated with flows matching the label matcher.
	Parameters *Scheduler_Workload_Parameters `protobuf:"bytes,1,opt,name=parameters,proto3" json:"parameters,omitempty" validate:"required"` // @gotags: validate:"required"
	// Label Matcher to select a Workload based on
	// [flow labels](/concepts/integrations/flow-control/flow-label.md).
	LabelMatcher *LabelMatcher `protobuf:"bytes,2,opt,name=label_matcher,json=labelMatcher,proto3" json:"label_matcher,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Scheduler_Workload) Reset() {
	*x = Scheduler_Workload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_Workload) ProtoMessage() {}

func (x *Scheduler_Workload) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_Workload.ProtoReflect.Descriptor instead.
func (*Scheduler_Workload) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Scheduler_Workload) GetParameters() *Scheduler_Workload_Parameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Scheduler_Workload) GetLabelMatcher() *LabelMatcher {
	if x != nil {
		return x.LabelMatcher
	}
	return nil
}

// Scheduler parameters
type Scheduler_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of workloads to be used in scheduler.
	//
	// Categorizing [flows](/concepts/integrations/flow-control/flow-control.md#flow) into workloads
	// allows for load-shedding to be "smarter" than just "randomly deny 50% of
	// requests". There are two aspects of this "smartness":
	// * Scheduler can more precisely calculate concurrency if it understands
	//   that flows belonging to different classes have different weights (eg.
	//   inserts vs lookups).
	// * Setting different priorities to different workloads lets the scheduler
	//   avoid dropping important traffic during overload.
	//
	// Each workload in this list specifies also a matcher that's used to
	// determine which flow will be categorized into which workload.
	// In case of multiple matching workloads, the first matching one will be used.
	// If none of workloads match, `default_workload` will be used.
	//
	// :::info
	// See also [workload definition in the concepts
	// section](/concepts/integrations/flow-control/components/concurrency-limiter.md#workload).
	// :::
	Workloads []*Scheduler_Workload `protobuf:"bytes,1,rep,name=workloads,proto3" json:"workloads,omitempty" validate:"dive"` // @gotags: validate:"dive"
	// Parameters to be used if none of workloads specified in `workloads` match.
	DefaultWorkloadParameters *Scheduler_Workload_Parameters `protobuf:"bytes,2,opt,name=default_workload_parameters,json=defaultWorkloadParameters,proto3" json:"default_workload_parameters,omitempty" validate:"required"` // @gotags: validate:"required"
	// Automatically estimate the size of a request in each workload, based on
	// historical latency. Each workload's `tokens` will be set to average
	// latency of flows in that workload during last few seconds (exact duration
	// of this average can change).
	AutoTokens bool `protobuf:"varint,3,opt,name=auto_tokens,json=autoTokens,proto3" json:"auto_tokens,omitempty" default:"true"` // @gotags: default:"true"
	// Timeout as a factor of tokens for a flow in a workload
	//
	// If a flow is not able to get tokens within `timeout_factor` * `tokens` of duration,
	// it will be rejected.
	//
	// This value impacts the prioritization and fairness because the larger the timeout the higher the chance a request has to get scheduled.
	TimeoutFactor float64 `protobuf:"fixed64,4,opt,name=timeout_factor,json=timeoutFactor,proto3" json:"timeout_factor,omitempty" validate:"gte=0.0" default:"0.5"` // @gotags: validate:"gte=0.0" default:"0.5"
	// Max Timeout is the value with which the flow timeout calculated by `timeout_factor` is capped
	//
	// :::caution
	// This timeout needs to be strictly less than the timeout set on the
	// client for the whole GRPC call:
	// * in case of envoy, timeout set on `grpc_service` used in `ext_authz` filter,
	// * in case of libraries, timeout configured... TODO.
	//
	// We're using fail-open logic in integrations, so if the GRPC timeout
	// fires first, the flow will end up being unconditionally allowed while
	// it're still waiting on the scheduler.
	//
	// To avoid such cases, the end-to-end GRPC timeout should also contain
	// some headroom for constant overhead like serialization, etc. Default
	// value for GRPC timeouts is 500ms, giving 50ms of headeroom, so when
	// tweaking this timeout, make sure to adjust the GRPC timeout accordingly.
	// :::
	MaxTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=max_timeout,json=maxTimeout,proto3" json:"max_timeout,omitempty" default:"0.49s"` // @gotags: default:"0.49s"
}

func (x *Scheduler_Parameters) Reset() {
	*x = Scheduler_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_Parameters) ProtoMessage() {}

func (x *Scheduler_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_Parameters.ProtoReflect.Descriptor instead.
func (*Scheduler_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18, 1}
}

func (x *Scheduler_Parameters) GetWorkloads() []*Scheduler_Workload {
	if x != nil {
		return x.Workloads
	}
	return nil
}

func (x *Scheduler_Parameters) GetDefaultWorkloadParameters() *Scheduler_Workload_Parameters {
	if x != nil {
		return x.DefaultWorkloadParameters
	}
	return nil
}

func (x *Scheduler_Parameters) GetAutoTokens() bool {
	if x != nil {
		return x.AutoTokens
	}
	return false
}

func (x *Scheduler_Parameters) GetTimeoutFactor() float64 {
	if x != nil {
		return x.TimeoutFactor
	}
	return 0
}

func (x *Scheduler_Parameters) GetMaxTimeout() *durationpb.Duration {
	if x != nil {
		return x.MaxTimeout
	}
	return nil
}

// Output for the Scheduler component.
type Scheduler_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accepted concurrency is actual concurrency on a control point that this
	// scheduler is applied on.
	//
	// :::info
	// Concurrency is a unitless number describing mean number of
	// [flows](/concepts/integrations/flow-control/flow-control.md#flow) being
	// concurrently processed by the system (system = control point).
	// Concurrency is calculated as _work_ done per unit of time (so
	// work-seconds per world-seconds). Work-seconds are computed based on
	// token-weights of of flows (which are either estimated via `auto_tokens`
	// or specified by `Workload.tokens`).
	// :::
	//
	// Value of this signal is aggregated from all the relevant schedulers.
	AcceptedConcurrency *OutPort `protobuf:"bytes,1,opt,name=accepted_concurrency,json=acceptedConcurrency,proto3" json:"accepted_concurrency,omitempty"`
	// Incoming concurrency is concurrency that'd be needed to accept all the
	// flows entering the scheduler.
	//
	// This is computed in the same way as `accepted_concurrency`, but summing
	// up work-seconds from all the flows entering scheduler, including
	// rejected ones.
	IncomingConcurrency *OutPort `protobuf:"bytes,2,opt,name=incoming_concurrency,json=incomingConcurrency,proto3" json:"incoming_concurrency,omitempty"`
}

func (x *Scheduler_Outs) Reset() {
	*x = Scheduler_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_Outs) ProtoMessage() {}

func (x *Scheduler_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_Outs.ProtoReflect.Descriptor instead.
func (*Scheduler_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18, 2}
}

func (x *Scheduler_Outs) GetAcceptedConcurrency() *OutPort {
	if x != nil {
		return x.AcceptedConcurrency
	}
	return nil
}

func (x *Scheduler_Outs) GetIncomingConcurrency() *OutPort {
	if x != nil {
		return x.IncomingConcurrency
	}
	return nil
}

// Parameters defines parameters such as priority, tokens and fairness key that are applicable to flows within a workload.
type Scheduler_Workload_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes priority level of the requests within the workload.
	// Priority level ranges from 0 to 255.
	// Higher numbers means higher priority level.
	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" validate:"gte=0,lte=255"` // @gotags: validate:"gte=0,lte=255"
	// Tokens determines the cost of admitting a single request the workload, which is typically defined as milliseconds of response latency.
	// This override is applicable only if `auto_tokens` is set to false.
	Tokens uint64 `protobuf:"varint,2,opt,name=tokens,proto3" json:"tokens,omitempty" default:"1"` // @gotags: default:"1"
	// Fairness key is a label key that can be used to provide fairness within a workload.
	// Any [flow label](/concepts/integrations/flow-control/flow-label.md) can be used here. Eg. if
	// you have a classifier that sets `user` flow label, you might want to set
	// `fairness_key = "user"`.
	FairnessKey string `protobuf:"bytes,3,opt,name=fairness_key,json=fairnessKey,proto3" json:"fairness_key,omitempty"`
}

func (x *Scheduler_Workload_Parameters) Reset() {
	*x = Scheduler_Workload_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_Workload_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_Workload_Parameters) ProtoMessage() {}

func (x *Scheduler_Workload_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_Workload_Parameters.ProtoReflect.Descriptor instead.
func (*Scheduler_Workload_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18, 0, 0}
}

func (x *Scheduler_Workload_Parameters) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Scheduler_Workload_Parameters) GetTokens() uint64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *Scheduler_Workload_Parameters) GetFairnessKey() string {
	if x != nil {
		return x.FairnessKey
	}
	return ""
}

// Dynamic Configuration for LoadActuator
type LoadActuator_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Decides whether to run the load actuator in dry-run mode. Dry run mode ensures that no traffic gets dropped by this load actuator.
	// Useful for observing the behavior of Load Actuator without disrupting any real traffic.
	DryRun bool `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
}

func (x *LoadActuator_DynamicConfig) Reset() {
	*x = LoadActuator_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadActuator_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadActuator_DynamicConfig) ProtoMessage() {}

func (x *LoadActuator_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadActuator_DynamicConfig.ProtoReflect.Descriptor instead.
func (*LoadActuator_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{19, 0}
}

func (x *LoadActuator_DynamicConfig) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

// Input for the Load Actuator component.
type LoadActuator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Load multiplier is ratio of [incoming
	// concurrency](#v1-scheduler-outs) that needs to be accepted.
	LoadMultiplier *InPort `protobuf:"bytes,1,opt,name=load_multiplier,json=loadMultiplier,proto3" json:"load_multiplier,omitempty"`
}

func (x *LoadActuator_Ins) Reset() {
	*x = LoadActuator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadActuator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadActuator_Ins) ProtoMessage() {}

func (x *LoadActuator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadActuator_Ins.ProtoReflect.Descriptor instead.
func (*LoadActuator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{19, 1}
}

func (x *LoadActuator_Ins) GetLoadMultiplier() *InPort {
	if x != nil {
		return x.LoadMultiplier
	}
	return nil
}

// Output for the PromQL component.
type PromQL_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The result of the Prometheus query as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PromQL_Outs) Reset() {
	*x = PromQL_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromQL_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromQL_Outs) ProtoMessage() {}

func (x *PromQL_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromQL_Outs.ProtoReflect.Descriptor instead.
func (*PromQL_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{20, 0}
}

func (x *PromQL_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

type Variable_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConstantSignal *ConstantSignal `protobuf:"bytes,1,opt,name=constant_signal,json=constantSignal,proto3" json:"constant_signal,omitempty"`
}

func (x *Variable_DynamicConfig) Reset() {
	*x = Variable_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_DynamicConfig) ProtoMessage() {}

func (x *Variable_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_DynamicConfig.ProtoReflect.Descriptor instead.
func (*Variable_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{22, 0}
}

func (x *Variable_DynamicConfig) GetConstantSignal() *ConstantSignal {
	if x != nil {
		return x.ConstantSignal
	}
	return nil
}

// Outputs for the Variable component.
type Variable_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value is emitted to the output port.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Variable_Outs) Reset() {
	*x = Variable_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable_Outs) ProtoMessage() {}

func (x *Variable_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable_Outs.ProtoReflect.Descriptor instead.
func (*Variable_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{22, 1}
}

func (x *Variable_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Sqrt component.
type Sqrt_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Sqrt_Ins) Reset() {
	*x = Sqrt_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt_Ins) ProtoMessage() {}

func (x *Sqrt_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt_Ins.ProtoReflect.Descriptor instead.
func (*Sqrt_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Sqrt_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the Sqrt component.
type Sqrt_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Sqrt_Outs) Reset() {
	*x = Sqrt_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt_Outs) ProtoMessage() {}

func (x *Sqrt_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt_Outs.ProtoReflect.Descriptor instead.
func (*Sqrt_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{23, 1}
}

func (x *Sqrt_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Parameters for the Extrapolator component.
type Extrapolator_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum time interval to repeat the last valid value of input signal.
	MaxExtrapolationInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=max_extrapolation_interval,json=maxExtrapolationInterval,proto3" json:"max_extrapolation_interval,omitempty" default:"10s"` // @gotags: default:"10s"
}

func (x *Extrapolator_Parameters) Reset() {
	*x = Extrapolator_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Parameters) ProtoMessage() {}

func (x *Extrapolator_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Parameters.ProtoReflect.Descriptor instead.
func (*Extrapolator_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{24, 0}
}

func (x *Extrapolator_Parameters) GetMaxExtrapolationInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxExtrapolationInterval
	}
	return nil
}

// Inputs for the Extrapolator component.
type Extrapolator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal for the Extrapolator component.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Extrapolator_Ins) Reset() {
	*x = Extrapolator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Ins) ProtoMessage() {}

func (x *Extrapolator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Ins.ProtoReflect.Descriptor instead.
func (*Extrapolator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{24, 1}
}

func (x *Extrapolator_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the Extrapolator component.
type Extrapolator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extrapolated signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Extrapolator_Outs) Reset() {
	*x = Extrapolator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Outs) ProtoMessage() {}

func (x *Extrapolator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Outs.ProtoReflect.Descriptor instead.
func (*Extrapolator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{24, 2}
}

func (x *Extrapolator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Max component.
type Max_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Max_Ins) Reset() {
	*x = Max_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max_Ins) ProtoMessage() {}

func (x *Max_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max_Ins.ProtoReflect.Descriptor instead.
func (*Max_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{25, 0}
}

func (x *Max_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output for the Max component.
type Max_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal with maximum value as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Max_Outs) Reset() {
	*x = Max_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max_Outs) ProtoMessage() {}

func (x *Max_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max_Outs.ProtoReflect.Descriptor instead.
func (*Max_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{25, 1}
}

func (x *Max_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Min component.
type Min_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Min_Ins) Reset() {
	*x = Min_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min_Ins) ProtoMessage() {}

func (x *Min_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min_Ins.ProtoReflect.Descriptor instead.
func (*Min_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{26, 0}
}

func (x *Min_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output ports for the Min component.
type Min_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal with minimum value as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Min_Outs) Reset() {
	*x = Min_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min_Outs) ProtoMessage() {}

func (x *Min_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min_Outs.ProtoReflect.Descriptor instead.
func (*Min_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{26, 1}
}

func (x *Min_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the And component.
type And_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *And_Ins) Reset() {
	*x = And_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And_Ins) ProtoMessage() {}

func (x *And_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And_Ins.ProtoReflect.Descriptor instead.
func (*And_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{27, 0}
}

func (x *And_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output ports for the And component.
type And_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of logical AND of all the input signals.
	//
	// Will always be 0 (false), 1 (true) or invalid (unknown).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *And_Outs) Reset() {
	*x = And_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And_Outs) ProtoMessage() {}

func (x *And_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And_Outs.ProtoReflect.Descriptor instead.
func (*And_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{27, 1}
}

func (x *And_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Or component.
type Or_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Or_Ins) Reset() {
	*x = Or_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or_Ins) ProtoMessage() {}

func (x *Or_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or_Ins.ProtoReflect.Descriptor instead.
func (*Or_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{28, 0}
}

func (x *Or_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output ports for the Or component.
type Or_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of logical OR of all the input signals.
	//
	// Will always be 0 (false), 1 (true) or invalid (unknown).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Or_Outs) Reset() {
	*x = Or_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or_Outs) ProtoMessage() {}

func (x *Or_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or_Outs.ProtoReflect.Descriptor instead.
func (*Or_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{28, 1}
}

func (x *Or_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Inverter component.
type Inverter_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal to be negated.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Inverter_Ins) Reset() {
	*x = Inverter_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inverter_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inverter_Ins) ProtoMessage() {}

func (x *Inverter_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inverter_Ins.ProtoReflect.Descriptor instead.
func (*Inverter_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{29, 0}
}

func (x *Inverter_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Output ports for the Inverter component.
type Inverter_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logical negation of the input signal.
	//
	// Will always be 0 (false), 1 (true) or invalid (unknown).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Inverter_Outs) Reset() {
	*x = Inverter_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inverter_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inverter_Outs) ProtoMessage() {}

func (x *Inverter_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inverter_Outs.ProtoReflect.Descriptor instead.
func (*Inverter_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{29, 1}
}

func (x *Inverter_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the FirstValid component.
type FirstValid_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *FirstValid_Ins) Reset() {
	*x = FirstValid_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid_Ins) ProtoMessage() {}

func (x *FirstValid_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid_Ins.ProtoReflect.Descriptor instead.
func (*FirstValid_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{30, 0}
}

func (x *FirstValid_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Outputs for the FirstValid component.
type FirstValid_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First valid input signal as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *FirstValid_Outs) Reset() {
	*x = FirstValid_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid_Outs) ProtoMessage() {}

func (x *FirstValid_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid_Outs.ProtoReflect.Descriptor instead.
func (*FirstValid_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{30, 1}
}

func (x *FirstValid_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Alerter Parameters is a common config for separate alerter components and alerters embedded in other components.
type Alerter_Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the alert.
	AlertName string `protobuf:"bytes,1,opt,name=alert_name,json=alertName,proto3" json:"alert_name,omitempty" validate:"required"` // @gotags: validate:"required"
	// Severity of the alert, one of 'info', 'warn' or 'crit'.
	Severity string `protobuf:"bytes,2,opt,name=severity,proto3" json:"severity,omitempty" default:"info" validate:"oneof=info warn crit"` // @gotags: default:"info" validate:"oneof=info warn crit"
	// Duration of alert resolver.
	ResolveTimeout *durationpb.Duration `protobuf:"bytes,3,opt,name=resolve_timeout,json=resolveTimeout,proto3" json:"resolve_timeout,omitempty" default:"300s"` // @gotags: default:"300s"
	// A list of alert channel strings.
	AlertChannels []string `protobuf:"bytes,4,rep,name=alert_channels,json=alertChannels,proto3" json:"alert_channels,omitempty"`
}

func (x *Alerter_Parameters) Reset() {
	*x = Alerter_Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerter_Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerter_Parameters) ProtoMessage() {}

func (x *Alerter_Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerter_Parameters.ProtoReflect.Descriptor instead.
func (*Alerter_Parameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{31, 0}
}

func (x *Alerter_Parameters) GetAlertName() string {
	if x != nil {
		return x.AlertName
	}
	return ""
}

func (x *Alerter_Parameters) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *Alerter_Parameters) GetResolveTimeout() *durationpb.Duration {
	if x != nil {
		return x.ResolveTimeout
	}
	return nil
}

func (x *Alerter_Parameters) GetAlertChannels() []string {
	if x != nil {
		return x.AlertChannels
	}
	return nil
}

// Inputs for the Alerter component.
type Alerter_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal which Alerter is monitoring. If the signal greater than 0, Alerter generates an alert.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *Alerter_Ins) Reset() {
	*x = Alerter_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alerter_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alerter_Ins) ProtoMessage() {}

func (x *Alerter_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alerter_Ins.ProtoReflect.Descriptor instead.
func (*Alerter_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{31, 1}
}

func (x *Alerter_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

// Inputs for the Integrator component.
type Integrator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The input signal.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Resets the integrator output to zero when reset signal is valid and non-zero.
	Reset_ *InPort `protobuf:"bytes,2,opt,name=reset,proto3" json:"reset,omitempty"`
	// The minimum output when reset is not set.
	Min *InPort `protobuf:"bytes,3,opt,name=min,proto3" json:"min,omitempty"`
	//The maximum output when reset is not set.
	Max *InPort `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *Integrator_Ins) Reset() {
	*x = Integrator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrator_Ins) ProtoMessage() {}

func (x *Integrator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrator_Ins.ProtoReflect.Descriptor instead.
func (*Integrator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{32, 0}
}

func (x *Integrator_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *Integrator_Ins) GetReset_() *InPort {
	if x != nil {
		return x.Reset_
	}
	return nil
}

func (x *Integrator_Ins) GetMin() *InPort {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *Integrator_Ins) GetMax() *InPort {
	if x != nil {
		return x.Max
	}
	return nil
}

// Outputs for the Integrator component.
type Integrator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Integrator_Outs) Reset() {
	*x = Integrator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integrator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integrator_Outs) ProtoMessage() {}

func (x *Integrator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integrator_Outs.ProtoReflect.Descriptor instead.
func (*Integrator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{32, 1}
}

func (x *Integrator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Differentiator component.
type Differentiator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Differentiator_Ins) Reset() {
	*x = Differentiator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Differentiator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Differentiator_Ins) ProtoMessage() {}

func (x *Differentiator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Differentiator_Ins.ProtoReflect.Descriptor instead.
func (*Differentiator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{33, 0}
}

func (x *Differentiator_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the Differentiator component.
type Differentiator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Differentiator_Outs) Reset() {
	*x = Differentiator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Differentiator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Differentiator_Outs) ProtoMessage() {}

func (x *Differentiator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Differentiator_Outs.ProtoReflect.Descriptor instead.
func (*Differentiator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{33, 1}
}

func (x *Differentiator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

type HorizontalPodScaler_ScaleReporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPorts *HorizontalPodScaler_ScaleReporter_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *HorizontalPodScaler_ScaleReporter) Reset() {
	*x = HorizontalPodScaler_ScaleReporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodScaler_ScaleReporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodScaler_ScaleReporter) ProtoMessage() {}

func (x *HorizontalPodScaler_ScaleReporter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodScaler_ScaleReporter.ProtoReflect.Descriptor instead.
func (*HorizontalPodScaler_ScaleReporter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{34, 0}
}

func (x *HorizontalPodScaler_ScaleReporter) GetOutPorts() *HorizontalPodScaler_ScaleReporter_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

type HorizontalPodScaler_ScaleActuator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts *HorizontalPodScaler_ScaleActuator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Configuration key for DynamicConfig
	DynamicConfigKey string `protobuf:"bytes,2,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Default configuration.
	DefaultConfig *HorizontalPodScaler_ScaleActuator_DynamicConfig `protobuf:"bytes,3,opt,name=default_config,json=defaultConfig,proto3" json:"default_config,omitempty"`
}

func (x *HorizontalPodScaler_ScaleActuator) Reset() {
	*x = HorizontalPodScaler_ScaleActuator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodScaler_ScaleActuator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodScaler_ScaleActuator) ProtoMessage() {}

func (x *HorizontalPodScaler_ScaleActuator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodScaler_ScaleActuator.ProtoReflect.Descriptor instead.
func (*HorizontalPodScaler_ScaleActuator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{34, 1}
}

func (x *HorizontalPodScaler_ScaleActuator) GetInPorts() *HorizontalPodScaler_ScaleActuator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *HorizontalPodScaler_ScaleActuator) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *HorizontalPodScaler_ScaleActuator) GetDefaultConfig() *HorizontalPodScaler_ScaleActuator_DynamicConfig {
	if x != nil {
		return x.DefaultConfig
	}
	return nil
}

// Outputs for the HorizontalPodScaler component.
type HorizontalPodScaler_ScaleReporter_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActualReplicas     *OutPort `protobuf:"bytes,1,opt,name=actual_replicas,json=actualReplicas,proto3" json:"actual_replicas,omitempty"`
	ConfiguredReplicas *OutPort `protobuf:"bytes,2,opt,name=configured_replicas,json=configuredReplicas,proto3" json:"configured_replicas,omitempty"`
}

func (x *HorizontalPodScaler_ScaleReporter_Outs) Reset() {
	*x = HorizontalPodScaler_ScaleReporter_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodScaler_ScaleReporter_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodScaler_ScaleReporter_Outs) ProtoMessage() {}

func (x *HorizontalPodScaler_ScaleReporter_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodScaler_ScaleReporter_Outs.ProtoReflect.Descriptor instead.
func (*HorizontalPodScaler_ScaleReporter_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{34, 0, 0}
}

func (x *HorizontalPodScaler_ScaleReporter_Outs) GetActualReplicas() *OutPort {
	if x != nil {
		return x.ActualReplicas
	}
	return nil
}

func (x *HorizontalPodScaler_ScaleReporter_Outs) GetConfiguredReplicas() *OutPort {
	if x != nil {
		return x.ConfiguredReplicas
	}
	return nil
}

// Dynamic Configuration for ScaleActuator
type HorizontalPodScaler_ScaleActuator_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Decides whether to run the pod scaler in dry-run mode. Dry run mode ensures that no scaling is invoked by this pod scaler.
	// Useful for observing the behavior of Scaler without disrupting any real traffic.
	DryRun bool `protobuf:"varint,1,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *HorizontalPodScaler_ScaleActuator_DynamicConfig) Reset() {
	*x = HorizontalPodScaler_ScaleActuator_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodScaler_ScaleActuator_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodScaler_ScaleActuator_DynamicConfig) ProtoMessage() {}

func (x *HorizontalPodScaler_ScaleActuator_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodScaler_ScaleActuator_DynamicConfig.ProtoReflect.Descriptor instead.
func (*HorizontalPodScaler_ScaleActuator_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{34, 1, 0}
}

func (x *HorizontalPodScaler_ScaleActuator_DynamicConfig) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

// Inputs for the HorizontalPodScaler component.
type HorizontalPodScaler_ScaleActuator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DesiredReplicas *InPort `protobuf:"bytes,1,opt,name=desired_replicas,json=desiredReplicas,proto3" json:"desired_replicas,omitempty"`
}

func (x *HorizontalPodScaler_ScaleActuator_Ins) Reset() {
	*x = HorizontalPodScaler_ScaleActuator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HorizontalPodScaler_ScaleActuator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HorizontalPodScaler_ScaleActuator_Ins) ProtoMessage() {}

func (x *HorizontalPodScaler_ScaleActuator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HorizontalPodScaler_ScaleActuator_Ins.ProtoReflect.Descriptor instead.
func (*HorizontalPodScaler_ScaleActuator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{34, 1, 1}
}

func (x *HorizontalPodScaler_ScaleActuator_Ins) GetDesiredReplicas() *InPort {
	if x != nil {
		return x.DesiredReplicas
	}
	return nil
}

// Outputs for the PulseGenerator component.
type PulseGenerator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PulseGenerator_Outs) Reset() {
	*x = PulseGenerator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PulseGenerator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PulseGenerator_Outs) ProtoMessage() {}

func (x *PulseGenerator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PulseGenerator_Outs.ProtoReflect.Descriptor instead.
func (*PulseGenerator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{35, 0}
}

func (x *PulseGenerator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Holder component.
type Holder_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Holder_Ins) Reset() {
	*x = Holder_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder_Ins) ProtoMessage() {}

func (x *Holder_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder_Ins.ProtoReflect.Descriptor instead.
func (*Holder_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{36, 0}
}

func (x *Holder_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the Holder component.
type Holder_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Holder_Outs) Reset() {
	*x = Holder_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Holder_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Holder_Outs) ProtoMessage() {}

func (x *Holder_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Holder_Outs.ProtoReflect.Descriptor instead.
func (*Holder_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{36, 1}
}

func (x *Holder_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Outputs for the NestedSignalIngress component.
type NestedSignalIngress_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signal to be ingressed.
	Signal *OutPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *NestedSignalIngress_Outs) Reset() {
	*x = NestedSignalIngress_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedSignalIngress_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedSignalIngress_Outs) ProtoMessage() {}

func (x *NestedSignalIngress_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedSignalIngress_Outs.ProtoReflect.Descriptor instead.
func (*NestedSignalIngress_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{38, 0}
}

func (x *NestedSignalIngress_Outs) GetSignal() *OutPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

// Inputs for the NestedSignalEgress component.
type NestedSignalEgress_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signal to be egressed.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *NestedSignalEgress_Ins) Reset() {
	*x = NestedSignalEgress_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedSignalEgress_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedSignalEgress_Ins) ProtoMessage() {}

func (x *NestedSignalEgress_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedSignalEgress_Ins.ProtoReflect.Descriptor instead.
func (*NestedSignalEgress_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{39, 0}
}

func (x *NestedSignalEgress_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

// Inputs for the AIMDConcurrencyController component.
type AIMDConcurrencyController_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The signal to the controller.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// The setpoint to the controller.
	Setpoint *InPort `protobuf:"bytes,2,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
}

func (x *AIMDConcurrencyController_Ins) Reset() {
	*x = AIMDConcurrencyController_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIMDConcurrencyController_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIMDConcurrencyController_Ins) ProtoMessage() {}

func (x *AIMDConcurrencyController_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIMDConcurrencyController_Ins.ProtoReflect.Descriptor instead.
func (*AIMDConcurrencyController_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{40, 0}
}

func (x *AIMDConcurrencyController_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *AIMDConcurrencyController_Ins) GetSetpoint() *InPort {
	if x != nil {
		return x.Setpoint
	}
	return nil
}

// Outputs for the AIMDConcurrencyController component.
type AIMDConcurrencyController_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is overload is a boolean signal that indicates whether the service is overloaded based on the deviation of the signal from the setpoint taking into account some tolerance.
	IsOverload *OutPort `protobuf:"bytes,1,opt,name=is_overload,json=isOverload,proto3" json:"is_overload,omitempty"`
	// Load multiplier is the ratio of desired concurrency to the incoming concurrency.
	LoadMultiplier *OutPort `protobuf:"bytes,2,opt,name=load_multiplier,json=loadMultiplier,proto3" json:"load_multiplier,omitempty"`
}

func (x *AIMDConcurrencyController_Outs) Reset() {
	*x = AIMDConcurrencyController_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AIMDConcurrencyController_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIMDConcurrencyController_Outs) ProtoMessage() {}

func (x *AIMDConcurrencyController_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIMDConcurrencyController_Outs.ProtoReflect.Descriptor instead.
func (*AIMDConcurrencyController_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{40, 1}
}

func (x *AIMDConcurrencyController_Outs) GetIsOverload() *OutPort {
	if x != nil {
		return x.IsOverload
	}
	return nil
}

func (x *AIMDConcurrencyController_Outs) GetLoadMultiplier() *OutPort {
	if x != nil {
		return x.LoadMultiplier
	}
	return nil
}

var File_aperture_policy_language_v1_policy_proto protoreflect.FileDescriptor

var file_aperture_policy_language_v1_policy_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2c, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x1a, 0x60, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x3e, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x07, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12,
	0x44, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x07, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x12, 0x68, 0x0a, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x82, 0x03,
	0x16, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x06, 0x1a, 0x04, 0x30, 0x2e, 0x35, 0x73, 0x52, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x0b, 0x66, 0x6c, 0x75, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x46,
	0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x66, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x0f, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x0e, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x13, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x03, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x48, 0x00, 0x52,
	0x03, 0x65, 0x6d, 0x61, 0x12, 0x68, 0x0a, 0x15, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x14, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x73, 0x71,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73,
	0x71, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x78, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x69,
	0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x4a, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x07,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x49,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x64, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x64, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x56,
	0x0a, 0x0f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x66, 0x0a, 0x15, 0x6e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x13, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x53, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x3d, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x6d, 0x51, 0x4c, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c,
	0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0xc7, 0x02,
	0x0a, 0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4d, 0x0a,
	0x0c, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x13,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x12, 0x78, 0x0a, 0x1b, 0x61, 0x69, 0x6d, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x49, 0x4d, 0x44, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x19, 0x61, 0x69, 0x6d, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x15, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x13, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x42, 0x0b, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x49,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a, 0x07, 0x4f, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x09, 0x0a, 0x12, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x08,
	0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x09,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x7d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42,
	0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x64, 0x0a, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x1a, 0xcd, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x69,
	0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef,
	0xff, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x42,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d,
	0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xef, 0x7f, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x1a, 0x4a, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x39, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x15, 0x82, 0x03, 0x12,
	0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x02,
	0x20, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x82,
	0x03, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x65, 0x74, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x35, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x4e, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xdc, 0x08, 0x0a, 0x03, 0x45, 0x4d,
	0x41, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a,
	0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a,
	0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xd0, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x6d, 0x69,
	0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a,
	0xc6, 0x04, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x54,
	0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x35, 0x73, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x5a, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02,
	0x30, 0x73, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x12, 0x99, 0x01, 0x0a, 0x2b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e,
	0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x82, 0x03, 0x19, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x82, 0x03, 0x1a, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x09, 0x1a, 0x07, 0x67, 0x74, 0x65,
	0x3d, 0x31, 0x2e, 0x30, 0x52, 0x26, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a,
	0x2b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x42, 0x92, 0x41, 0x3f, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0x3f, 0x82, 0x03, 0x20, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x1a, 0x0d, 0x67, 0x74, 0x65, 0x3d, 0x30, 0x2c, 0x6c,
	0x74, 0x65, 0x3d, 0x31, 0x2e, 0x30, 0x52, 0x26, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48,
	0x0a, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77,
	0x61, 0x72, 0x6d, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x82, 0x03, 0x12, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x02, 0x20, 0x00, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x22, 0xd6, 0x03, 0x0a, 0x14, 0x41, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x50, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x5c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x82,
	0x03, 0x3a, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x1a, 0x27, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x61, 0x64, 0x64, 0x20, 0x73,
	0x75, 0x62, 0x20, 0x6d, 0x75, 0x6c, 0x20, 0x64, 0x69, 0x76, 0x20, 0x78, 0x6f, 0x72, 0x20, 0x6c,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x20, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x73, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x35, 0x0a,
	0x03, 0x6c, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x03, 0x6c, 0x68, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x72, 0x68, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f,
	0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0xc8, 0x04, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a,
	0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41,
	0x30, 0x82, 0x03, 0x2d, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x1a, 0x1a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x67, 0x74, 0x20,
	0x6c, 0x74, 0x20, 0x67, 0x74, 0x65, 0x20, 0x6c, 0x74, 0x65, 0x20, 0x65, 0x71, 0x20, 0x6e, 0x65,
	0x71, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x74,
	0x72, 0x75, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14,
	0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04,
	0x1a, 0x02, 0x30, 0x73, 0x52, 0x07, 0x74, 0x72, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x52, 0x0a,
	0x09, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x92, 0x41, 0x17,
	0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x04, 0x1a, 0x02, 0x30, 0x73, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x1a, 0x73, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12,
	0x35, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x03, 0x72, 0x68, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa2, 0x03, 0x0a,
	0x08, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x69, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x47, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xc0, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73,
	0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x65, 0x12, 0x3e,
	0x0a, 0x08, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x6f, 0x6e, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0x44, 0x0a, 0x04, 0x4f,
	0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x83, 0x0a, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x6a, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x71, 0x0a,
	0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x76, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03,
	0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xa8, 0x03, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x68, 0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x92,
	0x41, 0x18, 0x82, 0x03, 0x15, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x05, 0x1a, 0x03, 0x36, 0x30, 0x73, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3e,
	0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x59,
	0x0a, 0x09, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x08, 0x6c, 0x61, 0x7a, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x1a, 0x94, 0x01, 0x0a, 0x08, 0x4c, 0x61,
	0x7a, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x15, 0x82, 0x03, 0x12, 0x0a,
	0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x02, 0x20,
	0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x39, 0x92, 0x41,
	0x36, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x82, 0x03, 0x17,
	0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x06, 0x1a, 0x04, 0x67, 0x74, 0x3d, 0x30, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x53, 0x79, 0x6e, 0x63,
	0x1a, 0x9d, 0x01, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x42, 0x0a,
	0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x4d, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x10,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0x60, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4f, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x1a, 0x63, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x21, 0x92,
	0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd8, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x71,
	0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x67, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0d, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c,
	0x6c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x14, 0x0a, 0x12,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x22, 0xb1, 0x0a, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x12, 0x48, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0xab, 0x03, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x7d, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x21, 0x92,
	0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x71, 0x0a, 0x0d,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x1a,
	0xac, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x26, 0x92, 0x41, 0x23, 0x82, 0x03, 0x20, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x1a, 0x0d, 0x67, 0x74, 0x65, 0x3d, 0x30,
	0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x32, 0x35, 0x35, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0x3f, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x1a, 0xfa,
	0x03, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x9d, 0x01, 0x0a,
	0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x82, 0x03, 0x16, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x1a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67,
	0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xe0, 0x3f, 0x82, 0x03, 0x1a, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x09, 0x1a, 0x07, 0x67, 0x74, 0x65, 0x3d, 0x30, 0x2e,
	0x30, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x59, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x82, 0x03, 0x17, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x07, 0x1a, 0x05, 0x30, 0x2e, 0x34, 0x39, 0x73, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xb8, 0x01, 0x0a, 0x04,
	0x4f, 0x75, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x57, 0x0a,
	0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xc5, 0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x5e, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5e, 0x0a, 0x12, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x28, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x1a, 0x53, 0x0a, 0x03, 0x49, 0x6e, 0x73,
	0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0xa1,
	0x02, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x4c, 0x12, 0x45, 0x0a, 0x09, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x51,
	0x4c, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x92, 0x41, 0x18,
	0x82, 0x03, 0x15, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x05, 0x1a, 0x03, 0x31, 0x30, 0x73, 0x52, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x44, 0x0a, 0x04,
	0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41,
	0x29, 0x82, 0x03, 0x26, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x1a, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x4e, 0x61, 0x4e,
	0x20, 0x2b, 0x49, 0x6e, 0x66, 0x20, 0x2d, 0x49, 0x6e, 0x66, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x08,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x5a, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x65, 0x0a, 0x0d, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xcc, 0x02, 0x0a, 0x04, 0x53, 0x71, 0x72,
	0x74, 0x12, 0x40, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x72, 0x74, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x72, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08,
	0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a,
	0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x1a,
	0x40, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xab, 0x04, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x77, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03,
	0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x82, 0x01, 0x0a, 0x0a, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x74, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x82, 0x03, 0x15, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x05, 0x1a, 0x03,
	0x31, 0x30, 0x73, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x40, 0x0a,
	0x03, 0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x3f, 0x0a,
	0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x78, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x78, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x94, 0x02, 0x0a,
	0x03, 0x4d, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73,
	0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a,
	0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x03, 0x41, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x08, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x64, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x02, 0x4f,
	0x72, 0x12, 0x3e, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x41, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa1,
	0x02, 0x0a, 0x08, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x47, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73,
	0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x40, 0x0a, 0x03, 0x49, 0x6e,
	0x73, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x44, 0x0a, 0x04,
	0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x49, 0x6e, 0x73,
	0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc4,
	0x04, 0x0a, 0x07, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x72, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d,
	0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0xbb, 0x02, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0x92, 0x41, 0x43, 0x82, 0x03, 0x16, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x1a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x82, 0x03, 0x27, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x1a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d,
	0x69, 0x6e, 0x66, 0x6f, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x20, 0x63, 0x72, 0x69, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x60, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x82, 0x03, 0x16, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x1a, 0x04, 0x33, 0x30, 0x30, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xd1, 0x03, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x09,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xe9, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12,
	0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x82, 0x03, 0x0a, 0x0e, 0x44, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x08,
	0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52,
	0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x35, 0x73, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x1a, 0x40, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xce,
	0x08, 0x0a, 0x13, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x96, 0x01, 0x0a, 0x1a, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x18, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x65, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x65, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d,
	0x73, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0xa0, 0x02,
	0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12,
	0x60, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x1a, 0xac, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x55, 0x0a, 0x13, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x1a, 0xac, 0x03, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x5d, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x64,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x73, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c,
	0x50, 0x6f, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x42, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x15, 0x82, 0x03, 0x12, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x02, 0x20, 0x00,
	0x52, 0x06, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x1a, 0x55, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12,
	0x4e, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0f,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22,
	0xcb, 0x02, 0x0a, 0x0e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x50, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a,
	0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x35, 0x73, 0x52, 0x07, 0x74, 0x72, 0x75, 0x65,
	0x46, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x09, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x35, 0x73, 0x52, 0x08, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xed, 0x02,
	0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x09,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x35, 0x73, 0x52, 0x07, 0x68, 0x6f,
	0x6c, 0x64, 0x46, 0x6f, 0x72, 0x1a, 0x40, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75,
	0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa1, 0x04,
	0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12,
	0x5c, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x5f, 0x0a,
	0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x46,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x62, 0x0a, 0x0f, 0x49, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x10, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x4f,
	0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x22, 0xc5, 0x01, 0x0a, 0x12, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07,
	0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xb1, 0x0a, 0x0a, 0x19, 0x41, 0x49, 0x4d,
	0x44, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x49, 0x4d, 0x44, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x58, 0x0a,
	0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x49, 0x4d, 0x44, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03,
	0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0c, 0x66, 0x6c,
	0x6f, 0x77, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x21, 0x92, 0x41,
	0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52,
	0x13, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x6b, 0x0a, 0x13, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x61, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a,
	0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82,
	0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x52, 0x1a, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x72, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x71, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x22, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x53, 0x71, 0x72, 0x74, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x12, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x11, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x64,
	0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x83, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12,
	0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x08,
	0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x9c, 0x01,
	0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x0a, 0x69, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4d, 0x0a,
	0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x32, 0x97, 0x01, 0x0a,
	0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x85,
	0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x92, 0x41, 0x15, 0x0a, 0x13, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x42, 0xa8, 0x02, 0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2e, 0x66,
	0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0b,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69,
	0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x50, 0x4c, 0xaa, 0x02, 0x1b, 0x41, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1e, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_language_v1_policy_proto_rawDescOnce sync.Once
	file_aperture_policy_language_v1_policy_proto_rawDescData = file_aperture_policy_language_v1_policy_proto_rawDesc
)

func file_aperture_policy_language_v1_policy_proto_rawDescGZIP() []byte {
	file_aperture_policy_language_v1_policy_proto_rawDescOnce.Do(func() {
		file_aperture_policy_language_v1_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_language_v1_policy_proto_rawDescData)
	})
	return file_aperture_policy_language_v1_policy_proto_rawDescData
}

var file_aperture_policy_language_v1_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 107)
var file_aperture_policy_language_v1_policy_proto_goTypes = []interface{}{
	(*GetPoliciesResponse)(nil),                    // 0: aperture.policy.language.v1.GetPoliciesResponse
	(*Policies)(nil),                               // 1: aperture.policy.language.v1.Policies
	(*Policy)(nil),                                 // 2: aperture.policy.language.v1.Policy
	(*Circuit)(nil),                                // 3: aperture.policy.language.v1.Circuit
	(*Resources)(nil),                              // 4: aperture.policy.language.v1.Resources
	(*Component)(nil),                              // 5: aperture.policy.language.v1.Component
	(*Query)(nil),                                  // 6: aperture.policy.language.v1.Query
	(*FlowControl)(nil),                            // 7: aperture.policy.language.v1.FlowControl
	(*AutoScale)(nil),                              // 8: aperture.policy.language.v1.AutoScale
	(*InPort)(nil),                                 // 9: aperture.policy.language.v1.InPort
	(*OutPort)(nil),                                // 10: aperture.policy.language.v1.OutPort
	(*GradientController)(nil),                     // 11: aperture.policy.language.v1.GradientController
	(*EMA)(nil),                                    // 12: aperture.policy.language.v1.EMA
	(*ArithmeticCombinator)(nil),                   // 13: aperture.policy.language.v1.ArithmeticCombinator
	(*Decider)(nil),                                // 14: aperture.policy.language.v1.Decider
	(*Switcher)(nil),                               // 15: aperture.policy.language.v1.Switcher
	(*RateLimiter)(nil),                            // 16: aperture.policy.language.v1.RateLimiter
	(*ConcurrencyLimiter)(nil),                     // 17: aperture.policy.language.v1.ConcurrencyLimiter
	(*Scheduler)(nil),                              // 18: aperture.policy.language.v1.Scheduler
	(*LoadActuator)(nil),                           // 19: aperture.policy.language.v1.LoadActuator
	(*PromQL)(nil),                                 // 20: aperture.policy.language.v1.PromQL
	(*ConstantSignal)(nil),                         // 21: aperture.policy.language.v1.ConstantSignal
	(*Variable)(nil),                               // 22: aperture.policy.language.v1.Variable
	(*Sqrt)(nil),                                   // 23: aperture.policy.language.v1.Sqrt
	(*Extrapolator)(nil),                           // 24: aperture.policy.language.v1.Extrapolator
	(*Max)(nil),                                    // 25: aperture.policy.language.v1.Max
	(*Min)(nil),                                    // 26: aperture.policy.language.v1.Min
	(*And)(nil),                                    // 27: aperture.policy.language.v1.And
	(*Or)(nil),                                     // 28: aperture.policy.language.v1.Or
	(*Inverter)(nil),                               // 29: aperture.policy.language.v1.Inverter
	(*FirstValid)(nil),                             // 30: aperture.policy.language.v1.FirstValid
	(*Alerter)(nil),                                // 31: aperture.policy.language.v1.Alerter
	(*Integrator)(nil),                             // 32: aperture.policy.language.v1.Integrator
	(*Differentiator)(nil),                         // 33: aperture.policy.language.v1.Differentiator
	(*HorizontalPodScaler)(nil),                    // 34: aperture.policy.language.v1.HorizontalPodScaler
	(*PulseGenerator)(nil),                         // 35: aperture.policy.language.v1.PulseGenerator
	(*Holder)(nil),                                 // 36: aperture.policy.language.v1.Holder
	(*NestedCircuit)(nil),                          // 37: aperture.policy.language.v1.NestedCircuit
	(*NestedSignalIngress)(nil),                    // 38: aperture.policy.language.v1.NestedSignalIngress
	(*NestedSignalEgress)(nil),                     // 39: aperture.policy.language.v1.NestedSignalEgress
	(*AIMDConcurrencyController)(nil),              // 40: aperture.policy.language.v1.AIMDConcurrencyController
	nil,                                            // 41: aperture.policy.language.v1.Policies.PoliciesEntry
	nil,                                            // 42: aperture.policy.language.v1.Resources.FluxMetersEntry
	(*GradientController_Parameters)(nil),          // 43: aperture.policy.language.v1.GradientController.Parameters
	(*GradientController_DynamicConfig)(nil),       // 44: aperture.policy.language.v1.GradientController.DynamicConfig
	(*GradientController_Ins)(nil),                 // 45: aperture.policy.language.v1.GradientController.Ins
	(*GradientController_Outs)(nil),                // 46: aperture.policy.language.v1.GradientController.Outs
	(*EMA_Ins)(nil),                                // 47: aperture.policy.language.v1.EMA.Ins
	(*EMA_Outs)(nil),                               // 48: aperture.policy.language.v1.EMA.Outs
	(*EMA_Parameters)(nil),                         // 49: aperture.policy.language.v1.EMA.Parameters
	(*ArithmeticCombinator_Ins)(nil),               // 50: aperture.policy.language.v1.ArithmeticCombinator.Ins
	(*ArithmeticCombinator_Outs)(nil),              // 51: aperture.policy.language.v1.ArithmeticCombinator.Outs
	(*Decider_Ins)(nil),                            // 52: aperture.policy.language.v1.Decider.Ins
	(*Decider_Outs)(nil),                           // 53: aperture.policy.language.v1.Decider.Outs
	(*Switcher_Ins)(nil),                           // 54: aperture.policy.language.v1.Switcher.Ins
	(*Switcher_Outs)(nil),                          // 55: aperture.policy.language.v1.Switcher.Outs
	(*RateLimiter_Parameters)(nil),                 // 56: aperture.policy.language.v1.RateLimiter.Parameters
	(*RateLimiter_Override)(nil),                   // 57: aperture.policy.language.v1.RateLimiter.Override
	(*RateLimiter_DynamicConfig)(nil),              // 58: aperture.policy.language.v1.RateLimiter.DynamicConfig
	(*RateLimiter_Ins)(nil),                        // 59: aperture.policy.language.v1.RateLimiter.Ins
	(*RateLimiter_Parameters_LazySync)(nil),        // 60: aperture.policy.language.v1.RateLimiter.Parameters.LazySync
	(*Scheduler_Workload)(nil),                     // 61: aperture.policy.language.v1.Scheduler.Workload
	(*Scheduler_Parameters)(nil),                   // 62: aperture.policy.language.v1.Scheduler.Parameters
	(*Scheduler_Outs)(nil),                         // 63: aperture.policy.language.v1.Scheduler.Outs
	(*Scheduler_Workload_Parameters)(nil),          // 64: aperture.policy.language.v1.Scheduler.Workload.Parameters
	(*LoadActuator_DynamicConfig)(nil),             // 65: aperture.policy.language.v1.LoadActuator.DynamicConfig
	(*LoadActuator_Ins)(nil),                       // 66: aperture.policy.language.v1.LoadActuator.Ins
	(*PromQL_Outs)(nil),                            // 67: aperture.policy.language.v1.PromQL.Outs
	(*Variable_DynamicConfig)(nil),                 // 68: aperture.policy.language.v1.Variable.DynamicConfig
	(*Variable_Outs)(nil),                          // 69: aperture.policy.language.v1.Variable.Outs
	(*Sqrt_Ins)(nil),                               // 70: aperture.policy.language.v1.Sqrt.Ins
	(*Sqrt_Outs)(nil),                              // 71: aperture.policy.language.v1.Sqrt.Outs
	(*Extrapolator_Parameters)(nil),                // 72: aperture.policy.language.v1.Extrapolator.Parameters
	(*Extrapolator_Ins)(nil),                       // 73: aperture.policy.language.v1.Extrapolator.Ins
	(*Extrapolator_Outs)(nil),                      // 74: aperture.policy.language.v1.Extrapolator.Outs
	(*Max_Ins)(nil),                                // 75: aperture.policy.language.v1.Max.Ins
	(*Max_Outs)(nil),                               // 76: aperture.policy.language.v1.Max.Outs
	(*Min_Ins)(nil),                                // 77: aperture.policy.language.v1.Min.Ins
	(*Min_Outs)(nil),                               // 78: aperture.policy.language.v1.Min.Outs
	(*And_Ins)(nil),                                // 79: aperture.policy.language.v1.And.Ins
	(*And_Outs)(nil),                               // 80: aperture.policy.language.v1.And.Outs
	(*Or_Ins)(nil),                                 // 81: aperture.policy.language.v1.Or.Ins
	(*Or_Outs)(nil),                                // 82: aperture.policy.language.v1.Or.Outs
	(*Inverter_Ins)(nil),                           // 83: aperture.policy.language.v1.Inverter.Ins
	(*Inverter_Outs)(nil),                          // 84: aperture.policy.language.v1.Inverter.Outs
	(*FirstValid_Ins)(nil),                         // 85: aperture.policy.language.v1.FirstValid.Ins
	(*FirstValid_Outs)(nil),                        // 86: aperture.policy.language.v1.FirstValid.Outs
	(*Alerter_Parameters)(nil),                     // 87: aperture.policy.language.v1.Alerter.Parameters
	(*Alerter_Ins)(nil),                            // 88: aperture.policy.language.v1.Alerter.Ins
	(*Integrator_Ins)(nil),                         // 89: aperture.policy.language.v1.Integrator.Ins
	(*Integrator_Outs)(nil),                        // 90: aperture.policy.language.v1.Integrator.Outs
	(*Differentiator_Ins)(nil),                     // 91: aperture.policy.language.v1.Differentiator.Ins
	(*Differentiator_Outs)(nil),                    // 92: aperture.policy.language.v1.Differentiator.Outs
	(*HorizontalPodScaler_ScaleReporter)(nil),      // 93: aperture.policy.language.v1.HorizontalPodScaler.ScaleReporter
	(*HorizontalPodScaler_ScaleActuator)(nil),      // 94: aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator
	(*HorizontalPodScaler_ScaleReporter_Outs)(nil), // 95: aperture.policy.language.v1.HorizontalPodScaler.ScaleReporter.Outs
	(*HorizontalPodScaler_ScaleActuator_DynamicConfig)(nil), // 96: aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator.DynamicConfig
	(*HorizontalPodScaler_ScaleActuator_Ins)(nil),           // 97: aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator.Ins
	(*PulseGenerator_Outs)(nil),                             // 98: aperture.policy.language.v1.PulseGenerator.Outs
	(*Holder_Ins)(nil),                                      // 99: aperture.policy.language.v1.Holder.Ins
	(*Holder_Outs)(nil),                                     // 100: aperture.policy.language.v1.Holder.Outs
	nil,                                                     // 101: aperture.policy.language.v1.NestedCircuit.InPortsMapEntry
	nil,                                                     // 102: aperture.policy.language.v1.NestedCircuit.OutPortsMapEntry
	(*NestedSignalIngress_Outs)(nil),                        // 103: aperture.policy.language.v1.NestedSignalIngress.Outs
	(*NestedSignalEgress_Ins)(nil),                          // 104: aperture.policy.language.v1.NestedSignalEgress.Ins
	(*AIMDConcurrencyController_Ins)(nil),                   // 105: aperture.policy.language.v1.AIMDConcurrencyController.Ins
	(*AIMDConcurrencyController_Outs)(nil),                  // 106: aperture.policy.language.v1.AIMDConcurrencyController.Outs
	(*durationpb.Duration)(nil),                             // 107: google.protobuf.Duration
	(*Classifier)(nil),                                      // 108: aperture.policy.language.v1.Classifier
	(*FlowSelector)(nil),                                    // 109: aperture.policy.language.v1.FlowSelector
	(*KubernetesObjectSelector)(nil),                        // 110: aperture.policy.language.v1.KubernetesObjectSelector
	(*FluxMeter)(nil),                                       // 111: aperture.policy.language.v1.FluxMeter
	(*LabelMatcher)(nil),                                    // 112: aperture.policy.language.v1.LabelMatcher
	(*emptypb.Empty)(nil),                                   // 113: google.protobuf.Empty
}
var file_aperture_policy_language_v1_policy_proto_depIdxs = []int32{
	1,   // 0: aperture.policy.language.v1.GetPoliciesResponse.policies:type_name -> aperture.policy.language.v1.Policies
	41,  // 1: aperture.policy.language.v1.Policies.policies:type_name -> aperture.policy.language.v1.Policies.PoliciesEntry
	3,   // 2: aperture.policy.language.v1.Policy.circuit:type_name -> aperture.policy.language.v1.Circuit
	4,   // 3: aperture.policy.language.v1.Policy.resources:type_name -> aperture.policy.language.v1.Resources
	107, // 4: aperture.policy.language.v1.Circuit.evaluation_interval:type_name -> google.protobuf.Duration
	5,   // 5: aperture.policy.language.v1.Circuit.components:type_name -> aperture.policy.language.v1.Component
	42,  // 6: aperture.policy.language.v1.Resources.flux_meters:type_name -> aperture.policy.language.v1.Resources.FluxMetersEntry
	108, // 7: aperture.policy.language.v1.Resources.classifiers:type_name -> aperture.policy.language.v1.Classifier
	11,  // 8: aperture.policy.language.v1.Component.gradient_controller:type_name -> aperture.policy.language.v1.GradientController
	12,  // 9: aperture.policy.language.v1.Component.ema:type_name -> aperture.policy.language.v1.EMA
	13,  // 10: aperture.policy.language.v1.Component.arithmetic_combinator:type_name -> aperture.policy.language.v1.ArithmeticCombinator
	14,  // 11: aperture.policy.language.v1.Component.decider:type_name -> aperture.policy.language.v1.Decider
	15,  // 12: aperture.policy.language.v1.Component.switcher:type_name -> aperture.policy.language.v1.Switcher
	22,  // 13: aperture.policy.language.v1.Component.variable:type_name -> aperture.policy.language.v1.Variable
	23,  // 14: aperture.policy.language.v1.Component.sqrt:type_name -> aperture.policy.language.v1.Sqrt
	24,  // 15: aperture.policy.language.v1.Component.extrapolator:type_name -> aperture.policy.language.v1.Extrapolator
	25,  // 16: aperture.policy.language.v1.Component.max:type_name -> aperture.policy.language.v1.Max
	26,  // 17: aperture.policy.language.v1.Component.min:type_name -> aperture.policy.language.v1.Min
	30,  // 18: aperture.policy.language.v1.Component.first_valid:type_name -> aperture.policy.language.v1.FirstValid
	31,  // 19: aperture.policy.language.v1.Component.alerter:type_name -> aperture.policy.language.v1.Alerter
	32,  // 20: aperture.policy.language.v1.Component.integrator:type_name -> aperture.policy.language.v1.Integrator
	33,  // 21: aperture.policy.language.v1.Component.differentiator:type_name -> aperture.policy.language.v1.Differentiator
	27,  // 22: aperture.policy.language.v1.Component.and:type_name -> aperture.policy.language.v1.And
	28,  // 23: aperture.policy.language.v1.Component.or:type_name -> aperture.policy.language.v1.Or
	29,  // 24: aperture.policy.language.v1.Component.inverter:type_name -> aperture.policy.language.v1.Inverter
	35,  // 25: aperture.policy.language.v1.Component.pulse_generator:type_name -> aperture.policy.language.v1.PulseGenerator
	36,  // 26: aperture.policy.language.v1.Component.holder:type_name -> aperture.policy.language.v1.Holder
	37,  // 27: aperture.policy.language.v1.Component.nested_circuit:type_name -> aperture.policy.language.v1.NestedCircuit
	38,  // 28: aperture.policy.language.v1.Component.nested_signal_ingress:type_name -> aperture.policy.language.v1.NestedSignalIngress
	39,  // 29: aperture.policy.language.v1.Component.nested_signal_egress:type_name -> aperture.policy.language.v1.NestedSignalEgress
	6,   // 30: aperture.policy.language.v1.Component.query:type_name -> aperture.policy.language.v1.Query
	7,   // 31: aperture.policy.language.v1.Component.flow_control:type_name -> aperture.policy.language.v1.FlowControl
	8,   // 32: aperture.policy.language.v1.Component.auto_scale:type_name -> aperture.policy.language.v1.AutoScale
	20,  // 33: aperture.policy.language.v1.Query.promql:type_name -> aperture.policy.language.v1.PromQL
	16,  // 34: aperture.policy.language.v1.FlowControl.rate_limiter:type_name -> aperture.policy.language.v1.RateLimiter
	17,  // 35: aperture.policy.language.v1.FlowControl.concurrency_limiter:type_name -> aperture.policy.language.v1.ConcurrencyLimiter
	40,  // 36: aperture.policy.language.v1.FlowControl.aimd_concurrency_controller:type_name -> aperture.policy.language.v1.AIMDConcurrencyController
	34,  // 37: aperture.policy.language.v1.AutoScale.horizontal_pod_scaler:type_name -> aperture.policy.language.v1.HorizontalPodScaler
	21,  // 38: aperture.policy.language.v1.InPort.constant_signal:type_name -> aperture.policy.language.v1.ConstantSignal
	45,  // 39: aperture.policy.language.v1.GradientController.in_ports:type_name -> aperture.policy.language.v1.GradientController.Ins
	46,  // 40: aperture.policy.language.v1.GradientController.out_ports:type_name -> aperture.policy.language.v1.GradientController.Outs
	43,  // 41: aperture.policy.language.v1.GradientController.parameters:type_name -> aperture.policy.language.v1.GradientController.Parameters
	44,  // 42: aperture.policy.language.v1.GradientController.default_config:type_name -> aperture.policy.language.v1.GradientController.DynamicConfig
	47,  // 43: aperture.policy.language.v1.EMA.in_ports:type_name -> aperture.policy.language.v1.EMA.Ins
	48,  // 44: aperture.policy.language.v1.EMA.out_ports:type_name -> aperture.policy.language.v1.EMA.Outs
	49,  // 45: aperture.policy.language.v1.EMA.parameters:type_name -> aperture.policy.language.v1.EMA.Parameters
	50,  // 46: aperture.policy.language.v1.ArithmeticCombinator.in_ports:type_name -> aperture.policy.language.v1.ArithmeticCombinator.Ins
	51,  // 47: aperture.policy.language.v1.ArithmeticCombinator.out_ports:type_name -> aperture.policy.language.v1.ArithmeticCombinator.Outs
	52,  // 48: aperture.policy.language.v1.Decider.in_ports:type_name -> aperture.policy.language.v1.Decider.Ins
	53,  // 49: aperture.policy.language.v1.Decider.out_ports:type_name -> aperture.policy.language.v1.Decider.Outs
	107, // 50: aperture.policy.language.v1.Decider.true_for:type_name -> google.protobuf.Duration
	107, // 51: aperture.policy.language.v1.Decider.false_for:type_name -> google.protobuf.Duration
	54,  // 52: aperture.policy.language.v1.Switcher.in_ports:type_name -> aperture.policy.language.v1.Switcher.Ins
	55,  // 53: aperture.policy.language.v1.Switcher.out_ports:type_name -> aperture.policy.language.v1.Switcher.Outs
	59,  // 54: aperture.policy.language.v1.RateLimiter.in_ports:type_name -> aperture.policy.language.v1.RateLimiter.Ins
	109, // 55: aperture.policy.language.v1.RateLimiter.flow_selector:type_name -> aperture.policy.language.v1.FlowSelector
	56,  // 56: aperture.policy.language.v1.RateLimiter.parameters:type_name -> aperture.policy.language.v1.RateLimiter.Parameters
	58,  // 57: aperture.policy.language.v1.RateLimiter.default_config:type_name -> aperture.policy.language.v1.RateLimiter.DynamicConfig
	109, // 58: aperture.policy.language.v1.ConcurrencyLimiter.flow_selector:type_name -> aperture.policy.language.v1.FlowSelector
	18,  // 59: aperture.policy.language.v1.ConcurrencyLimiter.scheduler:type_name -> aperture.policy.language.v1.Scheduler
	19,  // 60: aperture.policy.language.v1.ConcurrencyLimiter.load_actuator:type_name -> aperture.policy.language.v1.LoadActuator
	63,  // 61: aperture.policy.language.v1.Scheduler.out_ports:type_name -> aperture.policy.language.v1.Scheduler.Outs
	62,  // 62: aperture.policy.language.v1.Scheduler.parameters:type_name -> aperture.policy.language.v1.Scheduler.Parameters
	66,  // 63: aperture.policy.language.v1.LoadActuator.in_ports:type_name -> aperture.policy.language.v1.LoadActuator.Ins
	65,  // 64: aperture.policy.language.v1.LoadActuator.default_config:type_name -> aperture.policy.language.v1.LoadActuator.DynamicConfig
	87,  // 65: aperture.policy.language.v1.LoadActuator.alerter_parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	67,  // 66: aperture.policy.language.v1.PromQL.out_ports:type_name -> aperture.policy.language.v1.PromQL.Outs
	107, // 67: aperture.policy.language.v1.PromQL.evaluation_interval:type_name -> google.protobuf.Duration
	69,  // 68: aperture.policy.language.v1.Variable.out_ports:type_name -> aperture.policy.language.v1.Variable.Outs
	68,  // 69: aperture.policy.language.v1.Variable.default_config:type_name -> aperture.policy.language.v1.Variable.DynamicConfig
	70,  // 70: aperture.policy.language.v1.Sqrt.in_ports:type_name -> aperture.policy.language.v1.Sqrt.Ins
	71,  // 71: aperture.policy.language.v1.Sqrt.out_ports:type_name -> aperture.policy.language.v1.Sqrt.Outs
	73,  // 72: aperture.policy.language.v1.Extrapolator.in_ports:type_name -> aperture.policy.language.v1.Extrapolator.Ins
	74,  // 73: aperture.policy.language.v1.Extrapolator.out_ports:type_name -> aperture.policy.language.v1.Extrapolator.Outs
	72,  // 74: aperture.policy.language.v1.Extrapolator.parameters:type_name -> aperture.policy.language.v1.Extrapolator.Parameters
	75,  // 75: aperture.policy.language.v1.Max.in_ports:type_name -> aperture.policy.language.v1.Max.Ins
	76,  // 76: aperture.policy.language.v1.Max.out_ports:type_name -> aperture.policy.language.v1.Max.Outs
	77,  // 77: aperture.policy.language.v1.Min.in_ports:type_name -> aperture.policy.language.v1.Min.Ins
	78,  // 78: aperture.policy.language.v1.Min.out_ports:type_name -> aperture.policy.language.v1.Min.Outs
	79,  // 79: aperture.policy.language.v1.And.in_ports:type_name -> aperture.policy.language.v1.And.Ins
	80,  // 80: aperture.policy.language.v1.And.out_ports:type_name -> aperture.policy.language.v1.And.Outs
	81,  // 81: aperture.policy.language.v1.Or.in_ports:type_name -> aperture.policy.language.v1.Or.Ins
	82,  // 82: aperture.policy.language.v1.Or.out_ports:type_name -> aperture.policy.language.v1.Or.Outs
	83,  // 83: aperture.policy.language.v1.Inverter.in_ports:type_name -> aperture.policy.language.v1.Inverter.Ins
	84,  // 84: aperture.policy.language.v1.Inverter.out_ports:type_name -> aperture.policy.language.v1.Inverter.Outs
	85,  // 85: aperture.policy.language.v1.FirstValid.in_ports:type_name -> aperture.policy.language.v1.FirstValid.Ins
	86,  // 86: aperture.policy.language.v1.FirstValid.out_ports:type_name -> aperture.policy.language.v1.FirstValid.Outs
	88,  // 87: aperture.policy.language.v1.Alerter.in_ports:type_name -> aperture.policy.language.v1.Alerter.Ins
	87,  // 88: aperture.policy.language.v1.Alerter.parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	89,  // 89: aperture.policy.language.v1.Integrator.in_ports:type_name -> aperture.policy.language.v1.Integrator.Ins
	90,  // 90: aperture.policy.language.v1.Integrator.out_ports:type_name -> aperture.policy.language.v1.Integrator.Outs
	91,  // 91: aperture.policy.language.v1.Differentiator.in_ports:type_name -> aperture.policy.language.v1.Differentiator.Ins
	92,  // 92: aperture.policy.language.v1.Differentiator.out_ports:type_name -> aperture.policy.language.v1.Differentiator.Outs
	107, // 93: aperture.policy.language.v1.Differentiator.window:type_name -> google.protobuf.Duration
	110, // 94: aperture.policy.language.v1.HorizontalPodScaler.kubernetes_object_selector:type_name -> aperture.policy.language.v1.KubernetesObjectSelector
	93,  // 95: aperture.policy.language.v1.HorizontalPodScaler.scale_reporter:type_name -> aperture.policy.language.v1.HorizontalPodScaler.ScaleReporter
	94,  // 96: aperture.policy.language.v1.HorizontalPodScaler.scale_actuator:type_name -> aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator
	98,  // 97: aperture.policy.language.v1.PulseGenerator.out_ports:type_name -> aperture.policy.language.v1.PulseGenerator.Outs
	107, // 98: aperture.policy.language.v1.PulseGenerator.true_for:type_name -> google.protobuf.Duration
	107, // 99: aperture.policy.language.v1.PulseGenerator.false_for:type_name -> google.protobuf.Duration
	99,  // 100: aperture.policy.language.v1.Holder.in_ports:type_name -> aperture.policy.language.v1.Holder.Ins
	100, // 101: aperture.policy.language.v1.Holder.out_ports:type_name -> aperture.policy.language.v1.Holder.Outs
	107, // 102: aperture.policy.language.v1.Holder.hold_for:type_name -> google.protobuf.Duration
	101, // 103: aperture.policy.language.v1.NestedCircuit.in_ports_map:type_name -> aperture.policy.language.v1.NestedCircuit.InPortsMapEntry
	102, // 104: aperture.policy.language.v1.NestedCircuit.out_ports_map:type_name -> aperture.policy.language.v1.NestedCircuit.OutPortsMapEntry
	5,   // 105: aperture.policy.language.v1.NestedCircuit.components:type_name -> aperture.policy.language.v1.Component
	103, // 106: aperture.policy.language.v1.NestedSignalIngress.out_ports:type_name -> aperture.policy.language.v1.NestedSignalIngress.Outs
	104, // 107: aperture.policy.language.v1.NestedSignalEgress.in_ports:type_name -> aperture.policy.language.v1.NestedSignalEgress.Ins
	105, // 108: aperture.policy.language.v1.AIMDConcurrencyController.in_ports:type_name -> aperture.policy.language.v1.AIMDConcurrencyController.Ins
	106, // 109: aperture.policy.language.v1.AIMDConcurrencyController.out_ports:type_name -> aperture.policy.language.v1.AIMDConcurrencyController.Outs
	109, // 110: aperture.policy.language.v1.AIMDConcurrencyController.flow_selector:type_name -> aperture.policy.language.v1.FlowSelector
	62,  // 111: aperture.policy.language.v1.AIMDConcurrencyController.scheduler_parameters:type_name -> aperture.policy.language.v1.Scheduler.Parameters
	43,  // 112: aperture.policy.language.v1.AIMDConcurrencyController.gradient_parameters:type_name -> aperture.policy.language.v1.GradientController.Parameters
	87,  // 113: aperture.policy.language.v1.AIMDConcurrencyController.alerter_parameters:type_name -> aperture.policy.language.v1.Alerter.Parameters
	2,   // 114: aperture.policy.language.v1.Policies.PoliciesEntry.value:type_name -> aperture.policy.language.v1.Policy
	111, // 115: aperture.policy.language.v1.Resources.FluxMetersEntry.value:type_name -> aperture.policy.language.v1.FluxMeter
	9,   // 116: aperture.policy.language.v1.GradientController.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	9,   // 117: aperture.policy.language.v1.GradientController.Ins.setpoint:type_name -> aperture.policy.language.v1.InPort
	9,   // 118: aperture.policy.language.v1.GradientController.Ins.optimize:type_name -> aperture.policy.language.v1.InPort
	9,   // 119: aperture.policy.language.v1.GradientController.Ins.max:type_name -> aperture.policy.language.v1.InPort
	9,   // 120: aperture.policy.language.v1.GradientController.Ins.min:type_name -> aperture.policy.language.v1.InPort
	9,   // 121: aperture.policy.language.v1.GradientController.Ins.control_variable:type_name -> aperture.policy.language.v1.InPort
	10,  // 122: aperture.policy.language.v1.GradientController.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 123: aperture.policy.language.v1.EMA.Ins.input:type_name -> aperture.policy.language.v1.InPort
	9,   // 124: aperture.policy.language.v1.EMA.Ins.max_envelope:type_name -> aperture.policy.language.v1.InPort
	9,   // 125: aperture.policy.language.v1.EMA.Ins.min_envelope:type_name -> aperture.policy.language.v1.InPort
	10,  // 126: aperture.policy.language.v1.EMA.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	107, // 127: aperture.policy.language.v1.EMA.Parameters.ema_window:type_name -> google.protobuf.Duration
	107, // 128: aperture.policy.language.v1.EMA.Parameters.warmup_window:type_name -> google.protobuf.Duration
	9,   // 129: aperture.policy.language.v1.ArithmeticCombinator.Ins.lhs:type_name -> aperture.policy.language.v1.InPort
	9,   // 130: aperture.policy.language.v1.ArithmeticCombinator.Ins.rhs:type_name -> aperture.policy.language.v1.InPort
	10,  // 131: aperture.policy.language.v1.ArithmeticCombinator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 132: aperture.policy.language.v1.Decider.Ins.lhs:type_name -> aperture.policy.language.v1.InPort
	9,   // 133: aperture.policy.language.v1.Decider.Ins.rhs:type_name -> aperture.policy.language.v1.InPort
	10,  // 134: aperture.policy.language.v1.Decider.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 135: aperture.policy.language.v1.Switcher.Ins.on_true:type_name -> aperture.policy.language.v1.InPort
	9,   // 136: aperture.policy.language.v1.Switcher.Ins.on_false:type_name -> aperture.policy.language.v1.InPort
	9,   // 137: aperture.policy.language.v1.Switcher.Ins.switch:type_name -> aperture.policy.language.v1.InPort
	10,  // 138: aperture.policy.language.v1.Switcher.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	107, // 139: aperture.policy.language.v1.RateLimiter.Parameters.limit_reset_interval:type_name -> google.protobuf.Duration
	60,  // 140: aperture.policy.language.v1.RateLimiter.Parameters.lazy_sync:type_name -> aperture.policy.language.v1.RateLimiter.Parameters.LazySync
	57,  // 141: aperture.policy.language.v1.RateLimiter.DynamicConfig.overrides:type_name -> aperture.policy.language.v1.RateLimiter.Override
	9,   // 142: aperture.policy.language.v1.RateLimiter.Ins.limit:type_name -> aperture.policy.language.v1.InPort
	64,  // 143: aperture.policy.language.v1.Scheduler.Workload.parameters:type_name -> aperture.policy.language.v1.Scheduler.Workload.Parameters
	112, // 144: aperture.policy.language.v1.Scheduler.Workload.label_matcher:type_name -> aperture.policy.language.v1.LabelMatcher
	61,  // 145: aperture.policy.language.v1.Scheduler.Parameters.workloads:type_name -> aperture.policy.language.v1.Scheduler.Workload
	64,  // 146: aperture.policy.language.v1.Scheduler.Parameters.default_workload_parameters:type_name -> aperture.policy.language.v1.Scheduler.Workload.Parameters
	107, // 147: aperture.policy.language.v1.Scheduler.Parameters.max_timeout:type_name -> google.protobuf.Duration
	10,  // 148: aperture.policy.language.v1.Scheduler.Outs.accepted_concurrency:type_name -> aperture.policy.language.v1.OutPort
	10,  // 149: aperture.policy.language.v1.Scheduler.Outs.incoming_concurrency:type_name -> aperture.policy.language.v1.OutPort
	9,   // 150: aperture.policy.language.v1.LoadActuator.Ins.load_multiplier:type_name -> aperture.policy.language.v1.InPort
	10,  // 151: aperture.policy.language.v1.PromQL.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	21,  // 152: aperture.policy.language.v1.Variable.DynamicConfig.constant_signal:type_name -> aperture.policy.language.v1.ConstantSignal
	10,  // 153: aperture.policy.language.v1.Variable.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 154: aperture.policy.language.v1.Sqrt.Ins.input:type_name -> aperture.policy.language.v1.InPort
	10,  // 155: aperture.policy.language.v1.Sqrt.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	107, // 156: aperture.policy.language.v1.Extrapolator.Parameters.max_extrapolation_interval:type_name -> google.protobuf.Duration
	9,   // 157: aperture.policy.language.v1.Extrapolator.Ins.input:type_name -> aperture.policy.language.v1.InPort
	10,  // 158: aperture.policy.language.v1.Extrapolator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 159: aperture.policy.language.v1.Max.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	10,  // 160: aperture.policy.language.v1.Max.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 161: aperture.policy.language.v1.Min.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	10,  // 162: aperture.policy.language.v1.Min.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 163: aperture.policy.language.v1.And.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	10,  // 164: aperture.policy.language.v1.And.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 165: aperture.policy.language.v1.Or.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	10,  // 166: aperture.policy.language.v1.Or.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 167: aperture.policy.language.v1.Inverter.Ins.input:type_name -> aperture.policy.language.v1.InPort
	10,  // 168: aperture.policy.language.v1.Inverter.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 169: aperture.policy.language.v1.FirstValid.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	10,  // 170: aperture.policy.language.v1.FirstValid.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	107, // 171: aperture.policy.language.v1.Alerter.Parameters.resolve_timeout:type_name -> google.protobuf.Duration
	9,   // 172: aperture.policy.language.v1.Alerter.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	9,   // 173: aperture.policy.language.v1.Integrator.Ins.input:type_name -> aperture.policy.language.v1.InPort
	9,   // 174: aperture.policy.language.v1.Integrator.Ins.reset:type_name -> aperture.policy.language.v1.InPort
	9,   // 175: aperture.policy.language.v1.Integrator.Ins.min:type_name -> aperture.policy.language.v1.InPort
	9,   // 176: aperture.policy.language.v1.Integrator.Ins.max:type_name -> aperture.policy.language.v1.InPort
	10,  // 177: aperture.policy.language.v1.Integrator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 178: aperture.policy.language.v1.Differentiator.Ins.input:type_name -> aperture.policy.language.v1.InPort
	10,  // 179: aperture.policy.language.v1.Differentiator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	95,  // 180: aperture.policy.language.v1.HorizontalPodScaler.ScaleReporter.out_ports:type_name -> aperture.policy.language.v1.HorizontalPodScaler.ScaleReporter.Outs
	97,  // 181: aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator.in_ports:type_name -> aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator.Ins
	96,  // 182: aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator.default_config:type_name -> aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator.DynamicConfig
	10,  // 183: aperture.policy.language.v1.HorizontalPodScaler.ScaleReporter.Outs.actual_replicas:type_name -> aperture.policy.language.v1.OutPort
	10,  // 184: aperture.policy.language.v1.HorizontalPodScaler.ScaleReporter.Outs.configured_replicas:type_name -> aperture.policy.language.v1.OutPort
	9,   // 185: aperture.policy.language.v1.HorizontalPodScaler.ScaleActuator.Ins.desired_replicas:type_name -> aperture.policy.language.v1.InPort
	10,  // 186: aperture.policy.language.v1.PulseGenerator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 187: aperture.policy.language.v1.Holder.Ins.input:type_name -> aperture.policy.language.v1.InPort
	10,  // 188: aperture.policy.language.v1.Holder.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	9,   // 189: aperture.policy.language.v1.NestedCircuit.InPortsMapEntry.value:type_name -> aperture.policy.language.v1.InPort
	10,  // 190: aperture.policy.language.v1.NestedCircuit.OutPortsMapEntry.value:type_name -> aperture.policy.language.v1.OutPort
	10,  // 191: aperture.policy.language.v1.NestedSignalIngress.Outs.signal:type_name -> aperture.policy.language.v1.OutPort
	9,   // 192: aperture.policy.language.v1.NestedSignalEgress.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	9,   // 193: aperture.policy.language.v1.AIMDConcurrencyController.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	9,   // 194: aperture.policy.language.v1.AIMDConcurrencyController.Ins.setpoint:type_name -> aperture.policy.language.v1.InPort
	10,  // 195: aperture.policy.language.v1.AIMDConcurrencyController.Outs.is_overload:type_name -> aperture.policy.language.v1.OutPort
	10,  // 196: aperture.policy.language.v1.AIMDConcurrencyController.Outs.load_multiplier:type_name -> aperture.policy.language.v1.OutPort
	113, // 197: aperture.policy.language.v1.PolicyService.GetPolicies:input_type -> google.protobuf.Empty
	0,   // 198: aperture.policy.language.v1.PolicyService.GetPolicies:output_type -> aperture.policy.language.v1.GetPoliciesResponse
	198, // [198:199] is the sub-list for method output_type
	197, // [197:198] is the sub-list for method input_type
	197, // [197:197] is the sub-list for extension type_name
	197, // [197:197] is the sub-list for extension extendee
	0,   // [0:197] is the sub-list for field type_name
}

func init() { file_aperture_policy_language_v1_policy_proto_init() }
func file_aperture_policy_language_v1_policy_proto_init() {
	if File_aperture_policy_language_v1_policy_proto != nil {
		return
	}
	file_aperture_policy_language_v1_classifier_proto_init()
	file_aperture_policy_language_v1_fluxmeter_proto_init()
	file_aperture_policy_language_v1_label_matcher_proto_init()
	file_aperture_policy_language_v1_selector_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_language_v1_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlowControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoScale); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadActuator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstantSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inverter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Differentiator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodScaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulseGenerator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedCircuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedSignalIngress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedSignalEgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIMDConcurrencyController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_Override); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_Parameters_LazySync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_Workload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_Workload_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadActuator_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadActuator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromQL_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*And_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Or_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inverter_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inverter_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerter_Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alerter_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integrator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Differentiator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Differentiator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodScaler_ScaleReporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodScaler_ScaleActuator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodScaler_ScaleReporter_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodScaler_ScaleActuator_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HorizontalPodScaler_ScaleActuator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PulseGenerator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Holder_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedSignalIngress_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedSignalEgress_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIMDConcurrencyController_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AIMDConcurrencyController_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Component_GradientController)(nil),
		(*Component_Ema)(nil),
		(*Component_ArithmeticCombinator)(nil),
		(*Component_Decider)(nil),
		(*Component_Switcher)(nil),
		(*Component_Variable)(nil),
		(*Component_Sqrt)(nil),
		(*Component_Extrapolator)(nil),
		(*Component_Max)(nil),
		(*Component_Min)(nil),
		(*Component_FirstValid)(nil),
		(*Component_Alerter)(nil),
		(*Component_Integrator)(nil),
		(*Component_Differentiator)(nil),
		(*Component_And)(nil),
		(*Component_Or)(nil),
		(*Component_Inverter)(nil),
		(*Component_PulseGenerator)(nil),
		(*Component_Holder)(nil),
		(*Component_NestedCircuit)(nil),
		(*Component_NestedSignalIngress)(nil),
		(*Component_NestedSignalEgress)(nil),
		(*Component_Query)(nil),
		(*Component_FlowControl)(nil),
		(*Component_AutoScale)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Query_Promql)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*FlowControl_RateLimiter)(nil),
		(*FlowControl_ConcurrencyLimiter)(nil),
		(*FlowControl_AimdConcurrencyController)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*AutoScale_HorizontalPodScaler)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*InPort_SignalName)(nil),
		(*InPort_ConstantSignal)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ConcurrencyLimiter_LoadActuator)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*ConstantSignal_SpecialValue)(nil),
		(*ConstantSignal_Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_language_v1_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   107,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_policy_language_v1_policy_proto_goTypes,
		DependencyIndexes: file_aperture_policy_language_v1_policy_proto_depIdxs,
		MessageInfos:      file_aperture_policy_language_v1_policy_proto_msgTypes,
	}.Build()
	File_aperture_policy_language_v1_policy_proto = out.File
	file_aperture_policy_language_v1_policy_proto_rawDesc = nil
	file_aperture_policy_language_v1_policy_proto_goTypes = nil
	file_aperture_policy_language_v1_policy_proto_depIdxs = nil
}
