// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: aperture/policy/language/v1/policy.proto

package languagev1

import (
	v11 "github.com/fluxninja/aperture/api/gen/proto/go/aperture/common/labelmatcher/v1"
	v1 "github.com/fluxninja/aperture/api/gen/proto/go/aperture/common/selector/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies *Policies `protobuf:"bytes,1,opt,name=policies,proto3" json:"policies,omitempty"`
}

func (x *GetPoliciesResponse) Reset() {
	*x = GetPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesResponse) ProtoMessage() {}

func (x *GetPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesResponse.ProtoReflect.Descriptor instead.
func (*GetPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{0}
}

func (x *GetPoliciesResponse) GetPolicies() *Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies map[string]*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Policies) Reset() {
	*x = Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Policies) GetPolicies() map[string]*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Policy expresses reliability automation workflow that automatically protects services
//
// :::info
// See also [Policy overview](/concepts/policy/policy.md).
// :::
//
// Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the control-loop logic of the policy.
	Circuit *Circuit `protobuf:"bytes,1,opt,name=circuit,proto3" json:"circuit,omitempty"`
	// Resources (FluxMeters, Classifiers etc.) to setup.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Policy) GetCircuit() *Circuit {
	if x != nil {
		return x.Circuit
	}
	return nil
}

func (x *Policy) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Circuit is defined as a dataflow graph of inter-connected components
//
// :::info
// See also [Circuit overview](/concepts/policy/circuit.md).
// :::
//
// Signals flow between components via ports.
// As signals traverse the circuit, they get processed, stored within components or get acted upon (e.g. load-shed, rate-limit, auto-scale etc.).
// Circuit is evaluated periodically in order to respond to changes in signal readings.
//
// :::info
// **Signal**
//
// Signals are floating-point values.
//
// A signal can also have a special **Invalid** value. It's usually used to
// communicate that signal doesn't have a meaningful value at the moment, eg.
// [PromQL](#v1-prom-q-l) emits such a value if it cannot execute a query.
// Components know when their input signals are invalid and can act
// accordingly. They can either propagate the invalidness, by making their
// output itself invalid (like eg.
// [ArithmeticCombinator](#v1-arithmetic-combinator)) or use some different
// logic, like eg. [Extrapolator](#v1-extrapolator). Refer to a component's
// docs on how exactly it handles invalid inputs.
// :::
type Circuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Evaluation interval (tick) is the time period between consecutive runs of the policy circuit.
	// This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
	EvaluationInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=evaluation_interval,json=evaluationInterval,proto3" json:"evaluation_interval,omitempty" default:"0.5s"` // @gotags: default:"0.5s"
	// Defines a signal processing graph as a list of components.
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Circuit) Reset() {
	*x = Circuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circuit) ProtoMessage() {}

func (x *Circuit) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circuit.ProtoReflect.Descriptor instead.
func (*Circuit) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Circuit) GetEvaluationInterval() *durationpb.Duration {
	if x != nil {
		return x.EvaluationInterval
	}
	return nil
}

func (x *Circuit) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// Resources that need to be setup for the policy to function
//
// :::info
// See also [Resources overview](/concepts/policy/resources.md).
// :::
//
// Resources are typically FluxMeters, Classifiers, etc. that can be used to create on-demand metrics or label the flows.
type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FluxMeters are installed in the data-plane and form the observability leg of the feedback loop.
	//
	// FluxMeters'-created metrics can be consumed as input to the circuit via the PromQL component.
	FluxMeters map[string]*FluxMeter `protobuf:"bytes,1,rep,name=flux_meters,json=fluxMeters,proto3" json:"flux_meters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"dive"` // @gotags: validate:"dive"
	// Classifiers are installed in the data-plane and are used to label the requests based on payload content.
	//
	// The flow labels created by Classifiers can be matched by FluxMeters to create metrics for control purposes.
	Classifiers []*Classifier `protobuf:"bytes,2,rep,name=classifiers,proto3" json:"classifiers,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{4}
}

func (x *Resources) GetFluxMeters() map[string]*FluxMeter {
	if x != nil {
		return x.FluxMeters
	}
	return nil
}

func (x *Resources) GetClassifiers() []*Classifier {
	if x != nil {
		return x.Classifiers
	}
	return nil
}

// Computational block that form the circuit
//
// :::info
// See also [Components overview](/concepts/policy/circuit.md#components).
// :::
//
// Signals flow into the components via input ports and results are emitted on output ports.
// Components are wired to each other based on signal names forming an execution graph of the circuit.
//
// :::note
// Loops are broken by the runtime at the earliest component index that is part of the loop.
// The looped signals are saved in the tick they are generated and served in the subsequent tick.
// :::
//
// There are three categories of components:
// * "source" components – they take some sort of input from "the real world" and output
//   a signal based on this input. Example: [PromQL](#v1-prom-q-l). In the UI
//   they're represented by green color.
// * signal processor components – "pure" components that don't interact with the "real world".
//   Examples: [GradientController](#v1-gradient-controller), [Max](#v1-max).
//   :::note
//   Signal processor components's output can depend on their internal state, in addition to the inputs.
//   Eg. see the [Exponential Moving Average filter](#v1-e-m-a).
//   :::
// * "sink" components – they affect the real world.
//   [ConcurrencyLimiter.LoadShedActuator](#v1-concurrency-limiter) and [RateLimiter](#v1-rate-limiter).
//   In the UI, represented by orange color.  Sink components usually come in pairs with a
//   "sources" component which emits a feedback signal, like
//   `accepted_concurrency` emitted by ConcurrencyLimiter.Scheduler.
//
// :::tip
// Sometimes you may want to use a constant value as one of component's inputs.
// You can create an input port containing the constant value instead of being connected to a signal.
// To do so, use the [InPort](#v1-in_port)'s .withConstantValue(constant_value) method.
// If You need to provide the same constant signal to multiple components,
// You can use the [Constant](#v1-constant) component.
// :::
//
// See also [Policy](#v1-policy) for a higher-level explanation of circuits.
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//	*Component_GradientController
	//	*Component_Ema
	//	*Component_ArithmeticCombinator
	//	*Component_Decider
	//	*Component_Switcher
	//	*Component_ConcurrencyLimiter
	//	*Component_RateLimiter
	//	*Component_Promql
	//	*Component_Constant
	//	*Component_Sqrt
	//	*Component_Extrapolator
	//	*Component_Max
	//	*Component_Min
	//	*Component_FirstValid
	Component isComponent_Component `protobuf_oneof:"component"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{5}
}

func (m *Component) GetComponent() isComponent_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *Component) GetGradientController() *GradientController {
	if x, ok := x.GetComponent().(*Component_GradientController); ok {
		return x.GradientController
	}
	return nil
}

func (x *Component) GetEma() *EMA {
	if x, ok := x.GetComponent().(*Component_Ema); ok {
		return x.Ema
	}
	return nil
}

func (x *Component) GetArithmeticCombinator() *ArithmeticCombinator {
	if x, ok := x.GetComponent().(*Component_ArithmeticCombinator); ok {
		return x.ArithmeticCombinator
	}
	return nil
}

func (x *Component) GetDecider() *Decider {
	if x, ok := x.GetComponent().(*Component_Decider); ok {
		return x.Decider
	}
	return nil
}

func (x *Component) GetSwitcher() *Switcher {
	if x, ok := x.GetComponent().(*Component_Switcher); ok {
		return x.Switcher
	}
	return nil
}

func (x *Component) GetConcurrencyLimiter() *ConcurrencyLimiter {
	if x, ok := x.GetComponent().(*Component_ConcurrencyLimiter); ok {
		return x.ConcurrencyLimiter
	}
	return nil
}

func (x *Component) GetRateLimiter() *RateLimiter {
	if x, ok := x.GetComponent().(*Component_RateLimiter); ok {
		return x.RateLimiter
	}
	return nil
}

func (x *Component) GetPromql() *PromQL {
	if x, ok := x.GetComponent().(*Component_Promql); ok {
		return x.Promql
	}
	return nil
}

func (x *Component) GetConstant() *Constant {
	if x, ok := x.GetComponent().(*Component_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *Component) GetSqrt() *Sqrt {
	if x, ok := x.GetComponent().(*Component_Sqrt); ok {
		return x.Sqrt
	}
	return nil
}

func (x *Component) GetExtrapolator() *Extrapolator {
	if x, ok := x.GetComponent().(*Component_Extrapolator); ok {
		return x.Extrapolator
	}
	return nil
}

func (x *Component) GetMax() *Max {
	if x, ok := x.GetComponent().(*Component_Max); ok {
		return x.Max
	}
	return nil
}

func (x *Component) GetMin() *Min {
	if x, ok := x.GetComponent().(*Component_Min); ok {
		return x.Min
	}
	return nil
}

func (x *Component) GetFirstValid() *FirstValid {
	if x, ok := x.GetComponent().(*Component_FirstValid); ok {
		return x.FirstValid
	}
	return nil
}

type isComponent_Component interface {
	isComponent_Component()
}

type Component_GradientController struct {
	// Gradient controller basically calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
	// This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
	GradientController *GradientController `protobuf:"bytes,1,opt,name=gradient_controller,json=gradientController,proto3,oneof"`
}

type Component_Ema struct {
	// Exponential Moving Average filter.
	Ema *EMA `protobuf:"bytes,2,opt,name=ema,proto3,oneof"`
}

type Component_ArithmeticCombinator struct {
	// Applies the given operator on input operands (signals) and emits the result.
	ArithmeticCombinator *ArithmeticCombinator `protobuf:"bytes,3,opt,name=arithmetic_combinator,json=arithmeticCombinator,proto3,oneof"`
}

type Component_Decider struct {
	// Decider emits the binary result of comparison operator on two operands.
	Decider *Decider `protobuf:"bytes,4,opt,name=decider,proto3,oneof"`
}

type Component_Switcher struct {
	// Switcher acts as a switch that emits one of the two signals based on third signal.
	Switcher *Switcher `protobuf:"bytes,5,opt,name=switcher,proto3,oneof"`
}

type Component_ConcurrencyLimiter struct {
	// Concurrency Limiter provides service protection by applying prioritized load shedding of flows using a network scheduler (e.g. Weighted Fair Queuing).
	ConcurrencyLimiter *ConcurrencyLimiter `protobuf:"bytes,6,opt,name=concurrency_limiter,json=concurrencyLimiter,proto3,oneof"`
}

type Component_RateLimiter struct {
	// Rate Limiter provides service protection by applying rate limiter.
	RateLimiter *RateLimiter `protobuf:"bytes,7,opt,name=rate_limiter,json=rateLimiter,proto3,oneof"`
}

type Component_Promql struct {
	// Periodically runs a Prometheus query in the background and emits the result.
	Promql *PromQL `protobuf:"bytes,8,opt,name=promql,proto3,oneof"`
}

type Component_Constant struct {
	// Emits a constant signal.
	Constant *Constant `protobuf:"bytes,9,opt,name=constant,proto3,oneof"`
}

type Component_Sqrt struct {
	// Takes an input signal and emits the square root of the input signal.
	Sqrt *Sqrt `protobuf:"bytes,10,opt,name=sqrt,proto3,oneof"`
}

type Component_Extrapolator struct {
	// Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
	Extrapolator *Extrapolator `protobuf:"bytes,11,opt,name=extrapolator,proto3,oneof"`
}

type Component_Max struct {
	// Emits the maximum of the input signals.
	Max *Max `protobuf:"bytes,12,opt,name=max,proto3,oneof"`
}

type Component_Min struct {
	// Emits the minimum of the input signals.
	Min *Min `protobuf:"bytes,13,opt,name=min,proto3,oneof"`
}

type Component_FirstValid struct {
	// Picks the first valid input signal and emits it.
	FirstValid *FirstValid `protobuf:"bytes,14,opt,name=first_valid,json=firstValid,proto3,oneof"`
}

func (*Component_GradientController) isComponent_Component() {}

func (*Component_Ema) isComponent_Component() {}

func (*Component_ArithmeticCombinator) isComponent_Component() {}

func (*Component_Decider) isComponent_Component() {}

func (*Component_Switcher) isComponent_Component() {}

func (*Component_ConcurrencyLimiter) isComponent_Component() {}

func (*Component_RateLimiter) isComponent_Component() {}

func (*Component_Promql) isComponent_Component() {}

func (*Component_Constant) isComponent_Component() {}

func (*Component_Sqrt) isComponent_Component() {}

func (*Component_Extrapolator) isComponent_Component() {}

func (*Component_Max) isComponent_Component() {}

func (*Component_Min) isComponent_Component() {}

func (*Component_FirstValid) isComponent_Component() {}

// Components receive input from other components via InPorts
type InPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*InPort_SignalName
	//	*InPort_ConstantValue
	Value isInPort_Value `protobuf_oneof:"value"`
}

func (x *InPort) Reset() {
	*x = InPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InPort) ProtoMessage() {}

func (x *InPort) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InPort.ProtoReflect.Descriptor instead.
func (*InPort) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{6}
}

func (m *InPort) GetValue() isInPort_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *InPort) GetSignalName() string {
	if x, ok := x.GetValue().(*InPort_SignalName); ok {
		return x.SignalName
	}
	return ""
}

func (x *InPort) GetConstantValue() float64 {
	if x, ok := x.GetValue().(*InPort_ConstantValue); ok {
		return x.ConstantValue
	}
	return 0
}

type isInPort_Value interface {
	isInPort_Value()
}

type InPort_SignalName struct {
	// Name of the incoming Signal on the InPort.
	SignalName string `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3,oneof"`
}

type InPort_ConstantValue struct {
	// Constant value to be used for this InPort instead of a signal.
	ConstantValue float64 `protobuf:"fixed64,2,opt,name=constant_value,json=constantValue,proto3,oneof"`
}

func (*InPort_SignalName) isInPort_Value() {}

func (*InPort_ConstantValue) isInPort_Value() {}

// Components produce output for other components via OutPorts
type OutPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the outgoing Signal on the OutPort.
	SignalName string `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
}

func (x *OutPort) Reset() {
	*x = OutPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutPort) ProtoMessage() {}

func (x *OutPort) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutPort.ProtoReflect.Descriptor instead.
func (*OutPort) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{7}
}

func (x *OutPort) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

// Gradient controller is a type of controller which tries to adjust the
// control variable proportionally to the relative difference between setpoint
// and actual value of the signal
//
// The `gradient` describes a corrective factor that should be applied to the
// control variable to get the signal closer to the setpoint. It is computed as follows:
//
// $$
// \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
// $$
//
// `gradient` is then clamped to [min_gradient, max_gradient] range.
//
// The output of gradient controller is computed as follows:
// $$
// \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
// $$
//
// Note the additional `optimize` signal, that can be used to "nudge" the
// controller into desired idle state.
//
// The output can be _optionally_ clamped to desired range using `max` and
// `min` input.
type GradientController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports of the Gradient Controller.
	InPorts *GradientController_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports of the Gradient Controller.
	OutPorts *GradientController_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Slope controls the aggressiveness and direction of the Gradient Controller.
	//
	// Slope is used as exponent on the signal to setpoint ratio in computation
	// of the gradient (see the [main description](#v1-gradient-controller) for
	// exact equation). Good intuition for this parameter is "What should the
	// Gradient Controller do to the control variable when signal is too high",
	// eg.:
	// * $\text{slope} = 1$: when signal is too high, increase control variable,
	// * $\text{slope} = -1$: when signal is too high, decrease control variable,
	// * $\text{slope} = -0.5$: when signal is to high, decrease control variable more slowly.
	//
	// The sign of slope depends on correlation between the signal and control variable:
	// * Use $\text{slope} < 0$ if signal and control variable are _positively_
	// correlated (eg. Per-pod CPU usage and total concurrency).
	// * Use $\text{slope} > 0$ if signal and control variable are _negatively_
	// correlated (eg. Per-pod CPU usage and number of pods).
	//
	// :::note
	// You need to set _negative_ slope for a _positive_ correlation, as you're
	// describing the _action_ which controller should make when the signal
	// increases.
	// :::
	//
	// The magnitude of slope describes how aggressively should the controller
	// react to a deviation of signal.
	// With $|\text{slope}| = 1$, the controller will aim to bring the signal to
	// the setpoint in one tick (assuming linear correlation with signal and setpoint).
	// Smaller magnitudes of slope will make the controller adjust the control
	// variable more slowly.
	//
	// We recommend setting $|\text{slope}| < 1$ (eg. $\pm0.8$).
	// If you experience overshooting, consider lowering the magnitude even more.
	// Values of $|\text{slope}| > 1$ are not recommended.
	//
	// :::note
	// Remember that the gradient and output signal can be (optionally) clamped,
	// so the _slope_ might not fully describe aggressiveness of the controller.
	// :::
	Slope float64 `protobuf:"fixed64,3,opt,name=slope,proto3" json:"slope,omitempty" validate:"required"` // @gotags: validate:"required"
	// Minimum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].
	MinGradient float64 `protobuf:"fixed64,4,opt,name=min_gradient,json=minGradient,proto3" json:"min_gradient,omitempty" default:"-1.79769313486231570814527423731704356798070e+308"` // @gotags: default:"-1.79769313486231570814527423731704356798070e+308"
	// Maximum gradient which clamps the computed gradient value to the range, [min_gradient, max_gradient].
	MaxGradient float64 `protobuf:"fixed64,5,opt,name=max_gradient,json=maxGradient,proto3" json:"max_gradient,omitempty" default:"1.79769313486231570814527423731704356798070e+308"` // @gotags: default:"1.79769313486231570814527423731704356798070e+308"
	// Configuration key for DynamicConfig
	DynamicConfigKey string `protobuf:"bytes,6,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Initial configuration.
	InitConfig *ControllerDynamicConfig `protobuf:"bytes,7,opt,name=init_config,json=initConfig,proto3" json:"init_config,omitempty"`
}

func (x *GradientController) Reset() {
	*x = GradientController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController) ProtoMessage() {}

func (x *GradientController) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController.ProtoReflect.Descriptor instead.
func (*GradientController) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{8}
}

func (x *GradientController) GetInPorts() *GradientController_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *GradientController) GetOutPorts() *GradientController_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *GradientController) GetSlope() float64 {
	if x != nil {
		return x.Slope
	}
	return 0
}

func (x *GradientController) GetMinGradient() float64 {
	if x != nil {
		return x.MinGradient
	}
	return 0
}

func (x *GradientController) GetMaxGradient() float64 {
	if x != nil {
		return x.MaxGradient
	}
	return 0
}

func (x *GradientController) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *GradientController) GetInitConfig() *ControllerDynamicConfig {
	if x != nil {
		return x.InitConfig
	}
	return nil
}

// Dynamic Configuration for a Controller
type ControllerDynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Decides whether the controller runs in "manual_mode".
	// In manual mode, the controller does not adjust the control variable I.E. emits the same output as the control variable input.
	ManualMode bool `protobuf:"varint,1,opt,name=manual_mode,json=manualMode,proto3" json:"manual_mode,omitempty" default:"false"` // @gotags: default:"false"
}

func (x *ControllerDynamicConfig) Reset() {
	*x = ControllerDynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerDynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerDynamicConfig) ProtoMessage() {}

func (x *ControllerDynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerDynamicConfig.ProtoReflect.Descriptor instead.
func (*ControllerDynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{9}
}

func (x *ControllerDynamicConfig) GetManualMode() bool {
	if x != nil {
		return x.ManualMode
	}
	return false
}

// Exponential Moving Average (EMA) is a type of moving average that applies exponentially more weight to recent signal readings
//
// At any time EMA component operates in one of the following states:
// 1. Warm up state: The first warm_up_window samples are used to compute the initial EMA.
//    If an invalid reading is received during the warm_up_window, the last good average is emitted and the state gets reset back to beginning of Warm up state.
// 2. Normal state: The EMA is computed using following formula.
//
// The EMA for a series $Y$ is calculated recursively as:
//
// $$
// \text{EMA} _t =
// \begin{cases}
//   Y_0, &\text{for } t = 0 \\
//   \alpha Y_t + (1 - \alpha) \text{EMA} _{t-1}, &\text{for }t > 0
// \end{cases}
// $$
//
// The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
// A higher $\alpha$ discounts older observations faster.
// The $\alpha$ is computed using ema\_window:
//
// $$
// \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
// $$
//
// The EMA filter also employs a min-max-envelope logic during warm up stage, explained [here](#v1-e-m-a-ins).
type EMA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the EMA component.
	InPorts *EMA_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the EMA component.
	OutPorts *EMA_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Duration of EMA sampling window.
	EmaWindow *durationpb.Duration `protobuf:"bytes,3,opt,name=ema_window,json=emaWindow,proto3" json:"ema_window,omitempty" default:"5s"` // @gotags: default:"5s"
	// Duration of EMA warming up window.
	//
	// The initial value of the EMA is the average of signal readings received during the warm up window.
	WarmUpWindow *durationpb.Duration `protobuf:"bytes,4,opt,name=warm_up_window,json=warmUpWindow,proto3" json:"warm_up_window,omitempty" default:"0s"` // @gotags: default:"0s"
	// Correction factor to apply on the output value if its in violation of the min envelope.
	CorrectionFactorOnMinEnvelopeViolation float64 `protobuf:"fixed64,5,opt,name=correction_factor_on_min_envelope_violation,json=correctionFactorOnMinEnvelopeViolation,proto3" json:"correction_factor_on_min_envelope_violation,omitempty" validate:"gte=1.0" default:"1.0"` // @gotags: validate:"gte=1.0" default:"1.0"
	// Correction factor to apply on the output value if its in violation of the max envelope.
	CorrectionFactorOnMaxEnvelopeViolation float64 `protobuf:"fixed64,6,opt,name=correction_factor_on_max_envelope_violation,json=correctionFactorOnMaxEnvelopeViolation,proto3" json:"correction_factor_on_max_envelope_violation,omitempty" validate:"gte=0,lte=1.0" default:"1.0"` // @gotags: validate:"gte=0,lte=1.0" default:"1.0"
}

func (x *EMA) Reset() {
	*x = EMA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA) ProtoMessage() {}

func (x *EMA) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA.ProtoReflect.Descriptor instead.
func (*EMA) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{10}
}

func (x *EMA) GetInPorts() *EMA_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *EMA) GetOutPorts() *EMA_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *EMA) GetEmaWindow() *durationpb.Duration {
	if x != nil {
		return x.EmaWindow
	}
	return nil
}

func (x *EMA) GetWarmUpWindow() *durationpb.Duration {
	if x != nil {
		return x.WarmUpWindow
	}
	return nil
}

func (x *EMA) GetCorrectionFactorOnMinEnvelopeViolation() float64 {
	if x != nil {
		return x.CorrectionFactorOnMinEnvelopeViolation
	}
	return 0
}

func (x *EMA) GetCorrectionFactorOnMaxEnvelopeViolation() float64 {
	if x != nil {
		return x.CorrectionFactorOnMaxEnvelopeViolation
	}
	return 0
}

// Type of combinator that computes the arithmetic operation on the operand signals
type ArithmeticCombinator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Arithmetic Combinator component.
	InPorts *ArithmeticCombinator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Arithmetic Combinator component.
	OutPorts *ArithmeticCombinator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Operator of the arithmetic operation.
	//
	// The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
	// In case of XOR and bitshifts, value of signals is cast to integers before performing the operation.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=add sub mul div xor lshift rshift"` // @gotags: validate:"oneof=add sub mul div xor lshift rshift"
}

func (x *ArithmeticCombinator) Reset() {
	*x = ArithmeticCombinator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator) ProtoMessage() {}

func (x *ArithmeticCombinator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11}
}

func (x *ArithmeticCombinator) GetInPorts() *ArithmeticCombinator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *ArithmeticCombinator) GetOutPorts() *ArithmeticCombinator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *ArithmeticCombinator) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

// Type of combinator that computes the comparison operation on lhs and rhs signals
//
// The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.
//
// This component also supports time-based response, i.e. the output
// transitions between 1.0 or 0.0 signal if the decider condition is
// true or false for at least "true_for" or "false_for" duration. If
// `true_for` and `false_for` durations are zero then the transitions are
// instantaneous.
type Decider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Decider component.
	InPorts *Decider_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Decider component.
	OutPorts *Decider_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Comparison operator that computes operation on lhs and rhs input signals.
	Operator string `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=gt lt gte lte eq neq"` // @gotags: validate:"oneof=gt lt gte lte eq neq"
	// Duration of time to wait before a transition to true state.
	// If the duration is zero, the transition will happen instantaneously.
	TrueFor *durationpb.Duration `protobuf:"bytes,4,opt,name=true_for,json=trueFor,proto3" json:"true_for,omitempty" default:"0s"` // @gotags: default:"0s"
	// Duration of time to wait before a transition to false state.
	// If the duration is zero, the transition will happen instantaneously.
	FalseFor *durationpb.Duration `protobuf:"bytes,5,opt,name=false_for,json=falseFor,proto3" json:"false_for,omitempty" default:"0s"` // @gotags: default:"0s"
}

func (x *Decider) Reset() {
	*x = Decider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider) ProtoMessage() {}

func (x *Decider) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider.ProtoReflect.Descriptor instead.
func (*Decider) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12}
}

func (x *Decider) GetInPorts() *Decider_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Decider) GetOutPorts() *Decider_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Decider) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Decider) GetTrueFor() *durationpb.Duration {
	if x != nil {
		return x.TrueFor
	}
	return nil
}

func (x *Decider) GetFalseFor() *durationpb.Duration {
	if x != nil {
		return x.FalseFor
	}
	return nil
}

// Type of combinator that switches between `on_true` and `on_false` signals based on switch input
//
// `on_true` will be returned if switch input is valid and not equal to 0.0 ,
//  otherwise `on_false` will be returned.
type Switcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Switcher component.
	InPorts *Switcher_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Switcher component.
	OutPorts *Switcher_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Switcher) Reset() {
	*x = Switcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher) ProtoMessage() {}

func (x *Switcher) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher.ProtoReflect.Descriptor instead.
func (*Switcher) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{13}
}

func (x *Switcher) GetInPorts() *Switcher_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Switcher) GetOutPorts() *Switcher_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Limits the traffic on a control point to specified rate
//
// :::info
// See also [Rate Limiter overview](/concepts/flow-control/rate-limiter.md).
// :::
//
// Ratelimiting is done separately on per-label-value basis. Use _label\_key_
// to select which label should be used as key.
type RateLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts *RateLimiter_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty" validate:"required"` // @gotags: validate:"required"
	// Which control point to apply this ratelimiter to.
	Selector *v1.Selector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty" validate:"required"` // @gotags: validate:"required"
	// Time after which the limit for a given label value will be reset.
	LimitResetInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=limit_reset_interval,json=limitResetInterval,proto3" json:"limit_reset_interval,omitempty" default:"60s"` // @gotags: default:"60s"
	// Specifies which label the ratelimiter should be keyed by.
	//
	// Rate limiting is done independently for each value of the
	// [label](/concepts/flow-control/flow-label.md) with given key.
	// Eg., to give each user a separate limit, assuming you have a _user_ flow
	// label set up, set `label_key: "user"`.
	LabelKey string `protobuf:"bytes,4,opt,name=label_key,json=labelKey,proto3" json:"label_key,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration of lazy-syncing behaviour of ratelimiter
	LazySync *RateLimiter_LazySync `protobuf:"bytes,5,opt,name=lazy_sync,json=lazySync,proto3" json:"lazy_sync,omitempty"`
	// Configuration key for DynamicConfig
	DynamicConfigKey string `protobuf:"bytes,6,opt,name=dynamic_config_key,json=dynamicConfigKey,proto3" json:"dynamic_config_key,omitempty"`
	// Initial configuration
	InitConfig *RateLimiter_DynamicConfig `protobuf:"bytes,7,opt,name=init_config,json=initConfig,proto3" json:"init_config,omitempty"`
}

func (x *RateLimiter) Reset() {
	*x = RateLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter) ProtoMessage() {}

func (x *RateLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter.ProtoReflect.Descriptor instead.
func (*RateLimiter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14}
}

func (x *RateLimiter) GetInPorts() *RateLimiter_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *RateLimiter) GetSelector() *v1.Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *RateLimiter) GetLimitResetInterval() *durationpb.Duration {
	if x != nil {
		return x.LimitResetInterval
	}
	return nil
}

func (x *RateLimiter) GetLabelKey() string {
	if x != nil {
		return x.LabelKey
	}
	return ""
}

func (x *RateLimiter) GetLazySync() *RateLimiter_LazySync {
	if x != nil {
		return x.LazySync
	}
	return nil
}

func (x *RateLimiter) GetDynamicConfigKey() string {
	if x != nil {
		return x.DynamicConfigKey
	}
	return ""
}

func (x *RateLimiter) GetInitConfig() *RateLimiter_DynamicConfig {
	if x != nil {
		return x.InitConfig
	}
	return nil
}

// Concurrency Limiter is an actuator component that regulates flows in order to provide active service protection
//
// :::info
// See also [Concurrency Limiter overview](/concepts/flow-control/concurrency-limiter.md).
// :::
//
// It is based on the actuation strategy (e.g. load shed) and workload scheduling which is based on Weighted Fair Queuing principles.
// Concurrency is calculated in terms of total tokens which translate to (avg. latency \* in-flight requests), i.e. Little's Law.
//
// ConcurrencyLimiter configuration is split into two parts: An actuation
// strategy and a scheduler. Right now, only `load_shed_actuator` strategy is available.
type ConcurrencyLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selector decides the service and flows at which the concurrency limiter is applied.
	Selector *v1.Selector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty" validate:"required"` // @gotags: validate:"required"
	// Configuration of Weighted Fair Queuing-based workload scheduler.
	//
	// Contains configuration of per-agent scheduler, and also defines some
	// output signals.
	Scheduler *Scheduler `protobuf:"bytes,2,opt,name=scheduler,proto3" json:"scheduler,omitempty" validate:"required"` // @gotags: validate:"required"
	// Types that are assignable to ActuationStrategy:
	//	*ConcurrencyLimiter_LoadShedActuator
	ActuationStrategy isConcurrencyLimiter_ActuationStrategy `protobuf_oneof:"actuation_strategy"`
}

func (x *ConcurrencyLimiter) Reset() {
	*x = ConcurrencyLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimiter) ProtoMessage() {}

func (x *ConcurrencyLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimiter.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimiter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{15}
}

func (x *ConcurrencyLimiter) GetSelector() *v1.Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *ConcurrencyLimiter) GetScheduler() *Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (m *ConcurrencyLimiter) GetActuationStrategy() isConcurrencyLimiter_ActuationStrategy {
	if m != nil {
		return m.ActuationStrategy
	}
	return nil
}

func (x *ConcurrencyLimiter) GetLoadShedActuator() *LoadShedActuator {
	if x, ok := x.GetActuationStrategy().(*ConcurrencyLimiter_LoadShedActuator); ok {
		return x.LoadShedActuator
	}
	return nil
}

type isConcurrencyLimiter_ActuationStrategy interface {
	isConcurrencyLimiter_ActuationStrategy()
}

type ConcurrencyLimiter_LoadShedActuator struct {
	// Actuator based on load shedding a portion of requests.
	//
	// Actuation strategy defines the input signal that will drive the scheduler.
	LoadShedActuator *LoadShedActuator `protobuf:"bytes,3,opt,name=load_shed_actuator,json=loadShedActuator,proto3,oneof"`
}

func (*ConcurrencyLimiter_LoadShedActuator) isConcurrencyLimiter_ActuationStrategy() {}

// Weighted Fair Queuing-based workload scheduler
//
// :::note
// Each Agent instantiates an independent copy of the scheduler, but output
// signal are aggregated across all agents.
// :::
//
// See [ConcurrencyLimiter](#v1-concurrency-limiter) for more context.
type Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the Scheduler component.
	OutPorts *Scheduler_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// List of workloads to be used in scheduler.
	//
	// Categorizing [flows](/concepts/flow-control/flow-control.md#flow) into workloads
	// allows for load-shedding to be "smarter" than just "randomly deny 50% of
	// requests". There are two aspects of this "smartness":
	// * Scheduler can more precisely calculate concurrency if it understands
	//   that flows belonging to different classes have different weights (eg.
	//   inserts vs lookups).
	// * Setting different priorities to different workloads lets the scheduler
	//   avoid dropping important traffic during overload.
	//
	// Each workload in this list specifies also a matcher that's used to
	// determine which flow will be categorized into which workload.
	// In case of multiple matching workloads, the first matching one will be used.
	// If none of workloads match, `default_workload` will be used.
	//
	// :::info
	// See also [workload definition in the concepts
	// section](/concepts/flow-control/concurrency-limiter.md#workload).
	// :::
	Workloads []*Scheduler_Workload `protobuf:"bytes,2,rep,name=workloads,proto3" json:"workloads,omitempty" validate:"dive"` // @gotags: validate:"dive"
	// WorkloadParameters to be used if none of workloads specified in `workloads` match.
	DefaultWorkloadParameters *Scheduler_WorkloadParameters `protobuf:"bytes,3,opt,name=default_workload_parameters,json=defaultWorkloadParameters,proto3" json:"default_workload_parameters,omitempty" validate:"required"` // @gotags: validate:"required"
	// Automatically estimate the size of a request in each workload, based on
	// historical latency. Each workload's `tokens` will be set to average
	// latency of flows in that workload during last few seconds (exact duration
	// of this average can change).
	AutoTokens bool `protobuf:"varint,4,opt,name=auto_tokens,json=autoTokens,proto3" json:"auto_tokens,omitempty" default:"true"` // @gotags: default:"true"
	// Timeout as a factor of tokens for a flow in a workload
	//
	// If a flow is not able to get tokens within `timeout_factor` * `tokens` of duration,
	// it will be rejected.
	//
	// This value impacts the prioritization and fairness because the larger the timeout the higher the chance a request has to get scheduled.
	TimeoutFactor float64 `protobuf:"fixed64,5,opt,name=timeout_factor,json=timeoutFactor,proto3" json:"timeout_factor,omitempty" validate:"gte=0.0" default:"0.5"` // @gotags: validate:"gte=0.0" default:"0.5"
	// Max Timeout is the value with which the flow timeout calculated by `timeout_factor` is capped
	//
	// :::caution
	// This timeout needs to be strictly less than the timeout set on the
	// client for the whole GRPC call:
	// * in case of envoy, timeout set on `grpc_service` used in `ext_authz` filter,
	// * in case of libraries, timeout configured... TODO.
	//
	// We're using fail-open logic in integrations, so if the GRPC timeout
	// fires first, the flow will end up being unconditionally allowed while
	// it're still waiting on the scheduler.
	//
	// To avoid such cases, the end-to-end GRPC timeout should also contain
	// some headroom for constant overhead like serialization, etc. Default
	// value for GRPC timeouts is 500ms, giving 50ms of headeroom, so when
	// tweaking this timeout, make sure to adjust the GRPC timeout accordingly.
	// :::
	MaxTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=max_timeout,json=maxTimeout,proto3" json:"max_timeout,omitempty" default:"0.45s"` // @gotags: default:"0.45s"
}

func (x *Scheduler) Reset() {
	*x = Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler) ProtoMessage() {}

func (x *Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler.ProtoReflect.Descriptor instead.
func (*Scheduler) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16}
}

func (x *Scheduler) GetOutPorts() *Scheduler_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Scheduler) GetWorkloads() []*Scheduler_Workload {
	if x != nil {
		return x.Workloads
	}
	return nil
}

func (x *Scheduler) GetDefaultWorkloadParameters() *Scheduler_WorkloadParameters {
	if x != nil {
		return x.DefaultWorkloadParameters
	}
	return nil
}

func (x *Scheduler) GetAutoTokens() bool {
	if x != nil {
		return x.AutoTokens
	}
	return false
}

func (x *Scheduler) GetTimeoutFactor() float64 {
	if x != nil {
		return x.TimeoutFactor
	}
	return 0
}

func (x *Scheduler) GetMaxTimeout() *durationpb.Duration {
	if x != nil {
		return x.MaxTimeout
	}
	return nil
}

// Takes the load shed factor input signal and publishes it to the schedulers in the data-plane
type LoadShedActuator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Load Shed Actuator component.
	InPorts *LoadShedActuator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
}

func (x *LoadShedActuator) Reset() {
	*x = LoadShedActuator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadShedActuator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadShedActuator) ProtoMessage() {}

func (x *LoadShedActuator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadShedActuator.ProtoReflect.Descriptor instead.
func (*LoadShedActuator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{17}
}

func (x *LoadShedActuator) GetInPorts() *LoadShedActuator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

// Component that runs a Prometheus query periodically and returns the result as an output signal
type PromQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the PromQL component.
	OutPorts *PromQL_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Describes the Prometheus query to be run.
	//
	// :::caution
	// TODO we should describe how to construct the query, eg. how to employ the
	// fluxmeters here or link to appropriate place in docs.
	// :::
	QueryString string `protobuf:"bytes,2,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	// Describes the interval between successive evaluations of the Prometheus query.
	EvaluationInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=evaluation_interval,json=evaluationInterval,proto3" json:"evaluation_interval,omitempty" default:"10s"` // @gotags: default:"10s"
}

func (x *PromQL) Reset() {
	*x = PromQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromQL) ProtoMessage() {}

func (x *PromQL) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromQL.ProtoReflect.Descriptor instead.
func (*PromQL) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18}
}

func (x *PromQL) GetOutPorts() *PromQL_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *PromQL) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *PromQL) GetEvaluationInterval() *durationpb.Duration {
	if x != nil {
		return x.EvaluationInterval
	}
	return nil
}

// Component that emits a constant value as an output signal
type Constant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output ports for the Constant component.
	OutPorts *Constant_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// The constant value to be emitted.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Constant) Reset() {
	*x = Constant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant) ProtoMessage() {}

func (x *Constant) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant.ProtoReflect.Descriptor instead.
func (*Constant) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{19}
}

func (x *Constant) GetOutPorts() *Constant_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Constant) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Takes an input signal and emits the square root of it multiplied by scale as an output
//
// $$
// \text{output} = \text{scale} \sqrt{\text{input}}
// $$
type Sqrt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Sqrt component.
	InPorts *Sqrt_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Sqrt component.
	OutPorts *Sqrt_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Scaling factor to be multiplied with the square root of the input signal.
	Scale float64 `protobuf:"fixed64,3,opt,name=scale,proto3" json:"scale,omitempty"` // @gotags default:"1.0"
}

func (x *Sqrt) Reset() {
	*x = Sqrt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt) ProtoMessage() {}

func (x *Sqrt) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt.ProtoReflect.Descriptor instead.
func (*Sqrt) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{20}
}

func (x *Sqrt) GetInPorts() *Sqrt_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Sqrt) GetOutPorts() *Sqrt_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Sqrt) GetScale() float64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

// Extrapolates the input signal by repeating the last valid value during the period in which it is invalid
//
// It does so until `maximum_extrapolation_interval` is reached, beyond which it emits invalid signal unless input signal becomes valid again.
type Extrapolator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Extrapolator component.
	InPorts *Extrapolator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Extrapolator component.
	OutPorts *Extrapolator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	// Maximum time interval to repeat the last valid value of input signal.
	MaxExtrapolationInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=max_extrapolation_interval,json=maxExtrapolationInterval,proto3" json:"max_extrapolation_interval,omitempty" default:"10s"` // @gotags: default:"10s"
}

func (x *Extrapolator) Reset() {
	*x = Extrapolator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator) ProtoMessage() {}

func (x *Extrapolator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator.ProtoReflect.Descriptor instead.
func (*Extrapolator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{21}
}

func (x *Extrapolator) GetInPorts() *Extrapolator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Extrapolator) GetOutPorts() *Extrapolator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Extrapolator) GetMaxExtrapolationInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxExtrapolationInterval
	}
	return nil
}

// Takes a list of input signals and emits the signal with the maximum value
//
// Max: output = max([]inputs).
type Max struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Max component.
	InPorts *Max_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Max component.
	OutPorts *Max_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Max) Reset() {
	*x = Max{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max) ProtoMessage() {}

func (x *Max) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max.ProtoReflect.Descriptor instead.
func (*Max) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{22}
}

func (x *Max) GetInPorts() *Max_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Max) GetOutPorts() *Max_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Takes an array of input signals and emits the signal with the minimum value
// Min: output = min([]inputs).
type Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the Min component.
	InPorts *Min_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the Min component.
	OutPorts *Min_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Min) Reset() {
	*x = Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min) ProtoMessage() {}

func (x *Min) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min.ProtoReflect.Descriptor instead.
func (*Min) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{23}
}

func (x *Min) GetInPorts() *Min_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Min) GetOutPorts() *Min_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Picks the first valid input signal from the array of input signals and emits it as an output signal
type FirstValid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input ports for the FirstValid component.
	InPorts *FirstValid_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	// Output ports for the FirstValid component.
	OutPorts *FirstValid_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *FirstValid) Reset() {
	*x = FirstValid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid) ProtoMessage() {}

func (x *FirstValid) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid.ProtoReflect.Descriptor instead.
func (*FirstValid) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{24}
}

func (x *FirstValid) GetInPorts() *FirstValid_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *FirstValid) GetOutPorts() *FirstValid_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// Inputs for the Gradient Controller component.
type GradientController_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal to be used for the gradient computation.
	Signal *InPort `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// Setpoint to be used for the gradient computation.
	Setpoint *InPort `protobuf:"bytes,2,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
	// Optimize signal is added to the output of the gradient calculation.
	Optimize *InPort `protobuf:"bytes,3,opt,name=optimize,proto3" json:"optimize,omitempty"`
	// Maximum value to limit the output signal.
	Max *InPort `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	// Minimum value to limit the output signal.
	Min *InPort `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	// Actual current value of the control variable.
	//
	// This signal is multiplied by the gradient to produce the output.
	ControlVariable *InPort `protobuf:"bytes,6,opt,name=control_variable,json=controlVariable,proto3" json:"control_variable,omitempty"`
}

func (x *GradientController_Ins) Reset() {
	*x = GradientController_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Ins) ProtoMessage() {}

func (x *GradientController_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Ins.ProtoReflect.Descriptor instead.
func (*GradientController_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{8, 0}
}

func (x *GradientController_Ins) GetSignal() *InPort {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *GradientController_Ins) GetSetpoint() *InPort {
	if x != nil {
		return x.Setpoint
	}
	return nil
}

func (x *GradientController_Ins) GetOptimize() *InPort {
	if x != nil {
		return x.Optimize
	}
	return nil
}

func (x *GradientController_Ins) GetMax() *InPort {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *GradientController_Ins) GetMin() *InPort {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *GradientController_Ins) GetControlVariable() *InPort {
	if x != nil {
		return x.ControlVariable
	}
	return nil
}

// Outputs for the Gradient Controller component.
type GradientController_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Computed desired value of the control variable.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GradientController_Outs) Reset() {
	*x = GradientController_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Outs) ProtoMessage() {}

func (x *GradientController_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Outs.ProtoReflect.Descriptor instead.
func (*GradientController_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{8, 1}
}

func (x *GradientController_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the EMA component.
type EMA_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal to be used for the EMA computation.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Upper bound of the moving average.
	//
	// Used during the warm-up stage: if the signal would exceed `max_envelope`
	// it's multiplied by `correction_factor_on_max_envelope_violation` **once per tick**.
	//
	// :::note
	// If the signal deviates from `max_envelope` faster than the correction
	// faster, it might end up exceeding the envelope.
	// :::
	//
	// :::note
	// The envelope logic is **not** used outside the warm-up stage!
	// :::
	MaxEnvelope *InPort `protobuf:"bytes,2,opt,name=max_envelope,json=maxEnvelope,proto3" json:"max_envelope,omitempty"`
	// Lower bound of the moving average.
	//
	// Used during the warm-up stage analogously to `max_envelope`.
	MinEnvelope *InPort `protobuf:"bytes,3,opt,name=min_envelope,json=minEnvelope,proto3" json:"min_envelope,omitempty"`
}

func (x *EMA_Ins) Reset() {
	*x = EMA_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Ins) ProtoMessage() {}

func (x *EMA_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Ins.ProtoReflect.Descriptor instead.
func (*EMA_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{10, 0}
}

func (x *EMA_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EMA_Ins) GetMaxEnvelope() *InPort {
	if x != nil {
		return x.MaxEnvelope
	}
	return nil
}

func (x *EMA_Ins) GetMinEnvelope() *InPort {
	if x != nil {
		return x.MinEnvelope
	}
	return nil
}

// Outputs for the EMA component.
type EMA_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exponential moving average of the series of reading as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *EMA_Outs) Reset() {
	*x = EMA_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Outs) ProtoMessage() {}

func (x *EMA_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Outs.ProtoReflect.Descriptor instead.
func (*EMA_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{10, 1}
}

func (x *EMA_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Arithmetic Combinator component.
type ArithmeticCombinator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left hand side of the arithmetic operation.
	Lhs *InPort `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Right hand side of the arithmetic operation.
	Rhs *InPort `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *ArithmeticCombinator_Ins) Reset() {
	*x = ArithmeticCombinator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator_Ins) ProtoMessage() {}

func (x *ArithmeticCombinator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator_Ins.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ArithmeticCombinator_Ins) GetLhs() *InPort {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *ArithmeticCombinator_Ins) GetRhs() *InPort {
	if x != nil {
		return x.Rhs
	}
	return nil
}

// Outputs for the Arithmetic Combinator component.
type ArithmeticCombinator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result of arithmetic operation.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ArithmeticCombinator_Outs) Reset() {
	*x = ArithmeticCombinator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator_Outs) ProtoMessage() {}

func (x *ArithmeticCombinator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator_Outs.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ArithmeticCombinator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Decider component.
type Decider_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left hand side input signal for the comparison operation.
	Lhs *InPort `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Right hand side input signal for the comparison operation.
	Rhs *InPort `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *Decider_Ins) Reset() {
	*x = Decider_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider_Ins) ProtoMessage() {}

func (x *Decider_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider_Ins.ProtoReflect.Descriptor instead.
func (*Decider_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Decider_Ins) GetLhs() *InPort {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *Decider_Ins) GetRhs() *InPort {
	if x != nil {
		return x.Rhs
	}
	return nil
}

// Outputs for the Decider component.
type Decider_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selected signal (1.0 or 0.0).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Decider_Outs) Reset() {
	*x = Decider_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider_Outs) ProtoMessage() {}

func (x *Decider_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider_Outs.ProtoReflect.Descriptor instead.
func (*Decider_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Decider_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Switcher component.
type Switcher_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output signal when switch is valid and not 0.0.
	OnTrue *InPort `protobuf:"bytes,1,opt,name=on_true,json=onTrue,proto3" json:"on_true,omitempty"`
	// Output signal when switch is invalid or 0.0.
	OnFalse *InPort `protobuf:"bytes,2,opt,name=on_false,json=onFalse,proto3" json:"on_false,omitempty"`
	// Decides whether to return on_true or on_false.
	Switch *InPort `protobuf:"bytes,3,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (x *Switcher_Ins) Reset() {
	*x = Switcher_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher_Ins) ProtoMessage() {}

func (x *Switcher_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher_Ins.ProtoReflect.Descriptor instead.
func (*Switcher_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Switcher_Ins) GetOnTrue() *InPort {
	if x != nil {
		return x.OnTrue
	}
	return nil
}

func (x *Switcher_Ins) GetOnFalse() *InPort {
	if x != nil {
		return x.OnFalse
	}
	return nil
}

func (x *Switcher_Ins) GetSwitch() *InPort {
	if x != nil {
		return x.Switch
	}
	return nil
}

// Outputs for the Switcher component.
type Switcher_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selected signal (on_true or on_false).
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Switcher_Outs) Reset() {
	*x = Switcher_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switcher_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switcher_Outs) ProtoMessage() {}

func (x *Switcher_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switcher_Outs.ProtoReflect.Descriptor instead.
func (*Switcher_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Switcher_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

type RateLimiter_LazySync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Enables lazy sync
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" default:"false"` // @gotags: default:"false"
	// Number of times to lazy sync within the _limit\_reset\_interval_.
	NumSync uint32 `protobuf:"varint,2,opt,name=num_sync,json=numSync,proto3" json:"num_sync,omitempty" default:"5" validate:"gt=0"` // @gotags: default:"5" validate:"gt=0"
}

func (x *RateLimiter_LazySync) Reset() {
	*x = RateLimiter_LazySync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_LazySync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_LazySync) ProtoMessage() {}

func (x *RateLimiter_LazySync) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_LazySync.ProtoReflect.Descriptor instead.
func (*RateLimiter_LazySync) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RateLimiter_LazySync) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RateLimiter_LazySync) GetNumSync() uint32 {
	if x != nil {
		return x.NumSync
	}
	return 0
}

// Dynamic Configuration for the rate limiter
type RateLimiter_DynamicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows to specify different limits for particular label values.
	Overrides []*RateLimiter_Override `protobuf:"bytes,1,rep,name=overrides,proto3" json:"overrides,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *RateLimiter_DynamicConfig) Reset() {
	*x = RateLimiter_DynamicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_DynamicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_DynamicConfig) ProtoMessage() {}

func (x *RateLimiter_DynamicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_DynamicConfig.ProtoReflect.Descriptor instead.
func (*RateLimiter_DynamicConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14, 1}
}

func (x *RateLimiter_DynamicConfig) GetOverrides() []*RateLimiter_Override {
	if x != nil {
		return x.Overrides
	}
	return nil
}

type RateLimiter_Override struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value of the label for which the override should be applied.
	LabelValue string `protobuf:"bytes,1,opt,name=label_value,json=labelValue,proto3" json:"label_value,omitempty" validate:"required"` // @gotags: validate:"required"
	// Amount by which the _in\_ports.limit_ should be multiplied for this label value.
	LimitScaleFactor float64 `protobuf:"fixed64,2,opt,name=limit_scale_factor,json=limitScaleFactor,proto3" json:"limit_scale_factor,omitempty" default:"1.0"` // @gotags: default:"1.0"
}

func (x *RateLimiter_Override) Reset() {
	*x = RateLimiter_Override{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_Override) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_Override) ProtoMessage() {}

func (x *RateLimiter_Override) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_Override.ProtoReflect.Descriptor instead.
func (*RateLimiter_Override) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14, 2}
}

func (x *RateLimiter_Override) GetLabelValue() string {
	if x != nil {
		return x.LabelValue
	}
	return ""
}

func (x *RateLimiter_Override) GetLimitScaleFactor() float64 {
	if x != nil {
		return x.LimitScaleFactor
	}
	return 0
}

// Inputs for the RateLimiter component
type RateLimiter_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of flows allowed per _limit\_reset\_interval_ per each label.
	// Negative values disable the ratelimiter.
	//
	// :::tip
	// Negative limit can be useful to _conditionally_ enable the ratelimiter
	// under certain circumstances. [Decider](#v1-decider) might be helpful.
	// :::
	Limit *InPort `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *RateLimiter_Ins) Reset() {
	*x = RateLimiter_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_Ins) ProtoMessage() {}

func (x *RateLimiter_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_Ins.ProtoReflect.Descriptor instead.
func (*RateLimiter_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14, 3}
}

func (x *RateLimiter_Ins) GetLimit() *InPort {
	if x != nil {
		return x.Limit
	}
	return nil
}

// WorkloadParameters defines parameters such as priority, tokens and fairness key that are applicable to flows within a workload.
type Scheduler_WorkloadParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes priority level of the requests within the workload.
	// Priority level ranges from 0 to 255.
	// Higher numbers means higher priority level.
	Priority uint32 `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" validate:"gte=0,lte=255"` // @gotags: validate:"gte=0,lte=255"
	// Tokens determines the cost of admitting a single request the workload, which is typically defined as milliseconds of response latency.
	// This override is applicable only if `auto_tokens` is set to false.
	Tokens uint64 `protobuf:"varint,2,opt,name=tokens,proto3" json:"tokens,omitempty" default:"1"` // @gotags: default:"1"
	// Fairness key is a label key that can be used to provide fairness within a workload.
	// Any [flow label](/concepts/flow-control/flow-label.md) can be used here. Eg. if
	// you have a classifier that sets `user` flow label, you might want to set
	// `fairness_key = "user"`.
	FairnessKey string `protobuf:"bytes,3,opt,name=fairness_key,json=fairnessKey,proto3" json:"fairness_key,omitempty"`
}

func (x *Scheduler_WorkloadParameters) Reset() {
	*x = Scheduler_WorkloadParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_WorkloadParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_WorkloadParameters) ProtoMessage() {}

func (x *Scheduler_WorkloadParameters) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_WorkloadParameters.ProtoReflect.Descriptor instead.
func (*Scheduler_WorkloadParameters) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 0}
}

func (x *Scheduler_WorkloadParameters) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Scheduler_WorkloadParameters) GetTokens() uint64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *Scheduler_WorkloadParameters) GetFairnessKey() string {
	if x != nil {
		return x.FairnessKey
	}
	return ""
}

// Workload defines a class of requests that preferably have similar properties such as response latency or desired priority.
type Scheduler_Workload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WorkloadParameters associated with flows matching the label matcher.
	WorkloadParameters *Scheduler_WorkloadParameters `protobuf:"bytes,1,opt,name=workload_parameters,json=workloadParameters,proto3" json:"workload_parameters,omitempty" validate:"required"` // @gotags: validate:"required"
	// Label Matcher to select a Workload based on
	// [flow labels](/concepts/flow-control/flow-label.md).
	LabelMatcher *v11.LabelMatcher `protobuf:"bytes,2,opt,name=label_matcher,json=labelMatcher,proto3" json:"label_matcher,omitempty" validate:"required"` // @gotags: validate:"required"
}

func (x *Scheduler_Workload) Reset() {
	*x = Scheduler_Workload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_Workload) ProtoMessage() {}

func (x *Scheduler_Workload) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_Workload.ProtoReflect.Descriptor instead.
func (*Scheduler_Workload) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 1}
}

func (x *Scheduler_Workload) GetWorkloadParameters() *Scheduler_WorkloadParameters {
	if x != nil {
		return x.WorkloadParameters
	}
	return nil
}

func (x *Scheduler_Workload) GetLabelMatcher() *v11.LabelMatcher {
	if x != nil {
		return x.LabelMatcher
	}
	return nil
}

// Output for the Scheduler component.
type Scheduler_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accepted concurrency is the number of accepted tokens per second.
	//
	// :::info
	// **Accepted tokens** are tokens associated with
	// [flows](/concepts/flow-control/flow-control.md#flow) that were accepted by
	// this scheduler. Number of tokens for a flow is determined by a
	// [workload parameters](#scheduler-workload-parameters) that the flow was assigned to (either
	// via `auto_tokens` or explicitly by `Workload.tokens`).
	// :::
	//
	// Value of this signal is the sum across all the relevant schedulers.
	AcceptedConcurrency *OutPort `protobuf:"bytes,1,opt,name=accepted_concurrency,json=acceptedConcurrency,proto3" json:"accepted_concurrency,omitempty"`
	// Incoming concurrency is the number of incoming tokens/sec.
	// This is the same as `accepted_concurrency`, but across all the flows
	// entering scheduler, including rejected ones.
	IncomingConcurrency *OutPort `protobuf:"bytes,2,opt,name=incoming_concurrency,json=incomingConcurrency,proto3" json:"incoming_concurrency,omitempty"`
}

func (x *Scheduler_Outs) Reset() {
	*x = Scheduler_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_Outs) ProtoMessage() {}

func (x *Scheduler_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_Outs.ProtoReflect.Descriptor instead.
func (*Scheduler_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 2}
}

func (x *Scheduler_Outs) GetAcceptedConcurrency() *OutPort {
	if x != nil {
		return x.AcceptedConcurrency
	}
	return nil
}

func (x *Scheduler_Outs) GetIncomingConcurrency() *OutPort {
	if x != nil {
		return x.IncomingConcurrency
	}
	return nil
}

// Input for the Load Shed Actuator component.
type LoadShedActuator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Load shedding factor is a fraction of [incoming
	// concurrency](#v1-scheduler-outs) that needs to be dropped.
	LoadShedFactor *InPort `protobuf:"bytes,1,opt,name=load_shed_factor,json=loadShedFactor,proto3" json:"load_shed_factor,omitempty"`
}

func (x *LoadShedActuator_Ins) Reset() {
	*x = LoadShedActuator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadShedActuator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadShedActuator_Ins) ProtoMessage() {}

func (x *LoadShedActuator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadShedActuator_Ins.ProtoReflect.Descriptor instead.
func (*LoadShedActuator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{17, 0}
}

func (x *LoadShedActuator_Ins) GetLoadShedFactor() *InPort {
	if x != nil {
		return x.LoadShedFactor
	}
	return nil
}

// Output for the PromQL component.
type PromQL_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The result of the Prometheus query as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PromQL_Outs) Reset() {
	*x = PromQL_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromQL_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromQL_Outs) ProtoMessage() {}

func (x *PromQL_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromQL_Outs.ProtoReflect.Descriptor instead.
func (*PromQL_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18, 0}
}

func (x *PromQL_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Outputs for the Constant component.
type Constant_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The constant value is emitted to the output port.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Constant_Outs) Reset() {
	*x = Constant_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constant_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant_Outs) ProtoMessage() {}

func (x *Constant_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant_Outs.ProtoReflect.Descriptor instead.
func (*Constant_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Constant_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Sqrt component.
type Sqrt_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Sqrt_Ins) Reset() {
	*x = Sqrt_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt_Ins) ProtoMessage() {}

func (x *Sqrt_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt_Ins.ProtoReflect.Descriptor instead.
func (*Sqrt_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{20, 0}
}

func (x *Sqrt_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the Sqrt component.
type Sqrt_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Sqrt_Outs) Reset() {
	*x = Sqrt_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt_Outs) ProtoMessage() {}

func (x *Sqrt_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt_Outs.ProtoReflect.Descriptor instead.
func (*Sqrt_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{20, 1}
}

func (x *Sqrt_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Extrapolator component.
type Extrapolator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Input signal for the Extrapolator component.
	Input *InPort `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Extrapolator_Ins) Reset() {
	*x = Extrapolator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Ins) ProtoMessage() {}

func (x *Extrapolator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Ins.ProtoReflect.Descriptor instead.
func (*Extrapolator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Extrapolator_Ins) GetInput() *InPort {
	if x != nil {
		return x.Input
	}
	return nil
}

// Outputs for the Extrapolator component.
type Extrapolator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Extrapolated signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Extrapolator_Outs) Reset() {
	*x = Extrapolator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Outs) ProtoMessage() {}

func (x *Extrapolator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Outs.ProtoReflect.Descriptor instead.
func (*Extrapolator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{21, 1}
}

func (x *Extrapolator_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Max component.
type Max_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Max_Ins) Reset() {
	*x = Max_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max_Ins) ProtoMessage() {}

func (x *Max_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max_Ins.ProtoReflect.Descriptor instead.
func (*Max_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{22, 0}
}

func (x *Max_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output for the Max component.
type Max_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal with maximum value as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Max_Outs) Reset() {
	*x = Max_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max_Outs) ProtoMessage() {}

func (x *Max_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max_Outs.ProtoReflect.Descriptor instead.
func (*Max_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{22, 1}
}

func (x *Max_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the Min component.
type Min_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Min_Ins) Reset() {
	*x = Min_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min_Ins) ProtoMessage() {}

func (x *Min_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min_Ins.ProtoReflect.Descriptor instead.
func (*Min_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{23, 0}
}

func (x *Min_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Output ports for the Min component.
type Min_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signal with minimum value as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Min_Outs) Reset() {
	*x = Min_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min_Outs) ProtoMessage() {}

func (x *Min_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min_Outs.ProtoReflect.Descriptor instead.
func (*Min_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{23, 1}
}

func (x *Min_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

// Inputs for the FirstValid component.
type FirstValid_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of input signals.
	Inputs []*InPort `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *FirstValid_Ins) Reset() {
	*x = FirstValid_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid_Ins) ProtoMessage() {}

func (x *FirstValid_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid_Ins.ProtoReflect.Descriptor instead.
func (*FirstValid_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{24, 0}
}

func (x *FirstValid_Ins) GetInputs() []*InPort {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Outputs for the FirstValid component.
type FirstValid_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// First valid input signal as an output signal.
	Output *OutPort `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *FirstValid_Outs) Reset() {
	*x = FirstValid_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirstValid_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirstValid_Outs) ProtoMessage() {}

func (x *FirstValid_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirstValid_Outs.ProtoReflect.Descriptor instead.
func (*FirstValid_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{24, 1}
}

func (x *FirstValid_Outs) GetOutput() *OutPort {
	if x != nil {
		return x.Output
	}
	return nil
}

var File_aperture_policy_language_v1_policy_proto protoreflect.FileDescriptor

var file_aperture_policy_language_v1_policy_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x32, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70,
	0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x08, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x07, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x07, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x12, 0x68, 0x0a, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x82, 0x03, 0x16, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x06, 0x1a, 0x04, 0x30, 0x2e, 0x35, 0x73, 0x52, 0x12, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x66, 0x6c, 0x75, 0x78, 0x5f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0a, 0x66, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a,
	0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x1a, 0x65, 0x0a, 0x0f, 0x46, 0x6c, 0x75, 0x78,
	0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x78, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9c, 0x08, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a,
	0x13, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x03, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x6d, 0x61, 0x12, 0x68, 0x0a, 0x15, 0x61, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x14, 0x61, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x40, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x0c,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b,
	0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x70,
	0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x4c,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x04, 0x73, 0x71, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x72, 0x74,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x71, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x61, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12,
	0x34, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x48, 0x00,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22, 0x5d,
	0x0a, 0x06, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a,
	0x07, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc8, 0x07, 0x0a, 0x12, 0x47, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x12, 0x4e, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x51, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0c,
	0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xef, 0xff, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b,
	0x65, 0x79, 0x12, 0x55, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x69,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x82, 0x03, 0x0a, 0x03, 0x49, 0x6e,
	0x73, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x3f,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x3f, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x4e,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x44,
	0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x54, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x39, 0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x15, 0x82, 0x03, 0x12, 0x0a, 0x0c, 0x78, 0x2d,
	0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x02, 0x20, 0x00, 0x52, 0x0a,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x94, 0x07, 0x0a, 0x03, 0x45,
	0x4d, 0x41, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02,
	0x35, 0x73, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x5b, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x30, 0x73, 0x52, 0x0c, 0x77, 0x61,
	0x72, 0x6d, 0x55, 0x70, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x99, 0x01, 0x0a, 0x2b, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x3c, 0x92, 0x41, 0x39, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
	0x3f, 0x82, 0x03, 0x1a, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x09, 0x1a, 0x07, 0x67, 0x74, 0x65, 0x3d, 0x31, 0x2e, 0x30, 0x52, 0x26,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x6e, 0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9f, 0x01, 0x0a, 0x2b, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x42, 0x92, 0x41,
	0x3f, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x82, 0x03, 0x20,
	0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0f, 0x1a, 0x0d, 0x67, 0x74, 0x65, 0x3d, 0x30, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x2e, 0x30,
	0x52, 0x26, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xd0, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73,
	0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x46, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0b,
	0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x4f,
	0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0xd6, 0x03, 0x0a, 0x14, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x09,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x5c, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x40, 0x92, 0x41, 0x3d, 0x82, 0x03, 0x3a, 0x0a, 0x0d, 0x78, 0x2d, 0x67,
	0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x1a, 0x27, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x3d, 0x61, 0x64, 0x64, 0x20, 0x73, 0x75, 0x62, 0x20, 0x6d, 0x75, 0x6c, 0x20,
	0x64, 0x69, 0x76, 0x20, 0x78, 0x6f, 0x72, 0x20, 0x6c, 0x73, 0x68, 0x69, 0x66, 0x74, 0x20, 0x72,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a,
	0x73, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x35, 0x0a,
	0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x03, 0x72, 0x68, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xc8, 0x04, 0x0a, 0x07, 0x44,
	0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x09, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0x92, 0x41, 0x30, 0x82, 0x03, 0x2d, 0x0a, 0x0d, 0x78,
	0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x1a, 0x1a,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x67, 0x74, 0x20, 0x6c, 0x74, 0x20, 0x67, 0x74, 0x65, 0x20,
	0x6c, 0x74, 0x65, 0x20, 0x65, 0x71, 0x20, 0x6e, 0x65, 0x71, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x30, 0x73, 0x52, 0x07, 0x74,
	0x72, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x12, 0x52, 0x0a, 0x09, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f,
	0x66, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d,
	0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x30, 0x73,
	0x52, 0x08, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x1a, 0x73, 0x0a, 0x03, 0x49, 0x6e,
	0x73, 0x12, 0x35, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x03, 0x72, 0x68, 0x73, 0x1a,
	0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xa2, 0x03, 0x0a, 0x08, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52,
	0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x1a, 0xc0, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x6e, 0x5f,
	0x74, 0x72, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x06, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6f, 0x6e, 0x5f, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x07,
	0x6f, 0x6e, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x73, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xde, 0x08, 0x0a, 0x0b, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x6a, 0x0a, 0x08, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82,
	0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x07, 0x69,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x64, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x14,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x82, 0x03, 0x15, 0x0a, 0x0c, 0x78,
	0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x05, 0x1a, 0x03, 0x36,
	0x30, 0x73, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3e, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03,
	0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x08, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x73,
	0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x08, 0x6c, 0x61,
	0x7a, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4b, 0x65, 0x79, 0x12, 0x57, 0x0a, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x94, 0x01,
	0x0a, 0x08, 0x4c, 0x61, 0x7a, 0x79, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x32, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0x92, 0x41, 0x15,
	0x82, 0x03, 0x12, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x02, 0x20, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x54,
	0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x39, 0x92, 0x41, 0x36, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14,
	0x40, 0x82, 0x03, 0x17, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x06, 0x1a, 0x04, 0x67, 0x74, 0x3d, 0x30, 0x52, 0x07, 0x6e, 0x75, 0x6d,
	0x53, 0x79, 0x6e, 0x63, 0x1a, 0x60, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x1a, 0x9d, 0x01, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b,
	0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0a, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67,
	0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xf0, 0x3f, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x63, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x5c, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd8, 0x02, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x12, 0x64, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x21, 0x92, 0x41, 0x1e,
	0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x67, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67,
	0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x5d, 0x0a, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x14, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xc8, 0x09, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e,
	0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4d,
	0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x9c, 0x01,
	0x0a, 0x1b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x21,
	0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x19, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x82, 0x03, 0x16, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x1a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67,
	0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0xe0, 0x3f, 0x82, 0x03, 0x1a, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x09, 0x1a, 0x07, 0x67, 0x74, 0x65, 0x3d, 0x30, 0x2e,
	0x30, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x59, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x82, 0x03, 0x17, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x07, 0x1a, 0x05, 0x30, 0x2e, 0x34, 0x35, 0x73, 0x52,
	0x0a, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0xb4, 0x01, 0x0a, 0x12,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x26, 0x92, 0x41, 0x23, 0x82, 0x03, 0x20, 0x0a, 0x0d, 0x78, 0x2d,
	0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x1a, 0x0d, 0x67,
	0x74, 0x65, 0x3d, 0x30, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x32, 0x35, 0x35, 0x52, 0x08, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x1a, 0x91, 0x02, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x8d, 0x01, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b,
	0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x0a, 0x1a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x12, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x75, 0x0a, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78,
	0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x1a, 0xb8, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12,
	0x57, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x57, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x13, 0x69, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x22, 0xb6, 0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x1a, 0x54, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x68, 0x65, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xa1, 0x02, 0x0a, 0x06, 0x50,
	0x72, 0x6f, 0x6d, 0x51, 0x4c, 0x12, 0x45, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x4c, 0x2e, 0x4f, 0x75,
	0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x67, 0x0a, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x82, 0x03, 0x15, 0x0a,
	0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x05, 0x1a,
	0x03, 0x31, 0x30, 0x73, 0x52, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73,
	0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xaf,
	0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0xcc, 0x02, 0x0a, 0x04, 0x53, 0x71, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x69, 0x6e, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x72, 0x74, 0x2e, 0x49,
	0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x72,
	0x74, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73,
	0x12, 0x35, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f,
	0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0x40, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x39,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22,
	0xa3, 0x03, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x48, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e,
	0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x82, 0x03, 0x15, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x05, 0x1a, 0x03,
	0x31, 0x30, 0x73, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x40, 0x0a,
	0x03, 0x49, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x1a,
	0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x3f, 0x0a,
	0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x78, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x78, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x94, 0x02, 0x0a,
	0x03, 0x4d, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73,
	0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a,
	0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x49, 0x6e,
	0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x6f, 0x75,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x44, 0x0a, 0x04, 0x4f, 0x75, 0x74,
	0x73, 0x12, 0x3c, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32,
	0x97, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x92, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x94, 0x02, 0x0a, 0x1f, 0x63, 0x6f,
	0x6d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e,
	0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x50, 0x4c, 0xaa, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x1e, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x3a, 0x3a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_language_v1_policy_proto_rawDescOnce sync.Once
	file_aperture_policy_language_v1_policy_proto_rawDescData = file_aperture_policy_language_v1_policy_proto_rawDesc
)

func file_aperture_policy_language_v1_policy_proto_rawDescGZIP() []byte {
	file_aperture_policy_language_v1_policy_proto_rawDescOnce.Do(func() {
		file_aperture_policy_language_v1_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_language_v1_policy_proto_rawDescData)
	})
	return file_aperture_policy_language_v1_policy_proto_rawDescData
}

var file_aperture_policy_language_v1_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_aperture_policy_language_v1_policy_proto_goTypes = []interface{}{
	(*GetPoliciesResponse)(nil),          // 0: aperture.policy.language.v1.GetPoliciesResponse
	(*Policies)(nil),                     // 1: aperture.policy.language.v1.Policies
	(*Policy)(nil),                       // 2: aperture.policy.language.v1.Policy
	(*Circuit)(nil),                      // 3: aperture.policy.language.v1.Circuit
	(*Resources)(nil),                    // 4: aperture.policy.language.v1.Resources
	(*Component)(nil),                    // 5: aperture.policy.language.v1.Component
	(*InPort)(nil),                       // 6: aperture.policy.language.v1.InPort
	(*OutPort)(nil),                      // 7: aperture.policy.language.v1.OutPort
	(*GradientController)(nil),           // 8: aperture.policy.language.v1.GradientController
	(*ControllerDynamicConfig)(nil),      // 9: aperture.policy.language.v1.ControllerDynamicConfig
	(*EMA)(nil),                          // 10: aperture.policy.language.v1.EMA
	(*ArithmeticCombinator)(nil),         // 11: aperture.policy.language.v1.ArithmeticCombinator
	(*Decider)(nil),                      // 12: aperture.policy.language.v1.Decider
	(*Switcher)(nil),                     // 13: aperture.policy.language.v1.Switcher
	(*RateLimiter)(nil),                  // 14: aperture.policy.language.v1.RateLimiter
	(*ConcurrencyLimiter)(nil),           // 15: aperture.policy.language.v1.ConcurrencyLimiter
	(*Scheduler)(nil),                    // 16: aperture.policy.language.v1.Scheduler
	(*LoadShedActuator)(nil),             // 17: aperture.policy.language.v1.LoadShedActuator
	(*PromQL)(nil),                       // 18: aperture.policy.language.v1.PromQL
	(*Constant)(nil),                     // 19: aperture.policy.language.v1.Constant
	(*Sqrt)(nil),                         // 20: aperture.policy.language.v1.Sqrt
	(*Extrapolator)(nil),                 // 21: aperture.policy.language.v1.Extrapolator
	(*Max)(nil),                          // 22: aperture.policy.language.v1.Max
	(*Min)(nil),                          // 23: aperture.policy.language.v1.Min
	(*FirstValid)(nil),                   // 24: aperture.policy.language.v1.FirstValid
	nil,                                  // 25: aperture.policy.language.v1.Policies.PoliciesEntry
	nil,                                  // 26: aperture.policy.language.v1.Resources.FluxMetersEntry
	(*GradientController_Ins)(nil),       // 27: aperture.policy.language.v1.GradientController.Ins
	(*GradientController_Outs)(nil),      // 28: aperture.policy.language.v1.GradientController.Outs
	(*EMA_Ins)(nil),                      // 29: aperture.policy.language.v1.EMA.Ins
	(*EMA_Outs)(nil),                     // 30: aperture.policy.language.v1.EMA.Outs
	(*ArithmeticCombinator_Ins)(nil),     // 31: aperture.policy.language.v1.ArithmeticCombinator.Ins
	(*ArithmeticCombinator_Outs)(nil),    // 32: aperture.policy.language.v1.ArithmeticCombinator.Outs
	(*Decider_Ins)(nil),                  // 33: aperture.policy.language.v1.Decider.Ins
	(*Decider_Outs)(nil),                 // 34: aperture.policy.language.v1.Decider.Outs
	(*Switcher_Ins)(nil),                 // 35: aperture.policy.language.v1.Switcher.Ins
	(*Switcher_Outs)(nil),                // 36: aperture.policy.language.v1.Switcher.Outs
	(*RateLimiter_LazySync)(nil),         // 37: aperture.policy.language.v1.RateLimiter.LazySync
	(*RateLimiter_DynamicConfig)(nil),    // 38: aperture.policy.language.v1.RateLimiter.DynamicConfig
	(*RateLimiter_Override)(nil),         // 39: aperture.policy.language.v1.RateLimiter.Override
	(*RateLimiter_Ins)(nil),              // 40: aperture.policy.language.v1.RateLimiter.Ins
	(*Scheduler_WorkloadParameters)(nil), // 41: aperture.policy.language.v1.Scheduler.WorkloadParameters
	(*Scheduler_Workload)(nil),           // 42: aperture.policy.language.v1.Scheduler.Workload
	(*Scheduler_Outs)(nil),               // 43: aperture.policy.language.v1.Scheduler.Outs
	(*LoadShedActuator_Ins)(nil),         // 44: aperture.policy.language.v1.LoadShedActuator.Ins
	(*PromQL_Outs)(nil),                  // 45: aperture.policy.language.v1.PromQL.Outs
	(*Constant_Outs)(nil),                // 46: aperture.policy.language.v1.Constant.Outs
	(*Sqrt_Ins)(nil),                     // 47: aperture.policy.language.v1.Sqrt.Ins
	(*Sqrt_Outs)(nil),                    // 48: aperture.policy.language.v1.Sqrt.Outs
	(*Extrapolator_Ins)(nil),             // 49: aperture.policy.language.v1.Extrapolator.Ins
	(*Extrapolator_Outs)(nil),            // 50: aperture.policy.language.v1.Extrapolator.Outs
	(*Max_Ins)(nil),                      // 51: aperture.policy.language.v1.Max.Ins
	(*Max_Outs)(nil),                     // 52: aperture.policy.language.v1.Max.Outs
	(*Min_Ins)(nil),                      // 53: aperture.policy.language.v1.Min.Ins
	(*Min_Outs)(nil),                     // 54: aperture.policy.language.v1.Min.Outs
	(*FirstValid_Ins)(nil),               // 55: aperture.policy.language.v1.FirstValid.Ins
	(*FirstValid_Outs)(nil),              // 56: aperture.policy.language.v1.FirstValid.Outs
	(*durationpb.Duration)(nil),          // 57: google.protobuf.Duration
	(*Classifier)(nil),                   // 58: aperture.policy.language.v1.Classifier
	(*v1.Selector)(nil),                  // 59: aperture.common.selector.v1.Selector
	(*FluxMeter)(nil),                    // 60: aperture.policy.language.v1.FluxMeter
	(*v11.LabelMatcher)(nil),             // 61: aperture.common.labelmatcher.v1.LabelMatcher
	(*emptypb.Empty)(nil),                // 62: google.protobuf.Empty
}
var file_aperture_policy_language_v1_policy_proto_depIdxs = []int32{
	1,   // 0: aperture.policy.language.v1.GetPoliciesResponse.policies:type_name -> aperture.policy.language.v1.Policies
	25,  // 1: aperture.policy.language.v1.Policies.policies:type_name -> aperture.policy.language.v1.Policies.PoliciesEntry
	3,   // 2: aperture.policy.language.v1.Policy.circuit:type_name -> aperture.policy.language.v1.Circuit
	4,   // 3: aperture.policy.language.v1.Policy.resources:type_name -> aperture.policy.language.v1.Resources
	57,  // 4: aperture.policy.language.v1.Circuit.evaluation_interval:type_name -> google.protobuf.Duration
	5,   // 5: aperture.policy.language.v1.Circuit.components:type_name -> aperture.policy.language.v1.Component
	26,  // 6: aperture.policy.language.v1.Resources.flux_meters:type_name -> aperture.policy.language.v1.Resources.FluxMetersEntry
	58,  // 7: aperture.policy.language.v1.Resources.classifiers:type_name -> aperture.policy.language.v1.Classifier
	8,   // 8: aperture.policy.language.v1.Component.gradient_controller:type_name -> aperture.policy.language.v1.GradientController
	10,  // 9: aperture.policy.language.v1.Component.ema:type_name -> aperture.policy.language.v1.EMA
	11,  // 10: aperture.policy.language.v1.Component.arithmetic_combinator:type_name -> aperture.policy.language.v1.ArithmeticCombinator
	12,  // 11: aperture.policy.language.v1.Component.decider:type_name -> aperture.policy.language.v1.Decider
	13,  // 12: aperture.policy.language.v1.Component.switcher:type_name -> aperture.policy.language.v1.Switcher
	15,  // 13: aperture.policy.language.v1.Component.concurrency_limiter:type_name -> aperture.policy.language.v1.ConcurrencyLimiter
	14,  // 14: aperture.policy.language.v1.Component.rate_limiter:type_name -> aperture.policy.language.v1.RateLimiter
	18,  // 15: aperture.policy.language.v1.Component.promql:type_name -> aperture.policy.language.v1.PromQL
	19,  // 16: aperture.policy.language.v1.Component.constant:type_name -> aperture.policy.language.v1.Constant
	20,  // 17: aperture.policy.language.v1.Component.sqrt:type_name -> aperture.policy.language.v1.Sqrt
	21,  // 18: aperture.policy.language.v1.Component.extrapolator:type_name -> aperture.policy.language.v1.Extrapolator
	22,  // 19: aperture.policy.language.v1.Component.max:type_name -> aperture.policy.language.v1.Max
	23,  // 20: aperture.policy.language.v1.Component.min:type_name -> aperture.policy.language.v1.Min
	24,  // 21: aperture.policy.language.v1.Component.first_valid:type_name -> aperture.policy.language.v1.FirstValid
	27,  // 22: aperture.policy.language.v1.GradientController.in_ports:type_name -> aperture.policy.language.v1.GradientController.Ins
	28,  // 23: aperture.policy.language.v1.GradientController.out_ports:type_name -> aperture.policy.language.v1.GradientController.Outs
	9,   // 24: aperture.policy.language.v1.GradientController.init_config:type_name -> aperture.policy.language.v1.ControllerDynamicConfig
	29,  // 25: aperture.policy.language.v1.EMA.in_ports:type_name -> aperture.policy.language.v1.EMA.Ins
	30,  // 26: aperture.policy.language.v1.EMA.out_ports:type_name -> aperture.policy.language.v1.EMA.Outs
	57,  // 27: aperture.policy.language.v1.EMA.ema_window:type_name -> google.protobuf.Duration
	57,  // 28: aperture.policy.language.v1.EMA.warm_up_window:type_name -> google.protobuf.Duration
	31,  // 29: aperture.policy.language.v1.ArithmeticCombinator.in_ports:type_name -> aperture.policy.language.v1.ArithmeticCombinator.Ins
	32,  // 30: aperture.policy.language.v1.ArithmeticCombinator.out_ports:type_name -> aperture.policy.language.v1.ArithmeticCombinator.Outs
	33,  // 31: aperture.policy.language.v1.Decider.in_ports:type_name -> aperture.policy.language.v1.Decider.Ins
	34,  // 32: aperture.policy.language.v1.Decider.out_ports:type_name -> aperture.policy.language.v1.Decider.Outs
	57,  // 33: aperture.policy.language.v1.Decider.true_for:type_name -> google.protobuf.Duration
	57,  // 34: aperture.policy.language.v1.Decider.false_for:type_name -> google.protobuf.Duration
	35,  // 35: aperture.policy.language.v1.Switcher.in_ports:type_name -> aperture.policy.language.v1.Switcher.Ins
	36,  // 36: aperture.policy.language.v1.Switcher.out_ports:type_name -> aperture.policy.language.v1.Switcher.Outs
	40,  // 37: aperture.policy.language.v1.RateLimiter.in_ports:type_name -> aperture.policy.language.v1.RateLimiter.Ins
	59,  // 38: aperture.policy.language.v1.RateLimiter.selector:type_name -> aperture.common.selector.v1.Selector
	57,  // 39: aperture.policy.language.v1.RateLimiter.limit_reset_interval:type_name -> google.protobuf.Duration
	37,  // 40: aperture.policy.language.v1.RateLimiter.lazy_sync:type_name -> aperture.policy.language.v1.RateLimiter.LazySync
	38,  // 41: aperture.policy.language.v1.RateLimiter.init_config:type_name -> aperture.policy.language.v1.RateLimiter.DynamicConfig
	59,  // 42: aperture.policy.language.v1.ConcurrencyLimiter.selector:type_name -> aperture.common.selector.v1.Selector
	16,  // 43: aperture.policy.language.v1.ConcurrencyLimiter.scheduler:type_name -> aperture.policy.language.v1.Scheduler
	17,  // 44: aperture.policy.language.v1.ConcurrencyLimiter.load_shed_actuator:type_name -> aperture.policy.language.v1.LoadShedActuator
	43,  // 45: aperture.policy.language.v1.Scheduler.out_ports:type_name -> aperture.policy.language.v1.Scheduler.Outs
	42,  // 46: aperture.policy.language.v1.Scheduler.workloads:type_name -> aperture.policy.language.v1.Scheduler.Workload
	41,  // 47: aperture.policy.language.v1.Scheduler.default_workload_parameters:type_name -> aperture.policy.language.v1.Scheduler.WorkloadParameters
	57,  // 48: aperture.policy.language.v1.Scheduler.max_timeout:type_name -> google.protobuf.Duration
	44,  // 49: aperture.policy.language.v1.LoadShedActuator.in_ports:type_name -> aperture.policy.language.v1.LoadShedActuator.Ins
	45,  // 50: aperture.policy.language.v1.PromQL.out_ports:type_name -> aperture.policy.language.v1.PromQL.Outs
	57,  // 51: aperture.policy.language.v1.PromQL.evaluation_interval:type_name -> google.protobuf.Duration
	46,  // 52: aperture.policy.language.v1.Constant.out_ports:type_name -> aperture.policy.language.v1.Constant.Outs
	47,  // 53: aperture.policy.language.v1.Sqrt.in_ports:type_name -> aperture.policy.language.v1.Sqrt.Ins
	48,  // 54: aperture.policy.language.v1.Sqrt.out_ports:type_name -> aperture.policy.language.v1.Sqrt.Outs
	49,  // 55: aperture.policy.language.v1.Extrapolator.in_ports:type_name -> aperture.policy.language.v1.Extrapolator.Ins
	50,  // 56: aperture.policy.language.v1.Extrapolator.out_ports:type_name -> aperture.policy.language.v1.Extrapolator.Outs
	57,  // 57: aperture.policy.language.v1.Extrapolator.max_extrapolation_interval:type_name -> google.protobuf.Duration
	51,  // 58: aperture.policy.language.v1.Max.in_ports:type_name -> aperture.policy.language.v1.Max.Ins
	52,  // 59: aperture.policy.language.v1.Max.out_ports:type_name -> aperture.policy.language.v1.Max.Outs
	53,  // 60: aperture.policy.language.v1.Min.in_ports:type_name -> aperture.policy.language.v1.Min.Ins
	54,  // 61: aperture.policy.language.v1.Min.out_ports:type_name -> aperture.policy.language.v1.Min.Outs
	55,  // 62: aperture.policy.language.v1.FirstValid.in_ports:type_name -> aperture.policy.language.v1.FirstValid.Ins
	56,  // 63: aperture.policy.language.v1.FirstValid.out_ports:type_name -> aperture.policy.language.v1.FirstValid.Outs
	2,   // 64: aperture.policy.language.v1.Policies.PoliciesEntry.value:type_name -> aperture.policy.language.v1.Policy
	60,  // 65: aperture.policy.language.v1.Resources.FluxMetersEntry.value:type_name -> aperture.policy.language.v1.FluxMeter
	6,   // 66: aperture.policy.language.v1.GradientController.Ins.signal:type_name -> aperture.policy.language.v1.InPort
	6,   // 67: aperture.policy.language.v1.GradientController.Ins.setpoint:type_name -> aperture.policy.language.v1.InPort
	6,   // 68: aperture.policy.language.v1.GradientController.Ins.optimize:type_name -> aperture.policy.language.v1.InPort
	6,   // 69: aperture.policy.language.v1.GradientController.Ins.max:type_name -> aperture.policy.language.v1.InPort
	6,   // 70: aperture.policy.language.v1.GradientController.Ins.min:type_name -> aperture.policy.language.v1.InPort
	6,   // 71: aperture.policy.language.v1.GradientController.Ins.control_variable:type_name -> aperture.policy.language.v1.InPort
	7,   // 72: aperture.policy.language.v1.GradientController.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 73: aperture.policy.language.v1.EMA.Ins.input:type_name -> aperture.policy.language.v1.InPort
	6,   // 74: aperture.policy.language.v1.EMA.Ins.max_envelope:type_name -> aperture.policy.language.v1.InPort
	6,   // 75: aperture.policy.language.v1.EMA.Ins.min_envelope:type_name -> aperture.policy.language.v1.InPort
	7,   // 76: aperture.policy.language.v1.EMA.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 77: aperture.policy.language.v1.ArithmeticCombinator.Ins.lhs:type_name -> aperture.policy.language.v1.InPort
	6,   // 78: aperture.policy.language.v1.ArithmeticCombinator.Ins.rhs:type_name -> aperture.policy.language.v1.InPort
	7,   // 79: aperture.policy.language.v1.ArithmeticCombinator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 80: aperture.policy.language.v1.Decider.Ins.lhs:type_name -> aperture.policy.language.v1.InPort
	6,   // 81: aperture.policy.language.v1.Decider.Ins.rhs:type_name -> aperture.policy.language.v1.InPort
	7,   // 82: aperture.policy.language.v1.Decider.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 83: aperture.policy.language.v1.Switcher.Ins.on_true:type_name -> aperture.policy.language.v1.InPort
	6,   // 84: aperture.policy.language.v1.Switcher.Ins.on_false:type_name -> aperture.policy.language.v1.InPort
	6,   // 85: aperture.policy.language.v1.Switcher.Ins.switch:type_name -> aperture.policy.language.v1.InPort
	7,   // 86: aperture.policy.language.v1.Switcher.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	39,  // 87: aperture.policy.language.v1.RateLimiter.DynamicConfig.overrides:type_name -> aperture.policy.language.v1.RateLimiter.Override
	6,   // 88: aperture.policy.language.v1.RateLimiter.Ins.limit:type_name -> aperture.policy.language.v1.InPort
	41,  // 89: aperture.policy.language.v1.Scheduler.Workload.workload_parameters:type_name -> aperture.policy.language.v1.Scheduler.WorkloadParameters
	61,  // 90: aperture.policy.language.v1.Scheduler.Workload.label_matcher:type_name -> aperture.common.labelmatcher.v1.LabelMatcher
	7,   // 91: aperture.policy.language.v1.Scheduler.Outs.accepted_concurrency:type_name -> aperture.policy.language.v1.OutPort
	7,   // 92: aperture.policy.language.v1.Scheduler.Outs.incoming_concurrency:type_name -> aperture.policy.language.v1.OutPort
	6,   // 93: aperture.policy.language.v1.LoadShedActuator.Ins.load_shed_factor:type_name -> aperture.policy.language.v1.InPort
	7,   // 94: aperture.policy.language.v1.PromQL.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	7,   // 95: aperture.policy.language.v1.Constant.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 96: aperture.policy.language.v1.Sqrt.Ins.input:type_name -> aperture.policy.language.v1.InPort
	7,   // 97: aperture.policy.language.v1.Sqrt.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 98: aperture.policy.language.v1.Extrapolator.Ins.input:type_name -> aperture.policy.language.v1.InPort
	7,   // 99: aperture.policy.language.v1.Extrapolator.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 100: aperture.policy.language.v1.Max.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	7,   // 101: aperture.policy.language.v1.Max.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 102: aperture.policy.language.v1.Min.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	7,   // 103: aperture.policy.language.v1.Min.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	6,   // 104: aperture.policy.language.v1.FirstValid.Ins.inputs:type_name -> aperture.policy.language.v1.InPort
	7,   // 105: aperture.policy.language.v1.FirstValid.Outs.output:type_name -> aperture.policy.language.v1.OutPort
	62,  // 106: aperture.policy.language.v1.PolicyService.GetPolicies:input_type -> google.protobuf.Empty
	0,   // 107: aperture.policy.language.v1.PolicyService.GetPolicies:output_type -> aperture.policy.language.v1.GetPoliciesResponse
	107, // [107:108] is the sub-list for method output_type
	106, // [106:107] is the sub-list for method input_type
	106, // [106:106] is the sub-list for extension type_name
	106, // [106:106] is the sub-list for extension extendee
	0,   // [0:106] is the sub-list for field type_name
}

func init() { file_aperture_policy_language_v1_policy_proto_init() }
func file_aperture_policy_language_v1_policy_proto_init() {
	if File_aperture_policy_language_v1_policy_proto != nil {
		return
	}
	file_aperture_policy_language_v1_classifier_proto_init()
	file_aperture_policy_language_v1_fluxmeter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_language_v1_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerDynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadShedActuator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switcher_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_LazySync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_DynamicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_Override); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_WorkloadParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_Workload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadShedActuator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromQL_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constant_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirstValid_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Component_GradientController)(nil),
		(*Component_Ema)(nil),
		(*Component_ArithmeticCombinator)(nil),
		(*Component_Decider)(nil),
		(*Component_Switcher)(nil),
		(*Component_ConcurrencyLimiter)(nil),
		(*Component_RateLimiter)(nil),
		(*Component_Promql)(nil),
		(*Component_Constant)(nil),
		(*Component_Sqrt)(nil),
		(*Component_Extrapolator)(nil),
		(*Component_Max)(nil),
		(*Component_Min)(nil),
		(*Component_FirstValid)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*InPort_SignalName)(nil),
		(*InPort_ConstantValue)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ConcurrencyLimiter_LoadShedActuator)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_language_v1_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_policy_language_v1_policy_proto_goTypes,
		DependencyIndexes: file_aperture_policy_language_v1_policy_proto_depIdxs,
		MessageInfos:      file_aperture_policy_language_v1_policy_proto_msgTypes,
	}.Build()
	File_aperture_policy_language_v1_policy_proto = out.File
	file_aperture_policy_language_v1_policy_proto_rawDesc = nil
	file_aperture_policy_language_v1_policy_proto_goTypes = nil
	file_aperture_policy_language_v1_policy_proto_depIdxs = nil
}
