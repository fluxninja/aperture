// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: aperture/policy/language/v1/policy.proto

package languagev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AllPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllPolicies *AllPolicies `protobuf:"bytes,1,opt,name=all_policies,json=allPolicies,proto3" json:"all_policies,omitempty"`
}

func (x *AllPoliciesResponse) Reset() {
	*x = AllPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllPoliciesResponse) ProtoMessage() {}

func (x *AllPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllPoliciesResponse.ProtoReflect.Descriptor instead.
func (*AllPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{0}
}

func (x *AllPoliciesResponse) GetAllPolicies() *AllPolicies {
	if x != nil {
		return x.AllPolicies
	}
	return nil
}

type AllPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllPolicies map[string]*Policy `protobuf:"bytes,1,rep,name=all_policies,json=allPolicies,proto3" json:"all_policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AllPolicies) Reset() {
	*x = AllPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllPolicies) ProtoMessage() {}

func (x *AllPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllPolicies.ProtoReflect.Descriptor instead.
func (*AllPolicies) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{1}
}

func (x *AllPolicies) GetAllPolicies() map[string]*Policy {
	if x != nil {
		return x.AllPolicies
	}
	return nil
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Circuit            []*Component         `protobuf:"bytes,1,rep,name=circuit,proto3" json:"circuit,omitempty"`
	EvaluationInterval *durationpb.Duration `protobuf:"bytes,2,opt,name=evaluation_interval,json=evaluationInterval,proto3" json:"evaluation_interval,omitempty" default:"0.5s"` // @gotags: default:"0.5s"
	FluxMeters         []*FluxMeter         `protobuf:"bytes,3,rep,name=flux_meters,json=fluxMeters,proto3" json:"flux_meters,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Policy) GetCircuit() []*Component {
	if x != nil {
		return x.Circuit
	}
	return nil
}

func (x *Policy) GetEvaluationInterval() *durationpb.Duration {
	if x != nil {
		return x.EvaluationInterval
	}
	return nil
}

func (x *Policy) GetFluxMeters() []*FluxMeter {
	if x != nil {
		return x.FluxMeters
	}
	return nil
}

type FluxMeter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Selector         *Selector `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	HistogramBuckets []float64 `protobuf:"fixed64,3,rep,packed,name=histogram_buckets,json=histogramBuckets,proto3" json:"histogram_buckets,omitempty" default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"` // @gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
}

func (x *FluxMeter) Reset() {
	*x = FluxMeter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluxMeter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluxMeter) ProtoMessage() {}

func (x *FluxMeter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluxMeter.ProtoReflect.Descriptor instead.
func (*FluxMeter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{3}
}

func (x *FluxMeter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FluxMeter) GetSelector() *Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *FluxMeter) GetHistogramBuckets() []float64 {
	if x != nil {
		return x.HistogramBuckets
	}
	return nil
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//	*Component_GradientController
	//	*Component_Ema
	//	*Component_ArithmeticCombinator
	//	*Component_Decider
	//	*Component_ConcurrencyLimiter
	//	*Component_RateLimiter
	//	*Component_Promql
	//	*Component_Constant
	//	*Component_Sqrt
	//	*Component_Extrapolator
	//	*Component_Max
	//	*Component_Min
	Component isComponent_Component `protobuf_oneof:"component"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{4}
}

func (m *Component) GetComponent() isComponent_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *Component) GetGradientController() *GradientController {
	if x, ok := x.GetComponent().(*Component_GradientController); ok {
		return x.GradientController
	}
	return nil
}

func (x *Component) GetEma() *EMA {
	if x, ok := x.GetComponent().(*Component_Ema); ok {
		return x.Ema
	}
	return nil
}

func (x *Component) GetArithmeticCombinator() *ArithmeticCombinator {
	if x, ok := x.GetComponent().(*Component_ArithmeticCombinator); ok {
		return x.ArithmeticCombinator
	}
	return nil
}

func (x *Component) GetDecider() *Decider {
	if x, ok := x.GetComponent().(*Component_Decider); ok {
		return x.Decider
	}
	return nil
}

func (x *Component) GetConcurrencyLimiter() *ConcurrencyLimiter {
	if x, ok := x.GetComponent().(*Component_ConcurrencyLimiter); ok {
		return x.ConcurrencyLimiter
	}
	return nil
}

func (x *Component) GetRateLimiter() *RateLimiter {
	if x, ok := x.GetComponent().(*Component_RateLimiter); ok {
		return x.RateLimiter
	}
	return nil
}

func (x *Component) GetPromql() *PromQL {
	if x, ok := x.GetComponent().(*Component_Promql); ok {
		return x.Promql
	}
	return nil
}

func (x *Component) GetConstant() *Constant {
	if x, ok := x.GetComponent().(*Component_Constant); ok {
		return x.Constant
	}
	return nil
}

func (x *Component) GetSqrt() *Sqrt {
	if x, ok := x.GetComponent().(*Component_Sqrt); ok {
		return x.Sqrt
	}
	return nil
}

func (x *Component) GetExtrapolator() *Extrapolator {
	if x, ok := x.GetComponent().(*Component_Extrapolator); ok {
		return x.Extrapolator
	}
	return nil
}

func (x *Component) GetMax() *Max {
	if x, ok := x.GetComponent().(*Component_Max); ok {
		return x.Max
	}
	return nil
}

func (x *Component) GetMin() *Min {
	if x, ok := x.GetComponent().(*Component_Min); ok {
		return x.Min
	}
	return nil
}

type isComponent_Component interface {
	isComponent_Component()
}

type Component_GradientController struct {
	GradientController *GradientController `protobuf:"bytes,1,opt,name=gradient_controller,json=gradientController,proto3,oneof"`
}

type Component_Ema struct {
	Ema *EMA `protobuf:"bytes,2,opt,name=ema,proto3,oneof"`
}

type Component_ArithmeticCombinator struct {
	ArithmeticCombinator *ArithmeticCombinator `protobuf:"bytes,3,opt,name=arithmetic_combinator,json=arithmeticCombinator,proto3,oneof"`
}

type Component_Decider struct {
	Decider *Decider `protobuf:"bytes,4,opt,name=decider,proto3,oneof"`
}

type Component_ConcurrencyLimiter struct {
	ConcurrencyLimiter *ConcurrencyLimiter `protobuf:"bytes,5,opt,name=concurrency_limiter,json=concurrencyLimiter,proto3,oneof"`
}

type Component_RateLimiter struct {
	RateLimiter *RateLimiter `protobuf:"bytes,6,opt,name=rate_limiter,json=rateLimiter,proto3,oneof"`
}

type Component_Promql struct {
	Promql *PromQL `protobuf:"bytes,7,opt,name=promql,proto3,oneof"`
}

type Component_Constant struct {
	Constant *Constant `protobuf:"bytes,8,opt,name=constant,proto3,oneof"`
}

type Component_Sqrt struct {
	Sqrt *Sqrt `protobuf:"bytes,9,opt,name=sqrt,proto3,oneof"`
}

type Component_Extrapolator struct {
	Extrapolator *Extrapolator `protobuf:"bytes,10,opt,name=extrapolator,proto3,oneof"`
}

type Component_Max struct {
	Max *Max `protobuf:"bytes,11,opt,name=max,proto3,oneof"`
}

type Component_Min struct {
	Min *Min `protobuf:"bytes,12,opt,name=min,proto3,oneof"`
}

func (*Component_GradientController) isComponent_Component() {}

func (*Component_Ema) isComponent_Component() {}

func (*Component_ArithmeticCombinator) isComponent_Component() {}

func (*Component_Decider) isComponent_Component() {}

func (*Component_ConcurrencyLimiter) isComponent_Component() {}

func (*Component_RateLimiter) isComponent_Component() {}

func (*Component_Promql) isComponent_Component() {}

func (*Component_Constant) isComponent_Component() {}

func (*Component_Sqrt) isComponent_Component() {}

func (*Component_Extrapolator) isComponent_Component() {}

func (*Component_Max) isComponent_Component() {}

func (*Component_Min) isComponent_Component() {}

type Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignalName string `protobuf:"bytes,1,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
}

func (x *Port) Reset() {
	*x = Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Port) ProtoMessage() {}

func (x *Port) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Port.ProtoReflect.Descriptor instead.
func (*Port) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{5}
}

func (x *Port) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

type GradientController struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts     *GradientController_Ins  `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts    *GradientController_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	Tolerance   float64                  `protobuf:"fixed64,3,opt,name=tolerance,proto3" json:"tolerance,omitempty" validate:"gte=0.0"`                        // @gotags: validate:"gte=0.0"
	MinGradient float64                  `protobuf:"fixed64,4,opt,name=min_gradient,json=minGradient,proto3" json:"min_gradient,omitempty" default:"-1.79769313486231570814527423731704356798070e+308"` // @gotags: default:"-1.79769313486231570814527423731704356798070e+308"
	MaxGradient float64                  `protobuf:"fixed64,5,opt,name=max_gradient,json=maxGradient,proto3" json:"max_gradient,omitempty" default:"1.79769313486231570814527423731704356798070e+308"` // @gotags: default:"1.79769313486231570814527423731704356798070e+308"
}

func (x *GradientController) Reset() {
	*x = GradientController{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController) ProtoMessage() {}

func (x *GradientController) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController.ProtoReflect.Descriptor instead.
func (*GradientController) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{6}
}

func (x *GradientController) GetInPorts() *GradientController_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *GradientController) GetOutPorts() *GradientController_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *GradientController) GetTolerance() float64 {
	if x != nil {
		return x.Tolerance
	}
	return 0
}

func (x *GradientController) GetMinGradient() float64 {
	if x != nil {
		return x.MinGradient
	}
	return 0
}

func (x *GradientController) GetMaxGradient() float64 {
	if x != nil {
		return x.MaxGradient
	}
	return 0
}

type EMA struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts                                *EMA_Ins             `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts                               *EMA_Outs            `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	EmaWindow                              *durationpb.Duration `protobuf:"bytes,3,opt,name=ema_window,json=emaWindow,proto3" json:"ema_window,omitempty" default:"5s"`                                                                                                  // @gotags: default:"5s"
	WarmUpWindow                           *durationpb.Duration `protobuf:"bytes,4,opt,name=warm_up_window,json=warmUpWindow,proto3" json:"warm_up_window,omitempty" default:"0s"`                                                                                       // @gotags: default:"0s"
	CorrectionFactorOnMinEnvelopeViolation float64              `protobuf:"fixed64,5,opt,name=correction_factor_on_min_envelope_violation,json=correctionFactorOnMinEnvelopeViolation,proto3" json:"correction_factor_on_min_envelope_violation,omitempty" validate:"gte=1.0" default:"1.0"` // @gotags: validate:"gte=1.0" default:"1.0"
	CorrectionFactorOnMaxEnvelopeViolation float64              `protobuf:"fixed64,6,opt,name=correction_factor_on_max_envelope_violation,json=correctionFactorOnMaxEnvelopeViolation,proto3" json:"correction_factor_on_max_envelope_violation,omitempty" validate:"gte=0,lte=1.0" default:"1.0"` // @gotags: validate:"gte=0,lte=1.0" default:"1.0"
}

func (x *EMA) Reset() {
	*x = EMA{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA) ProtoMessage() {}

func (x *EMA) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA.ProtoReflect.Descriptor instead.
func (*EMA) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{7}
}

func (x *EMA) GetInPorts() *EMA_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *EMA) GetOutPorts() *EMA_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *EMA) GetEmaWindow() *durationpb.Duration {
	if x != nil {
		return x.EmaWindow
	}
	return nil
}

func (x *EMA) GetWarmUpWindow() *durationpb.Duration {
	if x != nil {
		return x.WarmUpWindow
	}
	return nil
}

func (x *EMA) GetCorrectionFactorOnMinEnvelopeViolation() float64 {
	if x != nil {
		return x.CorrectionFactorOnMinEnvelopeViolation
	}
	return 0
}

func (x *EMA) GetCorrectionFactorOnMaxEnvelopeViolation() float64 {
	if x != nil {
		return x.CorrectionFactorOnMaxEnvelopeViolation
	}
	return 0
}

type ArithmeticCombinator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts  *ArithmeticCombinator_Ins  `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts *ArithmeticCombinator_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	Operator string                     `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=add sub mul div xor lshift rshift"` // @gotags: validate:"oneof=add sub mul div xor lshift rshift"
}

func (x *ArithmeticCombinator) Reset() {
	*x = ArithmeticCombinator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator) ProtoMessage() {}

func (x *ArithmeticCombinator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{8}
}

func (x *ArithmeticCombinator) GetInPorts() *ArithmeticCombinator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *ArithmeticCombinator) GetOutPorts() *ArithmeticCombinator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *ArithmeticCombinator) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

type Decider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts  *Decider_Ins         `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts *Decider_Outs        `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	Operator string               `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty" validate:"oneof=gt lt gte lte eq neq"`                 // @gotags: validate:"oneof=gt lt gte lte eq neq"
	TrueFor  *durationpb.Duration `protobuf:"bytes,4,opt,name=true_for,json=trueFor,proto3" json:"true_for,omitempty" default:"0s"`    // @gotags: default:"0s"
	FalseFor *durationpb.Duration `protobuf:"bytes,5,opt,name=false_for,json=falseFor,proto3" json:"false_for,omitempty" default:"0s"` // @gotags: default:"0s"
}

func (x *Decider) Reset() {
	*x = Decider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider) ProtoMessage() {}

func (x *Decider) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider.ProtoReflect.Descriptor instead.
func (*Decider) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{9}
}

func (x *Decider) GetInPorts() *Decider_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Decider) GetOutPorts() *Decider_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Decider) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Decider) GetTrueFor() *durationpb.Duration {
	if x != nil {
		return x.TrueFor
	}
	return nil
}

func (x *Decider) GetFalseFor() *durationpb.Duration {
	if x != nil {
		return x.FalseFor
	}
	return nil
}

type RateLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts            *RateLimiter_Ins              `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty" validate:"required"`                                    // @gotags: validate:"required"
	Selector           *Selector                     `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty" validate:"required"`                                                 // @gotags: validate:"required"
	LimitResetInterval *durationpb.Duration          `protobuf:"bytes,3,opt,name=limit_reset_interval,json=limitResetInterval,proto3" json:"limit_reset_interval,omitempty" default:"60s"` // @gotags: default:"60s"
	LabelKey           string                        `protobuf:"bytes,4,opt,name=label_key,json=labelKey,proto3" json:"label_key,omitempty" validate:"required"`                                 // @gotags: validate:"required"
	Overrides          []*RateLimiter_OverrideConfig `protobuf:"bytes,5,rep,name=overrides,proto3" json:"overrides,omitempty"`
	LazySyncConfig     *RateLimiter_LazySyncConfig   `protobuf:"bytes,6,opt,name=lazy_sync_config,json=lazySyncConfig,proto3" json:"lazy_sync_config,omitempty"`
}

func (x *RateLimiter) Reset() {
	*x = RateLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter) ProtoMessage() {}

func (x *RateLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter.ProtoReflect.Descriptor instead.
func (*RateLimiter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{10}
}

func (x *RateLimiter) GetInPorts() *RateLimiter_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *RateLimiter) GetSelector() *Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *RateLimiter) GetLimitResetInterval() *durationpb.Duration {
	if x != nil {
		return x.LimitResetInterval
	}
	return nil
}

func (x *RateLimiter) GetLabelKey() string {
	if x != nil {
		return x.LabelKey
	}
	return ""
}

func (x *RateLimiter) GetOverrides() []*RateLimiter_OverrideConfig {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *RateLimiter) GetLazySyncConfig() *RateLimiter_LazySyncConfig {
	if x != nil {
		return x.LazySyncConfig
	}
	return nil
}

type ConcurrencyLimiter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheduler *Scheduler `protobuf:"bytes,1,opt,name=scheduler,proto3" json:"scheduler,omitempty" validate:"required"` // @gotags: validate:"required"
	// Types that are assignable to ActuationStrategy:
	//	*ConcurrencyLimiter_LoadShedActuator
	ActuationStrategy isConcurrencyLimiter_ActuationStrategy `protobuf_oneof:"actuation_strategy"`
}

func (x *ConcurrencyLimiter) Reset() {
	*x = ConcurrencyLimiter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConcurrencyLimiter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConcurrencyLimiter) ProtoMessage() {}

func (x *ConcurrencyLimiter) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConcurrencyLimiter.ProtoReflect.Descriptor instead.
func (*ConcurrencyLimiter) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{11}
}

func (x *ConcurrencyLimiter) GetScheduler() *Scheduler {
	if x != nil {
		return x.Scheduler
	}
	return nil
}

func (m *ConcurrencyLimiter) GetActuationStrategy() isConcurrencyLimiter_ActuationStrategy {
	if m != nil {
		return m.ActuationStrategy
	}
	return nil
}

func (x *ConcurrencyLimiter) GetLoadShedActuator() *LoadShedActuator {
	if x, ok := x.GetActuationStrategy().(*ConcurrencyLimiter_LoadShedActuator); ok {
		return x.LoadShedActuator
	}
	return nil
}

type isConcurrencyLimiter_ActuationStrategy interface {
	isConcurrencyLimiter_ActuationStrategy()
}

type ConcurrencyLimiter_LoadShedActuator struct {
	LoadShedActuator *LoadShedActuator `protobuf:"bytes,2,opt,name=load_shed_actuator,json=loadShedActuator,proto3,oneof"`
}

func (*ConcurrencyLimiter_LoadShedActuator) isConcurrencyLimiter_ActuationStrategy() {}

type Scheduler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPorts *Scheduler_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	Selector *Selector       `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
	// TODO: this is getting reworked.
	FairnessKey    string                    `protobuf:"bytes,3,opt,name=fairness_key,json=fairnessKey,proto3" json:"fairness_key,omitempty"`
	WorkloadConfig *Scheduler_WorkloadConfig `protobuf:"bytes,4,opt,name=workload_config,json=workloadConfig,proto3" json:"workload_config,omitempty"`
}

func (x *Scheduler) Reset() {
	*x = Scheduler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler) ProtoMessage() {}

func (x *Scheduler) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler.ProtoReflect.Descriptor instead.
func (*Scheduler) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12}
}

func (x *Scheduler) GetOutPorts() *Scheduler_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Scheduler) GetSelector() *Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *Scheduler) GetFairnessKey() string {
	if x != nil {
		return x.FairnessKey
	}
	return ""
}

func (x *Scheduler) GetWorkloadConfig() *Scheduler_WorkloadConfig {
	if x != nil {
		return x.WorkloadConfig
	}
	return nil
}

type LoadShedActuator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts *LoadShedActuator_Ins `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
}

func (x *LoadShedActuator) Reset() {
	*x = LoadShedActuator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadShedActuator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadShedActuator) ProtoMessage() {}

func (x *LoadShedActuator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadShedActuator.ProtoReflect.Descriptor instead.
func (*LoadShedActuator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{13}
}

func (x *LoadShedActuator) GetInPorts() *LoadShedActuator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

type PromQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPorts           *PromQL_Outs         `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	QueryString        string               `protobuf:"bytes,2,opt,name=query_string,json=queryString,proto3" json:"query_string,omitempty"`
	EvaluationInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=evaluation_interval,json=evaluationInterval,proto3" json:"evaluation_interval,omitempty" default:"10s"` // @gotags: default:"10s"
}

func (x *PromQL) Reset() {
	*x = PromQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromQL) ProtoMessage() {}

func (x *PromQL) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromQL.ProtoReflect.Descriptor instead.
func (*PromQL) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14}
}

func (x *PromQL) GetOutPorts() *PromQL_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *PromQL) GetQueryString() string {
	if x != nil {
		return x.QueryString
	}
	return ""
}

func (x *PromQL) GetEvaluationInterval() *durationpb.Duration {
	if x != nil {
		return x.EvaluationInterval
	}
	return nil
}

type Constant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutPorts *Constant_Outs `protobuf:"bytes,1,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	Value    float64        `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Constant) Reset() {
	*x = Constant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant) ProtoMessage() {}

func (x *Constant) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant.ProtoReflect.Descriptor instead.
func (*Constant) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{15}
}

func (x *Constant) GetOutPorts() *Constant_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Constant) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Sqrt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts  *Sqrt_Ins  `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts *Sqrt_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	Scale    float64    `protobuf:"fixed64,3,opt,name=scale,proto3" json:"scale,omitempty"` // @gotags default:"1.0"
}

func (x *Sqrt) Reset() {
	*x = Sqrt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt) ProtoMessage() {}

func (x *Sqrt) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt.ProtoReflect.Descriptor instead.
func (*Sqrt) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16}
}

func (x *Sqrt) GetInPorts() *Sqrt_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Sqrt) GetOutPorts() *Sqrt_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Sqrt) GetScale() float64 {
	if x != nil {
		return x.Scale
	}
	return 0
}

type Extrapolator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts                  *Extrapolator_Ins    `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts                 *Extrapolator_Outs   `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
	MaxExtrapolationInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=max_extrapolation_interval,json=maxExtrapolationInterval,proto3" json:"max_extrapolation_interval,omitempty" default:"10s"` // @gotags: default:"10s"
}

func (x *Extrapolator) Reset() {
	*x = Extrapolator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator) ProtoMessage() {}

func (x *Extrapolator) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator.ProtoReflect.Descriptor instead.
func (*Extrapolator) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{17}
}

func (x *Extrapolator) GetInPorts() *Extrapolator_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Extrapolator) GetOutPorts() *Extrapolator_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

func (x *Extrapolator) GetMaxExtrapolationInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxExtrapolationInterval
	}
	return nil
}

type Max struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts  *Max_Ins  `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts *Max_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Max) Reset() {
	*x = Max{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max) ProtoMessage() {}

func (x *Max) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max.ProtoReflect.Descriptor instead.
func (*Max) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18}
}

func (x *Max) GetInPorts() *Max_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Max) GetOutPorts() *Max_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

type Min struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPorts  *Min_Ins  `protobuf:"bytes,1,opt,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts *Min_Outs `protobuf:"bytes,2,opt,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *Min) Reset() {
	*x = Min{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min) ProtoMessage() {}

func (x *Min) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min.ProtoReflect.Descriptor instead.
func (*Min) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{19}
}

func (x *Min) GetInPorts() *Min_Ins {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *Min) GetOutPorts() *Min_Outs {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

type GradientController_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signal          *Port `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	Setpoint        *Port `protobuf:"bytes,2,opt,name=setpoint,proto3" json:"setpoint,omitempty"`
	Optimize        *Port `protobuf:"bytes,3,opt,name=optimize,proto3" json:"optimize,omitempty"`
	Max             *Port `protobuf:"bytes,4,opt,name=max,proto3" json:"max,omitempty"`
	Min             *Port `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	ControlVariable *Port `protobuf:"bytes,6,opt,name=control_variable,json=controlVariable,proto3" json:"control_variable,omitempty"`
}

func (x *GradientController_Ins) Reset() {
	*x = GradientController_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Ins) ProtoMessage() {}

func (x *GradientController_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Ins.ProtoReflect.Descriptor instead.
func (*GradientController_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GradientController_Ins) GetSignal() *Port {
	if x != nil {
		return x.Signal
	}
	return nil
}

func (x *GradientController_Ins) GetSetpoint() *Port {
	if x != nil {
		return x.Setpoint
	}
	return nil
}

func (x *GradientController_Ins) GetOptimize() *Port {
	if x != nil {
		return x.Optimize
	}
	return nil
}

func (x *GradientController_Ins) GetMax() *Port {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *GradientController_Ins) GetMin() *Port {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *GradientController_Ins) GetControlVariable() *Port {
	if x != nil {
		return x.ControlVariable
	}
	return nil
}

type GradientController_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GradientController_Outs) Reset() {
	*x = GradientController_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradientController_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradientController_Outs) ProtoMessage() {}

func (x *GradientController_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradientController_Outs.ProtoReflect.Descriptor instead.
func (*GradientController_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{6, 1}
}

func (x *GradientController_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type EMA_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input       *Port `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	MaxEnvelope *Port `protobuf:"bytes,2,opt,name=max_envelope,json=maxEnvelope,proto3" json:"max_envelope,omitempty"`
	MinEnvelope *Port `protobuf:"bytes,3,opt,name=min_envelope,json=minEnvelope,proto3" json:"min_envelope,omitempty"`
}

func (x *EMA_Ins) Reset() {
	*x = EMA_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Ins) ProtoMessage() {}

func (x *EMA_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Ins.ProtoReflect.Descriptor instead.
func (*EMA_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{7, 0}
}

func (x *EMA_Ins) GetInput() *Port {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *EMA_Ins) GetMaxEnvelope() *Port {
	if x != nil {
		return x.MaxEnvelope
	}
	return nil
}

func (x *EMA_Ins) GetMinEnvelope() *Port {
	if x != nil {
		return x.MinEnvelope
	}
	return nil
}

type EMA_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *EMA_Outs) Reset() {
	*x = EMA_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EMA_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EMA_Outs) ProtoMessage() {}

func (x *EMA_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EMA_Outs.ProtoReflect.Descriptor instead.
func (*EMA_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{7, 1}
}

func (x *EMA_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type ArithmeticCombinator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lhs *Port `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Rhs *Port `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
}

func (x *ArithmeticCombinator_Ins) Reset() {
	*x = ArithmeticCombinator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator_Ins) ProtoMessage() {}

func (x *ArithmeticCombinator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator_Ins.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ArithmeticCombinator_Ins) GetLhs() *Port {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *ArithmeticCombinator_Ins) GetRhs() *Port {
	if x != nil {
		return x.Rhs
	}
	return nil
}

type ArithmeticCombinator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *ArithmeticCombinator_Outs) Reset() {
	*x = ArithmeticCombinator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArithmeticCombinator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArithmeticCombinator_Outs) ProtoMessage() {}

func (x *ArithmeticCombinator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArithmeticCombinator_Outs.ProtoReflect.Descriptor instead.
func (*ArithmeticCombinator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{8, 1}
}

func (x *ArithmeticCombinator_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type Decider_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lhs     *Port `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Rhs     *Port `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
	OnTrue  *Port `protobuf:"bytes,3,opt,name=on_true,json=onTrue,proto3" json:"on_true,omitempty"`
	OnFalse *Port `protobuf:"bytes,4,opt,name=on_false,json=onFalse,proto3" json:"on_false,omitempty"`
}

func (x *Decider_Ins) Reset() {
	*x = Decider_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider_Ins) ProtoMessage() {}

func (x *Decider_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider_Ins.ProtoReflect.Descriptor instead.
func (*Decider_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Decider_Ins) GetLhs() *Port {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *Decider_Ins) GetRhs() *Port {
	if x != nil {
		return x.Rhs
	}
	return nil
}

func (x *Decider_Ins) GetOnTrue() *Port {
	if x != nil {
		return x.OnTrue
	}
	return nil
}

func (x *Decider_Ins) GetOnFalse() *Port {
	if x != nil {
		return x.OnFalse
	}
	return nil
}

type Decider_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Decider_Outs) Reset() {
	*x = Decider_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decider_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decider_Outs) ProtoMessage() {}

func (x *Decider_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decider_Outs.ProtoReflect.Descriptor instead.
func (*Decider_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{9, 1}
}

func (x *Decider_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type RateLimiter_LazySyncConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" default:"true"` // @gotags: default:"true"
	// Number of times to lazy sync within the limit_reset_interval
	NumSync uint32 `protobuf:"varint,2,opt,name=num_sync,json=numSync,proto3" json:"num_sync,omitempty" default:"5" validate:"gt=0"` // @gotags: default:"5" validate:"gt=0"
}

func (x *RateLimiter_LazySyncConfig) Reset() {
	*x = RateLimiter_LazySyncConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_LazySyncConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_LazySyncConfig) ProtoMessage() {}

func (x *RateLimiter_LazySyncConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_LazySyncConfig.ProtoReflect.Descriptor instead.
func (*RateLimiter_LazySyncConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{10, 0}
}

func (x *RateLimiter_LazySyncConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RateLimiter_LazySyncConfig) GetNumSync() uint32 {
	if x != nil {
		return x.NumSync
	}
	return 0
}

type RateLimiter_OverrideConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LabelValue       string  `protobuf:"bytes,1,opt,name=label_value,json=labelValue,proto3" json:"label_value,omitempty" validate:"required"`                       // @gotags: validate:"required"
	LimitScaleFactor float64 `protobuf:"fixed64,2,opt,name=limit_scale_factor,json=limitScaleFactor,proto3" json:"limit_scale_factor,omitempty" default:"1.0"` // @gotags: default:"1.0"
}

func (x *RateLimiter_OverrideConfig) Reset() {
	*x = RateLimiter_OverrideConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_OverrideConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_OverrideConfig) ProtoMessage() {}

func (x *RateLimiter_OverrideConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_OverrideConfig.ProtoReflect.Descriptor instead.
func (*RateLimiter_OverrideConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{10, 1}
}

func (x *RateLimiter_OverrideConfig) GetLabelValue() string {
	if x != nil {
		return x.LabelValue
	}
	return ""
}

func (x *RateLimiter_OverrideConfig) GetLimitScaleFactor() float64 {
	if x != nil {
		return x.LimitScaleFactor
	}
	return 0
}

type RateLimiter_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// negative limit means no limit is applied
	Limit *Port `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty" validate:"required" default:"-1.0"` // @gotags: validate:"required" default:"-1.0"
}

func (x *RateLimiter_Ins) Reset() {
	*x = RateLimiter_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimiter_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimiter_Ins) ProtoMessage() {}

func (x *RateLimiter_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimiter_Ins.ProtoReflect.Descriptor instead.
func (*RateLimiter_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{10, 2}
}

func (x *RateLimiter_Ins) GetLimit() *Port {
	if x != nil {
		return x.Limit
	}
	return nil
}

type Scheduler_WorkloadConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: this entire section is being reworked by @TanveerGill
	LabelKey        string                                    `protobuf:"bytes,1,opt,name=label_key,json=labelKey,proto3" json:"label_key,omitempty"`
	AutoTokens      bool                                      `protobuf:"varint,2,opt,name=auto_tokens,json=autoTokens,proto3" json:"auto_tokens,omitempty" default:"true"` // @gotags: default:"true"
	DefaultWorkload *Scheduler_WorkloadConfig_DefaultWorkload `protobuf:"bytes,3,opt,name=default_workload,json=defaultWorkload,proto3" json:"default_workload,omitempty"`
	// list of workloads
	// workload can describe priority, tokens (if auto_tokens are set to false) and timeout
	Workloads []*Scheduler_WorkloadConfig_Workload `protobuf:"bytes,4,rep,name=workloads,proto3" json:"workloads,omitempty"`
}

func (x *Scheduler_WorkloadConfig) Reset() {
	*x = Scheduler_WorkloadConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_WorkloadConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_WorkloadConfig) ProtoMessage() {}

func (x *Scheduler_WorkloadConfig) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_WorkloadConfig.ProtoReflect.Descriptor instead.
func (*Scheduler_WorkloadConfig) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Scheduler_WorkloadConfig) GetLabelKey() string {
	if x != nil {
		return x.LabelKey
	}
	return ""
}

func (x *Scheduler_WorkloadConfig) GetAutoTokens() bool {
	if x != nil {
		return x.AutoTokens
	}
	return false
}

func (x *Scheduler_WorkloadConfig) GetDefaultWorkload() *Scheduler_WorkloadConfig_DefaultWorkload {
	if x != nil {
		return x.DefaultWorkload
	}
	return nil
}

func (x *Scheduler_WorkloadConfig) GetWorkloads() []*Scheduler_WorkloadConfig_Workload {
	if x != nil {
		return x.Workloads
	}
	return nil
}

type Scheduler_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcceptedConcurrency *Port `protobuf:"bytes,1,opt,name=accepted_concurrency,json=acceptedConcurrency,proto3" json:"accepted_concurrency,omitempty"`
	IncomingConcurrency *Port `protobuf:"bytes,2,opt,name=incoming_concurrency,json=incomingConcurrency,proto3" json:"incoming_concurrency,omitempty"`
}

func (x *Scheduler_Outs) Reset() {
	*x = Scheduler_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_Outs) ProtoMessage() {}

func (x *Scheduler_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_Outs.ProtoReflect.Descriptor instead.
func (*Scheduler_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Scheduler_Outs) GetAcceptedConcurrency() *Port {
	if x != nil {
		return x.AcceptedConcurrency
	}
	return nil
}

func (x *Scheduler_Outs) GetIncomingConcurrency() *Port {
	if x != nil {
		return x.IncomingConcurrency
	}
	return nil
}

type Scheduler_WorkloadConfig_Workload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority   uint32               `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" validate:"gte=0,lte=255"` // @gotags: validate:"gte=0,lte=255"
	Tokens     uint64               `protobuf:"varint,2,opt,name=tokens,proto3" json:"tokens,omitempty" default:"1"`     // @gotags: default:"1"
	Timeout    *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty" default:"0.005s"`    // @gotags: default:"0.005s"
	LabelValue string               `protobuf:"bytes,4,opt,name=label_value,json=labelValue,proto3" json:"label_value,omitempty"`
}

func (x *Scheduler_WorkloadConfig_Workload) Reset() {
	*x = Scheduler_WorkloadConfig_Workload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_WorkloadConfig_Workload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_WorkloadConfig_Workload) ProtoMessage() {}

func (x *Scheduler_WorkloadConfig_Workload) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_WorkloadConfig_Workload.ProtoReflect.Descriptor instead.
func (*Scheduler_WorkloadConfig_Workload) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *Scheduler_WorkloadConfig_Workload) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Scheduler_WorkloadConfig_Workload) GetTokens() uint64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *Scheduler_WorkloadConfig_Workload) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Scheduler_WorkloadConfig_Workload) GetLabelValue() string {
	if x != nil {
		return x.LabelValue
	}
	return ""
}

type Scheduler_WorkloadConfig_DefaultWorkload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Priority uint32               `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty" validate:"gte=0,lte=255"` // @gotags: validate:"gte=0,lte=255"
	Tokens   uint64               `protobuf:"varint,2,opt,name=tokens,proto3" json:"tokens,omitempty" default:"1"`     // @gotags: default:"1"
	Timeout  *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty" default:"0.005s"`    // @gotags: default:"0.005s"
}

func (x *Scheduler_WorkloadConfig_DefaultWorkload) Reset() {
	*x = Scheduler_WorkloadConfig_DefaultWorkload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheduler_WorkloadConfig_DefaultWorkload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheduler_WorkloadConfig_DefaultWorkload) ProtoMessage() {}

func (x *Scheduler_WorkloadConfig_DefaultWorkload) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheduler_WorkloadConfig_DefaultWorkload.ProtoReflect.Descriptor instead.
func (*Scheduler_WorkloadConfig_DefaultWorkload) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{12, 0, 1}
}

func (x *Scheduler_WorkloadConfig_DefaultWorkload) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Scheduler_WorkloadConfig_DefaultWorkload) GetTokens() uint64 {
	if x != nil {
		return x.Tokens
	}
	return 0
}

func (x *Scheduler_WorkloadConfig_DefaultWorkload) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

type LoadShedActuator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadShedFactor *Port `protobuf:"bytes,1,opt,name=load_shed_factor,json=loadShedFactor,proto3" json:"load_shed_factor,omitempty"`
}

func (x *LoadShedActuator_Ins) Reset() {
	*x = LoadShedActuator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadShedActuator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadShedActuator_Ins) ProtoMessage() {}

func (x *LoadShedActuator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadShedActuator_Ins.ProtoReflect.Descriptor instead.
func (*LoadShedActuator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{13, 0}
}

func (x *LoadShedActuator_Ins) GetLoadShedFactor() *Port {
	if x != nil {
		return x.LoadShedFactor
	}
	return nil
}

type PromQL_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *PromQL_Outs) Reset() {
	*x = PromQL_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromQL_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromQL_Outs) ProtoMessage() {}

func (x *PromQL_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromQL_Outs.ProtoReflect.Descriptor instead.
func (*PromQL_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{14, 0}
}

func (x *PromQL_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type Constant_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Constant_Outs) Reset() {
	*x = Constant_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constant_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constant_Outs) ProtoMessage() {}

func (x *Constant_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constant_Outs.ProtoReflect.Descriptor instead.
func (*Constant_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Constant_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type Sqrt_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *Port `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Sqrt_Ins) Reset() {
	*x = Sqrt_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt_Ins) ProtoMessage() {}

func (x *Sqrt_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt_Ins.ProtoReflect.Descriptor instead.
func (*Sqrt_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 0}
}

func (x *Sqrt_Ins) GetInput() *Port {
	if x != nil {
		return x.Input
	}
	return nil
}

type Sqrt_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Sqrt_Outs) Reset() {
	*x = Sqrt_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sqrt_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sqrt_Outs) ProtoMessage() {}

func (x *Sqrt_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sqrt_Outs.ProtoReflect.Descriptor instead.
func (*Sqrt_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{16, 1}
}

func (x *Sqrt_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type Extrapolator_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input *Port `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *Extrapolator_Ins) Reset() {
	*x = Extrapolator_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Ins) ProtoMessage() {}

func (x *Extrapolator_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Ins.ProtoReflect.Descriptor instead.
func (*Extrapolator_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Extrapolator_Ins) GetInput() *Port {
	if x != nil {
		return x.Input
	}
	return nil
}

type Extrapolator_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Extrapolator_Outs) Reset() {
	*x = Extrapolator_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extrapolator_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extrapolator_Outs) ProtoMessage() {}

func (x *Extrapolator_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extrapolator_Outs.ProtoReflect.Descriptor instead.
func (*Extrapolator_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Extrapolator_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type Max_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs []*Port `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *Max_Ins) Reset() {
	*x = Max_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max_Ins) ProtoMessage() {}

func (x *Max_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max_Ins.ProtoReflect.Descriptor instead.
func (*Max_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Max_Ins) GetInputs() []*Port {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type Max_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Max_Outs) Reset() {
	*x = Max_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Max_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Max_Outs) ProtoMessage() {}

func (x *Max_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Max_Outs.ProtoReflect.Descriptor instead.
func (*Max_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{18, 1}
}

func (x *Max_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

type Min_Ins struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs []*Port `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *Min_Ins) Reset() {
	*x = Min_Ins{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min_Ins) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min_Ins) ProtoMessage() {}

func (x *Min_Ins) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min_Ins.ProtoReflect.Descriptor instead.
func (*Min_Ins) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Min_Ins) GetInputs() []*Port {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type Min_Outs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Port `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Min_Outs) Reset() {
	*x = Min_Outs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Min_Outs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Min_Outs) ProtoMessage() {}

func (x *Min_Outs) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Min_Outs.ProtoReflect.Descriptor instead.
func (*Min_Outs) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{19, 1}
}

func (x *Min_Outs) GetOutput() *Port {
	if x != nil {
		return x.Output
	}
	return nil
}

var File_aperture_policy_language_v1_policy_proto protoreflect.FileDescriptor

var file_aperture_policy_language_v1_policy_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2a, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62,
	0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x0b, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x1a, 0x63, 0x0a, 0x10, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x07, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x81, 0x01, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x32,
	0x3a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x52, 0x07, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x12, 0xb2, 0x02, 0x0a, 0x13, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xe5, 0x01,
	0x92, 0x41, 0xe1, 0x01, 0x32, 0xc5, 0x01, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x28, 0x74, 0x69, 0x63, 0x6b,
	0x73, 0x29, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x63, 0x6f,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x20, 0x72, 0x75, 0x6e, 0x73, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x2e, 0x0a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79,
	0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x68, 0x6f,
	0x77, 0x20, 0x6f, 0x66, 0x74, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x28, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x74, 0x61, 0x6b, 0x65, 0x6e, 0x2e, 0x82, 0x03, 0x16, 0x0a,
	0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x1a,
	0x04, 0x30, 0x2e, 0x35, 0x73, 0x52, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0xad, 0x01, 0x0a, 0x0b, 0x66, 0x6c,
	0x75, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c,
	0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x42, 0x64, 0x92, 0x41, 0x61, 0x32, 0x5f, 0x46, 0x6c,
	0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x52, 0x0a, 0x66,
	0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0xe9, 0x02, 0x92, 0x41, 0xe5, 0x02,
	0x0a, 0xe2, 0x02, 0x32, 0xdf, 0x02, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x20, 0x69, 0x73, 0x20,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x20, 0x28, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x29, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6c, 0x6f,
	0x77, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x20, 0x76, 0x69, 0x61, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x0a,
	0x41, 0x73, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2c,
	0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x67, 0x65, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x2c, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68,
	0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x6f, 0x72,
	0x20, 0x67, 0x65, 0x74, 0x20, 0x61, 0x63, 0x74, 0x65, 0x64, 0x20, 0x75, 0x70, 0x6f, 0x6e, 0x20,
	0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x68, 0x65, 0x64, 0x2c,
	0x20, 0x72, 0x61, 0x74, 0x65, 0x2d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2c, 0x20, 0x61, 0x75, 0x74,
	0x6f, 0x2d, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x65, 0x74, 0x63, 0x2e, 0x29, 0x2e, 0x0a, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x65, 0x64, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x20, 0x69, 0x6e, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x22, 0xf1, 0x03, 0x0a, 0x09, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x66, 0x6c, 0x75, 0x78, 0x20, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x5d, 0x92, 0x41, 0x5a, 0x32, 0x58, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x20, 0x61,
	0x72, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20,
	0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0xc1, 0x01, 0x0a, 0x11, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x42, 0x93, 0x01, 0x92, 0x41, 0x8f, 0x01, 0x32, 0x35, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x20, 0x28, 0x69, 0x6e, 0x20, 0x6d, 0x73, 0x29, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x2e, 0x82, 0x03, 0x55, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x45, 0x1a, 0x43, 0x5b, 0x35, 0x2e, 0x30, 0x2c, 0x31, 0x30, 0x2e, 0x30,
	0x2c, 0x32, 0x35, 0x2e, 0x30, 0x2c, 0x35, 0x30, 0x2e, 0x30, 0x2c, 0x31, 0x30, 0x30, 0x2e, 0x30,
	0x2c, 0x32, 0x35, 0x30, 0x2e, 0x30, 0x2c, 0x35, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0x31, 0x30, 0x30,
	0x30, 0x2e, 0x30, 0x2c, 0x32, 0x35, 0x30, 0x30, 0x2e, 0x30, 0x2c, 0x35, 0x30, 0x30, 0x30, 0x2e,
	0x30, 0x2c, 0x31, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x30, 0x5d, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x3a, 0x4b, 0x92, 0x41,
	0x48, 0x0a, 0x46, 0x32, 0x44, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x67,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x69, 0x74, 0x73, 0x20,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x22, 0x88, 0x14, 0x0a, 0x09, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0xf7, 0x02, 0x0a, 0x13, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x42, 0x92, 0x02, 0x92, 0x41, 0x8e, 0x02, 0x32, 0x8b, 0x02,
	0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x20, 0x62, 0x61, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65,
	0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x20, 0x62, 0x65, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x69,
	0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x20, 0x41, 0x49, 0x4d, 0x44, 0x20, 0x28, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x20, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x76, 0x65, 0x20, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x4d, 0x49, 0x4d, 0x44, 0x20, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x5d, 0x0a, 0x03, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41,
	0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x20, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x20, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x00, 0x52, 0x03, 0x65, 0x6d, 0x61,
	0x12, 0xbb, 0x01, 0x0a, 0x15, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x32, 0x4c, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x20, 0x28, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x29,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x48, 0x00, 0x52, 0x14, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0xc5,
	0x01, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x42, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x32, 0x7d, 0x44, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x72, 0x20, 0x61, 0x63, 0x74, 0x73, 0x20, 0x61, 0x73, 0x20, 0x61, 0x20,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x65, 0x6d, 0x69, 0x74,
	0x73, 0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x77, 0x6f,
	0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x20, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x77,
	0x6f, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x2e, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x12, 0x82, 0x02, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x42, 0x9d, 0x01, 0x92, 0x41, 0x99, 0x01, 0x32, 0x96, 0x01, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62,
	0x79, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x68, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x20, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x20, 0x46, 0x61, 0x69, 0x72, 0x20, 0x51, 0x75, 0x65, 0x75,
	0x69, 0x6e, 0x67, 0x29, 0x2e, 0x48, 0x00, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x96, 0x01, 0x0a, 0x0c,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x42, 0x47, 0x92, 0x41,
	0x44, 0x32, 0x42, 0x52, 0x61, 0x74, 0x65, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x72, 0x61, 0x74, 0x65, 0x20, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x2e, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x12, 0x90, 0x01, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x4c, 0x42, 0x51, 0x92, 0x41, 0x4e, 0x32,
	0x4c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x75,
	0x6e, 0x73, 0x20, 0x61, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x69, 0x74,
	0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x72, 0x6f, 0x6d, 0x71, 0x6c, 0x12, 0x62, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x42, 0x1d, 0x92, 0x41, 0x1a, 0x32, 0x18, 0x45, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x48,
	0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x04,
	0x73, 0x71, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x72, 0x74, 0x42, 0x49, 0x92,
	0x41, 0x46, 0x32, 0x44, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6d,
	0x69, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x72,
	0x6f, 0x6f, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x71, 0x72, 0x74,
	0x12, 0xfd, 0x01, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x42, 0xab, 0x01, 0x92, 0x41, 0xa7, 0x01, 0x32, 0xa4, 0x01, 0x54, 0x61, 0x6b, 0x65,
	0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3b, 0x20, 0x65, 0x69, 0x74, 0x68, 0x65, 0x72, 0x20, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x62, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x42,
	0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x45, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x61, 0x6e, 0x6c, 0x73, 0x2e, 0x48, 0x00, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x62, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x6e, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x45, 0x6d, 0x69, 0x74, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73,
	0x2e, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x3a, 0xac, 0x03, 0x92, 0x41, 0xa8, 0x03, 0x0a,
	0xa5, 0x03, 0x32, 0xa2, 0x03, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2e,
	0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x20, 0x69, 0x6e,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x76, 0x69, 0x61, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x61, 0x72,
	0x65, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x77, 0x69, 0x72, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x62, 0x61,
	0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x6e, 0x20, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x67, 0x72, 0x61, 0x70, 0x68, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x0a, 0x4c,
	0x6f, 0x6f, 0x70, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x61,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x70, 0x61, 0x72, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x6f, 0x6f,
	0x70, 0x65, 0x64, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20,
	0x73, 0x61, 0x76, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x63,
	0x6b, 0x20, 0x74, 0x68, 0x65, 0x79, 0x20, 0x61, 0x72, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x75, 0x62, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x74, 0x20, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x5a, 0x0a,
	0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x72,
	0x20, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x20, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x3f, 0x92, 0x41, 0x3c, 0x0a, 0x3a,
	0x32, 0x38, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x72, 0x65,
	0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x20,
	0x76, 0x69, 0x61, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x22, 0x98, 0x0f, 0x0a, 0x12, 0x47,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x7c, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32, 0x27, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x80, 0x01, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x6b, 0x92, 0x41, 0x68, 0x32, 0x49, 0x54, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x20, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73,
	0x20, 0x6d, 0x61, 0x64, 0x65, 0x2e, 0x82, 0x03, 0x1a, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x09, 0x1a, 0x07, 0x67, 0x74, 0x65, 0x3d,
	0x30, 0x2e, 0x30, 0x52, 0x09, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xab,
	0x01, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x87, 0x01, 0x92, 0x41, 0x83, 0x01, 0x32, 0x65, 0x4d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x2c, 0x20, 0x5b, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x5d, 0x2e, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0xab, 0x01, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x87, 0x01, 0x92, 0x41, 0x83, 0x01, 0x32, 0x65, 0x4d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x2c, 0x20, 0x5b, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5d,
	0x2e, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x09, 0x11, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0x7f, 0x52, 0x0b, 0x6d,
	0x61, 0x78, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x88, 0x06, 0x0a, 0x03, 0x49,
	0x6e, 0x73, 0x12, 0x6f, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x12, 0x75, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x53,
	0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x87, 0x01, 0x0a, 0x08, 0x6f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x48, 0x92, 0x41, 0x45, 0x32, 0x43, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x20,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x12, 0x5e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x4d, 0x61, 0x78, 0x69, 0x6d,
	0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x12, 0x5e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x4d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x4a, 0x92, 0x41, 0x47, 0x32, 0x45, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x62, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x3a,
	0x34, 0x92, 0x41, 0x31, 0x0a, 0x2f, 0x32, 0x2d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x1a, 0xae, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x6f,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x42, 0x34, 0x92, 0x41, 0x31, 0x32, 0x2f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64,
	0x20, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a,
	0x35, 0x92, 0x41, 0x32, 0x0a, 0x30, 0x32, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x20, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a, 0xdc, 0x01, 0x92, 0x41, 0xd8, 0x01, 0x0a, 0xd5, 0x01,
	0x32, 0xd2, 0x01, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x3a, 0x20, 0x67,
	0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x3d, 0x20, 0x28, 0x73, 0x65, 0x74, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x29, 0x2f, 0x28, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x29, 0x20, 0x5c, 0x2a,
	0x20, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x0a, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x20, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x20, 0x5b, 0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x2c, 0x20, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x5d, 0x2e, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x28, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x20, 0x5c, 0x2a, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x29, 0x20, 0x2b, 0x20, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x2e, 0x22, 0x8e, 0x15, 0x0a, 0x03, 0x45, 0x4d, 0x41, 0x12, 0x68, 0x0a,
	0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d,
	0x41, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x45, 0x4d, 0x41, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07,
	0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x2e, 0x4f, 0x75, 0x74,
	0x73, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x4d, 0x41,
	0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x20, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x69, 0x6e, 0x67, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x82, 0x03, 0x14, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02,
	0x35, 0x73, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0xe5, 0x01,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0xa3, 0x01, 0x92, 0x41, 0x9f, 0x01, 0x32, 0x85, 0x01, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x77, 0x61, 0x72, 0x6d, 0x69,
	0x6e, 0x67, 0x20, 0x75, 0x70, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x0a, 0x54, 0x68,
	0x65, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x77, 0x61, 0x72, 0x6d, 0x20, 0x75, 0x70, 0x20, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e,
	0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x04, 0x1a, 0x02, 0x30, 0x73, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0xf4, 0x01, 0x0a, 0x2b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x5f, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x96, 0x01, 0x92, 0x41,
	0x92, 0x01, 0x32, 0x57, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x69,
	0x6e, 0x20, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x2e, 0x82, 0x03, 0x19, 0x0a, 0x0c,
	0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x82, 0x03, 0x1a, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x09, 0x1a, 0x07, 0x67, 0x74, 0x65,
	0x3d, 0x31, 0x2e, 0x30, 0x52, 0x26, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c,
	0x6f, 0x70, 0x65, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xfa, 0x01, 0x0a,
	0x2b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f,
	0x70, 0x65, 0x5f, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x9c, 0x01, 0x92, 0x41, 0x98, 0x01, 0x32, 0x57, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x66, 0x20, 0x69, 0x74, 0x73,
	0x20, 0x69, 0x6e, 0x20, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61, 0x78, 0x20, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x2e, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x82, 0x03,
	0x20, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0f, 0x1a, 0x0d, 0x67, 0x74, 0x65, 0x3d, 0x30, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x31, 0x2e,
	0x30, 0x52, 0x26, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x4f, 0x6e, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf9, 0x02, 0x0a, 0x03, 0x49, 0x6e,
	0x73, 0x12, 0x6e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65,
	0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x6d, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32,
	0x22, 0x55, 0x70, 0x70, 0x65, 0x72, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x12, 0x6d, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22,
	0x4c, 0x6f, 0x77, 0x65, 0x72, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x2e, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x3a,
	0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x32, 0x1d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x1a, 0xb8, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x88,
	0x01, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x4d, 0x92, 0x41, 0x4a, 0x32, 0x48, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x73, 0x20,
	0x61, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x2e, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x25, 0x92, 0x41, 0x22, 0x0a, 0x20,
	0x32, 0x1e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x3a, 0xa3, 0x08, 0x92, 0x41, 0x9f, 0x08, 0x0a, 0x9c, 0x08, 0x32, 0x99, 0x08, 0x45, 0x78, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x20, 0x4d, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x20,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x28, 0x45, 0x4d, 0x41, 0x29, 0x20, 0x69, 0x73,
	0x20, 0x61, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x6f, 0x76, 0x69, 0x6e,
	0x67, 0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x69, 0x61,
	0x6c, 0x6c, 0x79, 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20,
	0x74, 0x6f, 0x20, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x0a, 0x41, 0x74, 0x20, 0x61, 0x6e,
	0x79, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x73, 0x20, 0x69, 0x6e,
	0x20, 0x6f, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x3a, 0x0a, 0x31, 0x2e,
	0x20, 0x57, 0x61, 0x72, 0x6d, 0x20, 0x75, 0x70, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x20,
	0x54, 0x68, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x20, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x75,
	0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x20, 0x61, 0x72, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x20, 0x45, 0x4d, 0x41, 0x2e, 0x0a, 0x49, 0x66, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x67, 0x6f, 0x6f, 0x64,
	0x20, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x20, 0x67, 0x65, 0x74, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x62, 0x61, 0x63,
	0x6b, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x6f,
	0x66, 0x20, 0x57, 0x61, 0x72, 0x6d, 0x20, 0x75, 0x70, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x0a, 0x32, 0x2e, 0x20, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x20, 0x54, 0x68, 0x65, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x2e, 0x0a, 0x49,
	0x66, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x72, 0x65, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x65, 0x6d, 0x61, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x20, 0x64, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x67, 0x6f, 0x6f, 0x64,
	0x20, 0x45, 0x4d, 0x41, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x67, 0x65,
	0x74, 0x73, 0x20, 0x72, 0x65, 0x73, 0x65, 0x74, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f,
	0x20, 0x57, 0x61, 0x72, 0x6d, 0x20, 0x75, 0x70, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0a,
	0x54, 0x68, 0x65, 0x20, 0x45, 0x4d, 0x41, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x59, 0x20, 0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79,
	0x20, 0x61, 0x73, 0x3a, 0x0a, 0x45, 0x4d, 0x41, 0x74, 0x20, 0x3d, 0x20, 0x59, 0x30, 0x20, 0x2c,
	0x20, 0x74, 0x20, 0x3d, 0x20, 0x30, 0x0a, 0x45, 0x4d, 0x41, 0x74, 0x20, 0x3d, 0x20, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x20, 0x5c, 0x2a, 0x20, 0x59, 0x74, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x20, 0x2d,
	0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x29, 0x20, 0x5c, 0x2a, 0x20, 0x45, 0x4d, 0x41, 0x74, 0x2d,
	0x31, 0x20, 0x2c, 0x20, 0x74, 0x20, 0x3e, 0x20, 0x30, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x20,
	0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x69,
	0x6e, 0x67, 0x20, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x69, 0x6e,
	0x67, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x20, 0x30, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x31, 0x2e, 0x0a, 0x41, 0x20, 0x68, 0x69, 0x67, 0x68,
	0x65, 0x72, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x20, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x0a, 0x54, 0x68,
	0x65, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x64, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6d, 0x61, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x3a, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x3d, 0x20, 0x32, 0x20,
	0x2f, 0x20, 0x28, 0x4e, 0x20, 0x2b, 0x20, 0x31, 0x29, 0x2e, 0x20, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x2c, 0x20, 0x4e, 0x20, 0x3d, 0x20, 0x65, 0x6d, 0x61, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x20, 0x2f, 0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x22, 0xc5, 0x08, 0x0a, 0x14, 0x41, 0x72, 0x69, 0x74, 0x68,
	0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x8b, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x39, 0x92, 0x41, 0x36, 0x32, 0x34,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x20, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x8f, 0x01,
	0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x42, 0x3a, 0x92, 0x41, 0x37, 0x32, 0x35,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x20,
	0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x83, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x67, 0x92, 0x41, 0x64, 0x32, 0x25, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x82, 0x03,
	0x3a, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x29, 0x1a, 0x27, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x61, 0x64, 0x64, 0x20, 0x73, 0x75,
	0x62, 0x20, 0x6d, 0x75, 0x6c, 0x20, 0x64, 0x69, 0x76, 0x20, 0x78, 0x6f, 0x72, 0x20, 0x6c, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x20, 0x72, 0x73, 0x68, 0x69, 0x66, 0x74, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x8c, 0x02, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x65, 0x0a,
	0x03, 0x6c, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x30, 0x92,
	0x41, 0x2d, 0x32, 0x2b, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x69,
	0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x03, 0x6c, 0x68, 0x73, 0x12, 0x66, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x20, 0x68, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x20, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x03, 0x72, 0x68, 0x73, 0x3a, 0x36, 0x92, 0x41,
	0x33, 0x0a, 0x31, 0x32, 0x2f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x20, 0x43,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x1a, 0xa0, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x5f, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x24, 0x92, 0x41, 0x21, 0x32, 0x1f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x20, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x37,
	0x92, 0x41, 0x34, 0x0a, 0x32, 0x32, 0x30, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69,
	0x63, 0x20, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a, 0xd4, 0x01, 0x92, 0x41, 0xd0, 0x01, 0x0a, 0xcd,
	0x01, 0x32, 0xca, 0x01, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65,
	0x74, 0x69, 0x63, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63,
	0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20,
	0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x58, 0x4f, 0x52, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x20, 0x62, 0x69, 0x74, 0x20, 0x73, 0x68, 0x69, 0x66, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x6c,
	0x65, 0x66, 0x74, 0x20, 0x62, 0x69, 0x74, 0x20, 0x73, 0x68, 0x69, 0x66, 0x74, 0x2e, 0x22, 0xc7,
	0x10, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x08, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x09,
	0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x42, 0x2c, 0x92, 0x41, 0x29, 0x32,
	0x27, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x7e, 0x92, 0x41, 0x7b, 0x32, 0x49, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x20, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x68, 0x73, 0x20, 0x61,
	0x6e, 0x64, 0x20, 0x72, 0x68, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x82, 0x03, 0x2d, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x1a, 0x1a, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x3d, 0x67, 0x74, 0x20, 0x6c, 0x74, 0x20, 0x67, 0x74, 0x65, 0x20, 0x6c, 0x74, 0x65, 0x20, 0x65,
	0x71, 0x20, 0x6e, 0x65, 0x71, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0xd5, 0x01, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x9e, 0x01,
	0x92, 0x41, 0x9a, 0x01, 0x32, 0x80, 0x01, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x75, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x0a, 0x49, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x7a, 0x65, 0x72, 0x6f, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20,
	0x68, 0x61, 0x70, 0x70, 0x65, 0x6e, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e,
	0x65, 0x6f, 0x75, 0x73, 0x6c, 0x79, 0x2e, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x30, 0x73, 0x52, 0x07,
	0x74, 0x72, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x12, 0xd8, 0x01, 0x0a, 0x09, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x9f, 0x01, 0x92, 0x41, 0x9b, 0x01, 0x32, 0x81, 0x01,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x69, 0x6d, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x20,
	0x61, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x0a, 0x49, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
	0x7a, 0x65, 0x72, 0x6f, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x68, 0x61, 0x70, 0x70, 0x65, 0x6e,
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x6c, 0x79,
	0x2e, 0x82, 0x03, 0x14, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x04, 0x1a, 0x02, 0x30, 0x73, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x46,
	0x6f, 0x72, 0x1a, 0x91, 0x04, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x73, 0x0a, 0x03, 0x6c, 0x68,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x3e, 0x92, 0x41, 0x3b, 0x32,
	0x39, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x68, 0x61, 0x6e, 0x64, 0x20, 0x73, 0x69, 0x64, 0x65, 0x20,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12,
	0x74, 0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42,
	0x3f, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x20, 0x68, 0x61, 0x6e, 0x64,
	0x20, 0x73, 0x69, 0x64, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x03, 0x72, 0x68, 0x73, 0x12, 0x78, 0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x37,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69,
	0x73, 0x20, 0x74, 0x72, 0x75, 0x65, 0x2e, 0x52, 0x06, 0x6f, 0x6e, 0x54, 0x72, 0x75, 0x65, 0x12,
	0x7b, 0x0a, 0x08, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x3d, 0x92, 0x41, 0x3a, 0x32, 0x38, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x2e, 0x52, 0x07, 0x6f, 0x6e, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x3a, 0x28, 0x92, 0x41,
	0x25, 0x0a, 0x23, 0x32, 0x21, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x1a, 0x99, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12,
	0x66, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x28, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x75,
	0x65, 0x20, 0x6f, 0x72, 0x20, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x2e, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x29, 0x92, 0x41, 0x26, 0x0a, 0x24, 0x32, 0x22,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x44, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x3a, 0xd3, 0x04, 0x92, 0x41, 0xcf, 0x04, 0x0a, 0xcc, 0x04, 0x32, 0xc9, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x20, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x68, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x72, 0x68, 0x73, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x20, 0x62, 0x65, 0x74,
	0x77, 0x65, 0x65, 0x6e, 0x20, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x2e, 0x0a, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x2d,
	0x74, 0x68, 0x61, 0x6e, 0x2c, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x68, 0x61, 0x6e, 0x2c,
	0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x2d, 0x74, 0x68, 0x61, 0x6e, 0x2d, 0x6f, 0x72,
	0x2d, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x2c, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x68, 0x61,
	0x6e, 0x2d, 0x6f, 0x72, 0x2d, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x2c, 0x20, 0x65, 0x71, 0x75, 0x61,
	0x6c, 0x2c, 0x20, 0x6f, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x2d, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x2e,
	0x0a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20,
	0x61, 0x6c, 0x73, 0x6f, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x2d, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2c, 0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x62,
	0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72,
	0x20, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x74, 0x72,
	0x75, 0x65, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x20, 0x22, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x22, 0x20, 0x6f, 0x72, 0x20, 0x22, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x22, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x0a, 0x49, 0x66, 0x20, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x20, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x7a, 0x65, 0x72, 0x6f,
	0x20, 0x74, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x2e, 0x22, 0xa5, 0x05, 0x0a, 0x0b, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x4b, 0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x55,
	0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x61, 0x0a, 0x10, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x7a, 0x79, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x6c, 0x61, 0x7a, 0x79, 0x53, 0x79,
	0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x45, 0x0a, 0x0e, 0x4c, 0x61, 0x7a, 0x79,
	0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x79, 0x6e, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x53, 0x79, 0x6e, 0x63, 0x1a,
	0x5f, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0x3e, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xe0, 0x05, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x12, 0x99, 0x01, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x42, 0x53, 0x92, 0x41, 0x50, 0x32, 0x30, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x65, 0x64, 0x20, 0x46, 0x61, 0x69, 0x72, 0x20, 0x51, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67, 0x20,
	0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x82, 0x03, 0x1b, 0x0a, 0x0d, 0x78,
	0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0a, 0x1a, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x3b, 0x92, 0x41, 0x38, 0x32, 0x36, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x62,
	0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x68, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x6f, 0x66, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x48, 0x00, 0x52, 0x10,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72,
	0x3a, 0xfa, 0x02, 0x92, 0x41, 0xf6, 0x02, 0x0a, 0xf3, 0x02, 0x32, 0xf0, 0x02, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x69,
	0x6e, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x49, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x20, 0x28, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73,
	0x68, 0x65, 0x64, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x77, 0x68, 0x69,
	0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x20, 0x46, 0x61, 0x69, 0x72, 0x20, 0x51, 0x75, 0x65,
	0x75, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x73, 0x2e,
	0x20, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x69, 0x73, 0x20,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x28, 0x61, 0x76, 0x67, 0x2e, 0x20, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x20, 0x2a, 0x20, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x29, 0x2c, 0x20, 0x69, 0x2e, 0x65, 0x2e, 0x20,
	0x4c, 0x69, 0x74, 0x74, 0x6c, 0x65, 0x27, 0x73, 0x20, 0x4c, 0x61, 0x77, 0x2e, 0x42, 0x14, 0x0a,
	0x12, 0x61, 0x63, 0x74, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x22, 0x94, 0x18, 0x0a, 0x09, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x12, 0x78, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74,
	0x73, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32, 0x29, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x4f, 0x92, 0x41, 0x4c, 0x32, 0x4a, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x20, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x6f,
	0x72, 0x20, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x2e, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x5e, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0xd7, 0x11, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x70, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x1a, 0xd0, 0x07, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0xd5, 0x01, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0xb8, 0x01, 0x92, 0x41, 0xb4, 0x01, 0x32, 0x8e, 0x01, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x35, 0x35, 0x2e,
	0x0a, 0x48, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20,
	0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x82, 0x03, 0x20, 0x0a,
	0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x1a, 0x0d, 0x67, 0x74, 0x65, 0x3d, 0x30, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x32, 0x35, 0x35, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x84, 0x02, 0x0a, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0xeb, 0x01, 0x92, 0x41, 0xe7,
	0x01, 0x32, 0xc8, 0x01, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x69, 0x73, 0x20, 0x74, 0x79, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x61, 0x73, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65,
	0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2e, 0x0a, 0x82, 0x03, 0x19, 0x0a,
	0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x3f, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x12, 0x9d, 0x02, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xe7, 0x01,
	0x92, 0x41, 0xe3, 0x01, 0x32, 0xc5, 0x01, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x20, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x73, 0x20,
	0x68, 0x6f, 0x77, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65,
	0x74, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x2e, 0x82, 0x03, 0x18, 0x0a,
	0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x08, 0x1a,
	0x06, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x73, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x56, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0x92, 0x41, 0x32, 0x32, 0x30, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x20, 0x6b, 0x65, 0x79, 0x2e, 0x52, 0x0a, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x6d, 0x92, 0x41, 0x6a, 0x0a, 0x68, 0x32,
	0x66, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x73, 0x20, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x73, 0x75,
	0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x1a, 0xff, 0x06, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xd5, 0x01, 0x0a, 0x08,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0xb8,
	0x01, 0x92, 0x41, 0xb4, 0x01, 0x32, 0x8e, 0x01, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x73, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x0a, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d,
	0x20, 0x30, 0x20, 0x74, 0x6f, 0x20, 0x32, 0x35, 0x35, 0x2e, 0x0a, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x72, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x73, 0x20,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x20,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x82, 0x03, 0x20, 0x0a, 0x0d, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x1a, 0x0d, 0x67, 0x74, 0x65, 0x3d,
	0x30, 0x2c, 0x6c, 0x74, 0x65, 0x3d, 0x32, 0x35, 0x35, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x84, 0x02, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x42, 0xeb, 0x01, 0x92, 0x41, 0xe7, 0x01, 0x32, 0xc8, 0x01, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x20, 0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x74, 0x79,
	0x70, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
	0x61, 0x73, 0x20, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x20,
	0x6f, 0x66, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x20, 0x69, 0x73, 0x20, 0x73, 0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x2e, 0x0a, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xf0, 0x3f, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x9d, 0x02, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0xe7, 0x01, 0x92, 0x41, 0xe3, 0x01, 0x32, 0xc5,
	0x01, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x20, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x73, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x6c, 0x6f,
	0x6e, 0x67, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x77, 0x61, 0x69, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x20, 0x62, 0x65, 0x63, 0x61, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x69, 0x67, 0x68, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x68, 0x61, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x2e, 0x82, 0x03, 0x18, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x08, 0x1a, 0x06, 0x30, 0x2e, 0x30, 0x30, 0x35,
	0x73, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x3a, 0x6d, 0x92, 0x41, 0x6a, 0x0a,
	0x68, 0x32, 0x66, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x79, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x73, 0x69, 0x6d,
	0x69, 0x6c, 0x61, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20,
	0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x20, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x3a, 0x62, 0x92, 0x41, 0x5f, 0x0a, 0x5d,
	0x32, 0x5b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x20, 0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x69, 0x76,
	0x65, 0x6e, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x2e, 0x1a, 0xe2, 0x02,
	0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x3f, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x63, 0x2e, 0x52, 0x13, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x95,
	0x01, 0x0a, 0x14, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x3f, 0x92, 0x41, 0x3c, 0x32, 0x3a, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x69, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x63,
	0x2e, 0x52, 0x13, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0x32, 0x23, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x3a, 0x36, 0x92, 0x41, 0x33, 0x0a, 0x31, 0x32, 0x2f, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x20, 0x46, 0x61, 0x69, 0x72, 0x20, 0x51, 0x75, 0x65, 0x75, 0x69, 0x6e, 0x67,
	0x20, 0x62, 0x61, 0x73, 0x65, 0x64, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x22, 0xf8, 0x03, 0x0a, 0x10, 0x4c,
	0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x84, 0x01, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x68, 0x65, 0x64, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x4c, 0x6f, 0x61, 0x64, 0x20, 0x53, 0x68, 0x65, 0x64, 0x20, 0x41, 0x63, 0x74, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07, 0x69,
	0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0xf6, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0xba,
	0x01, 0x0a, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x6d, 0x92, 0x41,
	0x6a, 0x32, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x68, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x20, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x28, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x20, 0x2a, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x29, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x2e, 0x52, 0x0e, 0x6c, 0x6f, 0x61,
	0x64, 0x53, 0x68, 0x65, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x32, 0x92, 0x41, 0x2f,
	0x0a, 0x2d, 0x32, 0x2b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x4c, 0x6f, 0x61, 0x64, 0x20, 0x53, 0x68, 0x65, 0x64, 0x20, 0x41, 0x63, 0x74, 0x75,
	0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a,
	0x64, 0x92, 0x41, 0x61, 0x0a, 0x5f, 0x32, 0x5d, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x73, 0x68, 0x65, 0x64, 0x20, 0x66, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x73, 0x20, 0x69, 0x74,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x70,
	0x6c, 0x61, 0x6e, 0x65, 0x2e, 0x22, 0x9c, 0x05, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x4c,
	0x12, 0x72, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x4c, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x32, 0x26, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x51, 0x4c, 0x20,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x51, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0x92, 0x41, 0x2b, 0x32,
	0x29, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50,
	0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20,
	0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6e, 0x2e, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xb7, 0x01, 0x0a, 0x13, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x6b, 0x92, 0x41, 0x68, 0x32, 0x4e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x62, 0x65,
	0x74, 0x77, 0x65, 0x65, 0x6e, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x20, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x82, 0x03, 0x15, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x05, 0x1a, 0x03, 0x31, 0x30, 0x73, 0x52, 0x12, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x1a, 0xa8, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x3c, 0x92,
	0x41, 0x39, 0x32, 0x37, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x65, 0x75, 0x73,
	0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x3a, 0x27, 0x92, 0x41, 0x24, 0x0a, 0x22, 0x32, 0x20, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x51,
	0x4c, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a, 0x66, 0x92, 0x41,
	0x63, 0x0a, 0x61, 0x32, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x72, 0x75, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x50, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x68, 0x65, 0x75, 0x73, 0x20, 0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20,
	0x61, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x2e, 0x22, 0xab, 0x03, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x76, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x73,
	0x42, 0x2d, 0x92, 0x41, 0x2a, 0x32, 0x28, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52,
	0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x26, 0x92, 0x41, 0x23, 0x32, 0x21, 0x54,
	0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x2e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xa5, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73,
	0x12, 0x71, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x42, 0x36, 0x92, 0x41, 0x33, 0x32, 0x31, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x3a, 0x2a, 0x92, 0x41, 0x27, 0x0a, 0x25, 0x32, 0x23, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a,
	0x41, 0x92, 0x41, 0x3e, 0x0a, 0x3c, 0x32, 0x3a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x61, 0x20, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x2e, 0x22, 0xe5, 0x05, 0x0a, 0x04, 0x53, 0x71, 0x72, 0x74, 0x12, 0x6a, 0x0a, 0x08, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x72, 0x74,
	0x2e, 0x49, 0x6e, 0x73, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53,
	0x71, 0x72, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07,
	0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x72, 0x74, 0x2e, 0x4f, 0x75,
	0x74, 0x73, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x24, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x71,
	0x72, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x6a, 0x92, 0x41, 0x67, 0x32, 0x49, 0x53, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x72, 0x6f,
	0x6f, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x82, 0x03, 0x19, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f,
	0x2d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x09, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0xf0, 0x3f, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0x79, 0x0a, 0x03, 0x49, 0x6e,
	0x73, 0x12, 0x4b, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x25,
	0x92, 0x41, 0x22, 0x0a, 0x20, 0x32, 0x1e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x71, 0x72, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x1a, 0x7e, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x26, 0x92,
	0x41, 0x23, 0x0a, 0x21, 0x32, 0x1f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x53, 0x71, 0x72, 0x74, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a, 0x82, 0x01, 0x92, 0x41, 0x7f, 0x0a, 0x7d, 0x32, 0x7b, 0x54,
	0x61, 0x6b, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x71, 0x75, 0x61, 0x72, 0x65, 0x20, 0x72, 0x6f, 0x6f, 0x74, 0x20, 0x6f,
	0x66, 0x20, 0x69, 0x74, 0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20,
	0x62, 0x79, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x0a, 0x53, 0x71, 0x72, 0x74, 0x3a, 0x20, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x29, 0x20, 0x2a, 0x20, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x22, 0xfa, 0x07, 0x0a, 0x0c, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x7a, 0x0a, 0x08, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x30, 0x92, 0x41,
	0x2d, 0x32, 0x2b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07,
	0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x7e, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x2c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0xbb, 0x01, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x62, 0x92, 0x41, 0x5f, 0x32, 0x45, 0x4d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x2e, 0x82, 0x03, 0x15, 0x0a, 0x0c, 0x78, 0x2d, 0x67, 0x6f, 0x2d, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x05, 0x1a, 0x03, 0x31, 0x30, 0x73, 0x52, 0x18, 0x6d, 0x61, 0x78,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xa0, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x6a, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42,
	0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x2d, 0x92, 0x41, 0x2a, 0x0a, 0x28,
	0x32, 0x26, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x1a, 0x8c, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74,
	0x73, 0x12, 0x54, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x2e, 0x92, 0x41, 0x2b, 0x0a, 0x29, 0x32, 0x27,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a, 0xfd, 0x01, 0x92, 0x41, 0xf9, 0x01, 0x0a, 0xf6,
	0x01, 0x32, 0xf3, 0x01, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x20, 0x62, 0x79, 0x20, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x20, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69,
	0x74, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x2e, 0x20, 0x49, 0x74,
	0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x73, 0x6f, 0x20, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x20, 0x69, 0x73,
	0x20, 0x72, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x2c, 0x20, 0x62, 0x65, 0x79, 0x6f, 0x6e, 0x64,
	0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x74, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x73, 0x20,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x75,
	0x6e, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x20, 0x62, 0x65, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x2e, 0x22, 0xf3, 0x04, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x12,
	0x68, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x78, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x27, 0x92, 0x41, 0x24, 0x32, 0x22, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x4d, 0x61, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x09, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x2e, 0x4f,
	0x75, 0x74, 0x73, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d,
	0x61, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x08, 0x6f,
	0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12,
	0x57, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x6f,
	0x66, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2e,
	0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x32,
	0x1d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x4d, 0x61, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x1a, 0x9c,
	0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x6e, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x33, 0x92, 0x41, 0x30, 0x32,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x73, 0x20, 0x61, 0x6e,
	0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x24, 0x92, 0x41, 0x21, 0x0a, 0x1f, 0x32, 0x1d,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d,
	0x61, 0x78, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a, 0x6e, 0x92,
	0x41, 0x6b, 0x0a, 0x69, 0x32, 0x67, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x69,
	0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x0a, 0x4d, 0x61, 0x78, 0x3a, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x6d,
	0x61, 0x78, 0x28, 0x5b, 0x5d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x29, 0x2e, 0x22, 0xfb, 0x04,
	0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x68, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x2e, 0x49, 0x6e, 0x73, 0x42, 0x27, 0x92,
	0x41, 0x24, 0x32, 0x22, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20,
	0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x6c, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x69, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x73, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x84, 0x01,
	0x0a, 0x03, 0x49, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x73, 0x2e, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x3a, 0x24,
	0x92, 0x41, 0x21, 0x0a, 0x1f, 0x32, 0x1d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x20, 0x66, 0x6f,
	0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x2e, 0x1a, 0xa2, 0x01, 0x0a, 0x04, 0x4f, 0x75, 0x74, 0x73, 0x12, 0x6e, 0x0a,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x42, 0x33, 0x92, 0x41, 0x30, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x77, 0x69,
	0x74, 0x68, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x20, 0x61, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x2e, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x3a, 0x2a, 0x92,
	0x41, 0x27, 0x0a, 0x25, 0x32, 0x23, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x69, 0x6e, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x3a, 0x70, 0x92, 0x41, 0x6d, 0x0a, 0x6b,
	0x32, 0x69, 0x54, 0x61, 0x6b, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x20, 0x6f, 0x66, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x6d, 0x69, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x0a, 0x4d,
	0x69, 0x6e, 0x3a, 0x20, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e,
	0x28, 0x5b, 0x5d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x29, 0x2e, 0x32, 0x7e, 0x0a, 0x0d, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x0b,
	0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x42, 0x94, 0x02, 0x0a, 0x1f,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x42,
	0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x46, 0x6c, 0x75, 0x78, 0x4e,
	0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x50, 0x4c, 0xaa, 0x02, 0x1b, 0x41, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x1e, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_language_v1_policy_proto_rawDescOnce sync.Once
	file_aperture_policy_language_v1_policy_proto_rawDescData = file_aperture_policy_language_v1_policy_proto_rawDesc
)

func file_aperture_policy_language_v1_policy_proto_rawDescGZIP() []byte {
	file_aperture_policy_language_v1_policy_proto_rawDescOnce.Do(func() {
		file_aperture_policy_language_v1_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_language_v1_policy_proto_rawDescData)
	})
	return file_aperture_policy_language_v1_policy_proto_rawDescData
}

var file_aperture_policy_language_v1_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_aperture_policy_language_v1_policy_proto_goTypes = []interface{}{
	(*AllPoliciesResponse)(nil),               // 0: aperture.policy.language.v1.AllPoliciesResponse
	(*AllPolicies)(nil),                       // 1: aperture.policy.language.v1.AllPolicies
	(*Policy)(nil),                            // 2: aperture.policy.language.v1.Policy
	(*FluxMeter)(nil),                         // 3: aperture.policy.language.v1.FluxMeter
	(*Component)(nil),                         // 4: aperture.policy.language.v1.Component
	(*Port)(nil),                              // 5: aperture.policy.language.v1.Port
	(*GradientController)(nil),                // 6: aperture.policy.language.v1.GradientController
	(*EMA)(nil),                               // 7: aperture.policy.language.v1.EMA
	(*ArithmeticCombinator)(nil),              // 8: aperture.policy.language.v1.ArithmeticCombinator
	(*Decider)(nil),                           // 9: aperture.policy.language.v1.Decider
	(*RateLimiter)(nil),                       // 10: aperture.policy.language.v1.RateLimiter
	(*ConcurrencyLimiter)(nil),                // 11: aperture.policy.language.v1.ConcurrencyLimiter
	(*Scheduler)(nil),                         // 12: aperture.policy.language.v1.Scheduler
	(*LoadShedActuator)(nil),                  // 13: aperture.policy.language.v1.LoadShedActuator
	(*PromQL)(nil),                            // 14: aperture.policy.language.v1.PromQL
	(*Constant)(nil),                          // 15: aperture.policy.language.v1.Constant
	(*Sqrt)(nil),                              // 16: aperture.policy.language.v1.Sqrt
	(*Extrapolator)(nil),                      // 17: aperture.policy.language.v1.Extrapolator
	(*Max)(nil),                               // 18: aperture.policy.language.v1.Max
	(*Min)(nil),                               // 19: aperture.policy.language.v1.Min
	nil,                                       // 20: aperture.policy.language.v1.AllPolicies.AllPoliciesEntry
	(*GradientController_Ins)(nil),            // 21: aperture.policy.language.v1.GradientController.Ins
	(*GradientController_Outs)(nil),           // 22: aperture.policy.language.v1.GradientController.Outs
	(*EMA_Ins)(nil),                           // 23: aperture.policy.language.v1.EMA.Ins
	(*EMA_Outs)(nil),                          // 24: aperture.policy.language.v1.EMA.Outs
	(*ArithmeticCombinator_Ins)(nil),          // 25: aperture.policy.language.v1.ArithmeticCombinator.Ins
	(*ArithmeticCombinator_Outs)(nil),         // 26: aperture.policy.language.v1.ArithmeticCombinator.Outs
	(*Decider_Ins)(nil),                       // 27: aperture.policy.language.v1.Decider.Ins
	(*Decider_Outs)(nil),                      // 28: aperture.policy.language.v1.Decider.Outs
	(*RateLimiter_LazySyncConfig)(nil),        // 29: aperture.policy.language.v1.RateLimiter.LazySyncConfig
	(*RateLimiter_OverrideConfig)(nil),        // 30: aperture.policy.language.v1.RateLimiter.OverrideConfig
	(*RateLimiter_Ins)(nil),                   // 31: aperture.policy.language.v1.RateLimiter.Ins
	(*Scheduler_WorkloadConfig)(nil),          // 32: aperture.policy.language.v1.Scheduler.WorkloadConfig
	(*Scheduler_Outs)(nil),                    // 33: aperture.policy.language.v1.Scheduler.Outs
	(*Scheduler_WorkloadConfig_Workload)(nil), // 34: aperture.policy.language.v1.Scheduler.WorkloadConfig.Workload
	(*Scheduler_WorkloadConfig_DefaultWorkload)(nil), // 35: aperture.policy.language.v1.Scheduler.WorkloadConfig.DefaultWorkload
	(*LoadShedActuator_Ins)(nil),                     // 36: aperture.policy.language.v1.LoadShedActuator.Ins
	(*PromQL_Outs)(nil),                              // 37: aperture.policy.language.v1.PromQL.Outs
	(*Constant_Outs)(nil),                            // 38: aperture.policy.language.v1.Constant.Outs
	(*Sqrt_Ins)(nil),                                 // 39: aperture.policy.language.v1.Sqrt.Ins
	(*Sqrt_Outs)(nil),                                // 40: aperture.policy.language.v1.Sqrt.Outs
	(*Extrapolator_Ins)(nil),                         // 41: aperture.policy.language.v1.Extrapolator.Ins
	(*Extrapolator_Outs)(nil),                        // 42: aperture.policy.language.v1.Extrapolator.Outs
	(*Max_Ins)(nil),                                  // 43: aperture.policy.language.v1.Max.Ins
	(*Max_Outs)(nil),                                 // 44: aperture.policy.language.v1.Max.Outs
	(*Min_Ins)(nil),                                  // 45: aperture.policy.language.v1.Min.Ins
	(*Min_Outs)(nil),                                 // 46: aperture.policy.language.v1.Min.Outs
	(*durationpb.Duration)(nil),                      // 47: google.protobuf.Duration
	(*Selector)(nil),                                 // 48: aperture.policy.language.v1.Selector
	(*emptypb.Empty)(nil),                            // 49: google.protobuf.Empty
}
var file_aperture_policy_language_v1_policy_proto_depIdxs = []int32{
	1,  // 0: aperture.policy.language.v1.AllPoliciesResponse.all_policies:type_name -> aperture.policy.language.v1.AllPolicies
	20, // 1: aperture.policy.language.v1.AllPolicies.all_policies:type_name -> aperture.policy.language.v1.AllPolicies.AllPoliciesEntry
	4,  // 2: aperture.policy.language.v1.Policy.circuit:type_name -> aperture.policy.language.v1.Component
	47, // 3: aperture.policy.language.v1.Policy.evaluation_interval:type_name -> google.protobuf.Duration
	3,  // 4: aperture.policy.language.v1.Policy.flux_meters:type_name -> aperture.policy.language.v1.FluxMeter
	48, // 5: aperture.policy.language.v1.FluxMeter.selector:type_name -> aperture.policy.language.v1.Selector
	6,  // 6: aperture.policy.language.v1.Component.gradient_controller:type_name -> aperture.policy.language.v1.GradientController
	7,  // 7: aperture.policy.language.v1.Component.ema:type_name -> aperture.policy.language.v1.EMA
	8,  // 8: aperture.policy.language.v1.Component.arithmetic_combinator:type_name -> aperture.policy.language.v1.ArithmeticCombinator
	9,  // 9: aperture.policy.language.v1.Component.decider:type_name -> aperture.policy.language.v1.Decider
	11, // 10: aperture.policy.language.v1.Component.concurrency_limiter:type_name -> aperture.policy.language.v1.ConcurrencyLimiter
	10, // 11: aperture.policy.language.v1.Component.rate_limiter:type_name -> aperture.policy.language.v1.RateLimiter
	14, // 12: aperture.policy.language.v1.Component.promql:type_name -> aperture.policy.language.v1.PromQL
	15, // 13: aperture.policy.language.v1.Component.constant:type_name -> aperture.policy.language.v1.Constant
	16, // 14: aperture.policy.language.v1.Component.sqrt:type_name -> aperture.policy.language.v1.Sqrt
	17, // 15: aperture.policy.language.v1.Component.extrapolator:type_name -> aperture.policy.language.v1.Extrapolator
	18, // 16: aperture.policy.language.v1.Component.max:type_name -> aperture.policy.language.v1.Max
	19, // 17: aperture.policy.language.v1.Component.min:type_name -> aperture.policy.language.v1.Min
	21, // 18: aperture.policy.language.v1.GradientController.in_ports:type_name -> aperture.policy.language.v1.GradientController.Ins
	22, // 19: aperture.policy.language.v1.GradientController.out_ports:type_name -> aperture.policy.language.v1.GradientController.Outs
	23, // 20: aperture.policy.language.v1.EMA.in_ports:type_name -> aperture.policy.language.v1.EMA.Ins
	24, // 21: aperture.policy.language.v1.EMA.out_ports:type_name -> aperture.policy.language.v1.EMA.Outs
	47, // 22: aperture.policy.language.v1.EMA.ema_window:type_name -> google.protobuf.Duration
	47, // 23: aperture.policy.language.v1.EMA.warm_up_window:type_name -> google.protobuf.Duration
	25, // 24: aperture.policy.language.v1.ArithmeticCombinator.in_ports:type_name -> aperture.policy.language.v1.ArithmeticCombinator.Ins
	26, // 25: aperture.policy.language.v1.ArithmeticCombinator.out_ports:type_name -> aperture.policy.language.v1.ArithmeticCombinator.Outs
	27, // 26: aperture.policy.language.v1.Decider.in_ports:type_name -> aperture.policy.language.v1.Decider.Ins
	28, // 27: aperture.policy.language.v1.Decider.out_ports:type_name -> aperture.policy.language.v1.Decider.Outs
	47, // 28: aperture.policy.language.v1.Decider.true_for:type_name -> google.protobuf.Duration
	47, // 29: aperture.policy.language.v1.Decider.false_for:type_name -> google.protobuf.Duration
	31, // 30: aperture.policy.language.v1.RateLimiter.in_ports:type_name -> aperture.policy.language.v1.RateLimiter.Ins
	48, // 31: aperture.policy.language.v1.RateLimiter.selector:type_name -> aperture.policy.language.v1.Selector
	47, // 32: aperture.policy.language.v1.RateLimiter.limit_reset_interval:type_name -> google.protobuf.Duration
	30, // 33: aperture.policy.language.v1.RateLimiter.overrides:type_name -> aperture.policy.language.v1.RateLimiter.OverrideConfig
	29, // 34: aperture.policy.language.v1.RateLimiter.lazy_sync_config:type_name -> aperture.policy.language.v1.RateLimiter.LazySyncConfig
	12, // 35: aperture.policy.language.v1.ConcurrencyLimiter.scheduler:type_name -> aperture.policy.language.v1.Scheduler
	13, // 36: aperture.policy.language.v1.ConcurrencyLimiter.load_shed_actuator:type_name -> aperture.policy.language.v1.LoadShedActuator
	33, // 37: aperture.policy.language.v1.Scheduler.out_ports:type_name -> aperture.policy.language.v1.Scheduler.Outs
	48, // 38: aperture.policy.language.v1.Scheduler.selector:type_name -> aperture.policy.language.v1.Selector
	32, // 39: aperture.policy.language.v1.Scheduler.workload_config:type_name -> aperture.policy.language.v1.Scheduler.WorkloadConfig
	36, // 40: aperture.policy.language.v1.LoadShedActuator.in_ports:type_name -> aperture.policy.language.v1.LoadShedActuator.Ins
	37, // 41: aperture.policy.language.v1.PromQL.out_ports:type_name -> aperture.policy.language.v1.PromQL.Outs
	47, // 42: aperture.policy.language.v1.PromQL.evaluation_interval:type_name -> google.protobuf.Duration
	38, // 43: aperture.policy.language.v1.Constant.out_ports:type_name -> aperture.policy.language.v1.Constant.Outs
	39, // 44: aperture.policy.language.v1.Sqrt.in_ports:type_name -> aperture.policy.language.v1.Sqrt.Ins
	40, // 45: aperture.policy.language.v1.Sqrt.out_ports:type_name -> aperture.policy.language.v1.Sqrt.Outs
	41, // 46: aperture.policy.language.v1.Extrapolator.in_ports:type_name -> aperture.policy.language.v1.Extrapolator.Ins
	42, // 47: aperture.policy.language.v1.Extrapolator.out_ports:type_name -> aperture.policy.language.v1.Extrapolator.Outs
	47, // 48: aperture.policy.language.v1.Extrapolator.max_extrapolation_interval:type_name -> google.protobuf.Duration
	43, // 49: aperture.policy.language.v1.Max.in_ports:type_name -> aperture.policy.language.v1.Max.Ins
	44, // 50: aperture.policy.language.v1.Max.out_ports:type_name -> aperture.policy.language.v1.Max.Outs
	45, // 51: aperture.policy.language.v1.Min.in_ports:type_name -> aperture.policy.language.v1.Min.Ins
	46, // 52: aperture.policy.language.v1.Min.out_ports:type_name -> aperture.policy.language.v1.Min.Outs
	2,  // 53: aperture.policy.language.v1.AllPolicies.AllPoliciesEntry.value:type_name -> aperture.policy.language.v1.Policy
	5,  // 54: aperture.policy.language.v1.GradientController.Ins.signal:type_name -> aperture.policy.language.v1.Port
	5,  // 55: aperture.policy.language.v1.GradientController.Ins.setpoint:type_name -> aperture.policy.language.v1.Port
	5,  // 56: aperture.policy.language.v1.GradientController.Ins.optimize:type_name -> aperture.policy.language.v1.Port
	5,  // 57: aperture.policy.language.v1.GradientController.Ins.max:type_name -> aperture.policy.language.v1.Port
	5,  // 58: aperture.policy.language.v1.GradientController.Ins.min:type_name -> aperture.policy.language.v1.Port
	5,  // 59: aperture.policy.language.v1.GradientController.Ins.control_variable:type_name -> aperture.policy.language.v1.Port
	5,  // 60: aperture.policy.language.v1.GradientController.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 61: aperture.policy.language.v1.EMA.Ins.input:type_name -> aperture.policy.language.v1.Port
	5,  // 62: aperture.policy.language.v1.EMA.Ins.max_envelope:type_name -> aperture.policy.language.v1.Port
	5,  // 63: aperture.policy.language.v1.EMA.Ins.min_envelope:type_name -> aperture.policy.language.v1.Port
	5,  // 64: aperture.policy.language.v1.EMA.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 65: aperture.policy.language.v1.ArithmeticCombinator.Ins.lhs:type_name -> aperture.policy.language.v1.Port
	5,  // 66: aperture.policy.language.v1.ArithmeticCombinator.Ins.rhs:type_name -> aperture.policy.language.v1.Port
	5,  // 67: aperture.policy.language.v1.ArithmeticCombinator.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 68: aperture.policy.language.v1.Decider.Ins.lhs:type_name -> aperture.policy.language.v1.Port
	5,  // 69: aperture.policy.language.v1.Decider.Ins.rhs:type_name -> aperture.policy.language.v1.Port
	5,  // 70: aperture.policy.language.v1.Decider.Ins.on_true:type_name -> aperture.policy.language.v1.Port
	5,  // 71: aperture.policy.language.v1.Decider.Ins.on_false:type_name -> aperture.policy.language.v1.Port
	5,  // 72: aperture.policy.language.v1.Decider.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 73: aperture.policy.language.v1.RateLimiter.Ins.limit:type_name -> aperture.policy.language.v1.Port
	35, // 74: aperture.policy.language.v1.Scheduler.WorkloadConfig.default_workload:type_name -> aperture.policy.language.v1.Scheduler.WorkloadConfig.DefaultWorkload
	34, // 75: aperture.policy.language.v1.Scheduler.WorkloadConfig.workloads:type_name -> aperture.policy.language.v1.Scheduler.WorkloadConfig.Workload
	5,  // 76: aperture.policy.language.v1.Scheduler.Outs.accepted_concurrency:type_name -> aperture.policy.language.v1.Port
	5,  // 77: aperture.policy.language.v1.Scheduler.Outs.incoming_concurrency:type_name -> aperture.policy.language.v1.Port
	47, // 78: aperture.policy.language.v1.Scheduler.WorkloadConfig.Workload.timeout:type_name -> google.protobuf.Duration
	47, // 79: aperture.policy.language.v1.Scheduler.WorkloadConfig.DefaultWorkload.timeout:type_name -> google.protobuf.Duration
	5,  // 80: aperture.policy.language.v1.LoadShedActuator.Ins.load_shed_factor:type_name -> aperture.policy.language.v1.Port
	5,  // 81: aperture.policy.language.v1.PromQL.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 82: aperture.policy.language.v1.Constant.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 83: aperture.policy.language.v1.Sqrt.Ins.input:type_name -> aperture.policy.language.v1.Port
	5,  // 84: aperture.policy.language.v1.Sqrt.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 85: aperture.policy.language.v1.Extrapolator.Ins.input:type_name -> aperture.policy.language.v1.Port
	5,  // 86: aperture.policy.language.v1.Extrapolator.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 87: aperture.policy.language.v1.Max.Ins.inputs:type_name -> aperture.policy.language.v1.Port
	5,  // 88: aperture.policy.language.v1.Max.Outs.output:type_name -> aperture.policy.language.v1.Port
	5,  // 89: aperture.policy.language.v1.Min.Ins.inputs:type_name -> aperture.policy.language.v1.Port
	5,  // 90: aperture.policy.language.v1.Min.Outs.output:type_name -> aperture.policy.language.v1.Port
	49, // 91: aperture.policy.language.v1.PolicyService.AllPolicies:input_type -> google.protobuf.Empty
	0,  // 92: aperture.policy.language.v1.PolicyService.AllPolicies:output_type -> aperture.policy.language.v1.AllPoliciesResponse
	92, // [92:93] is the sub-list for method output_type
	91, // [91:92] is the sub-list for method input_type
	91, // [91:91] is the sub-list for extension type_name
	91, // [91:91] is the sub-list for extension extendee
	0,  // [0:91] is the sub-list for field type_name
}

func init() { file_aperture_policy_language_v1_policy_proto_init() }
func file_aperture_policy_language_v1_policy_proto_init() {
	if File_aperture_policy_language_v1_policy_proto != nil {
		return
	}
	file_aperture_policy_language_v1_selector_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_language_v1_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluxMeter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConcurrencyLimiter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadShedActuator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradientController_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EMA_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArithmeticCombinator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decider_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_LazySyncConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_OverrideConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimiter_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_WorkloadConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_WorkloadConfig_Workload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheduler_WorkloadConfig_DefaultWorkload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadShedActuator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromQL_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constant_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sqrt_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extrapolator_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Max_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min_Ins); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Min_Outs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Component_GradientController)(nil),
		(*Component_Ema)(nil),
		(*Component_ArithmeticCombinator)(nil),
		(*Component_Decider)(nil),
		(*Component_ConcurrencyLimiter)(nil),
		(*Component_RateLimiter)(nil),
		(*Component_Promql)(nil),
		(*Component_Constant)(nil),
		(*Component_Sqrt)(nil),
		(*Component_Extrapolator)(nil),
		(*Component_Max)(nil),
		(*Component_Min)(nil),
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ConcurrencyLimiter_LoadShedActuator)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_language_v1_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_policy_language_v1_policy_proto_goTypes,
		DependencyIndexes: file_aperture_policy_language_v1_policy_proto_depIdxs,
		MessageInfos:      file_aperture_policy_language_v1_policy_proto_msgTypes,
	}.Build()
	File_aperture_policy_language_v1_policy_proto = out.File
	file_aperture_policy_language_v1_policy_proto_rawDesc = nil
	file_aperture_policy_language_v1_policy_proto_goTypes = nil
	file_aperture_policy_language_v1_policy_proto_depIdxs = nil
}
