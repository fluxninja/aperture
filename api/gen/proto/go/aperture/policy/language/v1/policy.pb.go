// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: aperture/policy/language/v1/policy.proto

package languagev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies *Policies `protobuf:"bytes,1,opt,name=policies,proto3" json:"policies,omitempty"`
}

func (x *GetPoliciesResponse) Reset() {
	*x = GetPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPoliciesResponse) ProtoMessage() {}

func (x *GetPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPoliciesResponse.ProtoReflect.Descriptor instead.
func (*GetPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{0}
}

func (x *GetPoliciesResponse) GetPolicies() *Policies {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Policies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policies map[string]*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Policies) Reset() {
	*x = Policies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policies) ProtoMessage() {}

func (x *Policies) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policies.ProtoReflect.Descriptor instead.
func (*Policies) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Policies) GetPolicies() map[string]*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Policy expresses observability-driven control logic.
//
// :::info
//
// See also [Policy overview](/concepts/policy/policy.md).
//
// :::
//
// Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines the control-loop logic of the policy.
	Circuit *Circuit `protobuf:"bytes,1,opt,name=circuit,proto3" json:"circuit,omitempty"`
	// Resources (such as Flux Meters, Classifiers) to setup.
	Resources *Resources `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{2}
}

func (x *Policy) GetCircuit() *Circuit {
	if x != nil {
		return x.Circuit
	}
	return nil
}

func (x *Policy) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Circuit is graph of inter-connected signal processing components.
//
// :::info
//
// See also [Circuit overview](/concepts/policy/circuit.md).
//
// :::
//
// Signals flow between components through ports.
// As signals traverse the circuit, they get processed, stored within components or get acted upon (for example, load-shed, rate-limit, auto-scale and so on).
// Circuit is evaluated periodically to respond to changes in signal readings.
//
// :::info Signals
//
// Signals are floating point values.
//
// A signal can also have a special **Invalid** value. It's usually used to
// communicate that signal does not have a meaningful value at the moment, for example,
// [PromQL](#prom-q-l) emits such a value if it cannot execute a query.
// Components know when their input signals are invalid and can act
// accordingly. They can either propagate the invalid signal, by making their
// output itself invalid (for example,
// [ArithmeticCombinator](#arithmetic-combinator)) or use some different
// logic, for example, [Extrapolator](#extrapolator). Refer to a component's
// docs on how exactly it handles invalid inputs.
//
// :::
type Circuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Evaluation interval (tick) is the time between consecutive runs of the policy circuit.
	// This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
	EvaluationInterval *durationpb.Duration `protobuf:"bytes,1,opt,name=evaluation_interval,json=evaluationInterval,proto3" json:"evaluation_interval,omitempty" default:"0.5s"` // @gotags: default:"0.5s"
	// Defines a signal processing graph as a list of components.
	Components []*Component `protobuf:"bytes,2,rep,name=components,proto3" json:"components,omitempty" validate:"dive"` // @gotags: validate:"dive"
}

func (x *Circuit) Reset() {
	*x = Circuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circuit) ProtoMessage() {}

func (x *Circuit) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circuit.ProtoReflect.Descriptor instead.
func (*Circuit) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Circuit) GetEvaluationInterval() *durationpb.Duration {
	if x != nil {
		return x.EvaluationInterval
	}
	return nil
}

func (x *Circuit) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

// Resources that need to be setup for the policy to function
//
// :::info
//
// See also [Resources overview](/concepts/policy/resources.md).
//
// :::
type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.
	//
	// Flux Meter created metrics can be consumed as input to the circuit through the PromQL component.
	//
	// Deprecated: v1.5.0. Use `flow_control.flux_meters` instead.
	FluxMeters map[string]*FluxMeter `protobuf:"bytes,1,rep,name=flux_meters,json=fluxMeters,proto3" json:"flux_meters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" validate:"deprecated,dive"` // @gotags: validate:"deprecated,dive"
	// Classifiers are installed in the data-plane and are used to label the requests based on payload content.
	//
	// The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.
	//
	// Deprecated: v1.5.0. Use `flow_control.classifiers` instead.
	Classifiers []*Classifier `protobuf:"bytes,2,rep,name=classifiers,proto3" json:"classifiers,omitempty" validate:"deprecated,dive"` // @gotags: validate:"deprecated,dive"
	// FlowControlResources are resources that are provided by flow control integration.
	FlowControl *FlowControlResources `protobuf:"bytes,101,opt,name=flow_control,json=flowControl,proto3" json:"flow_control,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{4}
}

func (x *Resources) GetFluxMeters() map[string]*FluxMeter {
	if x != nil {
		return x.FluxMeters
	}
	return nil
}

func (x *Resources) GetClassifiers() []*Classifier {
	if x != nil {
		return x.Classifiers
	}
	return nil
}

func (x *Resources) GetFlowControl() *FlowControlResources {
	if x != nil {
		return x.FlowControl
	}
	return nil
}

// Computational block that forms the circuit
//
// :::info
//
// See also [Components overview](/concepts/policy/circuit.md#components).
//
// :::
//
// Signals flow into the components from input ports and results are emitted on output ports.
// Components are wired to each other based on signal names forming an execution graph of the circuit.
//
// :::note
//
// Loops are broken by the runtime at the earliest component index that is part of the loop.
// The looped signals are saved in the tick they're generated and served in the subsequent tick.
//
// :::
//
// There are three categories of components:
//
//   - "source" components: they take some sort of input from "the real world" and output
//     a signal based on this input. Example: [PromQL](#prom-q-l). In the UI
//     they're represented by green color.
//
//   - signal processor components: processing components that do not interact with the external systems.
//     Examples: [GradientController](#gradient-controller), [Max](#max).
//
//     :::note
//
//     Signal processor components' output can depend on their internal state, in addition to the inputs.
//     Eg. see the [Exponential Moving Average filter](#e-m-a).
//
//     :::
//
//   - "sink" components: they affect the real world.
//     [_Concurrency Limiter_](#concurrency-limiter) and [_Rate Limiter_](#rate-limiter).
//     In the UI, represented by orange color.  Sink components usually come in pairs with a
//     "sources" component which emits a feedback signal, like
//     `accepted_concurrency` emitted by _Concurrency Limiter_.
//
// :::tip
//
// Sometimes you might want to use a constant value as one of component's inputs.
// You can create an input port containing the constant value instead of being connected to a signal.
// To do so, use the [InPort](#in_port)'s .withConstantSignal(constant_signal) method.
// You can also use it to provide special math values such as NaN and +- Inf.
// If You need to provide the same constant signal to multiple components,
// You can use the [Variable](#variable) component.
//
// :::
//
// See also [Policy](#policy) for a higher-level explanation of circuits.
type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Component:
	//
	//	*Component_GradientController
	//	*Component_Ema
	//	*Component_ArithmeticCombinator
	//	*Component_Decider
	//	*Component_Switcher
	//	*Component_Variable
	//	*Component_UnaryOperator
	//	*Component_Extrapolator
	//	*Component_Max
	//	*Component_Min
	//	*Component_FirstValid
	//	*Component_Alerter
	//	*Component_Integrator
	//	*Component_Differentiator
	//	*Component_And
	//	*Component_Or
	//	*Component_Inverter
	//	*Component_PulseGenerator
	//	*Component_Holder
	//	*Component_NestedCircuit
	//	*Component_NestedSignalIngress
	//	*Component_NestedSignalEgress
	//	*Component_SignalGenerator
	//	*Component_Query
	//	*Component_FlowControl
	//	*Component_AutoScale
	Component isComponent_Component `protobuf_oneof:"component"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{5}
}

func (m *Component) GetComponent() isComponent_Component {
	if m != nil {
		return m.Component
	}
	return nil
}

func (x *Component) GetGradientController() *GradientController {
	if x, ok := x.GetComponent().(*Component_GradientController); ok {
		return x.GradientController
	}
	return nil
}

func (x *Component) GetEma() *EMA {
	if x, ok := x.GetComponent().(*Component_Ema); ok {
		return x.Ema
	}
	return nil
}

func (x *Component) GetArithmeticCombinator() *ArithmeticCombinator {
	if x, ok := x.GetComponent().(*Component_ArithmeticCombinator); ok {
		return x.ArithmeticCombinator
	}
	return nil
}

func (x *Component) GetDecider() *Decider {
	if x, ok := x.GetComponent().(*Component_Decider); ok {
		return x.Decider
	}
	return nil
}

func (x *Component) GetSwitcher() *Switcher {
	if x, ok := x.GetComponent().(*Component_Switcher); ok {
		return x.Switcher
	}
	return nil
}

func (x *Component) GetVariable() *Variable {
	if x, ok := x.GetComponent().(*Component_Variable); ok {
		return x.Variable
	}
	return nil
}

func (x *Component) GetUnaryOperator() *UnaryOperator {
	if x, ok := x.GetComponent().(*Component_UnaryOperator); ok {
		return x.UnaryOperator
	}
	return nil
}

func (x *Component) GetExtrapolator() *Extrapolator {
	if x, ok := x.GetComponent().(*Component_Extrapolator); ok {
		return x.Extrapolator
	}
	return nil
}

func (x *Component) GetMax() *Max {
	if x, ok := x.GetComponent().(*Component_Max); ok {
		return x.Max
	}
	return nil
}

func (x *Component) GetMin() *Min {
	if x, ok := x.GetComponent().(*Component_Min); ok {
		return x.Min
	}
	return nil
}

func (x *Component) GetFirstValid() *FirstValid {
	if x, ok := x.GetComponent().(*Component_FirstValid); ok {
		return x.FirstValid
	}
	return nil
}

func (x *Component) GetAlerter() *Alerter {
	if x, ok := x.GetComponent().(*Component_Alerter); ok {
		return x.Alerter
	}
	return nil
}

func (x *Component) GetIntegrator() *Integrator {
	if x, ok := x.GetComponent().(*Component_Integrator); ok {
		return x.Integrator
	}
	return nil
}

func (x *Component) GetDifferentiator() *Differentiator {
	if x, ok := x.GetComponent().(*Component_Differentiator); ok {
		return x.Differentiator
	}
	return nil
}

func (x *Component) GetAnd() *And {
	if x, ok := x.GetComponent().(*Component_And); ok {
		return x.And
	}
	return nil
}

func (x *Component) GetOr() *Or {
	if x, ok := x.GetComponent().(*Component_Or); ok {
		return x.Or
	}
	return nil
}

func (x *Component) GetInverter() *Inverter {
	if x, ok := x.GetComponent().(*Component_Inverter); ok {
		return x.Inverter
	}
	return nil
}

func (x *Component) GetPulseGenerator() *PulseGenerator {
	if x, ok := x.GetComponent().(*Component_PulseGenerator); ok {
		return x.PulseGenerator
	}
	return nil
}

func (x *Component) GetHolder() *Holder {
	if x, ok := x.GetComponent().(*Component_Holder); ok {
		return x.Holder
	}
	return nil
}

func (x *Component) GetNestedCircuit() *NestedCircuit {
	if x, ok := x.GetComponent().(*Component_NestedCircuit); ok {
		return x.NestedCircuit
	}
	return nil
}

func (x *Component) GetNestedSignalIngress() *NestedSignalIngress {
	if x, ok := x.GetComponent().(*Component_NestedSignalIngress); ok {
		return x.NestedSignalIngress
	}
	return nil
}

func (x *Component) GetNestedSignalEgress() *NestedSignalEgress {
	if x, ok := x.GetComponent().(*Component_NestedSignalEgress); ok {
		return x.NestedSignalEgress
	}
	return nil
}

func (x *Component) GetSignalGenerator() *SignalGenerator {
	if x, ok := x.GetComponent().(*Component_SignalGenerator); ok {
		return x.SignalGenerator
	}
	return nil
}

func (x *Component) GetQuery() *Query {
	if x, ok := x.GetComponent().(*Component_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Component) GetFlowControl() *FlowControl {
	if x, ok := x.GetComponent().(*Component_FlowControl); ok {
		return x.FlowControl
	}
	return nil
}

func (x *Component) GetAutoScale() *AutoScale {
	if x, ok := x.GetComponent().(*Component_AutoScale); ok {
		return x.AutoScale
	}
	return nil
}

type isComponent_Component interface {
	isComponent_Component()
}

type Component_GradientController struct {
	// Gradient controller calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
	// This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
	GradientController *GradientController `protobuf:"bytes,1,opt,name=gradient_controller,json=gradientController,proto3,oneof"`
}

type Component_Ema struct {
	// Exponential Moving Average filter.
	Ema *EMA `protobuf:"bytes,2,opt,name=ema,proto3,oneof"`
}

type Component_ArithmeticCombinator struct {
	// Applies the given operator on input operands (signals) and emits the result.
	ArithmeticCombinator *ArithmeticCombinator `protobuf:"bytes,3,opt,name=arithmetic_combinator,json=arithmeticCombinator,proto3,oneof"`
}

type Component_Decider struct {
	// Decider emits the binary result of comparison operator on two operands.
	Decider *Decider `protobuf:"bytes,4,opt,name=decider,proto3,oneof"`
}

type Component_Switcher struct {
	// Switcher acts as a switch that emits one of the two signals based on third signal.
	Switcher *Switcher `protobuf:"bytes,5,opt,name=switcher,proto3,oneof"`
}

type Component_Variable struct {
	// Emits a variable signal which can be set to invalid.
	Variable *Variable `protobuf:"bytes,9,opt,name=variable,proto3,oneof"`
}

type Component_UnaryOperator struct {
	// Takes an input signal and emits the square root of the input signal.
	UnaryOperator *UnaryOperator `protobuf:"bytes,10,opt,name=unary_operator,json=unaryOperator,proto3,oneof"`
}

type Component_Extrapolator struct {
	// Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
	Extrapolator *Extrapolator `protobuf:"bytes,11,opt,name=extrapolator,proto3,oneof"`
}

type Component_Max struct {
	// Emits the maximum of the input signals.
	Max *Max `protobuf:"bytes,12,opt,name=max,proto3,oneof"`
}

type Component_Min struct {
	// Emits the minimum of the input signals.
	Min *Min `protobuf:"bytes,13,opt,name=min,proto3,oneof"`
}

type Component_FirstValid struct {
	// Picks the first valid input signal and emits it.
	FirstValid *FirstValid `protobuf:"bytes,14,opt,name=first_valid,json=firstValid,proto3,oneof"`
}

type Component_Alerter struct {
	// Alerter reacts to a signal and generates alert to send to alert manager.
	Alerter *Alerter `protobuf:"bytes,15,opt,name=alerter,proto3,oneof"`
}

type Component_Integrator struct {
	// Accumulates sum of signal every tick.
	Integrator *Integrator `protobuf:"bytes,16,opt,name=integrator,proto3,oneof"`
}

type Component_Differentiator struct {
	// Differentiator calculates rate of change per tick.
	Differentiator *Differentiator `protobuf:"bytes,17,opt,name=differentiator,proto3,oneof"`
}

type Component_And struct {
	// Logical AND.
	And *And `protobuf:"bytes,19,opt,name=and,proto3,oneof"`
}

type Component_Or struct {
	// Logical OR.
	Or *Or `protobuf:"bytes,20,opt,name=or,proto3,oneof"`
}

type Component_Inverter struct {
	// Logical NOT.
	Inverter *Inverter `protobuf:"bytes,21,opt,name=inverter,proto3,oneof"`
}

type Component_PulseGenerator struct {
	// Generates 0 and 1 in turns.
	PulseGenerator *PulseGenerator `protobuf:"bytes,22,opt,name=pulse_generator,json=pulseGenerator,proto3,oneof"`
}

type Component_Holder struct {
	// Holds the last valid signal value for the specified duration then waits for next valid value to hold.
	Holder *Holder `protobuf:"bytes,23,opt,name=holder,proto3,oneof"`
}

type Component_NestedCircuit struct {
	// Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
	NestedCircuit *NestedCircuit `protobuf:"bytes,24,opt,name=nested_circuit,json=nestedCircuit,proto3,oneof"`
}

type Component_NestedSignalIngress struct {
	// Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
	NestedSignalIngress *NestedSignalIngress `protobuf:"bytes,25,opt,name=nested_signal_ingress,json=nestedSignalIngress,proto3,oneof"`
}

type Component_NestedSignalEgress struct {
	// Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
	NestedSignalEgress *NestedSignalEgress `protobuf:"bytes,26,opt,name=nested_signal_egress,json=nestedSignalEgress,proto3,oneof"`
}

type Component_SignalGenerator struct {
	// Generates the specified signal.
	SignalGenerator *SignalGenerator `protobuf:"bytes,27,opt,name=signal_generator,json=signalGenerator,proto3,oneof"`
}

type Component_Query struct {
	// Query components that are query databases such as Prometheus.
	Query *Query `protobuf:"bytes,100,opt,name=query,proto3,oneof"`
}

type Component_FlowControl struct {
	// FlowControl components are used to regulate requests flow.
	FlowControl *FlowControl `protobuf:"bytes,101,opt,name=flow_control,json=flowControl,proto3,oneof"`
}

type Component_AutoScale struct {
	// AutoScale components are used to scale the service.
	AutoScale *AutoScale `protobuf:"bytes,102,opt,name=auto_scale,json=autoScale,proto3,oneof"`
}

func (*Component_GradientController) isComponent_Component() {}

func (*Component_Ema) isComponent_Component() {}

func (*Component_ArithmeticCombinator) isComponent_Component() {}

func (*Component_Decider) isComponent_Component() {}

func (*Component_Switcher) isComponent_Component() {}

func (*Component_Variable) isComponent_Component() {}

func (*Component_UnaryOperator) isComponent_Component() {}

func (*Component_Extrapolator) isComponent_Component() {}

func (*Component_Max) isComponent_Component() {}

func (*Component_Min) isComponent_Component() {}

func (*Component_FirstValid) isComponent_Component() {}

func (*Component_Alerter) isComponent_Component() {}

func (*Component_Integrator) isComponent_Component() {}

func (*Component_Differentiator) isComponent_Component() {}

func (*Component_And) isComponent_Component() {}

func (*Component_Or) isComponent_Component() {}

func (*Component_Inverter) isComponent_Component() {}

func (*Component_PulseGenerator) isComponent_Component() {}

func (*Component_Holder) isComponent_Component() {}

func (*Component_NestedCircuit) isComponent_Component() {}

func (*Component_NestedSignalIngress) isComponent_Component() {}

func (*Component_NestedSignalEgress) isComponent_Component() {}

func (*Component_SignalGenerator) isComponent_Component() {}

func (*Component_Query) isComponent_Component() {}

func (*Component_FlowControl) isComponent_Component() {}

func (*Component_AutoScale) isComponent_Component() {}

// Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
type NestedCircuit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps input port names to input ports.
	InPortsMap map[string]*InPort `protobuf:"bytes,1,rep,name=in_ports_map,json=inPortsMap,proto3" json:"in_ports_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Maps output port names to output ports.
	OutPortsMap map[string]*OutPort `protobuf:"bytes,2,rep,name=out_ports_map,json=outPortsMap,proto3" json:"out_ports_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of components in the nested circuit.
	Components []*Component `protobuf:"bytes,3,rep,name=components,proto3" json:"components,omitempty" validate:"dive"` // @gotags: validate:"dive"
	// Name of the nested circuit component. This name is displayed by graph visualization tools.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Short description of the nested circuit component. This description is displayed by graph visualization tools.
	ShortDescription string `protobuf:"bytes,5,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
}

func (x *NestedCircuit) Reset() {
	*x = NestedCircuit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedCircuit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedCircuit) ProtoMessage() {}

func (x *NestedCircuit) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_language_v1_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedCircuit.ProtoReflect.Descriptor instead.
func (*NestedCircuit) Descriptor() ([]byte, []int) {
	return file_aperture_policy_language_v1_policy_proto_rawDescGZIP(), []int{6}
}

func (x *NestedCircuit) GetInPortsMap() map[string]*InPort {
	if x != nil {
		return x.InPortsMap
	}
	return nil
}

func (x *NestedCircuit) GetOutPortsMap() map[string]*OutPort {
	if x != nil {
		return x.OutPortsMap
	}
	return nil
}

func (x *NestedCircuit) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *NestedCircuit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NestedCircuit) GetShortDescription() string {
	if x != nil {
		return x.ShortDescription
	}
	return ""
}

var File_aperture_policy_language_v1_policy_proto protoreflect.FileDescriptor

var file_aperture_policy_language_v1_policy_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2b, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f,
	0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xbd, 0x01, 0x0a,
	0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x08, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x60, 0x0a, 0x0d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a,
	0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x07,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x9d, 0x01,
	0x0a, 0x07, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x65, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xec, 0x02,
	0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0b, 0x66,
	0x6c, 0x75, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x6c, 0x75, 0x78, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0b, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x54, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x1a, 0x65, 0x0a, 0x0f, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x0f, 0x0a,
	0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x13, 0x67, 0x72,
	0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x67, 0x72, 0x61, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x03, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x4d, 0x41, 0x48, 0x00, 0x52,
	0x03, 0x65, 0x6d, 0x61, 0x12, 0x68, 0x0a, 0x15, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x14, 0x61, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x40,
	0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x75, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x0d, 0x75, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x4f, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x78, 0x48,
	0x00, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0b,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x69,
	0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x03,
	0x61, 0x6e, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x6e, 0x64, 0x12, 0x31, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x48,
	0x00, 0x52, 0x02, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0f, 0x70, 0x75,
	0x6c, 0x73, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x0e, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x0e, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x12, 0x66, 0x0a, 0x15, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x63,
	0x0a, 0x14, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x12, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x45, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x66, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x22,
	0xa1, 0x04, 0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x12, 0x5c, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x2e, 0x49, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x12,
	0x5f, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70,
	0x12, 0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x62, 0x0a, 0x0f, 0x49, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a,
	0x10, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x32, 0x97, 0x01, 0x0a, 0x0d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2c, 0x92, 0x41, 0x15, 0x0a, 0x13, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12,
	0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x42, 0xa8, 0x02,
	0x0a, 0x33, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x76, 0x31,
	0x3b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x50,
	0x4c, 0xaa, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x27,
	0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1e, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x3a, 0x3a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_language_v1_policy_proto_rawDescOnce sync.Once
	file_aperture_policy_language_v1_policy_proto_rawDescData = file_aperture_policy_language_v1_policy_proto_rawDesc
)

func file_aperture_policy_language_v1_policy_proto_rawDescGZIP() []byte {
	file_aperture_policy_language_v1_policy_proto_rawDescOnce.Do(func() {
		file_aperture_policy_language_v1_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_language_v1_policy_proto_rawDescData)
	})
	return file_aperture_policy_language_v1_policy_proto_rawDescData
}

var file_aperture_policy_language_v1_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_aperture_policy_language_v1_policy_proto_goTypes = []interface{}{
	(*GetPoliciesResponse)(nil),  // 0: aperture.policy.language.v1.GetPoliciesResponse
	(*Policies)(nil),             // 1: aperture.policy.language.v1.Policies
	(*Policy)(nil),               // 2: aperture.policy.language.v1.Policy
	(*Circuit)(nil),              // 3: aperture.policy.language.v1.Circuit
	(*Resources)(nil),            // 4: aperture.policy.language.v1.Resources
	(*Component)(nil),            // 5: aperture.policy.language.v1.Component
	(*NestedCircuit)(nil),        // 6: aperture.policy.language.v1.NestedCircuit
	nil,                          // 7: aperture.policy.language.v1.Policies.PoliciesEntry
	nil,                          // 8: aperture.policy.language.v1.Resources.FluxMetersEntry
	nil,                          // 9: aperture.policy.language.v1.NestedCircuit.InPortsMapEntry
	nil,                          // 10: aperture.policy.language.v1.NestedCircuit.OutPortsMapEntry
	(*durationpb.Duration)(nil),  // 11: google.protobuf.Duration
	(*Classifier)(nil),           // 12: aperture.policy.language.v1.Classifier
	(*FlowControlResources)(nil), // 13: aperture.policy.language.v1.FlowControlResources
	(*GradientController)(nil),   // 14: aperture.policy.language.v1.GradientController
	(*EMA)(nil),                  // 15: aperture.policy.language.v1.EMA
	(*ArithmeticCombinator)(nil), // 16: aperture.policy.language.v1.ArithmeticCombinator
	(*Decider)(nil),              // 17: aperture.policy.language.v1.Decider
	(*Switcher)(nil),             // 18: aperture.policy.language.v1.Switcher
	(*Variable)(nil),             // 19: aperture.policy.language.v1.Variable
	(*UnaryOperator)(nil),        // 20: aperture.policy.language.v1.UnaryOperator
	(*Extrapolator)(nil),         // 21: aperture.policy.language.v1.Extrapolator
	(*Max)(nil),                  // 22: aperture.policy.language.v1.Max
	(*Min)(nil),                  // 23: aperture.policy.language.v1.Min
	(*FirstValid)(nil),           // 24: aperture.policy.language.v1.FirstValid
	(*Alerter)(nil),              // 25: aperture.policy.language.v1.Alerter
	(*Integrator)(nil),           // 26: aperture.policy.language.v1.Integrator
	(*Differentiator)(nil),       // 27: aperture.policy.language.v1.Differentiator
	(*And)(nil),                  // 28: aperture.policy.language.v1.And
	(*Or)(nil),                   // 29: aperture.policy.language.v1.Or
	(*Inverter)(nil),             // 30: aperture.policy.language.v1.Inverter
	(*PulseGenerator)(nil),       // 31: aperture.policy.language.v1.PulseGenerator
	(*Holder)(nil),               // 32: aperture.policy.language.v1.Holder
	(*NestedSignalIngress)(nil),  // 33: aperture.policy.language.v1.NestedSignalIngress
	(*NestedSignalEgress)(nil),   // 34: aperture.policy.language.v1.NestedSignalEgress
	(*SignalGenerator)(nil),      // 35: aperture.policy.language.v1.SignalGenerator
	(*Query)(nil),                // 36: aperture.policy.language.v1.Query
	(*FlowControl)(nil),          // 37: aperture.policy.language.v1.FlowControl
	(*AutoScale)(nil),            // 38: aperture.policy.language.v1.AutoScale
	(*FluxMeter)(nil),            // 39: aperture.policy.language.v1.FluxMeter
	(*InPort)(nil),               // 40: aperture.policy.language.v1.InPort
	(*OutPort)(nil),              // 41: aperture.policy.language.v1.OutPort
	(*emptypb.Empty)(nil),        // 42: google.protobuf.Empty
}
var file_aperture_policy_language_v1_policy_proto_depIdxs = []int32{
	1,  // 0: aperture.policy.language.v1.GetPoliciesResponse.policies:type_name -> aperture.policy.language.v1.Policies
	7,  // 1: aperture.policy.language.v1.Policies.policies:type_name -> aperture.policy.language.v1.Policies.PoliciesEntry
	3,  // 2: aperture.policy.language.v1.Policy.circuit:type_name -> aperture.policy.language.v1.Circuit
	4,  // 3: aperture.policy.language.v1.Policy.resources:type_name -> aperture.policy.language.v1.Resources
	11, // 4: aperture.policy.language.v1.Circuit.evaluation_interval:type_name -> google.protobuf.Duration
	5,  // 5: aperture.policy.language.v1.Circuit.components:type_name -> aperture.policy.language.v1.Component
	8,  // 6: aperture.policy.language.v1.Resources.flux_meters:type_name -> aperture.policy.language.v1.Resources.FluxMetersEntry
	12, // 7: aperture.policy.language.v1.Resources.classifiers:type_name -> aperture.policy.language.v1.Classifier
	13, // 8: aperture.policy.language.v1.Resources.flow_control:type_name -> aperture.policy.language.v1.FlowControlResources
	14, // 9: aperture.policy.language.v1.Component.gradient_controller:type_name -> aperture.policy.language.v1.GradientController
	15, // 10: aperture.policy.language.v1.Component.ema:type_name -> aperture.policy.language.v1.EMA
	16, // 11: aperture.policy.language.v1.Component.arithmetic_combinator:type_name -> aperture.policy.language.v1.ArithmeticCombinator
	17, // 12: aperture.policy.language.v1.Component.decider:type_name -> aperture.policy.language.v1.Decider
	18, // 13: aperture.policy.language.v1.Component.switcher:type_name -> aperture.policy.language.v1.Switcher
	19, // 14: aperture.policy.language.v1.Component.variable:type_name -> aperture.policy.language.v1.Variable
	20, // 15: aperture.policy.language.v1.Component.unary_operator:type_name -> aperture.policy.language.v1.UnaryOperator
	21, // 16: aperture.policy.language.v1.Component.extrapolator:type_name -> aperture.policy.language.v1.Extrapolator
	22, // 17: aperture.policy.language.v1.Component.max:type_name -> aperture.policy.language.v1.Max
	23, // 18: aperture.policy.language.v1.Component.min:type_name -> aperture.policy.language.v1.Min
	24, // 19: aperture.policy.language.v1.Component.first_valid:type_name -> aperture.policy.language.v1.FirstValid
	25, // 20: aperture.policy.language.v1.Component.alerter:type_name -> aperture.policy.language.v1.Alerter
	26, // 21: aperture.policy.language.v1.Component.integrator:type_name -> aperture.policy.language.v1.Integrator
	27, // 22: aperture.policy.language.v1.Component.differentiator:type_name -> aperture.policy.language.v1.Differentiator
	28, // 23: aperture.policy.language.v1.Component.and:type_name -> aperture.policy.language.v1.And
	29, // 24: aperture.policy.language.v1.Component.or:type_name -> aperture.policy.language.v1.Or
	30, // 25: aperture.policy.language.v1.Component.inverter:type_name -> aperture.policy.language.v1.Inverter
	31, // 26: aperture.policy.language.v1.Component.pulse_generator:type_name -> aperture.policy.language.v1.PulseGenerator
	32, // 27: aperture.policy.language.v1.Component.holder:type_name -> aperture.policy.language.v1.Holder
	6,  // 28: aperture.policy.language.v1.Component.nested_circuit:type_name -> aperture.policy.language.v1.NestedCircuit
	33, // 29: aperture.policy.language.v1.Component.nested_signal_ingress:type_name -> aperture.policy.language.v1.NestedSignalIngress
	34, // 30: aperture.policy.language.v1.Component.nested_signal_egress:type_name -> aperture.policy.language.v1.NestedSignalEgress
	35, // 31: aperture.policy.language.v1.Component.signal_generator:type_name -> aperture.policy.language.v1.SignalGenerator
	36, // 32: aperture.policy.language.v1.Component.query:type_name -> aperture.policy.language.v1.Query
	37, // 33: aperture.policy.language.v1.Component.flow_control:type_name -> aperture.policy.language.v1.FlowControl
	38, // 34: aperture.policy.language.v1.Component.auto_scale:type_name -> aperture.policy.language.v1.AutoScale
	9,  // 35: aperture.policy.language.v1.NestedCircuit.in_ports_map:type_name -> aperture.policy.language.v1.NestedCircuit.InPortsMapEntry
	10, // 36: aperture.policy.language.v1.NestedCircuit.out_ports_map:type_name -> aperture.policy.language.v1.NestedCircuit.OutPortsMapEntry
	5,  // 37: aperture.policy.language.v1.NestedCircuit.components:type_name -> aperture.policy.language.v1.Component
	2,  // 38: aperture.policy.language.v1.Policies.PoliciesEntry.value:type_name -> aperture.policy.language.v1.Policy
	39, // 39: aperture.policy.language.v1.Resources.FluxMetersEntry.value:type_name -> aperture.policy.language.v1.FluxMeter
	40, // 40: aperture.policy.language.v1.NestedCircuit.InPortsMapEntry.value:type_name -> aperture.policy.language.v1.InPort
	41, // 41: aperture.policy.language.v1.NestedCircuit.OutPortsMapEntry.value:type_name -> aperture.policy.language.v1.OutPort
	42, // 42: aperture.policy.language.v1.PolicyService.GetPolicies:input_type -> google.protobuf.Empty
	0,  // 43: aperture.policy.language.v1.PolicyService.GetPolicies:output_type -> aperture.policy.language.v1.GetPoliciesResponse
	43, // [43:44] is the sub-list for method output_type
	42, // [42:43] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_aperture_policy_language_v1_policy_proto_init() }
func file_aperture_policy_language_v1_policy_proto_init() {
	if File_aperture_policy_language_v1_policy_proto != nil {
		return
	}
	file_aperture_policy_language_v1_autoscale_proto_init()
	file_aperture_policy_language_v1_flowcontrol_proto_init()
	file_aperture_policy_language_v1_ports_proto_init()
	file_aperture_policy_language_v1_query_proto_init()
	file_aperture_policy_language_v1_std_components_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_language_v1_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_language_v1_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedCircuit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_policy_language_v1_policy_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Component_GradientController)(nil),
		(*Component_Ema)(nil),
		(*Component_ArithmeticCombinator)(nil),
		(*Component_Decider)(nil),
		(*Component_Switcher)(nil),
		(*Component_Variable)(nil),
		(*Component_UnaryOperator)(nil),
		(*Component_Extrapolator)(nil),
		(*Component_Max)(nil),
		(*Component_Min)(nil),
		(*Component_FirstValid)(nil),
		(*Component_Alerter)(nil),
		(*Component_Integrator)(nil),
		(*Component_Differentiator)(nil),
		(*Component_And)(nil),
		(*Component_Or)(nil),
		(*Component_Inverter)(nil),
		(*Component_PulseGenerator)(nil),
		(*Component_Holder)(nil),
		(*Component_NestedCircuit)(nil),
		(*Component_NestedSignalIngress)(nil),
		(*Component_NestedSignalEgress)(nil),
		(*Component_SignalGenerator)(nil),
		(*Component_Query)(nil),
		(*Component_FlowControl)(nil),
		(*Component_AutoScale)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_language_v1_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_policy_language_v1_policy_proto_goTypes,
		DependencyIndexes: file_aperture_policy_language_v1_policy_proto_depIdxs,
		MessageInfos:      file_aperture_policy_language_v1_policy_proto_msgTypes,
	}.Build()
	File_aperture_policy_language_v1_policy_proto = out.File
	file_aperture_policy_language_v1_policy_proto_rawDesc = nil
	file_aperture_policy_language_v1_policy_proto_goTypes = nil
	file_aperture_policy_language_v1_policy_proto_depIdxs = nil
}
