// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/sync/v1/flow_regulator.proto

package syncv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FlowRegulatorWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlowRegulatorWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlowRegulatorWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlowRegulatorWrapperMultiError, or nil if none found.
func (m *FlowRegulatorWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *FlowRegulatorWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowRegulatorWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowRegulatorWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowRegulatorWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFlowRegulator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowRegulatorWrapperValidationError{
					field:  "FlowRegulator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowRegulatorWrapperValidationError{
					field:  "FlowRegulator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlowRegulator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowRegulatorWrapperValidationError{
				field:  "FlowRegulator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FlowRegulatorWrapperMultiError(errors)
	}

	return nil
}

// FlowRegulatorWrapperMultiError is an error wrapping multiple validation
// errors returned by FlowRegulatorWrapper.ValidateAll() if the designated
// constraints aren't met.
type FlowRegulatorWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowRegulatorWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowRegulatorWrapperMultiError) AllErrors() []error { return m }

// FlowRegulatorWrapperValidationError is the validation error returned by
// FlowRegulatorWrapper.Validate if the designated constraints aren't met.
type FlowRegulatorWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowRegulatorWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowRegulatorWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowRegulatorWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowRegulatorWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowRegulatorWrapperValidationError) ErrorName() string {
	return "FlowRegulatorWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e FlowRegulatorWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlowRegulatorWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowRegulatorWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowRegulatorWrapperValidationError{}

// Validate checks the field values on FlowRegulatorDynamicConfigWrapper with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FlowRegulatorDynamicConfigWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlowRegulatorDynamicConfigWrapper
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FlowRegulatorDynamicConfigWrapperMultiError, or nil if none found.
func (m *FlowRegulatorDynamicConfigWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *FlowRegulatorDynamicConfigWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowRegulatorDynamicConfigWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowRegulatorDynamicConfigWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowRegulatorDynamicConfigWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFlowRegulatorDynamicConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowRegulatorDynamicConfigWrapperValidationError{
					field:  "FlowRegulatorDynamicConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowRegulatorDynamicConfigWrapperValidationError{
					field:  "FlowRegulatorDynamicConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlowRegulatorDynamicConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowRegulatorDynamicConfigWrapperValidationError{
				field:  "FlowRegulatorDynamicConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FlowRegulatorDynamicConfigWrapperMultiError(errors)
	}

	return nil
}

// FlowRegulatorDynamicConfigWrapperMultiError is an error wrapping multiple
// validation errors returned by
// FlowRegulatorDynamicConfigWrapper.ValidateAll() if the designated
// constraints aren't met.
type FlowRegulatorDynamicConfigWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowRegulatorDynamicConfigWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowRegulatorDynamicConfigWrapperMultiError) AllErrors() []error { return m }

// FlowRegulatorDynamicConfigWrapperValidationError is the validation error
// returned by FlowRegulatorDynamicConfigWrapper.Validate if the designated
// constraints aren't met.
type FlowRegulatorDynamicConfigWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowRegulatorDynamicConfigWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowRegulatorDynamicConfigWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowRegulatorDynamicConfigWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowRegulatorDynamicConfigWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowRegulatorDynamicConfigWrapperValidationError) ErrorName() string {
	return "FlowRegulatorDynamicConfigWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e FlowRegulatorDynamicConfigWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlowRegulatorDynamicConfigWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowRegulatorDynamicConfigWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowRegulatorDynamicConfigWrapperValidationError{}

// Validate checks the field values on FlowRegulatorDecisionWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlowRegulatorDecisionWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlowRegulatorDecisionWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlowRegulatorDecisionWrapperMultiError, or nil if none found.
func (m *FlowRegulatorDecisionWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *FlowRegulatorDecisionWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowRegulatorDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowRegulatorDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowRegulatorDecisionWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFlowRegulatorDecision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlowRegulatorDecisionWrapperValidationError{
					field:  "FlowRegulatorDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlowRegulatorDecisionWrapperValidationError{
					field:  "FlowRegulatorDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlowRegulatorDecision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlowRegulatorDecisionWrapperValidationError{
				field:  "FlowRegulatorDecision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FlowRegulatorDecisionWrapperMultiError(errors)
	}

	return nil
}

// FlowRegulatorDecisionWrapperMultiError is an error wrapping multiple
// validation errors returned by FlowRegulatorDecisionWrapper.ValidateAll() if
// the designated constraints aren't met.
type FlowRegulatorDecisionWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowRegulatorDecisionWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowRegulatorDecisionWrapperMultiError) AllErrors() []error { return m }

// FlowRegulatorDecisionWrapperValidationError is the validation error returned
// by FlowRegulatorDecisionWrapper.Validate if the designated constraints
// aren't met.
type FlowRegulatorDecisionWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowRegulatorDecisionWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowRegulatorDecisionWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowRegulatorDecisionWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowRegulatorDecisionWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowRegulatorDecisionWrapperValidationError) ErrorName() string {
	return "FlowRegulatorDecisionWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e FlowRegulatorDecisionWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlowRegulatorDecisionWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowRegulatorDecisionWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowRegulatorDecisionWrapperValidationError{}

// Validate checks the field values on FlowRegulatorDecision with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FlowRegulatorDecision) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlowRegulatorDecision with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlowRegulatorDecisionMultiError, or nil if none found.
func (m *FlowRegulatorDecision) ValidateAll() error {
	return m.validate(true)
}

func (m *FlowRegulatorDecision) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AcceptPercentage

	if len(errors) > 0 {
		return FlowRegulatorDecisionMultiError(errors)
	}

	return nil
}

// FlowRegulatorDecisionMultiError is an error wrapping multiple validation
// errors returned by FlowRegulatorDecision.ValidateAll() if the designated
// constraints aren't met.
type FlowRegulatorDecisionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlowRegulatorDecisionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlowRegulatorDecisionMultiError) AllErrors() []error { return m }

// FlowRegulatorDecisionValidationError is the validation error returned by
// FlowRegulatorDecision.Validate if the designated constraints aren't met.
type FlowRegulatorDecisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlowRegulatorDecisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlowRegulatorDecisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlowRegulatorDecisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlowRegulatorDecisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlowRegulatorDecisionValidationError) ErrorName() string {
	return "FlowRegulatorDecisionValidationError"
}

// Error satisfies the builtin error interface
func (e FlowRegulatorDecisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlowRegulatorDecision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlowRegulatorDecisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlowRegulatorDecisionValidationError{}
