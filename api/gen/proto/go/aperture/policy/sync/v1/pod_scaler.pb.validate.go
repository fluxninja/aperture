// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/sync/v1/pod_scaler.proto

package syncv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PodScalerWrapper with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PodScalerWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScalerWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScalerWrapperMultiError, or nil if none found.
func (m *PodScalerWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScalerWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScalerWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScalerWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScalerWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPodScaler()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScalerWrapperValidationError{
					field:  "PodScaler",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScalerWrapperValidationError{
					field:  "PodScaler",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPodScaler()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScalerWrapperValidationError{
				field:  "PodScaler",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PodScalerWrapperMultiError(errors)
	}

	return nil
}

// PodScalerWrapperMultiError is an error wrapping multiple validation errors
// returned by PodScalerWrapper.ValidateAll() if the designated constraints
// aren't met.
type PodScalerWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScalerWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScalerWrapperMultiError) AllErrors() []error { return m }

// PodScalerWrapperValidationError is the validation error returned by
// PodScalerWrapper.Validate if the designated constraints aren't met.
type PodScalerWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScalerWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScalerWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScalerWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScalerWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScalerWrapperValidationError) ErrorName() string { return "PodScalerWrapperValidationError" }

// Error satisfies the builtin error interface
func (e PodScalerWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScalerWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScalerWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScalerWrapperValidationError{}

// Validate checks the field values on PodScalerDynamicConfigWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PodScalerDynamicConfigWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScalerDynamicConfigWrapper with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PodScalerDynamicConfigWrapperMultiError, or nil if none found.
func (m *PodScalerDynamicConfigWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScalerDynamicConfigWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScalerDynamicConfigWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScalerDynamicConfigWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScalerDynamicConfigWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	if len(errors) > 0 {
		return PodScalerDynamicConfigWrapperMultiError(errors)
	}

	return nil
}

// PodScalerDynamicConfigWrapperMultiError is an error wrapping multiple
// validation errors returned by PodScalerDynamicConfigWrapper.ValidateAll()
// if the designated constraints aren't met.
type PodScalerDynamicConfigWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScalerDynamicConfigWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScalerDynamicConfigWrapperMultiError) AllErrors() []error { return m }

// PodScalerDynamicConfigWrapperValidationError is the validation error
// returned by PodScalerDynamicConfigWrapper.Validate if the designated
// constraints aren't met.
type PodScalerDynamicConfigWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScalerDynamicConfigWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScalerDynamicConfigWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScalerDynamicConfigWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScalerDynamicConfigWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScalerDynamicConfigWrapperValidationError) ErrorName() string {
	return "PodScalerDynamicConfigWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e PodScalerDynamicConfigWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScalerDynamicConfigWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScalerDynamicConfigWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScalerDynamicConfigWrapperValidationError{}

// Validate checks the field values on ScaleStatusWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleStatusWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleStatusWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleStatusWrapperMultiError, or nil if none found.
func (m *ScaleStatusWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleStatusWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScaleStatusWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScaleStatusWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScaleStatusWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScaleStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScaleStatusWrapperValidationError{
					field:  "ScaleStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScaleStatusWrapperValidationError{
					field:  "ScaleStatus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScaleStatusWrapperValidationError{
				field:  "ScaleStatus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScaleStatusWrapperMultiError(errors)
	}

	return nil
}

// ScaleStatusWrapperMultiError is an error wrapping multiple validation errors
// returned by ScaleStatusWrapper.ValidateAll() if the designated constraints
// aren't met.
type ScaleStatusWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleStatusWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleStatusWrapperMultiError) AllErrors() []error { return m }

// ScaleStatusWrapperValidationError is the validation error returned by
// ScaleStatusWrapper.Validate if the designated constraints aren't met.
type ScaleStatusWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleStatusWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleStatusWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleStatusWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleStatusWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleStatusWrapperValidationError) ErrorName() string {
	return "ScaleStatusWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleStatusWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleStatusWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleStatusWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleStatusWrapperValidationError{}

// Validate checks the field values on ScaleStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScaleStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScaleStatusMultiError, or
// nil if none found.
func (m *ScaleStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConfiguredReplicas

	// no validation rules for ActualReplicas

	if len(errors) > 0 {
		return ScaleStatusMultiError(errors)
	}

	return nil
}

// ScaleStatusMultiError is an error wrapping multiple validation errors
// returned by ScaleStatus.ValidateAll() if the designated constraints aren't met.
type ScaleStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleStatusMultiError) AllErrors() []error { return m }

// ScaleStatusValidationError is the validation error returned by
// ScaleStatus.Validate if the designated constraints aren't met.
type ScaleStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleStatusValidationError) ErrorName() string { return "ScaleStatusValidationError" }

// Error satisfies the builtin error interface
func (e ScaleStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleStatusValidationError{}

// Validate checks the field values on ScaleDecisionWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ScaleDecisionWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleDecisionWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ScaleDecisionWrapperMultiError, or nil if none found.
func (m *ScaleDecisionWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleDecisionWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScaleDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScaleDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScaleDecisionWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScaleDecision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ScaleDecisionWrapperValidationError{
					field:  "ScaleDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ScaleDecisionWrapperValidationError{
					field:  "ScaleDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScaleDecision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ScaleDecisionWrapperValidationError{
				field:  "ScaleDecision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ScaleDecisionWrapperMultiError(errors)
	}

	return nil
}

// ScaleDecisionWrapperMultiError is an error wrapping multiple validation
// errors returned by ScaleDecisionWrapper.ValidateAll() if the designated
// constraints aren't met.
type ScaleDecisionWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleDecisionWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleDecisionWrapperMultiError) AllErrors() []error { return m }

// ScaleDecisionWrapperValidationError is the validation error returned by
// ScaleDecisionWrapper.Validate if the designated constraints aren't met.
type ScaleDecisionWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleDecisionWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleDecisionWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleDecisionWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleDecisionWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleDecisionWrapperValidationError) ErrorName() string {
	return "ScaleDecisionWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e ScaleDecisionWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleDecisionWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleDecisionWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleDecisionWrapperValidationError{}

// Validate checks the field values on ScaleDecision with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScaleDecision) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScaleDecision with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScaleDecisionMultiError, or
// nil if none found.
func (m *ScaleDecision) ValidateAll() error {
	return m.validate(true)
}

func (m *ScaleDecision) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DesiredReplicas

	if len(errors) > 0 {
		return ScaleDecisionMultiError(errors)
	}

	return nil
}

// ScaleDecisionMultiError is an error wrapping multiple validation errors
// returned by ScaleDecision.ValidateAll() if the designated constraints
// aren't met.
type ScaleDecisionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScaleDecisionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScaleDecisionMultiError) AllErrors() []error { return m }

// ScaleDecisionValidationError is the validation error returned by
// ScaleDecision.Validate if the designated constraints aren't met.
type ScaleDecisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScaleDecisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScaleDecisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScaleDecisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScaleDecisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScaleDecisionValidationError) ErrorName() string { return "ScaleDecisionValidationError" }

// Error satisfies the builtin error interface
func (e ScaleDecisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScaleDecision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScaleDecisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScaleDecisionValidationError{}
