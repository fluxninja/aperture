// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/sync/v1/load_regulator.proto

package syncv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LoadRegulatorWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadRegulatorWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadRegulatorWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadRegulatorWrapperMultiError, or nil if none found.
func (m *LoadRegulatorWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadRegulatorWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadRegulatorWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadRegulatorWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadRegulatorWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLoadRegulator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadRegulatorWrapperValidationError{
					field:  "LoadRegulator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadRegulatorWrapperValidationError{
					field:  "LoadRegulator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoadRegulator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadRegulatorWrapperValidationError{
				field:  "LoadRegulator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadRegulatorWrapperMultiError(errors)
	}

	return nil
}

// LoadRegulatorWrapperMultiError is an error wrapping multiple validation
// errors returned by LoadRegulatorWrapper.ValidateAll() if the designated
// constraints aren't met.
type LoadRegulatorWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadRegulatorWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadRegulatorWrapperMultiError) AllErrors() []error { return m }

// LoadRegulatorWrapperValidationError is the validation error returned by
// LoadRegulatorWrapper.Validate if the designated constraints aren't met.
type LoadRegulatorWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadRegulatorWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadRegulatorWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadRegulatorWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadRegulatorWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadRegulatorWrapperValidationError) ErrorName() string {
	return "LoadRegulatorWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e LoadRegulatorWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadRegulatorWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadRegulatorWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadRegulatorWrapperValidationError{}

// Validate checks the field values on LoadRegulatorDynamicConfigWrapper with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LoadRegulatorDynamicConfigWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadRegulatorDynamicConfigWrapper
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LoadRegulatorDynamicConfigWrapperMultiError, or nil if none found.
func (m *LoadRegulatorDynamicConfigWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadRegulatorDynamicConfigWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadRegulatorDynamicConfigWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadRegulatorDynamicConfigWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadRegulatorDynamicConfigWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLoadRegulatorDynamicConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadRegulatorDynamicConfigWrapperValidationError{
					field:  "LoadRegulatorDynamicConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadRegulatorDynamicConfigWrapperValidationError{
					field:  "LoadRegulatorDynamicConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoadRegulatorDynamicConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadRegulatorDynamicConfigWrapperValidationError{
				field:  "LoadRegulatorDynamicConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadRegulatorDynamicConfigWrapperMultiError(errors)
	}

	return nil
}

// LoadRegulatorDynamicConfigWrapperMultiError is an error wrapping multiple
// validation errors returned by
// LoadRegulatorDynamicConfigWrapper.ValidateAll() if the designated
// constraints aren't met.
type LoadRegulatorDynamicConfigWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadRegulatorDynamicConfigWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadRegulatorDynamicConfigWrapperMultiError) AllErrors() []error { return m }

// LoadRegulatorDynamicConfigWrapperValidationError is the validation error
// returned by LoadRegulatorDynamicConfigWrapper.Validate if the designated
// constraints aren't met.
type LoadRegulatorDynamicConfigWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadRegulatorDynamicConfigWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadRegulatorDynamicConfigWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadRegulatorDynamicConfigWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadRegulatorDynamicConfigWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadRegulatorDynamicConfigWrapperValidationError) ErrorName() string {
	return "LoadRegulatorDynamicConfigWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e LoadRegulatorDynamicConfigWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadRegulatorDynamicConfigWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadRegulatorDynamicConfigWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadRegulatorDynamicConfigWrapperValidationError{}

// Validate checks the field values on LoadRegulatorDecisionWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadRegulatorDecisionWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadRegulatorDecisionWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadRegulatorDecisionWrapperMultiError, or nil if none found.
func (m *LoadRegulatorDecisionWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadRegulatorDecisionWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadRegulatorDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadRegulatorDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadRegulatorDecisionWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLoadRegulatorDecision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoadRegulatorDecisionWrapperValidationError{
					field:  "LoadRegulatorDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoadRegulatorDecisionWrapperValidationError{
					field:  "LoadRegulatorDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLoadRegulatorDecision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoadRegulatorDecisionWrapperValidationError{
				field:  "LoadRegulatorDecision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoadRegulatorDecisionWrapperMultiError(errors)
	}

	return nil
}

// LoadRegulatorDecisionWrapperMultiError is an error wrapping multiple
// validation errors returned by LoadRegulatorDecisionWrapper.ValidateAll() if
// the designated constraints aren't met.
type LoadRegulatorDecisionWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadRegulatorDecisionWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadRegulatorDecisionWrapperMultiError) AllErrors() []error { return m }

// LoadRegulatorDecisionWrapperValidationError is the validation error returned
// by LoadRegulatorDecisionWrapper.Validate if the designated constraints
// aren't met.
type LoadRegulatorDecisionWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadRegulatorDecisionWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadRegulatorDecisionWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadRegulatorDecisionWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadRegulatorDecisionWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadRegulatorDecisionWrapperValidationError) ErrorName() string {
	return "LoadRegulatorDecisionWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e LoadRegulatorDecisionWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadRegulatorDecisionWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadRegulatorDecisionWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadRegulatorDecisionWrapperValidationError{}

// Validate checks the field values on LoadRegulatorDecision with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoadRegulatorDecision) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoadRegulatorDecision with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoadRegulatorDecisionMultiError, or nil if none found.
func (m *LoadRegulatorDecision) ValidateAll() error {
	return m.validate(true)
}

func (m *LoadRegulatorDecision) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AcceptPercentage

	if len(errors) > 0 {
		return LoadRegulatorDecisionMultiError(errors)
	}

	return nil
}

// LoadRegulatorDecisionMultiError is an error wrapping multiple validation
// errors returned by LoadRegulatorDecision.ValidateAll() if the designated
// constraints aren't met.
type LoadRegulatorDecisionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoadRegulatorDecisionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoadRegulatorDecisionMultiError) AllErrors() []error { return m }

// LoadRegulatorDecisionValidationError is the validation error returned by
// LoadRegulatorDecision.Validate if the designated constraints aren't met.
type LoadRegulatorDecisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoadRegulatorDecisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoadRegulatorDecisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoadRegulatorDecisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoadRegulatorDecisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoadRegulatorDecisionValidationError) ErrorName() string {
	return "LoadRegulatorDecisionValidationError"
}

// Error satisfies the builtin error interface
func (e LoadRegulatorDecisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoadRegulatorDecision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoadRegulatorDecisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoadRegulatorDecisionValidationError{}
