// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/sync/v1/rate_limiter.proto

package syncv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RateLimiterWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RateLimiterWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RateLimiterWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RateLimiterWrapperMultiError, or nil if none found.
func (m *RateLimiterWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *RateLimiterWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimiterWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimiterWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimiterWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRateLimiter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimiterWrapperValidationError{
					field:  "RateLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimiterWrapperValidationError{
					field:  "RateLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimiter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimiterWrapperValidationError{
				field:  "RateLimiter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RateLimiterWrapperMultiError(errors)
	}

	return nil
}

// RateLimiterWrapperMultiError is an error wrapping multiple validation errors
// returned by RateLimiterWrapper.ValidateAll() if the designated constraints
// aren't met.
type RateLimiterWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateLimiterWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateLimiterWrapperMultiError) AllErrors() []error { return m }

// RateLimiterWrapperValidationError is the validation error returned by
// RateLimiterWrapper.Validate if the designated constraints aren't met.
type RateLimiterWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimiterWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimiterWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateLimiterWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimiterWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimiterWrapperValidationError) ErrorName() string {
	return "RateLimiterWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimiterWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimiterWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimiterWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimiterWrapperValidationError{}

// Validate checks the field values on RateLimiterDecisionWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RateLimiterDecisionWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RateLimiterDecisionWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RateLimiterDecisionWrapperMultiError, or nil if none found.
func (m *RateLimiterDecisionWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *RateLimiterDecisionWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimiterDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimiterDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimiterDecisionWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRateLimiterDecision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimiterDecisionWrapperValidationError{
					field:  "RateLimiterDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimiterDecisionWrapperValidationError{
					field:  "RateLimiterDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimiterDecision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimiterDecisionWrapperValidationError{
				field:  "RateLimiterDecision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRateLimiterDynamicConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RateLimiterDecisionWrapperValidationError{
					field:  "RateLimiterDynamicConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RateLimiterDecisionWrapperValidationError{
					field:  "RateLimiterDynamicConfig",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimiterDynamicConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RateLimiterDecisionWrapperValidationError{
				field:  "RateLimiterDynamicConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RateLimiterDecisionWrapperMultiError(errors)
	}

	return nil
}

// RateLimiterDecisionWrapperMultiError is an error wrapping multiple
// validation errors returned by RateLimiterDecisionWrapper.ValidateAll() if
// the designated constraints aren't met.
type RateLimiterDecisionWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateLimiterDecisionWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateLimiterDecisionWrapperMultiError) AllErrors() []error { return m }

// RateLimiterDecisionWrapperValidationError is the validation error returned
// by RateLimiterDecisionWrapper.Validate if the designated constraints aren't met.
type RateLimiterDecisionWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimiterDecisionWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimiterDecisionWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateLimiterDecisionWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimiterDecisionWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimiterDecisionWrapperValidationError) ErrorName() string {
	return "RateLimiterDecisionWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimiterDecisionWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimiterDecisionWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimiterDecisionWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimiterDecisionWrapperValidationError{}

// Validate checks the field values on RateLimiterDecision with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RateLimiterDecision) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RateLimiterDecision with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RateLimiterDecisionMultiError, or nil if none found.
func (m *RateLimiterDecision) ValidateAll() error {
	return m.validate(true)
}

func (m *RateLimiterDecision) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	if len(errors) > 0 {
		return RateLimiterDecisionMultiError(errors)
	}

	return nil
}

// RateLimiterDecisionMultiError is an error wrapping multiple validation
// errors returned by RateLimiterDecision.ValidateAll() if the designated
// constraints aren't met.
type RateLimiterDecisionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RateLimiterDecisionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RateLimiterDecisionMultiError) AllErrors() []error { return m }

// RateLimiterDecisionValidationError is the validation error returned by
// RateLimiterDecision.Validate if the designated constraints aren't met.
type RateLimiterDecisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RateLimiterDecisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RateLimiterDecisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RateLimiterDecisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RateLimiterDecisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RateLimiterDecisionValidationError) ErrorName() string {
	return "RateLimiterDecisionValidationError"
}

// Error satisfies the builtin error interface
func (e RateLimiterDecisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRateLimiterDecision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RateLimiterDecisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RateLimiterDecisionValidationError{}

// Validate checks the field values on LeakyBucketRateLimiterWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeakyBucketRateLimiterWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeakyBucketRateLimiterWrapper with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LeakyBucketRateLimiterWrapperMultiError, or nil if none found.
func (m *LeakyBucketRateLimiterWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *LeakyBucketRateLimiterWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeakyBucketRateLimiterWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRateLimiter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterWrapperValidationError{
					field:  "RateLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterWrapperValidationError{
					field:  "RateLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimiter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeakyBucketRateLimiterWrapperValidationError{
				field:  "RateLimiter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LeakyBucketRateLimiterWrapperMultiError(errors)
	}

	return nil
}

// LeakyBucketRateLimiterWrapperMultiError is an error wrapping multiple
// validation errors returned by LeakyBucketRateLimiterWrapper.ValidateAll()
// if the designated constraints aren't met.
type LeakyBucketRateLimiterWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeakyBucketRateLimiterWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeakyBucketRateLimiterWrapperMultiError) AllErrors() []error { return m }

// LeakyBucketRateLimiterWrapperValidationError is the validation error
// returned by LeakyBucketRateLimiterWrapper.Validate if the designated
// constraints aren't met.
type LeakyBucketRateLimiterWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeakyBucketRateLimiterWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeakyBucketRateLimiterWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeakyBucketRateLimiterWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeakyBucketRateLimiterWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeakyBucketRateLimiterWrapperValidationError) ErrorName() string {
	return "LeakyBucketRateLimiterWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e LeakyBucketRateLimiterWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeakyBucketRateLimiterWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeakyBucketRateLimiterWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeakyBucketRateLimiterWrapperValidationError{}

// Validate checks the field values on LeakyBucketRateLimiterDecisionWrapper
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LeakyBucketRateLimiterDecisionWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeakyBucketRateLimiterDecisionWrapper
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LeakyBucketRateLimiterDecisionWrapperMultiError, or nil if none found.
func (m *LeakyBucketRateLimiterDecisionWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *LeakyBucketRateLimiterDecisionWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeakyBucketRateLimiterDecisionWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRateLimiterDecision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterDecisionWrapperValidationError{
					field:  "RateLimiterDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterDecisionWrapperValidationError{
					field:  "RateLimiterDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRateLimiterDecision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeakyBucketRateLimiterDecisionWrapperValidationError{
				field:  "RateLimiterDecision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LeakyBucketRateLimiterDecisionWrapperMultiError(errors)
	}

	return nil
}

// LeakyBucketRateLimiterDecisionWrapperMultiError is an error wrapping
// multiple validation errors returned by
// LeakyBucketRateLimiterDecisionWrapper.ValidateAll() if the designated
// constraints aren't met.
type LeakyBucketRateLimiterDecisionWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeakyBucketRateLimiterDecisionWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeakyBucketRateLimiterDecisionWrapperMultiError) AllErrors() []error { return m }

// LeakyBucketRateLimiterDecisionWrapperValidationError is the validation error
// returned by LeakyBucketRateLimiterDecisionWrapper.Validate if the
// designated constraints aren't met.
type LeakyBucketRateLimiterDecisionWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeakyBucketRateLimiterDecisionWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeakyBucketRateLimiterDecisionWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeakyBucketRateLimiterDecisionWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeakyBucketRateLimiterDecisionWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeakyBucketRateLimiterDecisionWrapperValidationError) ErrorName() string {
	return "LeakyBucketRateLimiterDecisionWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e LeakyBucketRateLimiterDecisionWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeakyBucketRateLimiterDecisionWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeakyBucketRateLimiterDecisionWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeakyBucketRateLimiterDecisionWrapperValidationError{}

// Validate checks the field values on LeakyBucketRateLimiterDecision with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeakyBucketRateLimiterDecision) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeakyBucketRateLimiterDecision with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LeakyBucketRateLimiterDecisionMultiError, or nil if none found.
func (m *LeakyBucketRateLimiterDecision) ValidateAll() error {
	return m.validate(true)
}

func (m *LeakyBucketRateLimiterDecision) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BucketCapacity

	if all {
		switch v := interface{}(m.GetLeakInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterDecisionValidationError{
					field:  "LeakInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeakyBucketRateLimiterDecisionValidationError{
					field:  "LeakInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLeakInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeakyBucketRateLimiterDecisionValidationError{
				field:  "LeakInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LeakAmount

	if len(errors) > 0 {
		return LeakyBucketRateLimiterDecisionMultiError(errors)
	}

	return nil
}

// LeakyBucketRateLimiterDecisionMultiError is an error wrapping multiple
// validation errors returned by LeakyBucketRateLimiterDecision.ValidateAll()
// if the designated constraints aren't met.
type LeakyBucketRateLimiterDecisionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeakyBucketRateLimiterDecisionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeakyBucketRateLimiterDecisionMultiError) AllErrors() []error { return m }

// LeakyBucketRateLimiterDecisionValidationError is the validation error
// returned by LeakyBucketRateLimiterDecision.Validate if the designated
// constraints aren't met.
type LeakyBucketRateLimiterDecisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeakyBucketRateLimiterDecisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeakyBucketRateLimiterDecisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeakyBucketRateLimiterDecisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeakyBucketRateLimiterDecisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeakyBucketRateLimiterDecisionValidationError) ErrorName() string {
	return "LeakyBucketRateLimiterDecisionValidationError"
}

// Error satisfies the builtin error interface
func (e LeakyBucketRateLimiterDecisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeakyBucketRateLimiterDecision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeakyBucketRateLimiterDecisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeakyBucketRateLimiterDecisionValidationError{}
