// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/sync/v1/concurrency_limiter.proto

package syncv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConcurrencyLimiterWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConcurrencyLimiterWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConcurrencyLimiterWrapper with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConcurrencyLimiterWrapperMultiError, or nil if none found.
func (m *ConcurrencyLimiterWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *ConcurrencyLimiterWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConcurrencyLimiterWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConcurrencyLimiterWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcurrencyLimiterWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConcurrencyLimiter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConcurrencyLimiterWrapperValidationError{
					field:  "ConcurrencyLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConcurrencyLimiterWrapperValidationError{
					field:  "ConcurrencyLimiter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConcurrencyLimiter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcurrencyLimiterWrapperValidationError{
				field:  "ConcurrencyLimiter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConcurrencyLimiterWrapperMultiError(errors)
	}

	return nil
}

// ConcurrencyLimiterWrapperMultiError is an error wrapping multiple validation
// errors returned by ConcurrencyLimiterWrapper.ValidateAll() if the
// designated constraints aren't met.
type ConcurrencyLimiterWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConcurrencyLimiterWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConcurrencyLimiterWrapperMultiError) AllErrors() []error { return m }

// ConcurrencyLimiterWrapperValidationError is the validation error returned by
// ConcurrencyLimiterWrapper.Validate if the designated constraints aren't met.
type ConcurrencyLimiterWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcurrencyLimiterWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcurrencyLimiterWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcurrencyLimiterWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcurrencyLimiterWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcurrencyLimiterWrapperValidationError) ErrorName() string {
	return "ConcurrencyLimiterWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e ConcurrencyLimiterWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcurrencyLimiterWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcurrencyLimiterWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcurrencyLimiterWrapperValidationError{}

// Validate checks the field values on ConcurrencyLimiterDecisionWrapper with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConcurrencyLimiterDecisionWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConcurrencyLimiterDecisionWrapper
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ConcurrencyLimiterDecisionWrapperMultiError, or nil if none found.
func (m *ConcurrencyLimiterDecisionWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *ConcurrencyLimiterDecisionWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCommonAttributes()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConcurrencyLimiterDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConcurrencyLimiterDecisionWrapperValidationError{
					field:  "CommonAttributes",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCommonAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcurrencyLimiterDecisionWrapperValidationError{
				field:  "CommonAttributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConcurrencyLimiterDecision()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConcurrencyLimiterDecisionWrapperValidationError{
					field:  "ConcurrencyLimiterDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConcurrencyLimiterDecisionWrapperValidationError{
					field:  "ConcurrencyLimiterDecision",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConcurrencyLimiterDecision()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConcurrencyLimiterDecisionWrapperValidationError{
				field:  "ConcurrencyLimiterDecision",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConcurrencyLimiterDecisionWrapperMultiError(errors)
	}

	return nil
}

// ConcurrencyLimiterDecisionWrapperMultiError is an error wrapping multiple
// validation errors returned by
// ConcurrencyLimiterDecisionWrapper.ValidateAll() if the designated
// constraints aren't met.
type ConcurrencyLimiterDecisionWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConcurrencyLimiterDecisionWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConcurrencyLimiterDecisionWrapperMultiError) AllErrors() []error { return m }

// ConcurrencyLimiterDecisionWrapperValidationError is the validation error
// returned by ConcurrencyLimiterDecisionWrapper.Validate if the designated
// constraints aren't met.
type ConcurrencyLimiterDecisionWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcurrencyLimiterDecisionWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcurrencyLimiterDecisionWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcurrencyLimiterDecisionWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcurrencyLimiterDecisionWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcurrencyLimiterDecisionWrapperValidationError) ErrorName() string {
	return "ConcurrencyLimiterDecisionWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e ConcurrencyLimiterDecisionWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcurrencyLimiterDecisionWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcurrencyLimiterDecisionWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcurrencyLimiterDecisionWrapperValidationError{}

// Validate checks the field values on ConcurrencyLimiterDecision with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConcurrencyLimiterDecision) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConcurrencyLimiterDecision with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConcurrencyLimiterDecisionMultiError, or nil if none found.
func (m *ConcurrencyLimiterDecision) ValidateAll() error {
	return m.validate(true)
}

func (m *ConcurrencyLimiterDecision) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxConcurrency

	// no validation rules for PassThrough

	if len(errors) > 0 {
		return ConcurrencyLimiterDecisionMultiError(errors)
	}

	return nil
}

// ConcurrencyLimiterDecisionMultiError is an error wrapping multiple
// validation errors returned by ConcurrencyLimiterDecision.ValidateAll() if
// the designated constraints aren't met.
type ConcurrencyLimiterDecisionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConcurrencyLimiterDecisionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConcurrencyLimiterDecisionMultiError) AllErrors() []error { return m }

// ConcurrencyLimiterDecisionValidationError is the validation error returned
// by ConcurrencyLimiterDecision.Validate if the designated constraints aren't met.
type ConcurrencyLimiterDecisionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConcurrencyLimiterDecisionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConcurrencyLimiterDecisionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConcurrencyLimiterDecisionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConcurrencyLimiterDecisionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConcurrencyLimiterDecisionValidationError) ErrorName() string {
	return "ConcurrencyLimiterDecisionValidationError"
}

// Error satisfies the builtin error interface
func (e ConcurrencyLimiterDecisionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConcurrencyLimiterDecision.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConcurrencyLimiterDecisionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConcurrencyLimiterDecisionValidationError{}
