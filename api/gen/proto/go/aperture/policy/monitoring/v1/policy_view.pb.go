// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: aperture/policy/monitoring/v1/policy_view.proto

package monitoringv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Components are interconnected with each other via Ports
type PortView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port name
	PortName string `protobuf:"bytes,1,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	// Types that are assignable to Value:
	//
	//	*PortView_SignalName
	//	*PortView_ConstantValue
	Value isPortView_Value `protobuf_oneof:"value"`
	// True if port is looped.
	Looped bool `protobuf:"varint,4,opt,name=looped,proto3" json:"looped,omitempty"`
	// Sub circuit id, applicable only if value is of type signal_name.
	SubCircuitId string `protobuf:"bytes,5,opt,name=sub_circuit_id,json=subCircuitId,proto3" json:"sub_circuit_id,omitempty"`
}

func (x *PortView) Reset() {
	*x = PortView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortView) ProtoMessage() {}

func (x *PortView) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortView.ProtoReflect.Descriptor instead.
func (*PortView) Descriptor() ([]byte, []int) {
	return file_aperture_policy_monitoring_v1_policy_view_proto_rawDescGZIP(), []int{0}
}

func (x *PortView) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

func (m *PortView) GetValue() isPortView_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PortView) GetSignalName() string {
	if x, ok := x.GetValue().(*PortView_SignalName); ok {
		return x.SignalName
	}
	return ""
}

func (x *PortView) GetConstantValue() float64 {
	if x, ok := x.GetValue().(*PortView_ConstantValue); ok {
		return x.ConstantValue
	}
	return 0
}

func (x *PortView) GetLooped() bool {
	if x != nil {
		return x.Looped
	}
	return false
}

func (x *PortView) GetSubCircuitId() string {
	if x != nil {
		return x.SubCircuitId
	}
	return ""
}

type isPortView_Value interface {
	isPortView_Value()
}

type PortView_SignalName struct {
	// Name of the Signal on the Port.
	SignalName string `protobuf:"bytes,2,opt,name=signal_name,json=signalName,proto3,oneof"`
}

type PortView_ConstantValue struct {
	// Constant value at an incoming Port
	ConstantValue float64 `protobuf:"fixed64,3,opt,name=constant_value,json=constantValue,proto3,oneof"`
}

func (*PortView_SignalName) isPortView_Value() {}

func (*PortView_ConstantValue) isPortView_Value() {}

type ComponentView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentId          string           `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	ComponentName        string           `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	ComponentType        string           `protobuf:"bytes,3,opt,name=component_type,json=componentType,proto3" json:"component_type,omitempty"`
	ComponentDescription string           `protobuf:"bytes,4,opt,name=component_description,json=componentDescription,proto3" json:"component_description,omitempty"`
	Component            *structpb.Struct `protobuf:"bytes,5,opt,name=component,proto3" json:"component,omitempty"`
	InPorts              []*PortView      `protobuf:"bytes,6,rep,name=in_ports,json=inPorts,proto3" json:"in_ports,omitempty"`
	OutPorts             []*PortView      `protobuf:"bytes,7,rep,name=out_ports,json=outPorts,proto3" json:"out_ports,omitempty"`
}

func (x *ComponentView) Reset() {
	*x = ComponentView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComponentView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentView) ProtoMessage() {}

func (x *ComponentView) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentView.ProtoReflect.Descriptor instead.
func (*ComponentView) Descriptor() ([]byte, []int) {
	return file_aperture_policy_monitoring_v1_policy_view_proto_rawDescGZIP(), []int{1}
}

func (x *ComponentView) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *ComponentView) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *ComponentView) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *ComponentView) GetComponentDescription() string {
	if x != nil {
		return x.ComponentDescription
	}
	return ""
}

func (x *ComponentView) GetComponent() *structpb.Struct {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *ComponentView) GetInPorts() []*PortView {
	if x != nil {
		return x.InPorts
	}
	return nil
}

func (x *ComponentView) GetOutPorts() []*PortView {
	if x != nil {
		return x.OutPorts
	}
	return nil
}

// SourceTarget describes a link attachment to a component.
type SourceTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComponentId string `protobuf:"bytes,1,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	PortName    string `protobuf:"bytes,2,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
}

func (x *SourceTarget) Reset() {
	*x = SourceTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceTarget) ProtoMessage() {}

func (x *SourceTarget) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceTarget.ProtoReflect.Descriptor instead.
func (*SourceTarget) Descriptor() ([]byte, []int) {
	return file_aperture_policy_monitoring_v1_policy_view_proto_rawDescGZIP(), []int{2}
}

func (x *SourceTarget) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *SourceTarget) GetPortName() string {
	if x != nil {
		return x.PortName
	}
	return ""
}

// Link is a connection between Components.
type Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *SourceTarget `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Target *SourceTarget `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are assignable to Value:
	//
	//	*Link_SignalName
	//	*Link_ConstantValue
	Value        isLink_Value `protobuf_oneof:"value"`
	Looped       string       `protobuf:"bytes,5,opt,name=looped,proto3" json:"looped,omitempty"`
	SubCircuitId string       `protobuf:"bytes,6,opt,name=sub_circuit_id,json=subCircuitId,proto3" json:"sub_circuit_id,omitempty"`
}

func (x *Link) Reset() {
	*x = Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_aperture_policy_monitoring_v1_policy_view_proto_rawDescGZIP(), []int{3}
}

func (x *Link) GetSource() *SourceTarget {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Link) GetTarget() *SourceTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (m *Link) GetValue() isLink_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Link) GetSignalName() string {
	if x, ok := x.GetValue().(*Link_SignalName); ok {
		return x.SignalName
	}
	return ""
}

func (x *Link) GetConstantValue() float64 {
	if x, ok := x.GetValue().(*Link_ConstantValue); ok {
		return x.ConstantValue
	}
	return 0
}

func (x *Link) GetLooped() string {
	if x != nil {
		return x.Looped
	}
	return ""
}

func (x *Link) GetSubCircuitId() string {
	if x != nil {
		return x.SubCircuitId
	}
	return ""
}

type isLink_Value interface {
	isLink_Value()
}

type Link_SignalName struct {
	// Name of the Signal on the Port.
	SignalName string `protobuf:"bytes,3,opt,name=signal_name,json=signalName,proto3,oneof"`
}

type Link_ConstantValue struct {
	// Constant value at an incoming Port
	ConstantValue float64 `protobuf:"fixed64,4,opt,name=constant_value,json=constantValue,proto3,oneof"`
}

func (*Link_SignalName) isLink_Value() {}

func (*Link_ConstantValue) isLink_Value() {}

type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalComponents []*ComponentView `protobuf:"bytes,1,rep,name=internal_components,json=internalComponents,proto3" json:"internal_components,omitempty"`
	ExternalComponents []*ComponentView `protobuf:"bytes,2,rep,name=external_components,json=externalComponents,proto3" json:"external_components,omitempty"`
	InternalLinks      []*Link          `protobuf:"bytes,3,rep,name=internal_links,json=internalLinks,proto3" json:"internal_links,omitempty"`
	ExternalLinks      []*Link          `protobuf:"bytes,4,rep,name=external_links,json=externalLinks,proto3" json:"external_links,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_aperture_policy_monitoring_v1_policy_view_proto_rawDescGZIP(), []int{4}
}

func (x *Graph) GetInternalComponents() []*ComponentView {
	if x != nil {
		return x.InternalComponents
	}
	return nil
}

func (x *Graph) GetExternalComponents() []*ComponentView {
	if x != nil {
		return x.ExternalComponents
	}
	return nil
}

func (x *Graph) GetInternalLinks() []*Link {
	if x != nil {
		return x.InternalLinks
	}
	return nil
}

func (x *Graph) GetExternalLinks() []*Link {
	if x != nil {
		return x.ExternalLinks
	}
	return nil
}

type CircuitView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tree *Tree `protobuf:"bytes,1,opt,name=tree,proto3" json:"tree,omitempty"`
}

func (x *CircuitView) Reset() {
	*x = CircuitView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitView) ProtoMessage() {}

func (x *CircuitView) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitView.ProtoReflect.Descriptor instead.
func (*CircuitView) Descriptor() ([]byte, []int) {
	return file_aperture_policy_monitoring_v1_policy_view_proto_rawDescGZIP(), []int{5}
}

func (x *CircuitView) GetTree() *Tree {
	if x != nil {
		return x.Tree
	}
	return nil
}

type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      *ComponentView   `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Graph     *Graph           `protobuf:"bytes,2,opt,name=graph,proto3" json:"graph,omitempty"`
	Children  []*Tree          `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`
	Actuators []*ComponentView `protobuf:"bytes,4,rep,name=actuators,proto3" json:"actuators,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_aperture_policy_monitoring_v1_policy_view_proto_rawDescGZIP(), []int{6}
}

func (x *Tree) GetNode() *ComponentView {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Tree) GetGraph() *Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *Tree) GetChildren() []*Tree {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Tree) GetActuators() []*ComponentView {
	if x != nil {
		return x.Actuators
	}
	return nil
}

var File_aperture_policy_monitoring_v1_policy_view_proto protoreflect.FileDescriptor

var file_aperture_policy_monitoring_v1_policy_view_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1d, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba,
	0x01, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33,
	0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x69, 0x6e,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x69, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x09, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa3, 0x02, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x43, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x70, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x5f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x05, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x12, 0x5d, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x12,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x4a,
	0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x0d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x46, 0x0a, 0x0b, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x72, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x04, 0x74, 0x72,
	0x65, 0x65, 0x22, 0x91, 0x02, 0x0a, 0x04, 0x54, 0x72, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6e,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a,
	0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3f, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x4a, 0x0a, 0x09, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x65, 0x77, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x42, 0xbd, 0x02, 0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2e, 0x66,
	0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x2e, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x42, 0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x5c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x2f, 0x76, 0x31, 0x3b, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x50, 0x4d, 0xaa, 0x02, 0x1d, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1d, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x29, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x5c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x3a, 0x3a, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_policy_monitoring_v1_policy_view_proto_rawDescOnce sync.Once
	file_aperture_policy_monitoring_v1_policy_view_proto_rawDescData = file_aperture_policy_monitoring_v1_policy_view_proto_rawDesc
)

func file_aperture_policy_monitoring_v1_policy_view_proto_rawDescGZIP() []byte {
	file_aperture_policy_monitoring_v1_policy_view_proto_rawDescOnce.Do(func() {
		file_aperture_policy_monitoring_v1_policy_view_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_policy_monitoring_v1_policy_view_proto_rawDescData)
	})
	return file_aperture_policy_monitoring_v1_policy_view_proto_rawDescData
}

var file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_aperture_policy_monitoring_v1_policy_view_proto_goTypes = []interface{}{
	(*PortView)(nil),        // 0: aperture.policy.monitoring.v1.PortView
	(*ComponentView)(nil),   // 1: aperture.policy.monitoring.v1.ComponentView
	(*SourceTarget)(nil),    // 2: aperture.policy.monitoring.v1.SourceTarget
	(*Link)(nil),            // 3: aperture.policy.monitoring.v1.Link
	(*Graph)(nil),           // 4: aperture.policy.monitoring.v1.Graph
	(*CircuitView)(nil),     // 5: aperture.policy.monitoring.v1.CircuitView
	(*Tree)(nil),            // 6: aperture.policy.monitoring.v1.Tree
	(*structpb.Struct)(nil), // 7: google.protobuf.Struct
}
var file_aperture_policy_monitoring_v1_policy_view_proto_depIdxs = []int32{
	7,  // 0: aperture.policy.monitoring.v1.ComponentView.component:type_name -> google.protobuf.Struct
	0,  // 1: aperture.policy.monitoring.v1.ComponentView.in_ports:type_name -> aperture.policy.monitoring.v1.PortView
	0,  // 2: aperture.policy.monitoring.v1.ComponentView.out_ports:type_name -> aperture.policy.monitoring.v1.PortView
	2,  // 3: aperture.policy.monitoring.v1.Link.source:type_name -> aperture.policy.monitoring.v1.SourceTarget
	2,  // 4: aperture.policy.monitoring.v1.Link.target:type_name -> aperture.policy.monitoring.v1.SourceTarget
	1,  // 5: aperture.policy.monitoring.v1.Graph.internal_components:type_name -> aperture.policy.monitoring.v1.ComponentView
	1,  // 6: aperture.policy.monitoring.v1.Graph.external_components:type_name -> aperture.policy.monitoring.v1.ComponentView
	3,  // 7: aperture.policy.monitoring.v1.Graph.internal_links:type_name -> aperture.policy.monitoring.v1.Link
	3,  // 8: aperture.policy.monitoring.v1.Graph.external_links:type_name -> aperture.policy.monitoring.v1.Link
	6,  // 9: aperture.policy.monitoring.v1.CircuitView.tree:type_name -> aperture.policy.monitoring.v1.Tree
	1,  // 10: aperture.policy.monitoring.v1.Tree.node:type_name -> aperture.policy.monitoring.v1.ComponentView
	4,  // 11: aperture.policy.monitoring.v1.Tree.graph:type_name -> aperture.policy.monitoring.v1.Graph
	6,  // 12: aperture.policy.monitoring.v1.Tree.children:type_name -> aperture.policy.monitoring.v1.Tree
	1,  // 13: aperture.policy.monitoring.v1.Tree.actuators:type_name -> aperture.policy.monitoring.v1.ComponentView
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_aperture_policy_monitoring_v1_policy_view_proto_init() }
func file_aperture_policy_monitoring_v1_policy_view_proto_init() {
	if File_aperture_policy_monitoring_v1_policy_view_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComponentView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PortView_SignalName)(nil),
		(*PortView_ConstantValue)(nil),
	}
	file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Link_SignalName)(nil),
		(*Link_ConstantValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_policy_monitoring_v1_policy_view_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aperture_policy_monitoring_v1_policy_view_proto_goTypes,
		DependencyIndexes: file_aperture_policy_monitoring_v1_policy_view_proto_depIdxs,
		MessageInfos:      file_aperture_policy_monitoring_v1_policy_view_proto_msgTypes,
	}.Build()
	File_aperture_policy_monitoring_v1_policy_view_proto = out.File
	file_aperture_policy_monitoring_v1_policy_view_proto_rawDesc = nil
	file_aperture_policy_monitoring_v1_policy_view_proto_goTypes = nil
	file_aperture_policy_monitoring_v1_policy_view_proto_depIdxs = nil
}
