// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/private/v1/autoscale.proto

package privatev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PodScaleActuator with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PodScaleActuator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScaleActuator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScaleActuatorMultiError, or nil if none found.
func (m *PodScaleActuator) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScaleActuator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleActuatorValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleActuatorValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleActuatorValidationError{
				field:  "InPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PodScalerComponentId

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return PodScaleActuatorMultiError(errors)
	}

	return nil
}

// PodScaleActuatorMultiError is an error wrapping multiple validation errors
// returned by PodScaleActuator.ValidateAll() if the designated constraints
// aren't met.
type PodScaleActuatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScaleActuatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScaleActuatorMultiError) AllErrors() []error { return m }

// PodScaleActuatorValidationError is the validation error returned by
// PodScaleActuator.Validate if the designated constraints aren't met.
type PodScaleActuatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScaleActuatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScaleActuatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScaleActuatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScaleActuatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScaleActuatorValidationError) ErrorName() string { return "PodScaleActuatorValidationError" }

// Error satisfies the builtin error interface
func (e PodScaleActuatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScaleActuator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScaleActuatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScaleActuatorValidationError{}

// Validate checks the field values on PodScaleReporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PodScaleReporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScaleReporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScaleReporterMultiError, or nil if none found.
func (m *PodScaleReporter) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScaleReporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOutPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleReporterValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleReporterValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleReporterValidationError{
				field:  "OutPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PodScalerComponentId

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return PodScaleReporterMultiError(errors)
	}

	return nil
}

// PodScaleReporterMultiError is an error wrapping multiple validation errors
// returned by PodScaleReporter.ValidateAll() if the designated constraints
// aren't met.
type PodScaleReporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScaleReporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScaleReporterMultiError) AllErrors() []error { return m }

// PodScaleReporterValidationError is the validation error returned by
// PodScaleReporter.Validate if the designated constraints aren't met.
type PodScaleReporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScaleReporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScaleReporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScaleReporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScaleReporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScaleReporterValidationError) ErrorName() string { return "PodScaleReporterValidationError" }

// Error satisfies the builtin error interface
func (e PodScaleReporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScaleReporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScaleReporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScaleReporterValidationError{}

// Validate checks the field values on PodScaleActuator_Ins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PodScaleActuator_Ins) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScaleActuator_Ins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScaleActuator_InsMultiError, or nil if none found.
func (m *PodScaleActuator_Ins) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScaleActuator_Ins) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReplicas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleActuator_InsValidationError{
					field:  "Replicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleActuator_InsValidationError{
					field:  "Replicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleActuator_InsValidationError{
				field:  "Replicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PodScaleActuator_InsMultiError(errors)
	}

	return nil
}

// PodScaleActuator_InsMultiError is an error wrapping multiple validation
// errors returned by PodScaleActuator_Ins.ValidateAll() if the designated
// constraints aren't met.
type PodScaleActuator_InsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScaleActuator_InsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScaleActuator_InsMultiError) AllErrors() []error { return m }

// PodScaleActuator_InsValidationError is the validation error returned by
// PodScaleActuator_Ins.Validate if the designated constraints aren't met.
type PodScaleActuator_InsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScaleActuator_InsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScaleActuator_InsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScaleActuator_InsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScaleActuator_InsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScaleActuator_InsValidationError) ErrorName() string {
	return "PodScaleActuator_InsValidationError"
}

// Error satisfies the builtin error interface
func (e PodScaleActuator_InsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScaleActuator_Ins.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScaleActuator_InsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScaleActuator_InsValidationError{}

// Validate checks the field values on PodScaleReporter_Outs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PodScaleReporter_Outs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScaleReporter_Outs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScaleReporter_OutsMultiError, or nil if none found.
func (m *PodScaleReporter_Outs) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScaleReporter_Outs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActualReplicas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleReporter_OutsValidationError{
					field:  "ActualReplicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleReporter_OutsValidationError{
					field:  "ActualReplicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActualReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleReporter_OutsValidationError{
				field:  "ActualReplicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfiguredReplicas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleReporter_OutsValidationError{
					field:  "ConfiguredReplicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleReporter_OutsValidationError{
					field:  "ConfiguredReplicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguredReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleReporter_OutsValidationError{
				field:  "ConfiguredReplicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PodScaleReporter_OutsMultiError(errors)
	}

	return nil
}

// PodScaleReporter_OutsMultiError is an error wrapping multiple validation
// errors returned by PodScaleReporter_Outs.ValidateAll() if the designated
// constraints aren't met.
type PodScaleReporter_OutsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScaleReporter_OutsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScaleReporter_OutsMultiError) AllErrors() []error { return m }

// PodScaleReporter_OutsValidationError is the validation error returned by
// PodScaleReporter_Outs.Validate if the designated constraints aren't met.
type PodScaleReporter_OutsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScaleReporter_OutsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScaleReporter_OutsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScaleReporter_OutsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScaleReporter_OutsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScaleReporter_OutsValidationError) ErrorName() string {
	return "PodScaleReporter_OutsValidationError"
}

// Error satisfies the builtin error interface
func (e PodScaleReporter_OutsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScaleReporter_Outs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScaleReporter_OutsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScaleReporter_OutsValidationError{}
