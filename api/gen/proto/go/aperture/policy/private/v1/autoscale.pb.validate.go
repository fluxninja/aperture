// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/policy/private/v1/autoscale.proto

package privatev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PodScaleActuator with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PodScaleActuator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScaleActuator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScaleActuatorMultiError, or nil if none found.
func (m *PodScaleActuator) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScaleActuator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleActuatorValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleActuatorValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleActuatorValidationError{
				field:  "InPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DryRun

	// no validation rules for DryRunConfigKey

	// no validation rules for PodScalerComponentId

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return PodScaleActuatorMultiError(errors)
	}

	return nil
}

// PodScaleActuatorMultiError is an error wrapping multiple validation errors
// returned by PodScaleActuator.ValidateAll() if the designated constraints
// aren't met.
type PodScaleActuatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScaleActuatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScaleActuatorMultiError) AllErrors() []error { return m }

// PodScaleActuatorValidationError is the validation error returned by
// PodScaleActuator.Validate if the designated constraints aren't met.
type PodScaleActuatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScaleActuatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScaleActuatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScaleActuatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScaleActuatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScaleActuatorValidationError) ErrorName() string { return "PodScaleActuatorValidationError" }

// Error satisfies the builtin error interface
func (e PodScaleActuatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScaleActuator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScaleActuatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScaleActuatorValidationError{}

// Validate checks the field values on PodScaleReporter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PodScaleReporter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScaleReporter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScaleReporterMultiError, or nil if none found.
func (m *PodScaleReporter) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScaleReporter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOutPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleReporterValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleReporterValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleReporterValidationError{
				field:  "OutPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PodScalerComponentId

	// no validation rules for AgentGroup

	if len(errors) > 0 {
		return PodScaleReporterMultiError(errors)
	}

	return nil
}

// PodScaleReporterMultiError is an error wrapping multiple validation errors
// returned by PodScaleReporter.ValidateAll() if the designated constraints
// aren't met.
type PodScaleReporterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScaleReporterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScaleReporterMultiError) AllErrors() []error { return m }

// PodScaleReporterValidationError is the validation error returned by
// PodScaleReporter.Validate if the designated constraints aren't met.
type PodScaleReporterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScaleReporterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScaleReporterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScaleReporterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScaleReporterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScaleReporterValidationError) ErrorName() string { return "PodScaleReporterValidationError" }

// Error satisfies the builtin error interface
func (e PodScaleReporterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScaleReporter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScaleReporterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScaleReporterValidationError{}

// Validate checks the field values on AutoScaleGradient with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AutoScaleGradient) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoScaleGradient with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoScaleGradientMultiError, or nil if none found.
func (m *AutoScaleGradient) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScaleGradient) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleGradientValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleGradientValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleGradientValidationError{
				field:  "InPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleGradientValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleGradientValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleGradientValidationError{
				field:  "OutPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGradientController()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleGradientValidationError{
					field:  "GradientController",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleGradientValidationError{
					field:  "GradientController",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGradientController()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleGradientValidationError{
				field:  "GradientController",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScaleGradientMultiError(errors)
	}

	return nil
}

// AutoScaleGradientMultiError is an error wrapping multiple validation errors
// returned by AutoScaleGradient.ValidateAll() if the designated constraints
// aren't met.
type AutoScaleGradientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScaleGradientMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScaleGradientMultiError) AllErrors() []error { return m }

// AutoScaleGradientValidationError is the validation error returned by
// AutoScaleGradient.Validate if the designated constraints aren't met.
type AutoScaleGradientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScaleGradientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScaleGradientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScaleGradientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScaleGradientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScaleGradientValidationError) ErrorName() string {
	return "AutoScaleGradientValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScaleGradientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScaleGradient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScaleGradientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScaleGradientValidationError{}

// Validate checks the field values on AutoScalePeriodic with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AutoScalePeriodic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoScalePeriodic with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoScalePeriodicMultiError, or nil if none found.
func (m *AutoScalePeriodic) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScalePeriodic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScalePeriodicValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScalePeriodicValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScalePeriodicValidationError{
				field:  "InPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScalePeriodicValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScalePeriodicValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScalePeriodicValidationError{
				field:  "OutPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeriodicDecrease()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScalePeriodicValidationError{
					field:  "PeriodicDecrease",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScalePeriodicValidationError{
					field:  "PeriodicDecrease",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeriodicDecrease()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScalePeriodicValidationError{
				field:  "PeriodicDecrease",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScalePeriodicMultiError(errors)
	}

	return nil
}

// AutoScalePeriodicMultiError is an error wrapping multiple validation errors
// returned by AutoScalePeriodic.ValidateAll() if the designated constraints
// aren't met.
type AutoScalePeriodicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScalePeriodicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScalePeriodicMultiError) AllErrors() []error { return m }

// AutoScalePeriodicValidationError is the validation error returned by
// AutoScalePeriodic.Validate if the designated constraints aren't met.
type AutoScalePeriodicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScalePeriodicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScalePeriodicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScalePeriodicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScalePeriodicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScalePeriodicValidationError) ErrorName() string {
	return "AutoScalePeriodicValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScalePeriodicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScalePeriodic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScalePeriodicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScalePeriodicValidationError{}

// Validate checks the field values on AutoScaleControllerOutputProcessor with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AutoScaleControllerOutputProcessor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoScaleControllerOutputProcessor
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AutoScaleControllerOutputProcessorMultiError, or nil if none found.
func (m *AutoScaleControllerOutputProcessor) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScaleControllerOutputProcessor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleControllerOutputProcessorValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleControllerOutputProcessorValidationError{
					field:  "InPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleControllerOutputProcessorValidationError{
				field:  "InPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOutPorts()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleControllerOutputProcessorValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleControllerOutputProcessorValidationError{
					field:  "OutPorts",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOutPorts()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleControllerOutputProcessorValidationError{
				field:  "OutPorts",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScaleControllerOutputProcessorMultiError(errors)
	}

	return nil
}

// AutoScaleControllerOutputProcessorMultiError is an error wrapping multiple
// validation errors returned by
// AutoScaleControllerOutputProcessor.ValidateAll() if the designated
// constraints aren't met.
type AutoScaleControllerOutputProcessorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScaleControllerOutputProcessorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScaleControllerOutputProcessorMultiError) AllErrors() []error { return m }

// AutoScaleControllerOutputProcessorValidationError is the validation error
// returned by AutoScaleControllerOutputProcessor.Validate if the designated
// constraints aren't met.
type AutoScaleControllerOutputProcessorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScaleControllerOutputProcessorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScaleControllerOutputProcessorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScaleControllerOutputProcessorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScaleControllerOutputProcessorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScaleControllerOutputProcessorValidationError) ErrorName() string {
	return "AutoScaleControllerOutputProcessorValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScaleControllerOutputProcessorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScaleControllerOutputProcessor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScaleControllerOutputProcessorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScaleControllerOutputProcessorValidationError{}

// Validate checks the field values on PodScaleActuator_Ins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PodScaleActuator_Ins) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScaleActuator_Ins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScaleActuator_InsMultiError, or nil if none found.
func (m *PodScaleActuator_Ins) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScaleActuator_Ins) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetReplicas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleActuator_InsValidationError{
					field:  "Replicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleActuator_InsValidationError{
					field:  "Replicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleActuator_InsValidationError{
				field:  "Replicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PodScaleActuator_InsMultiError(errors)
	}

	return nil
}

// PodScaleActuator_InsMultiError is an error wrapping multiple validation
// errors returned by PodScaleActuator_Ins.ValidateAll() if the designated
// constraints aren't met.
type PodScaleActuator_InsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScaleActuator_InsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScaleActuator_InsMultiError) AllErrors() []error { return m }

// PodScaleActuator_InsValidationError is the validation error returned by
// PodScaleActuator_Ins.Validate if the designated constraints aren't met.
type PodScaleActuator_InsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScaleActuator_InsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScaleActuator_InsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScaleActuator_InsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScaleActuator_InsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScaleActuator_InsValidationError) ErrorName() string {
	return "PodScaleActuator_InsValidationError"
}

// Error satisfies the builtin error interface
func (e PodScaleActuator_InsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScaleActuator_Ins.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScaleActuator_InsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScaleActuator_InsValidationError{}

// Validate checks the field values on PodScaleReporter_Outs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PodScaleReporter_Outs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PodScaleReporter_Outs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PodScaleReporter_OutsMultiError, or nil if none found.
func (m *PodScaleReporter_Outs) ValidateAll() error {
	return m.validate(true)
}

func (m *PodScaleReporter_Outs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActualReplicas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleReporter_OutsValidationError{
					field:  "ActualReplicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleReporter_OutsValidationError{
					field:  "ActualReplicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActualReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleReporter_OutsValidationError{
				field:  "ActualReplicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfiguredReplicas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PodScaleReporter_OutsValidationError{
					field:  "ConfiguredReplicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PodScaleReporter_OutsValidationError{
					field:  "ConfiguredReplicas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfiguredReplicas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PodScaleReporter_OutsValidationError{
				field:  "ConfiguredReplicas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PodScaleReporter_OutsMultiError(errors)
	}

	return nil
}

// PodScaleReporter_OutsMultiError is an error wrapping multiple validation
// errors returned by PodScaleReporter_Outs.ValidateAll() if the designated
// constraints aren't met.
type PodScaleReporter_OutsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PodScaleReporter_OutsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PodScaleReporter_OutsMultiError) AllErrors() []error { return m }

// PodScaleReporter_OutsValidationError is the validation error returned by
// PodScaleReporter_Outs.Validate if the designated constraints aren't met.
type PodScaleReporter_OutsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PodScaleReporter_OutsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PodScaleReporter_OutsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PodScaleReporter_OutsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PodScaleReporter_OutsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PodScaleReporter_OutsValidationError) ErrorName() string {
	return "PodScaleReporter_OutsValidationError"
}

// Error satisfies the builtin error interface
func (e PodScaleReporter_OutsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPodScaleReporter_Outs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PodScaleReporter_OutsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PodScaleReporter_OutsValidationError{}

// Validate checks the field values on AutoScaleGradient_Ins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoScaleGradient_Ins) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoScaleGradient_Ins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoScaleGradient_InsMultiError, or nil if none found.
func (m *AutoScaleGradient_Ins) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScaleGradient_Ins) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSignal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleGradient_InsValidationError{
					field:  "Signal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleGradient_InsValidationError{
					field:  "Signal",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleGradient_InsValidationError{
				field:  "Signal",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetpoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleGradient_InsValidationError{
					field:  "Setpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleGradient_InsValidationError{
					field:  "Setpoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetpoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleGradient_InsValidationError{
				field:  "Setpoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetActualScale()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleGradient_InsValidationError{
					field:  "ActualScale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleGradient_InsValidationError{
					field:  "ActualScale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActualScale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleGradient_InsValidationError{
				field:  "ActualScale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScaleGradient_InsMultiError(errors)
	}

	return nil
}

// AutoScaleGradient_InsMultiError is an error wrapping multiple validation
// errors returned by AutoScaleGradient_Ins.ValidateAll() if the designated
// constraints aren't met.
type AutoScaleGradient_InsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScaleGradient_InsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScaleGradient_InsMultiError) AllErrors() []error { return m }

// AutoScaleGradient_InsValidationError is the validation error returned by
// AutoScaleGradient_Ins.Validate if the designated constraints aren't met.
type AutoScaleGradient_InsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScaleGradient_InsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScaleGradient_InsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScaleGradient_InsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScaleGradient_InsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScaleGradient_InsValidationError) ErrorName() string {
	return "AutoScaleGradient_InsValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScaleGradient_InsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScaleGradient_Ins.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScaleGradient_InsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScaleGradient_InsValidationError{}

// Validate checks the field values on AutoScaleGradient_Outs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoScaleGradient_Outs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoScaleGradient_Outs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoScaleGradient_OutsMultiError, or nil if none found.
func (m *AutoScaleGradient_Outs) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScaleGradient_Outs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScale()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleGradient_OutsValidationError{
					field:  "Scale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleGradient_OutsValidationError{
					field:  "Scale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleGradient_OutsValidationError{
				field:  "Scale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScaleGradient_OutsMultiError(errors)
	}

	return nil
}

// AutoScaleGradient_OutsMultiError is an error wrapping multiple validation
// errors returned by AutoScaleGradient_Outs.ValidateAll() if the designated
// constraints aren't met.
type AutoScaleGradient_OutsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScaleGradient_OutsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScaleGradient_OutsMultiError) AllErrors() []error { return m }

// AutoScaleGradient_OutsValidationError is the validation error returned by
// AutoScaleGradient_Outs.Validate if the designated constraints aren't met.
type AutoScaleGradient_OutsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScaleGradient_OutsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScaleGradient_OutsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScaleGradient_OutsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScaleGradient_OutsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScaleGradient_OutsValidationError) ErrorName() string {
	return "AutoScaleGradient_OutsValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScaleGradient_OutsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScaleGradient_Outs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScaleGradient_OutsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScaleGradient_OutsValidationError{}

// Validate checks the field values on AutoScalePeriodic_Ins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoScalePeriodic_Ins) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoScalePeriodic_Ins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoScalePeriodic_InsMultiError, or nil if none found.
func (m *AutoScalePeriodic_Ins) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScalePeriodic_Ins) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetActualScale()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScalePeriodic_InsValidationError{
					field:  "ActualScale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScalePeriodic_InsValidationError{
					field:  "ActualScale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetActualScale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScalePeriodic_InsValidationError{
				field:  "ActualScale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScalePeriodic_InsMultiError(errors)
	}

	return nil
}

// AutoScalePeriodic_InsMultiError is an error wrapping multiple validation
// errors returned by AutoScalePeriodic_Ins.ValidateAll() if the designated
// constraints aren't met.
type AutoScalePeriodic_InsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScalePeriodic_InsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScalePeriodic_InsMultiError) AllErrors() []error { return m }

// AutoScalePeriodic_InsValidationError is the validation error returned by
// AutoScalePeriodic_Ins.Validate if the designated constraints aren't met.
type AutoScalePeriodic_InsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScalePeriodic_InsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScalePeriodic_InsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScalePeriodic_InsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScalePeriodic_InsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScalePeriodic_InsValidationError) ErrorName() string {
	return "AutoScalePeriodic_InsValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScalePeriodic_InsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScalePeriodic_Ins.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScalePeriodic_InsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScalePeriodic_InsValidationError{}

// Validate checks the field values on AutoScalePeriodic_Outs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AutoScalePeriodic_Outs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AutoScalePeriodic_Outs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AutoScalePeriodic_OutsMultiError, or nil if none found.
func (m *AutoScalePeriodic_Outs) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScalePeriodic_Outs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScale()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScalePeriodic_OutsValidationError{
					field:  "Scale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScalePeriodic_OutsValidationError{
					field:  "Scale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScalePeriodic_OutsValidationError{
				field:  "Scale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScalePeriodic_OutsMultiError(errors)
	}

	return nil
}

// AutoScalePeriodic_OutsMultiError is an error wrapping multiple validation
// errors returned by AutoScalePeriodic_Outs.ValidateAll() if the designated
// constraints aren't met.
type AutoScalePeriodic_OutsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScalePeriodic_OutsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScalePeriodic_OutsMultiError) AllErrors() []error { return m }

// AutoScalePeriodic_OutsValidationError is the validation error returned by
// AutoScalePeriodic_Outs.Validate if the designated constraints aren't met.
type AutoScalePeriodic_OutsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScalePeriodic_OutsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScalePeriodic_OutsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScalePeriodic_OutsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScalePeriodic_OutsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScalePeriodic_OutsValidationError) ErrorName() string {
	return "AutoScalePeriodic_OutsValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScalePeriodic_OutsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScalePeriodic_Outs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScalePeriodic_OutsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScalePeriodic_OutsValidationError{}

// Validate checks the field values on AutoScaleControllerOutputProcessor_Ins
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AutoScaleControllerOutputProcessor_Ins) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AutoScaleControllerOutputProcessor_Ins with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AutoScaleControllerOutputProcessor_InsMultiError, or nil if none found.
func (m *AutoScaleControllerOutputProcessor_Ins) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScaleControllerOutputProcessor_Ins) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetScale()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleControllerOutputProcessor_InsValidationError{
					field:  "Scale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleControllerOutputProcessor_InsValidationError{
					field:  "Scale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleControllerOutputProcessor_InsValidationError{
				field:  "Scale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScaleControllerOutputProcessor_InsMultiError(errors)
	}

	return nil
}

// AutoScaleControllerOutputProcessor_InsMultiError is an error wrapping
// multiple validation errors returned by
// AutoScaleControllerOutputProcessor_Ins.ValidateAll() if the designated
// constraints aren't met.
type AutoScaleControllerOutputProcessor_InsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScaleControllerOutputProcessor_InsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScaleControllerOutputProcessor_InsMultiError) AllErrors() []error { return m }

// AutoScaleControllerOutputProcessor_InsValidationError is the validation
// error returned by AutoScaleControllerOutputProcessor_Ins.Validate if the
// designated constraints aren't met.
type AutoScaleControllerOutputProcessor_InsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScaleControllerOutputProcessor_InsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScaleControllerOutputProcessor_InsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScaleControllerOutputProcessor_InsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScaleControllerOutputProcessor_InsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScaleControllerOutputProcessor_InsValidationError) ErrorName() string {
	return "AutoScaleControllerOutputProcessor_InsValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScaleControllerOutputProcessor_InsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScaleControllerOutputProcessor_Ins.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScaleControllerOutputProcessor_InsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScaleControllerOutputProcessor_InsValidationError{}

// Validate checks the field values on AutoScaleControllerOutputProcessor_Outs
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AutoScaleControllerOutputProcessor_Outs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AutoScaleControllerOutputProcessor_Outs with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AutoScaleControllerOutputProcessor_OutsMultiError, or nil if none found.
func (m *AutoScaleControllerOutputProcessor_Outs) ValidateAll() error {
	return m.validate(true)
}

func (m *AutoScaleControllerOutputProcessor_Outs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProposedScale()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AutoScaleControllerOutputProcessor_OutsValidationError{
					field:  "ProposedScale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AutoScaleControllerOutputProcessor_OutsValidationError{
					field:  "ProposedScale",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProposedScale()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AutoScaleControllerOutputProcessor_OutsValidationError{
				field:  "ProposedScale",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AutoScaleControllerOutputProcessor_OutsMultiError(errors)
	}

	return nil
}

// AutoScaleControllerOutputProcessor_OutsMultiError is an error wrapping
// multiple validation errors returned by
// AutoScaleControllerOutputProcessor_Outs.ValidateAll() if the designated
// constraints aren't met.
type AutoScaleControllerOutputProcessor_OutsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AutoScaleControllerOutputProcessor_OutsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AutoScaleControllerOutputProcessor_OutsMultiError) AllErrors() []error { return m }

// AutoScaleControllerOutputProcessor_OutsValidationError is the validation
// error returned by AutoScaleControllerOutputProcessor_Outs.Validate if the
// designated constraints aren't met.
type AutoScaleControllerOutputProcessor_OutsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AutoScaleControllerOutputProcessor_OutsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AutoScaleControllerOutputProcessor_OutsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AutoScaleControllerOutputProcessor_OutsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AutoScaleControllerOutputProcessor_OutsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AutoScaleControllerOutputProcessor_OutsValidationError) ErrorName() string {
	return "AutoScaleControllerOutputProcessor_OutsValidationError"
}

// Error satisfies the builtin error interface
func (e AutoScaleControllerOutputProcessor_OutsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAutoScaleControllerOutputProcessor_Outs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AutoScaleControllerOutputProcessor_OutsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AutoScaleControllerOutputProcessor_OutsValidationError{}
