// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aperture/flowcontrol/checkhttp/v1/checkhttp.proto

package checkhttpv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlowControlServiceHTTP_CheckHTTP_FullMethodName = "/aperture.flowcontrol.checkhttp.v1.FlowControlServiceHTTP/CheckHTTP"
)

// FlowControlServiceHTTPClient is the client API for FlowControlServiceHTTP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowControlServiceHTTPClient interface {
	CheckHTTP(ctx context.Context, in *CheckHTTPRequest, opts ...grpc.CallOption) (*CheckHTTPResponse, error)
}

type flowControlServiceHTTPClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowControlServiceHTTPClient(cc grpc.ClientConnInterface) FlowControlServiceHTTPClient {
	return &flowControlServiceHTTPClient{cc}
}

func (c *flowControlServiceHTTPClient) CheckHTTP(ctx context.Context, in *CheckHTTPRequest, opts ...grpc.CallOption) (*CheckHTTPResponse, error) {
	out := new(CheckHTTPResponse)
	err := c.cc.Invoke(ctx, FlowControlServiceHTTP_CheckHTTP_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlowControlServiceHTTPServer is the server API for FlowControlServiceHTTP service.
// All implementations should embed UnimplementedFlowControlServiceHTTPServer
// for forward compatibility
type FlowControlServiceHTTPServer interface {
	CheckHTTP(context.Context, *CheckHTTPRequest) (*CheckHTTPResponse, error)
}

// UnimplementedFlowControlServiceHTTPServer should be embedded to have forward compatible implementations.
type UnimplementedFlowControlServiceHTTPServer struct {
}

func (UnimplementedFlowControlServiceHTTPServer) CheckHTTP(context.Context, *CheckHTTPRequest) (*CheckHTTPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHTTP not implemented")
}

// UnsafeFlowControlServiceHTTPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowControlServiceHTTPServer will
// result in compilation errors.
type UnsafeFlowControlServiceHTTPServer interface {
	mustEmbedUnimplementedFlowControlServiceHTTPServer()
}

func RegisterFlowControlServiceHTTPServer(s grpc.ServiceRegistrar, srv FlowControlServiceHTTPServer) {
	s.RegisterService(&FlowControlServiceHTTP_ServiceDesc, srv)
}

func _FlowControlServiceHTTP_CheckHTTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHTTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlowControlServiceHTTPServer).CheckHTTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlowControlServiceHTTP_CheckHTTP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlowControlServiceHTTPServer).CheckHTTP(ctx, req.(*CheckHTTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlowControlServiceHTTP_ServiceDesc is the grpc.ServiceDesc for FlowControlServiceHTTP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowControlServiceHTTP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aperture.flowcontrol.checkhttp.v1.FlowControlServiceHTTP",
	HandlerType: (*FlowControlServiceHTTPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHTTP",
			Handler:    _FlowControlServiceHTTP_CheckHTTP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aperture/flowcontrol/checkhttp/v1/checkhttp.proto",
}
