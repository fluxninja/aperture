// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: aperture/flowcontrol/v1/flowcontrol.proto

package flowcontrolv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DecisionType int32

const (
	DecisionType_DECISION_TYPE_UNSPECIFIED DecisionType = 0
	DecisionType_DECISION_TYPE_ACCEPTED    DecisionType = 1
	DecisionType_DECISION_TYPE_REJECTED    DecisionType = 2
)

// Enum value maps for DecisionType.
var (
	DecisionType_name = map[int32]string{
		0: "DECISION_TYPE_UNSPECIFIED",
		1: "DECISION_TYPE_ACCEPTED",
		2: "DECISION_TYPE_REJECTED",
	}
	DecisionType_value = map[string]int32{
		"DECISION_TYPE_UNSPECIFIED": 0,
		"DECISION_TYPE_ACCEPTED":    1,
		"DECISION_TYPE_REJECTED":    2,
	}
)

func (x DecisionType) Enum() *DecisionType {
	p := new(DecisionType)
	*p = x
	return p
}

func (x DecisionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DecisionType) Descriptor() protoreflect.EnumDescriptor {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes[0].Descriptor()
}

func (DecisionType) Type() protoreflect.EnumType {
	return &file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes[0]
}

func (x DecisionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DecisionType.Descriptor instead.
func (DecisionType) EnumDescriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{0}
}

type Reason_ErrorReason int32

const (
	Reason_ERROR_REASON_UNSPECIFIED           Reason_ErrorReason = 0
	Reason_ERROR_REASON_ENTITY_LOOKUP_FAILED  Reason_ErrorReason = 1
	Reason_ERROR_REASON_SERVICE_LOOKUP_FAILED Reason_ErrorReason = 2
	Reason_ERROR_REASON_BAD_CLIENT_IP         Reason_ErrorReason = 3
)

// Enum value maps for Reason_ErrorReason.
var (
	Reason_ErrorReason_name = map[int32]string{
		0: "ERROR_REASON_UNSPECIFIED",
		1: "ERROR_REASON_ENTITY_LOOKUP_FAILED",
		2: "ERROR_REASON_SERVICE_LOOKUP_FAILED",
		3: "ERROR_REASON_BAD_CLIENT_IP",
	}
	Reason_ErrorReason_value = map[string]int32{
		"ERROR_REASON_UNSPECIFIED":           0,
		"ERROR_REASON_ENTITY_LOOKUP_FAILED":  1,
		"ERROR_REASON_SERVICE_LOOKUP_FAILED": 2,
		"ERROR_REASON_BAD_CLIENT_IP":         3,
	}
)

func (x Reason_ErrorReason) Enum() *Reason_ErrorReason {
	p := new(Reason_ErrorReason)
	*p = x
	return p
}

func (x Reason_ErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reason_ErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes[1].Descriptor()
}

func (Reason_ErrorReason) Type() protoreflect.EnumType {
	return &file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes[1]
}

func (x Reason_ErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reason_ErrorReason.Descriptor instead.
func (Reason_ErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{2, 0}
}

type Reason_RejectReason int32

const (
	Reason_REJECT_REASON_UNSPECIFIED         Reason_RejectReason = 0
	Reason_REJECT_REASON_RATE_LIMITED        Reason_RejectReason = 1
	Reason_REJECT_REASON_CONCURRENCY_LIMITED Reason_RejectReason = 2
)

// Enum value maps for Reason_RejectReason.
var (
	Reason_RejectReason_name = map[int32]string{
		0: "REJECT_REASON_UNSPECIFIED",
		1: "REJECT_REASON_RATE_LIMITED",
		2: "REJECT_REASON_CONCURRENCY_LIMITED",
	}
	Reason_RejectReason_value = map[string]int32{
		"REJECT_REASON_UNSPECIFIED":         0,
		"REJECT_REASON_RATE_LIMITED":        1,
		"REJECT_REASON_CONCURRENCY_LIMITED": 2,
	}
)

func (x Reason_RejectReason) Enum() *Reason_RejectReason {
	p := new(Reason_RejectReason)
	*p = x
	return p
}

func (x Reason_RejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Reason_RejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes[2].Descriptor()
}

func (Reason_RejectReason) Type() protoreflect.EnumType {
	return &file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes[2]
}

func (x Reason_RejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Reason_RejectReason.Descriptor instead.
func (Reason_RejectReason) EnumDescriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{2, 1}
}

type LimiterDecision_LimiterReason int32

const (
	LimiterDecision_LIMITER_REASON_UNSPECIFIED   LimiterDecision_LimiterReason = 0
	LimiterDecision_LIMITER_REASON_KEY_NOT_FOUND LimiterDecision_LimiterReason = 1
)

// Enum value maps for LimiterDecision_LimiterReason.
var (
	LimiterDecision_LimiterReason_name = map[int32]string{
		0: "LIMITER_REASON_UNSPECIFIED",
		1: "LIMITER_REASON_KEY_NOT_FOUND",
	}
	LimiterDecision_LimiterReason_value = map[string]int32{
		"LIMITER_REASON_UNSPECIFIED":   0,
		"LIMITER_REASON_KEY_NOT_FOUND": 1,
	}
)

func (x LimiterDecision_LimiterReason) Enum() *LimiterDecision_LimiterReason {
	p := new(LimiterDecision_LimiterReason)
	*p = x
	return p
}

func (x LimiterDecision_LimiterReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimiterDecision_LimiterReason) Descriptor() protoreflect.EnumDescriptor {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes[3].Descriptor()
}

func (LimiterDecision_LimiterReason) Type() protoreflect.EnumType {
	return &file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes[3]
}

func (x LimiterDecision_LimiterReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimiterDecision_LimiterReason.Descriptor instead.
func (LimiterDecision_LimiterReason) EnumDescriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{3, 0}
}

// CheckRequest contains fields required to perform Check call.
type CheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Feature string            `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	Labels  map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRequest) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *CheckRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// CheckResponse contains fields that represent decision made by Check call.
type CheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// decision_type contains what the decision was.
	DecisionType DecisionType `protobuf:"varint,1,opt,name=decision_type,json=decisionType,proto3,enum=aperture.flowcontrol.v1.DecisionType" json:"decision_type,omitempty"`
	// reason contains information in the case of an error or rejection.
	Reason *Reason `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// limiter_decisions contains information about decision made by each limiter.
	LimiterDecisions []*LimiterDecision `protobuf:"bytes,3,rep,name=limiter_decisions,json=limiterDecisions,proto3" json:"limiter_decisions,omitempty"`
	// flux meter ids that were matched for this request
	FluxMeterIds []string `protobuf:"bytes,4,rep,name=flux_meter_ids,json=fluxMeterIds,proto3" json:"flux_meter_ids,omitempty"`
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{1}
}

func (x *CheckResponse) GetDecisionType() DecisionType {
	if x != nil {
		return x.DecisionType
	}
	return DecisionType_DECISION_TYPE_UNSPECIFIED
}

func (x *CheckResponse) GetReason() *Reason {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *CheckResponse) GetLimiterDecisions() []*LimiterDecision {
	if x != nil {
		return x.LimiterDecisions
	}
	return nil
}

func (x *CheckResponse) GetFluxMeterIds() []string {
	if x != nil {
		return x.FluxMeterIds
	}
	return nil
}

type Reason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//	*Reason_ErrorReason_
	//	*Reason_RejectReason_
	Reason isReason_Reason `protobuf_oneof:"reason"`
}

func (x *Reason) Reset() {
	*x = Reason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reason) ProtoMessage() {}

func (x *Reason) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reason.ProtoReflect.Descriptor instead.
func (*Reason) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{2}
}

func (m *Reason) GetReason() isReason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *Reason) GetErrorReason() Reason_ErrorReason {
	if x, ok := x.GetReason().(*Reason_ErrorReason_); ok {
		return x.ErrorReason
	}
	return Reason_ERROR_REASON_UNSPECIFIED
}

func (x *Reason) GetRejectReason() Reason_RejectReason {
	if x, ok := x.GetReason().(*Reason_RejectReason_); ok {
		return x.RejectReason
	}
	return Reason_REJECT_REASON_UNSPECIFIED
}

type isReason_Reason interface {
	isReason_Reason()
}

type Reason_ErrorReason_ struct {
	ErrorReason Reason_ErrorReason `protobuf:"varint,1,opt,name=error_reason,json=errorReason,proto3,enum=aperture.flowcontrol.v1.Reason_ErrorReason,oneof"`
}

type Reason_RejectReason_ struct {
	RejectReason Reason_RejectReason `protobuf:"varint,2,opt,name=reject_reason,json=rejectReason,proto3,enum=aperture.flowcontrol.v1.Reason_RejectReason,oneof"`
}

func (*Reason_ErrorReason_) isReason_Reason() {}

func (*Reason_RejectReason_) isReason_Reason() {}

// LimiterDecision describes details for each limiter.
type LimiterDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Decision:
	//	*LimiterDecision_RateLimiterDecision_
	//	*LimiterDecision_ConcurrencyLimiterDecision
	Decision isLimiterDecision_Decision    `protobuf_oneof:"decision"`
	Dropped  bool                          `protobuf:"varint,3,opt,name=dropped,proto3" json:"dropped,omitempty"`
	Reason   LimiterDecision_LimiterReason `protobuf:"varint,4,opt,name=reason,proto3,enum=aperture.flowcontrol.v1.LimiterDecision_LimiterReason" json:"reason,omitempty"`
}

func (x *LimiterDecision) Reset() {
	*x = LimiterDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimiterDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimiterDecision) ProtoMessage() {}

func (x *LimiterDecision) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimiterDecision.ProtoReflect.Descriptor instead.
func (*LimiterDecision) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{3}
}

func (m *LimiterDecision) GetDecision() isLimiterDecision_Decision {
	if m != nil {
		return m.Decision
	}
	return nil
}

func (x *LimiterDecision) GetRateLimiterDecision() *LimiterDecision_RateLimiterDecision {
	if x, ok := x.GetDecision().(*LimiterDecision_RateLimiterDecision_); ok {
		return x.RateLimiterDecision
	}
	return nil
}

func (x *LimiterDecision) GetConcurrencyLimiterDecision() *LimiterDecision_ConurrencyLimiterDecision {
	if x, ok := x.GetDecision().(*LimiterDecision_ConcurrencyLimiterDecision); ok {
		return x.ConcurrencyLimiterDecision
	}
	return nil
}

func (x *LimiterDecision) GetDropped() bool {
	if x != nil {
		return x.Dropped
	}
	return false
}

func (x *LimiterDecision) GetReason() LimiterDecision_LimiterReason {
	if x != nil {
		return x.Reason
	}
	return LimiterDecision_LIMITER_REASON_UNSPECIFIED
}

type isLimiterDecision_Decision interface {
	isLimiterDecision_Decision()
}

type LimiterDecision_RateLimiterDecision_ struct {
	RateLimiterDecision *LimiterDecision_RateLimiterDecision `protobuf:"bytes,1,opt,name=rate_limiter_decision,json=rateLimiterDecision,proto3,oneof"`
}

type LimiterDecision_ConcurrencyLimiterDecision struct {
	ConcurrencyLimiterDecision *LimiterDecision_ConurrencyLimiterDecision `protobuf:"bytes,2,opt,name=concurrency_limiter_decision,json=concurrencyLimiterDecision,proto3,oneof"`
}

func (*LimiterDecision_RateLimiterDecision_) isLimiterDecision_Decision() {}

func (*LimiterDecision_ConcurrencyLimiterDecision) isLimiterDecision_Decision() {}

type LimiterDecision_RateLimiterDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName     string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyHash     string `protobuf:"bytes,2,opt,name=policy_hash,json=policyHash,proto3" json:"policy_hash,omitempty"`
	ComponentIndex int64  `protobuf:"varint,3,opt,name=component_index,json=componentIndex,proto3" json:"component_index,omitempty"`
}

func (x *LimiterDecision_RateLimiterDecision) Reset() {
	*x = LimiterDecision_RateLimiterDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimiterDecision_RateLimiterDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimiterDecision_RateLimiterDecision) ProtoMessage() {}

func (x *LimiterDecision_RateLimiterDecision) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimiterDecision_RateLimiterDecision.ProtoReflect.Descriptor instead.
func (*LimiterDecision_RateLimiterDecision) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{3, 0}
}

func (x *LimiterDecision_RateLimiterDecision) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *LimiterDecision_RateLimiterDecision) GetPolicyHash() string {
	if x != nil {
		return x.PolicyHash
	}
	return ""
}

func (x *LimiterDecision_RateLimiterDecision) GetComponentIndex() int64 {
	if x != nil {
		return x.ComponentIndex
	}
	return 0
}

type LimiterDecision_ConurrencyLimiterDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName     string `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyHash     string `protobuf:"bytes,2,opt,name=policy_hash,json=policyHash,proto3" json:"policy_hash,omitempty"`
	ComponentIndex int64  `protobuf:"varint,3,opt,name=component_index,json=componentIndex,proto3" json:"component_index,omitempty"`
	Workload       string `protobuf:"bytes,4,opt,name=workload,proto3" json:"workload,omitempty"`
}

func (x *LimiterDecision_ConurrencyLimiterDecision) Reset() {
	*x = LimiterDecision_ConurrencyLimiterDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimiterDecision_ConurrencyLimiterDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimiterDecision_ConurrencyLimiterDecision) ProtoMessage() {}

func (x *LimiterDecision_ConurrencyLimiterDecision) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimiterDecision_ConurrencyLimiterDecision.ProtoReflect.Descriptor instead.
func (*LimiterDecision_ConurrencyLimiterDecision) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP(), []int{3, 1}
}

func (x *LimiterDecision_ConurrencyLimiterDecision) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *LimiterDecision_ConurrencyLimiterDecision) GetPolicyHash() string {
	if x != nil {
		return x.PolicyHash
	}
	return ""
}

func (x *LimiterDecision_ConurrencyLimiterDecision) GetComponentIndex() int64 {
	if x != nil {
		return x.ComponentIndex
	}
	return 0
}

func (x *LimiterDecision_ConurrencyLimiterDecision) GetWorkload() string {
	if x != nil {
		return x.Workload
	}
	return ""
}

var File_aperture_flowcontrol_v1_flowcontrol_proto protoreflect.FileDescriptor

var file_aperture_flowcontrol_v1_flowcontrol_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x22, 0xae, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x49, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x91, 0x02, 0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x11,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x6c, 0x75, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6c, 0x75,
	0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0xcc, 0x03, 0x0a, 0x06, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x0b,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x26, 0x0a, 0x22, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x49, 0x50, 0x10, 0x03, 0x22, 0x74, 0x0a, 0x0c, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x08,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xff, 0x05, 0x0a, 0x0f, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a, 0x15,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x86, 0x01, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x72, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66,
	0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x1a, 0x80, 0x01, 0x0a, 0x13, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0xa2, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x51, 0x0a, 0x0d, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b,
	0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x65, 0x0a, 0x0c, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45,
	0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x43,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x32, 0x6e, 0x0a, 0x12, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x83, 0x02, 0x0a, 0x1b, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x42, 0x10, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x54, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x46, 0x6c, 0x75, 0x78, 0x4e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x6c,
	0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x46,
	0x58, 0xaa, 0x02, 0x17, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x17, 0x41, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x23, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65,
	0x5c, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x41, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescOnce sync.Once
	file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescData = file_aperture_flowcontrol_v1_flowcontrol_proto_rawDesc
)

func file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescGZIP() []byte {
	file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescOnce.Do(func() {
		file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescData)
	})
	return file_aperture_flowcontrol_v1_flowcontrol_proto_rawDescData
}

var file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_aperture_flowcontrol_v1_flowcontrol_proto_goTypes = []interface{}{
	(DecisionType)(0),                  // 0: aperture.flowcontrol.v1.DecisionType
	(Reason_ErrorReason)(0),            // 1: aperture.flowcontrol.v1.Reason.ErrorReason
	(Reason_RejectReason)(0),           // 2: aperture.flowcontrol.v1.Reason.RejectReason
	(LimiterDecision_LimiterReason)(0), // 3: aperture.flowcontrol.v1.LimiterDecision.LimiterReason
	(*CheckRequest)(nil),               // 4: aperture.flowcontrol.v1.CheckRequest
	(*CheckResponse)(nil),              // 5: aperture.flowcontrol.v1.CheckResponse
	(*Reason)(nil),                     // 6: aperture.flowcontrol.v1.Reason
	(*LimiterDecision)(nil),            // 7: aperture.flowcontrol.v1.LimiterDecision
	nil,                                // 8: aperture.flowcontrol.v1.CheckRequest.LabelsEntry
	(*LimiterDecision_RateLimiterDecision)(nil),       // 9: aperture.flowcontrol.v1.LimiterDecision.RateLimiterDecision
	(*LimiterDecision_ConurrencyLimiterDecision)(nil), // 10: aperture.flowcontrol.v1.LimiterDecision.ConurrencyLimiterDecision
}
var file_aperture_flowcontrol_v1_flowcontrol_proto_depIdxs = []int32{
	8,  // 0: aperture.flowcontrol.v1.CheckRequest.labels:type_name -> aperture.flowcontrol.v1.CheckRequest.LabelsEntry
	0,  // 1: aperture.flowcontrol.v1.CheckResponse.decision_type:type_name -> aperture.flowcontrol.v1.DecisionType
	6,  // 2: aperture.flowcontrol.v1.CheckResponse.reason:type_name -> aperture.flowcontrol.v1.Reason
	7,  // 3: aperture.flowcontrol.v1.CheckResponse.limiter_decisions:type_name -> aperture.flowcontrol.v1.LimiterDecision
	1,  // 4: aperture.flowcontrol.v1.Reason.error_reason:type_name -> aperture.flowcontrol.v1.Reason.ErrorReason
	2,  // 5: aperture.flowcontrol.v1.Reason.reject_reason:type_name -> aperture.flowcontrol.v1.Reason.RejectReason
	9,  // 6: aperture.flowcontrol.v1.LimiterDecision.rate_limiter_decision:type_name -> aperture.flowcontrol.v1.LimiterDecision.RateLimiterDecision
	10, // 7: aperture.flowcontrol.v1.LimiterDecision.concurrency_limiter_decision:type_name -> aperture.flowcontrol.v1.LimiterDecision.ConurrencyLimiterDecision
	3,  // 8: aperture.flowcontrol.v1.LimiterDecision.reason:type_name -> aperture.flowcontrol.v1.LimiterDecision.LimiterReason
	4,  // 9: aperture.flowcontrol.v1.FlowControlService.Check:input_type -> aperture.flowcontrol.v1.CheckRequest
	5,  // 10: aperture.flowcontrol.v1.FlowControlService.Check:output_type -> aperture.flowcontrol.v1.CheckResponse
	10, // [10:11] is the sub-list for method output_type
	9,  // [9:10] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_aperture_flowcontrol_v1_flowcontrol_proto_init() }
func file_aperture_flowcontrol_v1_flowcontrol_proto_init() {
	if File_aperture_flowcontrol_v1_flowcontrol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimiterDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimiterDecision_RateLimiterDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimiterDecision_ConurrencyLimiterDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Reason_ErrorReason_)(nil),
		(*Reason_RejectReason_)(nil),
	}
	file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*LimiterDecision_RateLimiterDecision_)(nil),
		(*LimiterDecision_ConcurrencyLimiterDecision)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_flowcontrol_v1_flowcontrol_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_flowcontrol_v1_flowcontrol_proto_goTypes,
		DependencyIndexes: file_aperture_flowcontrol_v1_flowcontrol_proto_depIdxs,
		EnumInfos:         file_aperture_flowcontrol_v1_flowcontrol_proto_enumTypes,
		MessageInfos:      file_aperture_flowcontrol_v1_flowcontrol_proto_msgTypes,
	}.Build()
	File_aperture_flowcontrol_v1_flowcontrol_proto = out.File
	file_aperture_flowcontrol_v1_flowcontrol_proto_rawDesc = nil
	file_aperture_flowcontrol_v1_flowcontrol_proto_goTypes = nil
	file_aperture_flowcontrol_v1_flowcontrol_proto_depIdxs = nil
}
