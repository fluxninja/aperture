// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/flowcontrol/preview/v1/preview.proto

package previewv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PreviewRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PreviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PreviewRequestMultiError,
// or nil if none found.
func (m *PreviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSamples() <= 0 {
		err := PreviewRequestValidationError{
			field:  "Samples",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetControlPoint()) < 1 {
		err := PreviewRequestValidationError{
			field:  "ControlPoint",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Service

	if all {
		switch v := interface{}(m.GetLabelMatcher()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PreviewRequestValidationError{
					field:  "LabelMatcher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PreviewRequestValidationError{
					field:  "LabelMatcher",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLabelMatcher()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PreviewRequestValidationError{
				field:  "LabelMatcher",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PreviewRequestMultiError(errors)
	}

	return nil
}

// PreviewRequestMultiError is an error wrapping multiple validation errors
// returned by PreviewRequest.ValidateAll() if the designated constraints
// aren't met.
type PreviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewRequestMultiError) AllErrors() []error { return m }

// PreviewRequestValidationError is the validation error returned by
// PreviewRequest.Validate if the designated constraints aren't met.
type PreviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewRequestValidationError) ErrorName() string { return "PreviewRequestValidationError" }

// Error satisfies the builtin error interface
func (e PreviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewRequestValidationError{}

// Validate checks the field values on PreviewFlowLabelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewFlowLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewFlowLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewFlowLabelsResponseMultiError, or nil if none found.
func (m *PreviewFlowLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewFlowLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSamples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreviewFlowLabelsResponseValidationError{
						field:  fmt.Sprintf("Samples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreviewFlowLabelsResponseValidationError{
						field:  fmt.Sprintf("Samples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreviewFlowLabelsResponseValidationError{
					field:  fmt.Sprintf("Samples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PreviewFlowLabelsResponseMultiError(errors)
	}

	return nil
}

// PreviewFlowLabelsResponseMultiError is an error wrapping multiple validation
// errors returned by PreviewFlowLabelsResponse.ValidateAll() if the
// designated constraints aren't met.
type PreviewFlowLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewFlowLabelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewFlowLabelsResponseMultiError) AllErrors() []error { return m }

// PreviewFlowLabelsResponseValidationError is the validation error returned by
// PreviewFlowLabelsResponse.Validate if the designated constraints aren't met.
type PreviewFlowLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewFlowLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewFlowLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewFlowLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewFlowLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewFlowLabelsResponseValidationError) ErrorName() string {
	return "PreviewFlowLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewFlowLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewFlowLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewFlowLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewFlowLabelsResponseValidationError{}

// Validate checks the field values on PreviewHTTPRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PreviewHTTPRequestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewHTTPRequestsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PreviewHTTPRequestsResponseMultiError, or nil if none found.
func (m *PreviewHTTPRequestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewHTTPRequestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSamples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreviewHTTPRequestsResponseValidationError{
						field:  fmt.Sprintf("Samples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreviewHTTPRequestsResponseValidationError{
						field:  fmt.Sprintf("Samples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreviewHTTPRequestsResponseValidationError{
					field:  fmt.Sprintf("Samples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PreviewHTTPRequestsResponseMultiError(errors)
	}

	return nil
}

// PreviewHTTPRequestsResponseMultiError is an error wrapping multiple
// validation errors returned by PreviewHTTPRequestsResponse.ValidateAll() if
// the designated constraints aren't met.
type PreviewHTTPRequestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewHTTPRequestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewHTTPRequestsResponseMultiError) AllErrors() []error { return m }

// PreviewHTTPRequestsResponseValidationError is the validation error returned
// by PreviewHTTPRequestsResponse.Validate if the designated constraints
// aren't met.
type PreviewHTTPRequestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewHTTPRequestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewHTTPRequestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewHTTPRequestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewHTTPRequestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewHTTPRequestsResponseValidationError) ErrorName() string {
	return "PreviewHTTPRequestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewHTTPRequestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewHTTPRequestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewHTTPRequestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewHTTPRequestsResponseValidationError{}

// Validate checks the field values on PreviewFlowLabelsResponse_FlowLabels
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *PreviewFlowLabelsResponse_FlowLabels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PreviewFlowLabelsResponse_FlowLabels
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PreviewFlowLabelsResponse_FlowLabelsMultiError, or nil if none found.
func (m *PreviewFlowLabelsResponse_FlowLabels) ValidateAll() error {
	return m.validate(true)
}

func (m *PreviewFlowLabelsResponse_FlowLabels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Labels

	if len(errors) > 0 {
		return PreviewFlowLabelsResponse_FlowLabelsMultiError(errors)
	}

	return nil
}

// PreviewFlowLabelsResponse_FlowLabelsMultiError is an error wrapping multiple
// validation errors returned by
// PreviewFlowLabelsResponse_FlowLabels.ValidateAll() if the designated
// constraints aren't met.
type PreviewFlowLabelsResponse_FlowLabelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreviewFlowLabelsResponse_FlowLabelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreviewFlowLabelsResponse_FlowLabelsMultiError) AllErrors() []error { return m }

// PreviewFlowLabelsResponse_FlowLabelsValidationError is the validation error
// returned by PreviewFlowLabelsResponse_FlowLabels.Validate if the designated
// constraints aren't met.
type PreviewFlowLabelsResponse_FlowLabelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreviewFlowLabelsResponse_FlowLabelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreviewFlowLabelsResponse_FlowLabelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreviewFlowLabelsResponse_FlowLabelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreviewFlowLabelsResponse_FlowLabelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreviewFlowLabelsResponse_FlowLabelsValidationError) ErrorName() string {
	return "PreviewFlowLabelsResponse_FlowLabelsValidationError"
}

// Error satisfies the builtin error interface
func (e PreviewFlowLabelsResponse_FlowLabelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreviewFlowLabelsResponse_FlowLabels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreviewFlowLabelsResponse_FlowLabelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreviewFlowLabelsResponse_FlowLabelsValidationError{}
