// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: aperture/flowcontrol/check/v1/check.proto

package checkv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RejectReason contains fields that give further information about rejection.
type CheckResponse_RejectReason int32

const (
	CheckResponse_REJECT_REASON_NONE         CheckResponse_RejectReason = 0
	CheckResponse_REJECT_REASON_RATE_LIMITED CheckResponse_RejectReason = 1
	CheckResponse_REJECT_REASON_NO_TOKENS    CheckResponse_RejectReason = 2
	CheckResponse_REJECT_REASON_REGULATED    CheckResponse_RejectReason = 3
)

// Enum value maps for CheckResponse_RejectReason.
var (
	CheckResponse_RejectReason_name = map[int32]string{
		0: "REJECT_REASON_NONE",
		1: "REJECT_REASON_RATE_LIMITED",
		2: "REJECT_REASON_NO_TOKENS",
		3: "REJECT_REASON_REGULATED",
	}
	CheckResponse_RejectReason_value = map[string]int32{
		"REJECT_REASON_NONE":         0,
		"REJECT_REASON_RATE_LIMITED": 1,
		"REJECT_REASON_NO_TOKENS":    2,
		"REJECT_REASON_REGULATED":    3,
	}
)

func (x CheckResponse_RejectReason) Enum() *CheckResponse_RejectReason {
	p := new(CheckResponse_RejectReason)
	*p = x
	return p
}

func (x CheckResponse_RejectReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckResponse_RejectReason) Descriptor() protoreflect.EnumDescriptor {
	return file_aperture_flowcontrol_check_v1_check_proto_enumTypes[0].Descriptor()
}

func (CheckResponse_RejectReason) Type() protoreflect.EnumType {
	return &file_aperture_flowcontrol_check_v1_check_proto_enumTypes[0]
}

func (x CheckResponse_RejectReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckResponse_RejectReason.Descriptor instead.
func (CheckResponse_RejectReason) EnumDescriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{1, 0}
}

// DecisionType contains fields that represent decision made by Check call.
type CheckResponse_DecisionType int32

const (
	CheckResponse_DECISION_TYPE_ACCEPTED CheckResponse_DecisionType = 0
	CheckResponse_DECISION_TYPE_REJECTED CheckResponse_DecisionType = 1
)

// Enum value maps for CheckResponse_DecisionType.
var (
	CheckResponse_DecisionType_name = map[int32]string{
		0: "DECISION_TYPE_ACCEPTED",
		1: "DECISION_TYPE_REJECTED",
	}
	CheckResponse_DecisionType_value = map[string]int32{
		"DECISION_TYPE_ACCEPTED": 0,
		"DECISION_TYPE_REJECTED": 1,
	}
)

func (x CheckResponse_DecisionType) Enum() *CheckResponse_DecisionType {
	p := new(CheckResponse_DecisionType)
	*p = x
	return p
}

func (x CheckResponse_DecisionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckResponse_DecisionType) Descriptor() protoreflect.EnumDescriptor {
	return file_aperture_flowcontrol_check_v1_check_proto_enumTypes[1].Descriptor()
}

func (CheckResponse_DecisionType) Type() protoreflect.EnumType {
	return &file_aperture_flowcontrol_check_v1_check_proto_enumTypes[1]
}

func (x CheckResponse_DecisionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckResponse_DecisionType.Descriptor instead.
func (CheckResponse_DecisionType) EnumDescriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{1, 1}
}

// Error information.
type ClassifierInfo_Error int32

const (
	ClassifierInfo_ERROR_NONE                ClassifierInfo_Error = 0
	ClassifierInfo_ERROR_EVAL_FAILED         ClassifierInfo_Error = 1
	ClassifierInfo_ERROR_EMPTY_RESULTSET     ClassifierInfo_Error = 2
	ClassifierInfo_ERROR_AMBIGUOUS_RESULTSET ClassifierInfo_Error = 3
	ClassifierInfo_ERROR_MULTI_EXPRESSION    ClassifierInfo_Error = 4
	ClassifierInfo_ERROR_EXPRESSION_NOT_MAP  ClassifierInfo_Error = 5
)

// Enum value maps for ClassifierInfo_Error.
var (
	ClassifierInfo_Error_name = map[int32]string{
		0: "ERROR_NONE",
		1: "ERROR_EVAL_FAILED",
		2: "ERROR_EMPTY_RESULTSET",
		3: "ERROR_AMBIGUOUS_RESULTSET",
		4: "ERROR_MULTI_EXPRESSION",
		5: "ERROR_EXPRESSION_NOT_MAP",
	}
	ClassifierInfo_Error_value = map[string]int32{
		"ERROR_NONE":                0,
		"ERROR_EVAL_FAILED":         1,
		"ERROR_EMPTY_RESULTSET":     2,
		"ERROR_AMBIGUOUS_RESULTSET": 3,
		"ERROR_MULTI_EXPRESSION":    4,
		"ERROR_EXPRESSION_NOT_MAP":  5,
	}
)

func (x ClassifierInfo_Error) Enum() *ClassifierInfo_Error {
	p := new(ClassifierInfo_Error)
	*p = x
	return p
}

func (x ClassifierInfo_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClassifierInfo_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_aperture_flowcontrol_check_v1_check_proto_enumTypes[2].Descriptor()
}

func (ClassifierInfo_Error) Type() protoreflect.EnumType {
	return &file_aperture_flowcontrol_check_v1_check_proto_enumTypes[2]
}

func (x ClassifierInfo_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClassifierInfo_Error.Descriptor instead.
func (ClassifierInfo_Error) EnumDescriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{2, 0}
}

type LimiterDecision_LimiterReason int32

const (
	LimiterDecision_LIMITER_REASON_UNSPECIFIED   LimiterDecision_LimiterReason = 0
	LimiterDecision_LIMITER_REASON_KEY_NOT_FOUND LimiterDecision_LimiterReason = 1
)

// Enum value maps for LimiterDecision_LimiterReason.
var (
	LimiterDecision_LimiterReason_name = map[int32]string{
		0: "LIMITER_REASON_UNSPECIFIED",
		1: "LIMITER_REASON_KEY_NOT_FOUND",
	}
	LimiterDecision_LimiterReason_value = map[string]int32{
		"LIMITER_REASON_UNSPECIFIED":   0,
		"LIMITER_REASON_KEY_NOT_FOUND": 1,
	}
)

func (x LimiterDecision_LimiterReason) Enum() *LimiterDecision_LimiterReason {
	p := new(LimiterDecision_LimiterReason)
	*p = x
	return p
}

func (x LimiterDecision_LimiterReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimiterDecision_LimiterReason) Descriptor() protoreflect.EnumDescriptor {
	return file_aperture_flowcontrol_check_v1_check_proto_enumTypes[3].Descriptor()
}

func (LimiterDecision_LimiterReason) Type() protoreflect.EnumType {
	return &file_aperture_flowcontrol_check_v1_check_proto_enumTypes[3]
}

func (x LimiterDecision_LimiterReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimiterDecision_LimiterReason.Descriptor instead.
func (LimiterDecision_LimiterReason) EnumDescriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{3, 0}
}

// CheckRequest contains fields required to perform Check call.
type CheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ControlPoint string            `protobuf:"bytes,1,opt,name=control_point,json=controlPoint,proto3" json:"control_point,omitempty"`
	Labels       map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRequest) GetControlPoint() string {
	if x != nil {
		return x.ControlPoint
	}
	return ""
}

func (x *CheckRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// CheckResponse contains fields that represent decision made by Check call.
type CheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// start timestamp
	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// end timestamp
	End *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	// services that matched
	Services []string `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`
	// control_point of request
	ControlPoint string `protobuf:"bytes,5,opt,name=control_point,json=controlPoint,proto3" json:"control_point,omitempty"`
	// flow label keys that were matched for this request.
	FlowLabelKeys []string `protobuf:"bytes,6,rep,name=flow_label_keys,json=flowLabelKeys,proto3" json:"flow_label_keys,omitempty"`
	// telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
	TelemetryFlowLabels map[string]string `protobuf:"bytes,7,rep,name=telemetry_flow_labels,json=telemetryFlowLabels,proto3" json:"telemetry_flow_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// decision_type contains what the decision was.
	DecisionType CheckResponse_DecisionType `protobuf:"varint,8,opt,name=decision_type,json=decisionType,proto3,enum=aperture.flowcontrol.check.v1.CheckResponse_DecisionType" json:"decision_type,omitempty"`
	// reject_reason contains the reason for the rejection.
	RejectReason CheckResponse_RejectReason `protobuf:"varint,9,opt,name=reject_reason,json=rejectReason,proto3,enum=aperture.flowcontrol.check.v1.CheckResponse_RejectReason" json:"reject_reason,omitempty"`
	// classifiers that were matched for this request.
	ClassifierInfos []*ClassifierInfo `protobuf:"bytes,10,rep,name=classifier_infos,json=classifierInfos,proto3" json:"classifier_infos,omitempty"`
	// flux meters that were matched for this request.
	FluxMeterInfos []*FluxMeterInfo `protobuf:"bytes,11,rep,name=flux_meter_infos,json=fluxMeterInfos,proto3" json:"flux_meter_infos,omitempty"`
	// limiter_decisions contains information about decision made by each limiter.
	LimiterDecisions []*LimiterDecision `protobuf:"bytes,12,rep,name=limiter_decisions,json=limiterDecisions,proto3" json:"limiter_decisions,omitempty"`
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{1}
}

func (x *CheckResponse) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CheckResponse) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CheckResponse) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *CheckResponse) GetControlPoint() string {
	if x != nil {
		return x.ControlPoint
	}
	return ""
}

func (x *CheckResponse) GetFlowLabelKeys() []string {
	if x != nil {
		return x.FlowLabelKeys
	}
	return nil
}

func (x *CheckResponse) GetTelemetryFlowLabels() map[string]string {
	if x != nil {
		return x.TelemetryFlowLabels
	}
	return nil
}

func (x *CheckResponse) GetDecisionType() CheckResponse_DecisionType {
	if x != nil {
		return x.DecisionType
	}
	return CheckResponse_DECISION_TYPE_ACCEPTED
}

func (x *CheckResponse) GetRejectReason() CheckResponse_RejectReason {
	if x != nil {
		return x.RejectReason
	}
	return CheckResponse_REJECT_REASON_NONE
}

func (x *CheckResponse) GetClassifierInfos() []*ClassifierInfo {
	if x != nil {
		return x.ClassifierInfos
	}
	return nil
}

func (x *CheckResponse) GetFluxMeterInfos() []*FluxMeterInfo {
	if x != nil {
		return x.FluxMeterInfos
	}
	return nil
}

func (x *CheckResponse) GetLimiterDecisions() []*LimiterDecision {
	if x != nil {
		return x.LimiterDecisions
	}
	return nil
}

// ClassifierInfo describes details for each ClassifierInfo.
type ClassifierInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName      string               `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyHash      string               `protobuf:"bytes,2,opt,name=policy_hash,json=policyHash,proto3" json:"policy_hash,omitempty"`
	ClassifierIndex int64                `protobuf:"varint,3,opt,name=classifier_index,json=classifierIndex,proto3" json:"classifier_index,omitempty"`
	Error           ClassifierInfo_Error `protobuf:"varint,5,opt,name=error,proto3,enum=aperture.flowcontrol.check.v1.ClassifierInfo_Error" json:"error,omitempty"`
}

func (x *ClassifierInfo) Reset() {
	*x = ClassifierInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassifierInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassifierInfo) ProtoMessage() {}

func (x *ClassifierInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassifierInfo.ProtoReflect.Descriptor instead.
func (*ClassifierInfo) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{2}
}

func (x *ClassifierInfo) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *ClassifierInfo) GetPolicyHash() string {
	if x != nil {
		return x.PolicyHash
	}
	return ""
}

func (x *ClassifierInfo) GetClassifierIndex() int64 {
	if x != nil {
		return x.ClassifierIndex
	}
	return 0
}

func (x *ClassifierInfo) GetError() ClassifierInfo_Error {
	if x != nil {
		return x.Error
	}
	return ClassifierInfo_ERROR_NONE
}

// LimiterDecision describes details for each limiter.
type LimiterDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName  string                        `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"`
	PolicyHash  string                        `protobuf:"bytes,2,opt,name=policy_hash,json=policyHash,proto3" json:"policy_hash,omitempty"`
	ComponentId string                        `protobuf:"bytes,3,opt,name=component_id,json=componentId,proto3" json:"component_id,omitempty"`
	Dropped     bool                          `protobuf:"varint,4,opt,name=dropped,proto3" json:"dropped,omitempty"`
	Reason      LimiterDecision_LimiterReason `protobuf:"varint,5,opt,name=reason,proto3,enum=aperture.flowcontrol.check.v1.LimiterDecision_LimiterReason" json:"reason,omitempty"`
	// Types that are assignable to Details:
	//
	//	*LimiterDecision_RateLimiterInfo_
	//	*LimiterDecision_LoadSchedulerInfo
	//	*LimiterDecision_SamplerInfo_
	//	*LimiterDecision_QuotaSchedulerInfo_
	Details isLimiterDecision_Details `protobuf_oneof:"details"`
}

func (x *LimiterDecision) Reset() {
	*x = LimiterDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimiterDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimiterDecision) ProtoMessage() {}

func (x *LimiterDecision) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimiterDecision.ProtoReflect.Descriptor instead.
func (*LimiterDecision) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{3}
}

func (x *LimiterDecision) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *LimiterDecision) GetPolicyHash() string {
	if x != nil {
		return x.PolicyHash
	}
	return ""
}

func (x *LimiterDecision) GetComponentId() string {
	if x != nil {
		return x.ComponentId
	}
	return ""
}

func (x *LimiterDecision) GetDropped() bool {
	if x != nil {
		return x.Dropped
	}
	return false
}

func (x *LimiterDecision) GetReason() LimiterDecision_LimiterReason {
	if x != nil {
		return x.Reason
	}
	return LimiterDecision_LIMITER_REASON_UNSPECIFIED
}

func (m *LimiterDecision) GetDetails() isLimiterDecision_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *LimiterDecision) GetRateLimiterInfo() *LimiterDecision_RateLimiterInfo {
	if x, ok := x.GetDetails().(*LimiterDecision_RateLimiterInfo_); ok {
		return x.RateLimiterInfo
	}
	return nil
}

func (x *LimiterDecision) GetLoadSchedulerInfo() *LimiterDecision_SchedulerInfo {
	if x, ok := x.GetDetails().(*LimiterDecision_LoadSchedulerInfo); ok {
		return x.LoadSchedulerInfo
	}
	return nil
}

func (x *LimiterDecision) GetSamplerInfo() *LimiterDecision_SamplerInfo {
	if x, ok := x.GetDetails().(*LimiterDecision_SamplerInfo_); ok {
		return x.SamplerInfo
	}
	return nil
}

func (x *LimiterDecision) GetQuotaSchedulerInfo() *LimiterDecision_QuotaSchedulerInfo {
	if x, ok := x.GetDetails().(*LimiterDecision_QuotaSchedulerInfo_); ok {
		return x.QuotaSchedulerInfo
	}
	return nil
}

type isLimiterDecision_Details interface {
	isLimiterDecision_Details()
}

type LimiterDecision_RateLimiterInfo_ struct {
	RateLimiterInfo *LimiterDecision_RateLimiterInfo `protobuf:"bytes,6,opt,name=rate_limiter_info,json=rateLimiterInfo,proto3,oneof"`
}

type LimiterDecision_LoadSchedulerInfo struct {
	LoadSchedulerInfo *LimiterDecision_SchedulerInfo `protobuf:"bytes,7,opt,name=load_scheduler_info,json=loadSchedulerInfo,proto3,oneof"`
}

type LimiterDecision_SamplerInfo_ struct {
	SamplerInfo *LimiterDecision_SamplerInfo `protobuf:"bytes,8,opt,name=sampler_info,json=samplerInfo,proto3,oneof"`
}

type LimiterDecision_QuotaSchedulerInfo_ struct {
	QuotaSchedulerInfo *LimiterDecision_QuotaSchedulerInfo `protobuf:"bytes,9,opt,name=quota_scheduler_info,json=quotaSchedulerInfo,proto3,oneof"`
}

func (*LimiterDecision_RateLimiterInfo_) isLimiterDecision_Details() {}

func (*LimiterDecision_LoadSchedulerInfo) isLimiterDecision_Details() {}

func (*LimiterDecision_SamplerInfo_) isLimiterDecision_Details() {}

func (*LimiterDecision_QuotaSchedulerInfo_) isLimiterDecision_Details() {}

// FluxMeterInfo describes detail for each FluxMeterInfo.
type FluxMeterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FluxMeterName string `protobuf:"bytes,1,opt,name=flux_meter_name,json=fluxMeterName,proto3" json:"flux_meter_name,omitempty"`
}

func (x *FluxMeterInfo) Reset() {
	*x = FluxMeterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluxMeterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluxMeterInfo) ProtoMessage() {}

func (x *FluxMeterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluxMeterInfo.ProtoReflect.Descriptor instead.
func (*FluxMeterInfo) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{4}
}

func (x *FluxMeterInfo) GetFluxMeterName() string {
	if x != nil {
		return x.FluxMeterName
	}
	return ""
}

type LimiterDecision_RateLimiterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remaining      float64 `protobuf:"fixed64,1,opt,name=remaining,proto3" json:"remaining,omitempty"`
	Current        float64 `protobuf:"fixed64,2,opt,name=current,proto3" json:"current,omitempty"`
	Label          string  `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	TokensConsumed float64 `protobuf:"fixed64,4,opt,name=tokens_consumed,json=tokensConsumed,proto3" json:"tokens_consumed,omitempty"`
}

func (x *LimiterDecision_RateLimiterInfo) Reset() {
	*x = LimiterDecision_RateLimiterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimiterDecision_RateLimiterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimiterDecision_RateLimiterInfo) ProtoMessage() {}

func (x *LimiterDecision_RateLimiterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimiterDecision_RateLimiterInfo.ProtoReflect.Descriptor instead.
func (*LimiterDecision_RateLimiterInfo) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{3, 0}
}

func (x *LimiterDecision_RateLimiterInfo) GetRemaining() float64 {
	if x != nil {
		return x.Remaining
	}
	return 0
}

func (x *LimiterDecision_RateLimiterInfo) GetCurrent() float64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *LimiterDecision_RateLimiterInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LimiterDecision_RateLimiterInfo) GetTokensConsumed() float64 {
	if x != nil {
		return x.TokensConsumed
	}
	return 0
}

type LimiterDecision_SchedulerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkloadIndex  string `protobuf:"bytes,1,opt,name=workload_index,json=workloadIndex,proto3" json:"workload_index,omitempty"`
	TokensConsumed uint64 `protobuf:"varint,2,opt,name=tokens_consumed,json=tokensConsumed,proto3" json:"tokens_consumed,omitempty"`
}

func (x *LimiterDecision_SchedulerInfo) Reset() {
	*x = LimiterDecision_SchedulerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimiterDecision_SchedulerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimiterDecision_SchedulerInfo) ProtoMessage() {}

func (x *LimiterDecision_SchedulerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimiterDecision_SchedulerInfo.ProtoReflect.Descriptor instead.
func (*LimiterDecision_SchedulerInfo) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{3, 1}
}

func (x *LimiterDecision_SchedulerInfo) GetWorkloadIndex() string {
	if x != nil {
		return x.WorkloadIndex
	}
	return ""
}

func (x *LimiterDecision_SchedulerInfo) GetTokensConsumed() uint64 {
	if x != nil {
		return x.TokensConsumed
	}
	return 0
}

type LimiterDecision_SamplerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LimiterDecision_SamplerInfo) Reset() {
	*x = LimiterDecision_SamplerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimiterDecision_SamplerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimiterDecision_SamplerInfo) ProtoMessage() {}

func (x *LimiterDecision_SamplerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimiterDecision_SamplerInfo.ProtoReflect.Descriptor instead.
func (*LimiterDecision_SamplerInfo) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{3, 2}
}

func (x *LimiterDecision_SamplerInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type LimiterDecision_QuotaSchedulerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string                         `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	SchedulerInfo *LimiterDecision_SchedulerInfo `protobuf:"bytes,2,opt,name=scheduler_info,json=schedulerInfo,proto3" json:"scheduler_info,omitempty"`
}

func (x *LimiterDecision_QuotaSchedulerInfo) Reset() {
	*x = LimiterDecision_QuotaSchedulerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimiterDecision_QuotaSchedulerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimiterDecision_QuotaSchedulerInfo) ProtoMessage() {}

func (x *LimiterDecision_QuotaSchedulerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_flowcontrol_check_v1_check_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimiterDecision_QuotaSchedulerInfo.ProtoReflect.Descriptor instead.
func (*LimiterDecision_QuotaSchedulerInfo) Descriptor() ([]byte, []int) {
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP(), []int{3, 3}
}

func (x *LimiterDecision_QuotaSchedulerInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LimiterDecision_QuotaSchedulerInfo) GetSchedulerInfo() *LimiterDecision_SchedulerInfo {
	if x != nil {
		return x.SchedulerInfo
	}
	return nil
}

var File_aperture_flowcontrol_check_v1_check_proto protoreflect.FileDescriptor

var file_aperture_flowcontrol_check_v1_check_proto_rawDesc = []byte{
	0x0a, 0x29, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x66, 0x6c, 0x6f, 0x77, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbf, 0x01, 0x0a, 0x0c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x4f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x08,
	0x0a, 0x0d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x79, 0x0a, 0x15, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x10, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x56, 0x0a,
	0x10, 0x66, 0x6c, 0x75, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x66, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x46, 0x0a, 0x18, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x46,
	0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0x46, 0x0a,
	0x0c, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x44, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x43,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0xed, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x49, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xa2, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x45, 0x54, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x41, 0x4d, 0x42, 0x49, 0x47, 0x55, 0x4f, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4d, 0x41, 0x50, 0x10, 0x05, 0x22, 0x9d, 0x09, 0x0a, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x6c,
	0x0a, 0x11, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6e, 0x0a, 0x13,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x65, 0x72,
	0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5f, 0x0a, 0x0c,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x75, 0x0a,
	0x14, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x61, 0x70,
	0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00,
	0x52, 0x12, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x88, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x1a,
	0x5f, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64,
	0x1a, 0x23, 0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x8f, 0x01, 0x0a, 0x12, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x63, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49, 0x4d, 0x49,
	0x54, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x37, 0x0a, 0x0d, 0x46, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x6c, 0x75, 0x78, 0x5f, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x66, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x7a,
	0x0a, 0x12, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2b, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xb3, 0x02, 0x0a, 0x35, 0x63,
	0x6f, 0x6d, 0x2e, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x66, 0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x66,
	0x6c, 0x6f, 0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x2f, 0x76, 0x31, 0x3b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x46,
	0x43, 0xaa, 0x02, 0x1d, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x1d, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x46, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x29, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x46, 0x6c, 0x6f,
	0x77, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x5c, 0x56,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20,
	0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x46, 0x6c, 0x6f, 0x77, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x3a, 0x3a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_flowcontrol_check_v1_check_proto_rawDescOnce sync.Once
	file_aperture_flowcontrol_check_v1_check_proto_rawDescData = file_aperture_flowcontrol_check_v1_check_proto_rawDesc
)

func file_aperture_flowcontrol_check_v1_check_proto_rawDescGZIP() []byte {
	file_aperture_flowcontrol_check_v1_check_proto_rawDescOnce.Do(func() {
		file_aperture_flowcontrol_check_v1_check_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_flowcontrol_check_v1_check_proto_rawDescData)
	})
	return file_aperture_flowcontrol_check_v1_check_proto_rawDescData
}

var file_aperture_flowcontrol_check_v1_check_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_aperture_flowcontrol_check_v1_check_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_aperture_flowcontrol_check_v1_check_proto_goTypes = []interface{}{
	(CheckResponse_RejectReason)(0),            // 0: aperture.flowcontrol.check.v1.CheckResponse.RejectReason
	(CheckResponse_DecisionType)(0),            // 1: aperture.flowcontrol.check.v1.CheckResponse.DecisionType
	(ClassifierInfo_Error)(0),                  // 2: aperture.flowcontrol.check.v1.ClassifierInfo.Error
	(LimiterDecision_LimiterReason)(0),         // 3: aperture.flowcontrol.check.v1.LimiterDecision.LimiterReason
	(*CheckRequest)(nil),                       // 4: aperture.flowcontrol.check.v1.CheckRequest
	(*CheckResponse)(nil),                      // 5: aperture.flowcontrol.check.v1.CheckResponse
	(*ClassifierInfo)(nil),                     // 6: aperture.flowcontrol.check.v1.ClassifierInfo
	(*LimiterDecision)(nil),                    // 7: aperture.flowcontrol.check.v1.LimiterDecision
	(*FluxMeterInfo)(nil),                      // 8: aperture.flowcontrol.check.v1.FluxMeterInfo
	nil,                                        // 9: aperture.flowcontrol.check.v1.CheckRequest.LabelsEntry
	nil,                                        // 10: aperture.flowcontrol.check.v1.CheckResponse.TelemetryFlowLabelsEntry
	(*LimiterDecision_RateLimiterInfo)(nil),    // 11: aperture.flowcontrol.check.v1.LimiterDecision.RateLimiterInfo
	(*LimiterDecision_SchedulerInfo)(nil),      // 12: aperture.flowcontrol.check.v1.LimiterDecision.SchedulerInfo
	(*LimiterDecision_SamplerInfo)(nil),        // 13: aperture.flowcontrol.check.v1.LimiterDecision.SamplerInfo
	(*LimiterDecision_QuotaSchedulerInfo)(nil), // 14: aperture.flowcontrol.check.v1.LimiterDecision.QuotaSchedulerInfo
	(*timestamppb.Timestamp)(nil),              // 15: google.protobuf.Timestamp
}
var file_aperture_flowcontrol_check_v1_check_proto_depIdxs = []int32{
	9,  // 0: aperture.flowcontrol.check.v1.CheckRequest.labels:type_name -> aperture.flowcontrol.check.v1.CheckRequest.LabelsEntry
	15, // 1: aperture.flowcontrol.check.v1.CheckResponse.start:type_name -> google.protobuf.Timestamp
	15, // 2: aperture.flowcontrol.check.v1.CheckResponse.end:type_name -> google.protobuf.Timestamp
	10, // 3: aperture.flowcontrol.check.v1.CheckResponse.telemetry_flow_labels:type_name -> aperture.flowcontrol.check.v1.CheckResponse.TelemetryFlowLabelsEntry
	1,  // 4: aperture.flowcontrol.check.v1.CheckResponse.decision_type:type_name -> aperture.flowcontrol.check.v1.CheckResponse.DecisionType
	0,  // 5: aperture.flowcontrol.check.v1.CheckResponse.reject_reason:type_name -> aperture.flowcontrol.check.v1.CheckResponse.RejectReason
	6,  // 6: aperture.flowcontrol.check.v1.CheckResponse.classifier_infos:type_name -> aperture.flowcontrol.check.v1.ClassifierInfo
	8,  // 7: aperture.flowcontrol.check.v1.CheckResponse.flux_meter_infos:type_name -> aperture.flowcontrol.check.v1.FluxMeterInfo
	7,  // 8: aperture.flowcontrol.check.v1.CheckResponse.limiter_decisions:type_name -> aperture.flowcontrol.check.v1.LimiterDecision
	2,  // 9: aperture.flowcontrol.check.v1.ClassifierInfo.error:type_name -> aperture.flowcontrol.check.v1.ClassifierInfo.Error
	3,  // 10: aperture.flowcontrol.check.v1.LimiterDecision.reason:type_name -> aperture.flowcontrol.check.v1.LimiterDecision.LimiterReason
	11, // 11: aperture.flowcontrol.check.v1.LimiterDecision.rate_limiter_info:type_name -> aperture.flowcontrol.check.v1.LimiterDecision.RateLimiterInfo
	12, // 12: aperture.flowcontrol.check.v1.LimiterDecision.load_scheduler_info:type_name -> aperture.flowcontrol.check.v1.LimiterDecision.SchedulerInfo
	13, // 13: aperture.flowcontrol.check.v1.LimiterDecision.sampler_info:type_name -> aperture.flowcontrol.check.v1.LimiterDecision.SamplerInfo
	14, // 14: aperture.flowcontrol.check.v1.LimiterDecision.quota_scheduler_info:type_name -> aperture.flowcontrol.check.v1.LimiterDecision.QuotaSchedulerInfo
	12, // 15: aperture.flowcontrol.check.v1.LimiterDecision.QuotaSchedulerInfo.scheduler_info:type_name -> aperture.flowcontrol.check.v1.LimiterDecision.SchedulerInfo
	4,  // 16: aperture.flowcontrol.check.v1.FlowControlService.Check:input_type -> aperture.flowcontrol.check.v1.CheckRequest
	5,  // 17: aperture.flowcontrol.check.v1.FlowControlService.Check:output_type -> aperture.flowcontrol.check.v1.CheckResponse
	17, // [17:18] is the sub-list for method output_type
	16, // [16:17] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_aperture_flowcontrol_check_v1_check_proto_init() }
func file_aperture_flowcontrol_check_v1_check_proto_init() {
	if File_aperture_flowcontrol_check_v1_check_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassifierInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimiterDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluxMeterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimiterDecision_RateLimiterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimiterDecision_SchedulerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimiterDecision_SamplerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_flowcontrol_check_v1_check_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimiterDecision_QuotaSchedulerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_flowcontrol_check_v1_check_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*LimiterDecision_RateLimiterInfo_)(nil),
		(*LimiterDecision_LoadSchedulerInfo)(nil),
		(*LimiterDecision_SamplerInfo_)(nil),
		(*LimiterDecision_QuotaSchedulerInfo_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_flowcontrol_check_v1_check_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_flowcontrol_check_v1_check_proto_goTypes,
		DependencyIndexes: file_aperture_flowcontrol_check_v1_check_proto_depIdxs,
		EnumInfos:         file_aperture_flowcontrol_check_v1_check_proto_enumTypes,
		MessageInfos:      file_aperture_flowcontrol_check_v1_check_proto_msgTypes,
	}.Build()
	File_aperture_flowcontrol_check_v1_check_proto = out.File
	file_aperture_flowcontrol_check_v1_check_proto_rawDesc = nil
	file_aperture_flowcontrol_check_v1_check_proto_goTypes = nil
	file_aperture_flowcontrol_check_v1_check_proto_depIdxs = nil
}
