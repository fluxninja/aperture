// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/peers/v1/peers.proto

package peersv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PeerRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PeerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PeerRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PeerRequestMultiError, or
// nil if none found.
func (m *PeerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PeerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return PeerRequestMultiError(errors)
	}

	return nil
}

// PeerRequestMultiError is an error wrapping multiple validation errors
// returned by PeerRequest.ValidateAll() if the designated constraints aren't met.
type PeerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerRequestMultiError) AllErrors() []error { return m }

// PeerRequestValidationError is the validation error returned by
// PeerRequest.Validate if the designated constraints aren't met.
type PeerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerRequestValidationError) ErrorName() string { return "PeerRequestValidationError" }

// Error satisfies the builtin error interface
func (e PeerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerRequestValidationError{}

// Validate checks the field values on Peers with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Peers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Peers with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PeersMultiError, or nil if none found.
func (m *Peers) ValidateAll() error {
	return m.validate(true)
}

func (m *Peers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSelfPeer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PeersValidationError{
					field:  "SelfPeer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PeersValidationError{
					field:  "SelfPeer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSelfPeer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PeersValidationError{
				field:  "SelfPeer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]string, len(m.GetPeers()))
		i := 0
		for key := range m.GetPeers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPeers()[key]
			_ = val

			// no validation rules for Peers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PeersValidationError{
							field:  fmt.Sprintf("Peers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PeersValidationError{
							field:  fmt.Sprintf("Peers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PeersValidationError{
						field:  fmt.Sprintf("Peers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PeersMultiError(errors)
	}

	return nil
}

// PeersMultiError is an error wrapping multiple validation errors returned by
// Peers.ValidateAll() if the designated constraints aren't met.
type PeersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeersMultiError) AllErrors() []error { return m }

// PeersValidationError is the validation error returned by Peers.Validate if
// the designated constraints aren't met.
type PeersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeersValidationError) ErrorName() string { return "PeersValidationError" }

// Error satisfies the builtin error interface
func (e PeersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeersValidationError{}

// Validate checks the field values on Peer with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Peer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Peer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PeerMultiError, or nil if none found.
func (m *Peer) ValidateAll() error {
	return m.validate(true)
}

func (m *Peer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	// no validation rules for Hostname

	// no validation rules for Services

	if len(errors) > 0 {
		return PeerMultiError(errors)
	}

	return nil
}

// PeerMultiError is an error wrapping multiple validation errors returned by
// Peer.ValidateAll() if the designated constraints aren't met.
type PeerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PeerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PeerMultiError) AllErrors() []error { return m }

// PeerValidationError is the validation error returned by Peer.Validate if the
// designated constraints aren't met.
type PeerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PeerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PeerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PeerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PeerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PeerValidationError) ErrorName() string { return "PeerValidationError" }

// Error satisfies the builtin error interface
func (e PeerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPeer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PeerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PeerValidationError{}
