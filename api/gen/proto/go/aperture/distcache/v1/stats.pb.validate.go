// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/distcache/v1/stats.proto

package distcachev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DMap with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *DMap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DMap with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DMapMultiError, or nil if none found.
func (m *DMap) ValidateAll() error {
	return m.validate(true)
}

func (m *DMap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Length

	if all {
		switch v := interface{}(m.GetSlabInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DMapValidationError{
					field:  "SlabInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DMapValidationError{
					field:  "SlabInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlabInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DMapValidationError{
				field:  "SlabInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for NumTables

	if len(errors) > 0 {
		return DMapMultiError(errors)
	}

	return nil
}

// DMapMultiError is an error wrapping multiple validation errors returned by
// DMap.ValidateAll() if the designated constraints aren't met.
type DMapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DMapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DMapMultiError) AllErrors() []error { return m }

// DMapValidationError is the validation error returned by DMap.Validate if the
// designated constraints aren't met.
type DMapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DMapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DMapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DMapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DMapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DMapValidationError) ErrorName() string { return "DMapValidationError" }

// Error satisfies the builtin error interface
func (e DMapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDMap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DMapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DMapValidationError{}

// Validate checks the field values on DMaps with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DMaps) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DMaps with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DMapsMultiError, or nil if none found.
func (m *DMaps) ValidateAll() error {
	return m.validate(true)
}

func (m *DMaps) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntriesTotal

	// no validation rules for DeleteHits

	// no validation rules for DeleteMisses

	// no validation rules for GetMisses

	// no validation rules for GetHits

	// no validation rules for EvictedTotal

	if len(errors) > 0 {
		return DMapsMultiError(errors)
	}

	return nil
}

// DMapsMultiError is an error wrapping multiple validation errors returned by
// DMaps.ValidateAll() if the designated constraints aren't met.
type DMapsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DMapsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DMapsMultiError) AllErrors() []error { return m }

// DMapsValidationError is the validation error returned by DMaps.Validate if
// the designated constraints aren't met.
type DMapsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DMapsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DMapsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DMapsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DMapsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DMapsValidationError) ErrorName() string { return "DMapsValidationError" }

// Error satisfies the builtin error interface
func (e DMapsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDMaps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DMapsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DMapsValidationError{}

// Validate checks the field values on DTopics with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DTopics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DTopics with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DTopicsMultiError, or nil if none found.
func (m *DTopics) ValidateAll() error {
	return m.validate(true)
}

func (m *DTopics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublishedTotal

	// no validation rules for CurrentListeners

	// no validation rules for ListenersTotal

	if len(errors) > 0 {
		return DTopicsMultiError(errors)
	}

	return nil
}

// DTopicsMultiError is an error wrapping multiple validation errors returned
// by DTopics.ValidateAll() if the designated constraints aren't met.
type DTopicsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DTopicsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DTopicsMultiError) AllErrors() []error { return m }

// DTopicsValidationError is the validation error returned by DTopics.Validate
// if the designated constraints aren't met.
type DTopicsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DTopicsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DTopicsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DTopicsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DTopicsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DTopicsValidationError) ErrorName() string { return "DTopicsValidationError" }

// Error satisfies the builtin error interface
func (e DTopicsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDTopics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DTopicsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DTopicsValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Id

	// no validation rules for Birthdate

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Network) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Network with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NetworkMultiError, or nil if none found.
func (m *Network) ValidateAll() error {
	return m.validate(true)
}

func (m *Network) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ConnectionsTotal

	// no validation rules for CurrentConnections

	// no validation rules for WrittenBytesTotal

	// no validation rules for ReadBytesTotal

	// no validation rules for CommandsTotal

	if len(errors) > 0 {
		return NetworkMultiError(errors)
	}

	return nil
}

// NetworkMultiError is an error wrapping multiple validation errors returned
// by Network.ValidateAll() if the designated constraints aren't met.
type NetworkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkMultiError) AllErrors() []error { return m }

// NetworkValidationError is the validation error returned by Network.Validate
// if the designated constraints aren't met.
type NetworkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkValidationError) ErrorName() string { return "NetworkValidationError" }

// Error satisfies the builtin error interface
func (e NetworkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetwork.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkValidationError{}

// Validate checks the field values on Partition with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Partition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Partition with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PartitionMultiError, or nil
// if none found.
func (m *Partition) ValidateAll() error {
	return m.validate(true)
}

func (m *Partition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPreviousOwners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PartitionValidationError{
						field:  fmt.Sprintf("PreviousOwners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PartitionValidationError{
						field:  fmt.Sprintf("PreviousOwners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PartitionValidationError{
					field:  fmt.Sprintf("PreviousOwners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBackups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PartitionValidationError{
						field:  fmt.Sprintf("Backups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PartitionValidationError{
						field:  fmt.Sprintf("Backups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PartitionValidationError{
					field:  fmt.Sprintf("Backups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Length

	{
		sorted_keys := make([]string, len(m.GetDMaps()))
		i := 0
		for key := range m.GetDMaps() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetDMaps()[key]
			_ = val

			// no validation rules for DMaps[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, PartitionValidationError{
							field:  fmt.Sprintf("DMaps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, PartitionValidationError{
							field:  fmt.Sprintf("DMaps[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return PartitionValidationError{
						field:  fmt.Sprintf("DMaps[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return PartitionMultiError(errors)
	}

	return nil
}

// PartitionMultiError is an error wrapping multiple validation errors returned
// by Partition.ValidateAll() if the designated constraints aren't met.
type PartitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PartitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PartitionMultiError) AllErrors() []error { return m }

// PartitionValidationError is the validation error returned by
// Partition.Validate if the designated constraints aren't met.
type PartitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartitionValidationError) ErrorName() string { return "PartitionValidationError" }

// Error satisfies the builtin error interface
func (e PartitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPartition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartitionValidationError{}

// Validate checks the field values on Runtime with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Runtime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Runtime with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RuntimeMultiError, or nil if none found.
func (m *Runtime) ValidateAll() error {
	return m.validate(true)
}

func (m *Runtime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GoOs

	// no validation rules for GoArch

	// no validation rules for Version

	// no validation rules for NumCpu

	// no validation rules for NumGoroutine

	if all {
		switch v := interface{}(m.GetMemStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RuntimeValidationError{
					field:  "MemStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RuntimeValidationError{
					field:  "MemStats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RuntimeValidationError{
				field:  "MemStats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RuntimeMultiError(errors)
	}

	return nil
}

// RuntimeMultiError is an error wrapping multiple validation errors returned
// by Runtime.ValidateAll() if the designated constraints aren't met.
type RuntimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RuntimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RuntimeMultiError) AllErrors() []error { return m }

// RuntimeValidationError is the validation error returned by Runtime.Validate
// if the designated constraints aren't met.
type RuntimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RuntimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RuntimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RuntimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RuntimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RuntimeValidationError) ErrorName() string { return "RuntimeValidationError" }

// Error satisfies the builtin error interface
func (e RuntimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRuntime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RuntimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RuntimeValidationError{}

// Validate checks the field values on SlabInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SlabInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SlabInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SlabInfoMultiError, or nil
// if none found.
func (m *SlabInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SlabInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Allocated

	// no validation rules for Inuse

	// no validation rules for Garbage

	if len(errors) > 0 {
		return SlabInfoMultiError(errors)
	}

	return nil
}

// SlabInfoMultiError is an error wrapping multiple validation errors returned
// by SlabInfo.ValidateAll() if the designated constraints aren't met.
type SlabInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SlabInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SlabInfoMultiError) AllErrors() []error { return m }

// SlabInfoValidationError is the validation error returned by
// SlabInfo.Validate if the designated constraints aren't met.
type SlabInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SlabInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SlabInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SlabInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SlabInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SlabInfoValidationError) ErrorName() string { return "SlabInfoValidationError" }

// Error satisfies the builtin error interface
func (e SlabInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSlabInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SlabInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SlabInfoValidationError{}

// Validate checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stats with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StatsMultiError, or nil if none found.
func (m *Stats) ValidateAll() error {
	return m.validate(true)
}

func (m *Stats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReleaseVersion

	// no validation rules for UptimeSeconds

	if all {
		switch v := interface{}(m.GetRuntime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "Runtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "Runtime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRuntime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "Runtime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClusterCoordinator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "ClusterCoordinator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "ClusterCoordinator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClusterCoordinator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "ClusterCoordinator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	{
		sorted_keys := make([]uint64, len(m.GetPartitions()))
		i := 0
		for key := range m.GetPartitions() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPartitions()[key]
			_ = val

			// no validation rules for Partitions[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StatsValidationError{
							field:  fmt.Sprintf("Partitions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StatsValidationError{
							field:  fmt.Sprintf("Partitions[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StatsValidationError{
						field:  fmt.Sprintf("Partitions[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]uint64, len(m.GetBackups()))
		i := 0
		for key := range m.GetBackups() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetBackups()[key]
			_ = val

			// no validation rules for Backups[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StatsValidationError{
							field:  fmt.Sprintf("Backups[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StatsValidationError{
							field:  fmt.Sprintf("Backups[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StatsValidationError{
						field:  fmt.Sprintf("Backups[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	{
		sorted_keys := make([]uint64, len(m.GetClusterMembers()))
		i := 0
		for key := range m.GetClusterMembers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetClusterMembers()[key]
			_ = val

			// no validation rules for ClusterMembers[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, StatsValidationError{
							field:  fmt.Sprintf("ClusterMembers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, StatsValidationError{
							field:  fmt.Sprintf("ClusterMembers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return StatsValidationError{
						field:  fmt.Sprintf("ClusterMembers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if all {
		switch v := interface{}(m.GetNetwork()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "Network",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "Network",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNetwork()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "Network",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDMaps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "DMaps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "DMaps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDMaps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "DMaps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDTopics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "DTopics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatsValidationError{
					field:  "DTopics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDTopics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatsValidationError{
				field:  "DTopics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StatsMultiError(errors)
	}

	return nil
}

// StatsMultiError is an error wrapping multiple validation errors returned by
// Stats.ValidateAll() if the designated constraints aren't met.
type StatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatsMultiError) AllErrors() []error { return m }

// StatsValidationError is the validation error returned by Stats.Validate if
// the designated constraints aren't met.
type StatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatsValidationError) ErrorName() string { return "StatsValidationError" }

// Error satisfies the builtin error interface
func (e StatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatsValidationError{}
