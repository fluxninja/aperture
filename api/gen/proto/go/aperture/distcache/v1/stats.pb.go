// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: aperture/distcache/v1/stats.proto

package distcachev1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length    int64     `protobuf:"varint,1,opt,name=length,json=Length,proto3" json:"length,omitempty"`
	SlabInfo  *SlabInfo `protobuf:"bytes,2,opt,name=slab_info,json=SlabInfo,proto3" json:"slab_info,omitempty"`
	NumTables int64     `protobuf:"varint,3,opt,name=num_tables,json=NumTables,proto3" json:"num_tables,omitempty"`
}

func (x *DMap) Reset() {
	*x = DMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DMap) ProtoMessage() {}

func (x *DMap) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DMap.ProtoReflect.Descriptor instead.
func (*DMap) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{0}
}

func (x *DMap) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *DMap) GetSlabInfo() *SlabInfo {
	if x != nil {
		return x.SlabInfo
	}
	return nil
}

func (x *DMap) GetNumTables() int64 {
	if x != nil {
		return x.NumTables
	}
	return 0
}

type DMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntriesTotal int64 `protobuf:"varint,1,opt,name=entries_total,json=EntriesTotal,proto3" json:"entries_total,omitempty"`
	DeleteHits   int64 `protobuf:"varint,2,opt,name=delete_hits,json=DeleteHits,proto3" json:"delete_hits,omitempty"`
	DeleteMisses int64 `protobuf:"varint,3,opt,name=delete_misses,json=DeleteMisses,proto3" json:"delete_misses,omitempty"`
	GetMisses    int64 `protobuf:"varint,4,opt,name=get_misses,json=GetMisses,proto3" json:"get_misses,omitempty"`
	GetHits      int64 `protobuf:"varint,5,opt,name=get_hits,json=GetHits,proto3" json:"get_hits,omitempty"`
	EvictedTotal int64 `protobuf:"varint,6,opt,name=evicted_total,json=EvictedTotal,proto3" json:"evicted_total,omitempty"`
}

func (x *DMaps) Reset() {
	*x = DMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DMaps) ProtoMessage() {}

func (x *DMaps) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DMaps.ProtoReflect.Descriptor instead.
func (*DMaps) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{1}
}

func (x *DMaps) GetEntriesTotal() int64 {
	if x != nil {
		return x.EntriesTotal
	}
	return 0
}

func (x *DMaps) GetDeleteHits() int64 {
	if x != nil {
		return x.DeleteHits
	}
	return 0
}

func (x *DMaps) GetDeleteMisses() int64 {
	if x != nil {
		return x.DeleteMisses
	}
	return 0
}

func (x *DMaps) GetGetMisses() int64 {
	if x != nil {
		return x.GetMisses
	}
	return 0
}

func (x *DMaps) GetGetHits() int64 {
	if x != nil {
		return x.GetHits
	}
	return 0
}

func (x *DMaps) GetEvictedTotal() int64 {
	if x != nil {
		return x.EvictedTotal
	}
	return 0
}

type DTopics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublishedTotal   int64 `protobuf:"varint,1,opt,name=published_total,json=PublishedTotal,proto3" json:"published_total,omitempty"`
	CurrentListeners int64 `protobuf:"varint,2,opt,name=current_listeners,json=CurrentListeners,proto3" json:"current_listeners,omitempty"`
	ListenersTotal   int64 `protobuf:"varint,3,opt,name=listeners_total,json=ListenersTotal,proto3" json:"listeners_total,omitempty"`
}

func (x *DTopics) Reset() {
	*x = DTopics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTopics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTopics) ProtoMessage() {}

func (x *DTopics) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTopics.ProtoReflect.Descriptor instead.
func (*DTopics) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{2}
}

func (x *DTopics) GetPublishedTotal() int64 {
	if x != nil {
		return x.PublishedTotal
	}
	return 0
}

func (x *DTopics) GetCurrentListeners() int64 {
	if x != nil {
		return x.CurrentListeners
	}
	return 0
}

func (x *DTopics) GetListenersTotal() int64 {
	if x != nil {
		return x.ListenersTotal
	}
	return 0
}

type Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,json=Name,proto3" json:"name,omitempty"`
	Id        uint64 `protobuf:"varint,2,opt,name=id,json=ID,proto3" json:"id,omitempty"`
	Birthdate int64  `protobuf:"varint,3,opt,name=birthdate,json=Birthdate,proto3" json:"birthdate,omitempty"`
}

func (x *Member) Reset() {
	*x = Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Member) ProtoMessage() {}

func (x *Member) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Member.ProtoReflect.Descriptor instead.
func (*Member) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{3}
}

func (x *Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Member) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Member) GetBirthdate() int64 {
	if x != nil {
		return x.Birthdate
	}
	return 0
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionsTotal   int64 `protobuf:"varint,1,opt,name=connections_total,json=ConnectionsTotal,proto3" json:"connections_total,omitempty"`
	CurrentConnections int64 `protobuf:"varint,2,opt,name=current_connections,json=CurrentConnections,proto3" json:"current_connections,omitempty"`
	WrittenBytesTotal  int64 `protobuf:"varint,3,opt,name=written_bytes_total,json=WrittenBytesTotal,proto3" json:"written_bytes_total,omitempty"`
	ReadBytesTotal     int64 `protobuf:"varint,4,opt,name=read_bytes_total,json=ReadBytesTotal,proto3" json:"read_bytes_total,omitempty"`
	CommandsTotal      int64 `protobuf:"varint,5,opt,name=commands_total,json=CommandsTotal,proto3" json:"commands_total,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{4}
}

func (x *Network) GetConnectionsTotal() int64 {
	if x != nil {
		return x.ConnectionsTotal
	}
	return 0
}

func (x *Network) GetCurrentConnections() int64 {
	if x != nil {
		return x.CurrentConnections
	}
	return 0
}

func (x *Network) GetWrittenBytesTotal() int64 {
	if x != nil {
		return x.WrittenBytesTotal
	}
	return 0
}

func (x *Network) GetReadBytesTotal() int64 {
	if x != nil {
		return x.ReadBytesTotal
	}
	return 0
}

func (x *Network) GetCommandsTotal() int64 {
	if x != nil {
		return x.CommandsTotal
	}
	return 0
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousOwners []*Member        `protobuf:"bytes,1,rep,name=previous_owners,json=PreviousOwners,proto3" json:"previous_owners,omitempty"`
	Backups        []*Member        `protobuf:"bytes,2,rep,name=backups,json=Backups,proto3" json:"backups,omitempty"`
	Length         int64            `protobuf:"varint,3,opt,name=length,json=Length,proto3" json:"length,omitempty"`
	DMaps          map[string]*DMap `protobuf:"bytes,4,rep,name=d_maps,json=DMaps,proto3" json:"d_maps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{5}
}

func (x *Partition) GetPreviousOwners() []*Member {
	if x != nil {
		return x.PreviousOwners
	}
	return nil
}

func (x *Partition) GetBackups() []*Member {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *Partition) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Partition) GetDMaps() map[string]*DMap {
	if x != nil {
		return x.DMaps
	}
	return nil
}

type Runtime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoOs         string           `protobuf:"bytes,1,opt,name=go_os,json=GOOS,proto3" json:"go_os,omitempty"`
	GoArch       string           `protobuf:"bytes,2,opt,name=go_arch,json=GOARCH,proto3" json:"go_arch,omitempty"`
	Version      string           `protobuf:"bytes,3,opt,name=version,json=Version,proto3" json:"version,omitempty"`
	NumCpu       int64            `protobuf:"varint,4,opt,name=num_cpu,json=NumCPU,proto3" json:"num_cpu,omitempty"`
	NumGoroutine int64            `protobuf:"varint,5,opt,name=num_goroutine,json=NumGoroutine,proto3" json:"num_goroutine,omitempty"`
	MemStats     *structpb.Struct `protobuf:"bytes,6,opt,name=mem_stats,json=MemStats,proto3" json:"mem_stats,omitempty"`
}

func (x *Runtime) Reset() {
	*x = Runtime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtime) ProtoMessage() {}

func (x *Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtime.ProtoReflect.Descriptor instead.
func (*Runtime) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{6}
}

func (x *Runtime) GetGoOs() string {
	if x != nil {
		return x.GoOs
	}
	return ""
}

func (x *Runtime) GetGoArch() string {
	if x != nil {
		return x.GoArch
	}
	return ""
}

func (x *Runtime) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Runtime) GetNumCpu() int64 {
	if x != nil {
		return x.NumCpu
	}
	return 0
}

func (x *Runtime) GetNumGoroutine() int64 {
	if x != nil {
		return x.NumGoroutine
	}
	return 0
}

func (x *Runtime) GetMemStats() *structpb.Struct {
	if x != nil {
		return x.MemStats
	}
	return nil
}

type SlabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allocated int64 `protobuf:"varint,1,opt,name=allocated,json=Allocated,proto3" json:"allocated,omitempty"`
	Inuse     int64 `protobuf:"varint,2,opt,name=inuse,json=Inuse,proto3" json:"inuse,omitempty"`
	Garbage   int64 `protobuf:"varint,3,opt,name=garbage,json=Garbage,proto3" json:"garbage,omitempty"`
}

func (x *SlabInfo) Reset() {
	*x = SlabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlabInfo) ProtoMessage() {}

func (x *SlabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlabInfo.ProtoReflect.Descriptor instead.
func (*SlabInfo) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{7}
}

func (x *SlabInfo) GetAllocated() int64 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *SlabInfo) GetInuse() int64 {
	if x != nil {
		return x.Inuse
	}
	return 0
}

func (x *SlabInfo) GetGarbage() int64 {
	if x != nil {
		return x.Garbage
	}
	return 0
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cmdline            []string              `protobuf:"bytes,1,rep,name=cmdline,json=Cmdline,proto3" json:"cmdline,omitempty"`
	ReleaseVersion     string                `protobuf:"bytes,2,opt,name=release_version,json=ReleaseVersion,proto3" json:"release_version,omitempty"`
	UptimeSeconds      int64                 `protobuf:"varint,3,opt,name=uptime_seconds,json=UptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	Runtime            *structpb.Struct      `protobuf:"bytes,4,opt,name=runtime,json=Runtime,proto3" json:"runtime,omitempty"`
	ClusterCoordinator *Member               `protobuf:"bytes,5,opt,name=cluster_coordinator,json=ClusterCoordinator,proto3" json:"cluster_coordinator,omitempty"`
	Member             *Member               `protobuf:"bytes,6,opt,name=member,json=Member,proto3" json:"member,omitempty"`
	Partitions         map[uint64]*Partition `protobuf:"bytes,7,rep,name=partitions,json=Partitions,proto3" json:"partitions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Backups            map[uint64]*Partition `protobuf:"bytes,8,rep,name=backups,json=Backups,proto3" json:"backups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ClusterMembers     map[uint64]*Member    `protobuf:"bytes,9,rep,name=cluster_members,json=ClusterMembers,proto3" json:"cluster_members,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Network            *Network              `protobuf:"bytes,10,opt,name=network,json=Network,proto3" json:"network,omitempty"`
	DMaps              *DMaps                `protobuf:"bytes,11,opt,name=d_maps,json=DMaps,proto3" json:"d_maps,omitempty"`
	DTopics            *DTopics              `protobuf:"bytes,12,opt,name=d_topics,json=DTopics,proto3" json:"d_topics,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_distcache_v1_stats_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_distcache_v1_stats_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_aperture_distcache_v1_stats_proto_rawDescGZIP(), []int{8}
}

func (x *Stats) GetCmdline() []string {
	if x != nil {
		return x.Cmdline
	}
	return nil
}

func (x *Stats) GetReleaseVersion() string {
	if x != nil {
		return x.ReleaseVersion
	}
	return ""
}

func (x *Stats) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *Stats) GetRuntime() *structpb.Struct {
	if x != nil {
		return x.Runtime
	}
	return nil
}

func (x *Stats) GetClusterCoordinator() *Member {
	if x != nil {
		return x.ClusterCoordinator
	}
	return nil
}

func (x *Stats) GetMember() *Member {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *Stats) GetPartitions() map[uint64]*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *Stats) GetBackups() map[uint64]*Partition {
	if x != nil {
		return x.Backups
	}
	return nil
}

func (x *Stats) GetClusterMembers() map[uint64]*Member {
	if x != nil {
		return x.ClusterMembers
	}
	return nil
}

func (x *Stats) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *Stats) GetDMaps() *DMaps {
	if x != nil {
		return x.DMaps
	}
	return nil
}

func (x *Stats) GetDTopics() *DTopics {
	if x != nil {
		return x.DTopics
	}
	return nil
}

var File_aperture_distcache_v1_stats_proto protoreflect.FileDescriptor

var file_aperture_distcache_v1_stats_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69,
	0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x04, 0x44, 0x4d, 0x61, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x09, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x6c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x53, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x22, 0xd1, 0x01, 0x0a, 0x05, 0x44, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x69, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x65, 0x74, 0x48, 0x69, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x07, 0x44, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x4a, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x74, 0x65, 0x22, 0xe8, 0x01, 0x0a, 0x07,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbf, 0x02, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0e, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x07,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x42, 0x0a,
	0x06, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x44, 0x4d, 0x61, 0x70,
	0x73, 0x1a, 0x55, 0x0a, 0x0a, 0x44, 0x4d, 0x61, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x6f, 0x5f, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x4f, 0x4f, 0x53, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x6f, 0x5f,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x4f, 0x41, 0x52,
	0x43, 0x48, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4e,
	0x75, 0x6d, 0x43, 0x50, 0x55, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x6f, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x4e, 0x75,
	0x6d, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x08, 0x4d, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x22, 0x58, 0x0a, 0x08, 0x53, 0x6c, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x75, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x22, 0xe4, 0x07, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6d, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x07, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x35, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73,
	0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x33, 0x0a, 0x06, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x4d, 0x61, 0x70, 0x73, 0x52, 0x05,
	0x44, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x07, 0x44, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x1a, 0x5f, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5c, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69,
	0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x60, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x32, 0x84, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x2e, 0x92, 0x41, 0x10, 0x0a, 0x0e, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x83, 0x02, 0x0a, 0x2d, 0x63, 0x6f, 0x6d,
	0x2e, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x64, 0x69,
	0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x50, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61,
	0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72,
	0x65, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x64,
	0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x44, 0x58,
	0xaa, 0x02, 0x15, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x15, 0x41, 0x70, 0x65, 0x72, 0x74,
	0x75, 0x72, 0x65, 0x5c, 0x44, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x21, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x44, 0x69, 0x73, 0x74,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a,
	0x3a, 0x44, 0x69, 0x73, 0x74, 0x63, 0x61, 0x63, 0x68, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_distcache_v1_stats_proto_rawDescOnce sync.Once
	file_aperture_distcache_v1_stats_proto_rawDescData = file_aperture_distcache_v1_stats_proto_rawDesc
)

func file_aperture_distcache_v1_stats_proto_rawDescGZIP() []byte {
	file_aperture_distcache_v1_stats_proto_rawDescOnce.Do(func() {
		file_aperture_distcache_v1_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_distcache_v1_stats_proto_rawDescData)
	})
	return file_aperture_distcache_v1_stats_proto_rawDescData
}

var file_aperture_distcache_v1_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_aperture_distcache_v1_stats_proto_goTypes = []interface{}{
	(*DMap)(nil),            // 0: aperture.distcache.v1.DMap
	(*DMaps)(nil),           // 1: aperture.distcache.v1.DMaps
	(*DTopics)(nil),         // 2: aperture.distcache.v1.DTopics
	(*Member)(nil),          // 3: aperture.distcache.v1.Member
	(*Network)(nil),         // 4: aperture.distcache.v1.Network
	(*Partition)(nil),       // 5: aperture.distcache.v1.Partition
	(*Runtime)(nil),         // 6: aperture.distcache.v1.Runtime
	(*SlabInfo)(nil),        // 7: aperture.distcache.v1.SlabInfo
	(*Stats)(nil),           // 8: aperture.distcache.v1.Stats
	nil,                     // 9: aperture.distcache.v1.Partition.DMapsEntry
	nil,                     // 10: aperture.distcache.v1.Stats.PartitionsEntry
	nil,                     // 11: aperture.distcache.v1.Stats.BackupsEntry
	nil,                     // 12: aperture.distcache.v1.Stats.ClusterMembersEntry
	(*structpb.Struct)(nil), // 13: google.protobuf.Struct
	(*emptypb.Empty)(nil),   // 14: google.protobuf.Empty
}
var file_aperture_distcache_v1_stats_proto_depIdxs = []int32{
	7,  // 0: aperture.distcache.v1.DMap.slab_info:type_name -> aperture.distcache.v1.SlabInfo
	3,  // 1: aperture.distcache.v1.Partition.previous_owners:type_name -> aperture.distcache.v1.Member
	3,  // 2: aperture.distcache.v1.Partition.backups:type_name -> aperture.distcache.v1.Member
	9,  // 3: aperture.distcache.v1.Partition.d_maps:type_name -> aperture.distcache.v1.Partition.DMapsEntry
	13, // 4: aperture.distcache.v1.Runtime.mem_stats:type_name -> google.protobuf.Struct
	13, // 5: aperture.distcache.v1.Stats.runtime:type_name -> google.protobuf.Struct
	3,  // 6: aperture.distcache.v1.Stats.cluster_coordinator:type_name -> aperture.distcache.v1.Member
	3,  // 7: aperture.distcache.v1.Stats.member:type_name -> aperture.distcache.v1.Member
	10, // 8: aperture.distcache.v1.Stats.partitions:type_name -> aperture.distcache.v1.Stats.PartitionsEntry
	11, // 9: aperture.distcache.v1.Stats.backups:type_name -> aperture.distcache.v1.Stats.BackupsEntry
	12, // 10: aperture.distcache.v1.Stats.cluster_members:type_name -> aperture.distcache.v1.Stats.ClusterMembersEntry
	4,  // 11: aperture.distcache.v1.Stats.network:type_name -> aperture.distcache.v1.Network
	1,  // 12: aperture.distcache.v1.Stats.d_maps:type_name -> aperture.distcache.v1.DMaps
	2,  // 13: aperture.distcache.v1.Stats.d_topics:type_name -> aperture.distcache.v1.DTopics
	0,  // 14: aperture.distcache.v1.Partition.DMapsEntry.value:type_name -> aperture.distcache.v1.DMap
	5,  // 15: aperture.distcache.v1.Stats.PartitionsEntry.value:type_name -> aperture.distcache.v1.Partition
	5,  // 16: aperture.distcache.v1.Stats.BackupsEntry.value:type_name -> aperture.distcache.v1.Partition
	3,  // 17: aperture.distcache.v1.Stats.ClusterMembersEntry.value:type_name -> aperture.distcache.v1.Member
	14, // 18: aperture.distcache.v1.DistCacheService.GetStats:input_type -> google.protobuf.Empty
	8,  // 19: aperture.distcache.v1.DistCacheService.GetStats:output_type -> aperture.distcache.v1.Stats
	19, // [19:20] is the sub-list for method output_type
	18, // [18:19] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_aperture_distcache_v1_stats_proto_init() }
func file_aperture_distcache_v1_stats_proto_init() {
	if File_aperture_distcache_v1_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aperture_distcache_v1_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_distcache_v1_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_distcache_v1_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DTopics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_distcache_v1_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_distcache_v1_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_distcache_v1_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_distcache_v1_stats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runtime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_distcache_v1_stats_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_distcache_v1_stats_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_distcache_v1_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_distcache_v1_stats_proto_goTypes,
		DependencyIndexes: file_aperture_distcache_v1_stats_proto_depIdxs,
		MessageInfos:      file_aperture_distcache_v1_stats_proto_msgTypes,
	}.Build()
	File_aperture_distcache_v1_stats_proto = out.File
	file_aperture_distcache_v1_stats_proto_rawDesc = nil
	file_aperture_distcache_v1_stats_proto_goTypes = nil
	file_aperture_distcache_v1_stats_proto_depIdxs = nil
}
