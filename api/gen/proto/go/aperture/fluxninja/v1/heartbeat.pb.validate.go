// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aperture/fluxninja/v1/heartbeat.proto

package fluxninjav1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReportRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportRequestMultiError, or
// nil if none found.
func (m *ReportRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetVersionInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "VersionInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVersionInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "VersionInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProcessInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "ProcessInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "ProcessInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProcessInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "ProcessInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHostInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "HostInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "HostInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHostInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "HostInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AgentGroup

	if all {
		switch v := interface{}(m.GetControllerInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "ControllerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "ControllerInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetControllerInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "ControllerInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPeers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "Peers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "Peers",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPeers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "Peers",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServicesList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "ServicesList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "ServicesList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServicesList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "ServicesList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAllStatuses()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "AllStatuses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "AllStatuses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAllStatuses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "AllStatuses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPolicies()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "Policies",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "Policies",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPolicies()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "Policies",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFlowControlPoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "FlowControlPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "FlowControlPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlowControlPoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "FlowControlPoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAutoScaleKubernetesControlPoints()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "AutoScaleKubernetesControlPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReportRequestValidationError{
					field:  "AutoScaleKubernetesControlPoints",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAutoScaleKubernetesControlPoints()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReportRequestValidationError{
				field:  "AutoScaleKubernetesControlPoints",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstallationMode

	if len(errors) > 0 {
		return ReportRequestMultiError(errors)
	}

	return nil
}

// ReportRequestMultiError is an error wrapping multiple validation errors
// returned by ReportRequest.ValidateAll() if the designated constraints
// aren't met.
type ReportRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportRequestMultiError) AllErrors() []error { return m }

// ReportRequestValidationError is the validation error returned by
// ReportRequest.Validate if the designated constraints aren't met.
type ReportRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportRequestValidationError) ErrorName() string { return "ReportRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReportRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportRequestValidationError{}

// Validate checks the field values on ReportResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReportResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReportResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReportResponseMultiError,
// or nil if none found.
func (m *ReportResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReportResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReportResponseMultiError(errors)
	}

	return nil
}

// ReportResponseMultiError is an error wrapping multiple validation errors
// returned by ReportResponse.ValidateAll() if the designated constraints
// aren't met.
type ReportResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReportResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReportResponseMultiError) AllErrors() []error { return m }

// ReportResponseValidationError is the validation error returned by
// ReportResponse.Validate if the designated constraints aren't met.
type ReportResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReportResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReportResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReportResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReportResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReportResponseValidationError) ErrorName() string { return "ReportResponseValidationError" }

// Error satisfies the builtin error interface
func (e ReportResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReportResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReportResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReportResponseValidationError{}

// Validate checks the field values on ControllerInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ControllerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ControllerInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ControllerInfoMultiError,
// or nil if none found.
func (m *ControllerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ControllerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ControllerInfoMultiError(errors)
	}

	return nil
}

// ControllerInfoMultiError is an error wrapping multiple validation errors
// returned by ControllerInfo.ValidateAll() if the designated constraints
// aren't met.
type ControllerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ControllerInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ControllerInfoMultiError) AllErrors() []error { return m }

// ControllerInfoValidationError is the validation error returned by
// ControllerInfo.Validate if the designated constraints aren't met.
type ControllerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ControllerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ControllerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ControllerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ControllerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ControllerInfoValidationError) ErrorName() string { return "ControllerInfoValidationError" }

// Error satisfies the builtin error interface
func (e ControllerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sControllerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ControllerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ControllerInfoValidationError{}

// Validate checks the field values on ServicesList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServicesList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServicesList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServicesListMultiError, or
// nil if none found.
func (m *ServicesList) ValidateAll() error {
	return m.validate(true)
}

func (m *ServicesList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServicesListValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServicesListValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServicesListValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOverlappingServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServicesListValidationError{
						field:  fmt.Sprintf("OverlappingServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServicesListValidationError{
						field:  fmt.Sprintf("OverlappingServices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServicesListValidationError{
					field:  fmt.Sprintf("OverlappingServices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ServicesListMultiError(errors)
	}

	return nil
}

// ServicesListMultiError is an error wrapping multiple validation errors
// returned by ServicesList.ValidateAll() if the designated constraints aren't met.
type ServicesListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServicesListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServicesListMultiError) AllErrors() []error { return m }

// ServicesListValidationError is the validation error returned by
// ServicesList.Validate if the designated constraints aren't met.
type ServicesListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServicesListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServicesListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServicesListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServicesListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServicesListValidationError) ErrorName() string { return "ServicesListValidationError" }

// Error satisfies the builtin error interface
func (e ServicesListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServicesList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServicesListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServicesListValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for EntitiesCount

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on OverlappingService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OverlappingService) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OverlappingService with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OverlappingServiceMultiError, or nil if none found.
func (m *OverlappingService) ValidateAll() error {
	return m.validate(true)
}

func (m *OverlappingService) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Service1

	// no validation rules for Service2

	// no validation rules for EntitiesCount

	if len(errors) > 0 {
		return OverlappingServiceMultiError(errors)
	}

	return nil
}

// OverlappingServiceMultiError is an error wrapping multiple validation errors
// returned by OverlappingService.ValidateAll() if the designated constraints
// aren't met.
type OverlappingServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OverlappingServiceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OverlappingServiceMultiError) AllErrors() []error { return m }

// OverlappingServiceValidationError is the validation error returned by
// OverlappingService.Validate if the designated constraints aren't met.
type OverlappingServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OverlappingServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OverlappingServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OverlappingServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OverlappingServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OverlappingServiceValidationError) ErrorName() string {
	return "OverlappingServiceValidationError"
}

// Error satisfies the builtin error interface
func (e OverlappingServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOverlappingService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OverlappingServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OverlappingServiceValidationError{}
