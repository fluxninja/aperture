// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: aperture/rpc/v1/rpc.proto

// Messages for aperturectl → controller and controller → agent communication.

package rpcv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Coordinator_Connect_FullMethodName = "/aperture.rpc.v1.Coordinator/Connect"
)

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (Coordinator_ConnectClient, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) Connect(ctx context.Context, opts ...grpc.CallOption) (Coordinator_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Coordinator_ServiceDesc.Streams[0], Coordinator_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coordinatorConnectClient{stream}
	return x, nil
}

type Coordinator_ConnectClient interface {
	Send(*ClientToServer) error
	Recv() (*ServerToClient, error)
	grpc.ClientStream
}

type coordinatorConnectClient struct {
	grpc.ClientStream
}

func (x *coordinatorConnectClient) Send(m *ClientToServer) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coordinatorConnectClient) Recv() (*ServerToClient, error) {
	m := new(ServerToClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations should embed UnimplementedCoordinatorServer
// for forward compatibility
type CoordinatorServer interface {
	Connect(Coordinator_ConnectServer) error
}

// UnimplementedCoordinatorServer should be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServer struct {
}

func (UnimplementedCoordinatorServer) Connect(Coordinator_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoordinatorServer).Connect(&coordinatorConnectServer{stream})
}

type Coordinator_ConnectServer interface {
	Send(*ServerToClient) error
	Recv() (*ClientToServer, error)
	grpc.ServerStream
}

type coordinatorConnectServer struct {
	grpc.ServerStream
}

func (x *coordinatorConnectServer) Send(m *ServerToClient) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coordinatorConnectServer) Recv() (*ClientToServer, error) {
	m := new(ClientToServer)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aperture.rpc.v1.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Coordinator_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aperture/rpc/v1/rpc.proto",
}
