// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: aperture/rpc/v1/rpc.proto

// Messages for aperturectl → controller and controller → agent communication.

package rpcv1

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the request, this should be unique per client connection. First
	// request id on the connection should be equal to nextID from the Hello
	// message.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Mandatory timeout for processing request. Timeout is handled on
	// caller-side. After it passes, caller is no longer interested in a response,
	// and callee can forget about the request.
	Timeout *durationpb.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Request payload. The method on the callee will be dispatched by request's type.
	Payload *anypb.Any `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_aperture_rpc_v1_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Request) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Request) GetPayload() *anypb.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Result:
	//
	//	*Response_Payload
	//	*Response_Error
	Result isResponse_Result `protobuf_oneof:"result"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_aperture_rpc_v1_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *Response) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *Response) GetResult() isResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *Response) GetPayload() []byte {
	if x, ok := x.GetResult().(*Response_Payload); ok {
		return x.Payload
	}
	return nil
}

func (x *Response) GetError() *status.Status {
	if x, ok := x.GetResult().(*Response_Error); ok {
		return x.Error
	}
	return nil
}

type isResponse_Result interface {
	isResponse_Result()
}

type Response_Payload struct {
	// Payload is a message of a type implied by request kind.
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3,oneof"`
}

type Response_Error struct {
	Error *status.Status `protobuf:"bytes,3,opt,name=error,proto3,oneof"`
}

func (*Response_Payload) isResponse_Result() {}

func (*Response_Error) isResponse_Result() {}

type ServerToClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//
	//	*ServerToClient_Request
	//	*ServerToClient_CancelId
	Command isServerToClient_Command `protobuf_oneof:"command"`
}

func (x *ServerToClient) Reset() {
	*x = ServerToClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerToClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerToClient) ProtoMessage() {}

func (x *ServerToClient) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerToClient.ProtoReflect.Descriptor instead.
func (*ServerToClient) Descriptor() ([]byte, []int) {
	return file_aperture_rpc_v1_rpc_proto_rawDescGZIP(), []int{2}
}

func (m *ServerToClient) GetCommand() isServerToClient_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *ServerToClient) GetRequest() *Request {
	if x, ok := x.GetCommand().(*ServerToClient_Request); ok {
		return x.Request
	}
	return nil
}

func (x *ServerToClient) GetCancelId() uint64 {
	if x, ok := x.GetCommand().(*ServerToClient_CancelId); ok {
		return x.CancelId
	}
	return 0
}

type isServerToClient_Command interface {
	isServerToClient_Command()
}

type ServerToClient_Request struct {
	// Make a request to client. Expect AgentToController message in the
	// future containing Response with the same id.
	Request *Request `protobuf:"bytes,1,opt,name=request,proto3,oneof"`
}

type ServerToClient_CancelId struct {
	// Cancels in-flight request.
	//
	// After cancellation, the response is not expected to be received, but
	// might happen that it will be received. If so, it should be ignored.
	CancelId uint64 `protobuf:"varint,2,opt,name=cancel_id,json=cancelId,proto3,oneof"`
}

func (*ServerToClient_Request) isServerToClient_Command() {}

func (*ServerToClient_CancelId) isServerToClient_Command() {}

type ClientToServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Msg:
	//
	//	*ClientToServer_Hello_
	//	*ClientToServer_Response
	Msg isClientToServer_Msg `protobuf_oneof:"msg"`
}

func (x *ClientToServer) Reset() {
	*x = ClientToServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientToServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer) ProtoMessage() {}

func (x *ClientToServer) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer.ProtoReflect.Descriptor instead.
func (*ClientToServer) Descriptor() ([]byte, []int) {
	return file_aperture_rpc_v1_rpc_proto_rawDescGZIP(), []int{3}
}

func (m *ClientToServer) GetMsg() isClientToServer_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *ClientToServer) GetHello() *ClientToServer_Hello {
	if x, ok := x.GetMsg().(*ClientToServer_Hello_); ok {
		return x.Hello
	}
	return nil
}

func (x *ClientToServer) GetResponse() *Response {
	if x, ok := x.GetMsg().(*ClientToServer_Response); ok {
		return x.Response
	}
	return nil
}

type isClientToServer_Msg interface {
	isClientToServer_Msg()
}

type ClientToServer_Hello_ struct {
	Hello *ClientToServer_Hello `protobuf:"bytes,1,opt,name=hello,proto3,oneof"`
}

type ClientToServer_Response struct {
	Response *Response `protobuf:"bytes,2,opt,name=response,proto3,oneof"`
}

func (*ClientToServer_Hello_) isClientToServer_Msg() {}

func (*ClientToServer_Response) isClientToServer_Msg() {}

type ClientToServer_Hello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NextId uint64 `protobuf:"varint,2,opt,name=next_id,json=nextId,proto3" json:"next_id,omitempty"`
}

func (x *ClientToServer_Hello) Reset() {
	*x = ClientToServer_Hello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientToServer_Hello) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientToServer_Hello) ProtoMessage() {}

func (x *ClientToServer_Hello) ProtoReflect() protoreflect.Message {
	mi := &file_aperture_rpc_v1_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientToServer_Hello.ProtoReflect.Descriptor instead.
func (*ClientToServer_Hello) Descriptor() ([]byte, []int) {
	return file_aperture_rpc_v1_rpc_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ClientToServer_Hello) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientToServer_Hello) GetNextId() uint64 {
	if x != nil {
		return x.NextId
	}
	return 0
}

var File_aperture_rpc_v1_rpc_proto protoreflect.FileDescriptor

var file_aperture_rpc_v1_rpc_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70, 0x65,
	0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7e, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x12, 0x2e, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x6c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x70,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0xc5, 0x01, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x68, 0x65, 0x6c,
	0x6c, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x34, 0x0a, 0x05, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x49,
	0x64, 0x42, 0x05, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x32, 0x5e, 0x0a, 0x0b, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0xda, 0x01, 0x0a, 0x27, 0x63, 0x6f, 0x6d,
	0x2e, 0x66, 0x6c, 0x75, 0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x52, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x6c, 0x75,
	0x78, 0x6e, 0x69, 0x6e, 0x6a, 0x61, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x76, 0x31, 0x3b, 0x72, 0x70, 0x63, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x41, 0x52, 0x58, 0xaa,
	0x02, 0x0f, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x52, 0x70, 0x63, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x0f, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x52, 0x70, 0x63,
	0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5c, 0x52,
	0x70, 0x63, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x11, 0x41, 0x70, 0x65, 0x72, 0x74, 0x75, 0x72, 0x65, 0x3a, 0x3a, 0x52, 0x70,
	0x63, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aperture_rpc_v1_rpc_proto_rawDescOnce sync.Once
	file_aperture_rpc_v1_rpc_proto_rawDescData = file_aperture_rpc_v1_rpc_proto_rawDesc
)

func file_aperture_rpc_v1_rpc_proto_rawDescGZIP() []byte {
	file_aperture_rpc_v1_rpc_proto_rawDescOnce.Do(func() {
		file_aperture_rpc_v1_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_aperture_rpc_v1_rpc_proto_rawDescData)
	})
	return file_aperture_rpc_v1_rpc_proto_rawDescData
}

var file_aperture_rpc_v1_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_aperture_rpc_v1_rpc_proto_goTypes = []interface{}{
	(*Request)(nil),              // 0: aperture.rpc.v1.Request
	(*Response)(nil),             // 1: aperture.rpc.v1.Response
	(*ServerToClient)(nil),       // 2: aperture.rpc.v1.ServerToClient
	(*ClientToServer)(nil),       // 3: aperture.rpc.v1.ClientToServer
	(*ClientToServer_Hello)(nil), // 4: aperture.rpc.v1.ClientToServer.Hello
	(*durationpb.Duration)(nil),  // 5: google.protobuf.Duration
	(*anypb.Any)(nil),            // 6: google.protobuf.Any
	(*status.Status)(nil),        // 7: google.rpc.Status
}
var file_aperture_rpc_v1_rpc_proto_depIdxs = []int32{
	5, // 0: aperture.rpc.v1.Request.timeout:type_name -> google.protobuf.Duration
	6, // 1: aperture.rpc.v1.Request.payload:type_name -> google.protobuf.Any
	7, // 2: aperture.rpc.v1.Response.error:type_name -> google.rpc.Status
	0, // 3: aperture.rpc.v1.ServerToClient.request:type_name -> aperture.rpc.v1.Request
	4, // 4: aperture.rpc.v1.ClientToServer.hello:type_name -> aperture.rpc.v1.ClientToServer.Hello
	1, // 5: aperture.rpc.v1.ClientToServer.response:type_name -> aperture.rpc.v1.Response
	3, // 6: aperture.rpc.v1.Coordinator.Connect:input_type -> aperture.rpc.v1.ClientToServer
	2, // 7: aperture.rpc.v1.Coordinator.Connect:output_type -> aperture.rpc.v1.ServerToClient
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_aperture_rpc_v1_rpc_proto_init() }
func file_aperture_rpc_v1_rpc_proto_init() {
	if File_aperture_rpc_v1_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aperture_rpc_v1_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_rpc_v1_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_rpc_v1_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerToClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_rpc_v1_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientToServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aperture_rpc_v1_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientToServer_Hello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aperture_rpc_v1_rpc_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Response_Payload)(nil),
		(*Response_Error)(nil),
	}
	file_aperture_rpc_v1_rpc_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ServerToClient_Request)(nil),
		(*ServerToClient_CancelId)(nil),
	}
	file_aperture_rpc_v1_rpc_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ClientToServer_Hello_)(nil),
		(*ClientToServer_Response)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aperture_rpc_v1_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_aperture_rpc_v1_rpc_proto_goTypes,
		DependencyIndexes: file_aperture_rpc_v1_rpc_proto_depIdxs,
		MessageInfos:      file_aperture_rpc_v1_rpc_proto_msgTypes,
	}.Build()
	File_aperture_rpc_v1_rpc_proto = out.File
	file_aperture_rpc_v1_rpc_proto_rawDesc = nil
	file_aperture_rpc_v1_rpc_proto_goTypes = nil
	file_aperture_rpc_v1_rpc_proto_depIdxs = nil
}
