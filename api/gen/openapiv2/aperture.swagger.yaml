swagger: "2.0"
info:
  title: Aperture API
  version: "1.0"
tags:
  - name: AutoScaleKubernetesControlPointsService
  - name: BlueprintsService
  - name: FlowControlService
  - name: PolicyService
  - name: PolicyService
  - name: EntitiesService
  - name: FlowControlPointsService
  - name: FlowPreviewService
  - name: StatusService
  - name: Controller
  - name: DistCacheService
  - name: FlowControlServiceHTTP
  - name: InfoService
  - name: PeerDiscoveryService
  - name: FluxNinjaService
  - name: ControllerInfoService
consumes:
  - application/json
produces:
  - application/json
paths:
  /fluxninja/v1/blueprints:
    get:
      operationId: BlueprintsService_List
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.cloud.v1.ListResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - BlueprintsService
    post:
      operationId: BlueprintsService_Apply
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: blueprint.blueprints_name
          in: query
          required: false
          type: string
        - name: blueprint.version
          in: query
          required: false
          type: string
        - name: blueprint.policy_name
          in: query
          required: false
          type: string
        - name: blueprint.values
          in: query
          required: false
          type: string
          format: byte
      tags:
        - BlueprintsService
  /fluxninja/v1/blueprints/{policy_name}:
    get:
      operationId: BlueprintsService_Get
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.cloud.v1.GetResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: policy_name
          in: path
          required: true
          type: string
      tags:
        - BlueprintsService
    delete:
      operationId: BlueprintsService_Delete
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: policy_name
          in: path
          required: true
          type: string
      tags:
        - BlueprintsService
  /fluxninja/v1/blueprints/{policy_name}/archive:
    delete:
      operationId: BlueprintsService_Archive
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: policy_name
          in: path
          required: true
          type: string
      tags:
        - BlueprintsService
  /fluxninja/v1/controllerinfo:
    get:
      operationId: ControllerInfoService_GetControllerInfo
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.fluxninja.v1.ControllerInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - ControllerInfoService
  /fluxninja/v1/report:
    post:
      summary: Report accepts information about agents' health and applied configurations/policies.
      operationId: FluxNinjaService_Report
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.fluxninja.v1.ReportResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/aperture.fluxninja.v1.ReportRequest'
      tags:
        - FluxNinjaService
  /v1/autoscale/kubernetes/controlpoints:
    get:
      operationId: AutoScaleKubernetesControlPointsService_GetControlPoints
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-agent
  /v1/decisions/{decision_type}:
    get:
      operationId: PolicyService_GetDecisions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.GetDecisionsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: decision_type
          in: path
          required: true
          type: string
      tags:
        - aperture-controller
  /v1/discovery/entities:
    get:
      operationId: EntitiesService_GetEntities
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.discovery.entities.v1.Entities'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-agent
  /v1/discovery/entities/ip-address/{ip_address}:
    get:
      operationId: EntitiesService_GetEntityByIPAddress
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.discovery.entities.v1.Entity'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: ip_address
          in: path
          required: true
          type: string
      tags:
        - aperture-agent
  /v1/discovery/entities/name/{name}:
    get:
      operationId: EntitiesService_GetEntityByName
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.discovery.entities.v1.Entity'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: name
          in: path
          required: true
          type: string
      tags:
        - aperture-agent
  /v1/distcache/stats:
    get:
      operationId: DistCacheService_GetStats
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-agent
  /v1/dynamic-configs/{policy_name}:
    get:
      summary: GetDynamicConfig lists dynamic configuration for a policy.
      operationId: PolicyService_GetDynamicConfig
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.GetDynamicConfigResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: policy_name
          in: path
          required: true
          type: string
      tags:
        - aperture-controller
    delete:
      summary: DeleteDynamicConfig deletes dynamic configuration for a policy.
      operationId: PolicyService_DeleteDynamicConfig
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: policy_name
          in: path
          required: true
          type: string
      tags:
        - aperture-controller
    post:
      summary: PostDynamicConfig creates/updates dynamic configuration based on the provided request.
      operationId: PolicyService_PostDynamicConfig
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: policy_name
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              dynamic_config:
                type: object
            description: PostDynamicConfigRequest is a request to patch dynamic configuration for Policy.
      tags:
        - aperture-controller
  /v1/flowcontrol/checkhttp:
    post:
      operationId: FlowControlServiceHTTP_CheckHTTP
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.flowcontrol.checkhttp.v1.CheckHTTPResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest'
      tags:
        - aperture-agent
  /v1/flowcontrol/controlpoints:
    get:
      operationId: FlowControlPointsService_GetControlPoints
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.flowcontrol.controlpoints.v1.FlowControlPoints'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-agent
  /v1/flowcontrol/preview/http_requests/{control_point}:
    post:
      operationId: FlowPreviewService_PreviewHTTPRequests2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.flowcontrol.preview.v1.PreviewHTTPRequestsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: control_point
          description: Control point to preview.
          in: path
          required: true
          type: string
        - name: label_matcher
          description: Flow labels to match. Optional parameter for advanced filtering.
          in: body
          required: true
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.LabelMatcher'
        - name: samples
          description: Number of samples to collect.
          in: query
          required: false
          type: string
          format: int64
        - name: service
          description: Service to preview.
          in: query
          required: false
          type: string
      tags:
        - aperture-agent
  /v1/flowcontrol/preview/http_requests/{service}/{control_point}:
    post:
      operationId: FlowPreviewService_PreviewHTTPRequests
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.flowcontrol.preview.v1.PreviewHTTPRequestsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: service
          description: Service to preview.
          in: path
          required: true
          type: string
        - name: control_point
          description: Control point to preview.
          in: path
          required: true
          type: string
        - name: label_matcher
          description: Flow labels to match. Optional parameter for advanced filtering.
          in: body
          required: true
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.LabelMatcher'
        - name: samples
          description: Number of samples to collect.
          in: query
          required: false
          type: string
          format: int64
      tags:
        - aperture-agent
  /v1/flowcontrol/preview/labels/{control_point}:
    post:
      operationId: FlowPreviewService_PreviewFlowLabels2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: control_point
          description: Control point to preview.
          in: path
          required: true
          type: string
        - name: label_matcher
          description: Flow labels to match. Optional parameter for advanced filtering.
          in: body
          required: true
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.LabelMatcher'
        - name: samples
          description: Number of samples to collect.
          in: query
          required: false
          type: string
          format: int64
        - name: service
          description: Service to preview.
          in: query
          required: false
          type: string
      tags:
        - aperture-agent
  /v1/flowcontrol/preview/labels/{service}/{control_point}:
    post:
      operationId: FlowPreviewService_PreviewFlowLabels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: service
          description: Service to preview.
          in: path
          required: true
          type: string
        - name: control_point
          description: Control point to preview.
          in: path
          required: true
          type: string
        - name: label_matcher
          description: Flow labels to match. Optional parameter for advanced filtering.
          in: body
          required: true
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.LabelMatcher'
        - name: samples
          description: Number of samples to collect.
          in: query
          required: false
          type: string
          format: int64
      tags:
        - aperture-agent
  /v1/info/host:
    get:
      operationId: InfoService_Host
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.info.v1.HostInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-agent
        - aperture-controller
  /v1/info/process:
    get:
      operationId: InfoService_Process
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.info.v1.ProcessInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-agent
        - aperture-controller
  /v1/info/version:
    get:
      operationId: InfoService_Version
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.info.v1.VersionInfo'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-agent
        - aperture-controller
  /v1/peers:
    get:
      operationId: PeerDiscoveryService_GetPeers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.peers.v1.Peers'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-agent
  /v1/peers/address/{address}:
    get:
      operationId: PeerDiscoveryService_GetPeer
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.peers.v1.Peer'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: address
          in: path
          required: true
          type: string
      tags:
        - aperture-agent
  /v1/policies:
    get:
      summary: GetPolicies returns all policies.
      operationId: PolicyService_GetPolicies
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.GetPoliciesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      tags:
        - aperture-controller
  /v1/policies/{name}:
    get:
      summary: GetPolicy returns a policy with the specified name.
      operationId: PolicyService_GetPolicy
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.GetPolicyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: name
          in: path
          required: true
          type: string
      tags:
        - aperture-controller
    delete:
      summary: DeletePolicy removes a policy with the specified name.
      operationId: PolicyService_DeletePolicy
      responses:
        "200":
          description: A successful response.
          schema:
            type: object
            properties: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: name
          in: path
          required: true
          type: string
      tags:
        - aperture-controller
  /v1/policies/{policy_name}:
    post:
      summary: UpsertPolicy creates/updates policy based on the provided request.
      operationId: PolicyService_UpsertPolicy
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.UpsertPolicyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: policy_name
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              policy:
                $ref: '#/definitions/aperture.policy.language.v1.Policy'
              policy_string:
                type: string
            description: PostPolicyRequest is a request to create or update Policy.
      tags:
        - aperture-controller
    patch:
      summary: UpsertPolicy creates/updates policy based on the provided request.
      operationId: PolicyService_UpsertPolicy2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.policy.language.v1.UpsertPolicyResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: policy_name
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              policy:
                $ref: '#/definitions/aperture.policy.language.v1.Policy'
              policy_string:
                type: string
            description: PostPolicyRequest is a request to create or update Policy.
      tags:
        - aperture-controller
  /v1/status/{path}:
    get:
      operationId: StatusService_GetGroupStatus
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/aperture.status.v1.GroupStatus'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/google.rpc.Status'
      parameters:
        - name: path
          in: path
          required: true
          type: string
          pattern: .+
      tags:
        - aperture-agent
        - aperture-controller
definitions:
  aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoint:
    type: object
    properties:
      api_version:
        type: string
      kind:
        type: string
      namespace:
        type: string
      name:
        type: string
  aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints:
    type: object
    properties:
      auto_scale_kubernetes_control_points:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoint'
  aperture.cloud.v1.Blueprint:
    type: object
    properties:
      blueprints_name:
        type: string
      version:
        type: string
      policy_name:
        type: string
      values:
        type: string
        format: byte
  aperture.cloud.v1.GetResponse:
    type: object
    properties:
      blueprint:
        $ref: '#/definitions/aperture.cloud.v1.Blueprint'
  aperture.cloud.v1.ListResponse:
    type: object
    properties:
      blueprints:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.cloud.v1.Blueprint'
  aperture.cmd.v1.GlobalAutoScaleControlPoint:
    type: object
    properties:
      auto_scale_control_point:
        $ref: '#/definitions/aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoint'
      agent_group:
        type: string
  aperture.cmd.v1.GlobalFlowControlPoint:
    type: object
    properties:
      flow_control_point:
        $ref: '#/definitions/aperture.flowcontrol.controlpoints.v1.FlowControlPoint'
      agent_group:
        type: string
    description: |-
      GlobalFlowControlPoint contains info about a control point on a given
      service with explicit Agent Group.
  aperture.cmd.v1.GlobalService:
    type: object
    properties:
      name:
        type: string
      agent_group:
        type: string
    description: GlobalService is a service with explicit agent group.
  aperture.cmd.v1.ListAgentsResponse:
    type: object
    properties:
      agents:
        type: array
        items:
          type: string
  aperture.cmd.v1.ListAutoScaleControlPointsControllerResponse:
    type: object
    properties:
      global_auto_scale_control_points:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.cmd.v1.GlobalAutoScaleControlPoint'
      errors_count:
        type: integer
        format: int64
  aperture.cmd.v1.ListDiscoveryEntitiesAgentResponse:
    type: object
    properties:
      entities:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.discovery.entities.v1.Entity'
  aperture.cmd.v1.ListDiscoveryEntitiesControllerResponse:
    type: object
    properties:
      entities:
        $ref: '#/definitions/aperture.cmd.v1.ListDiscoveryEntitiesAgentResponse'
      errors_count:
        type: integer
        format: int64
  aperture.cmd.v1.ListDiscoveryEntityAgentResponse:
    type: object
    properties:
      entity:
        $ref: '#/definitions/aperture.discovery.entities.v1.Entity'
  aperture.cmd.v1.ListFlowControlPointsControllerResponse:
    type: object
    properties:
      global_flow_control_points:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.cmd.v1.GlobalFlowControlPoint'
      errors_count:
        type: integer
        format: int64
  aperture.cmd.v1.ListServicesControllerResponse:
    type: object
    properties:
      services:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.cmd.v1.GlobalService'
      errors_count:
        type: integer
        format: int64
  aperture.cmd.v1.PreviewFlowLabelsControllerResponse:
    type: object
    properties:
      response:
        $ref: '#/definitions/aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse'
  aperture.cmd.v1.PreviewHTTPRequestsControllerResponse:
    type: object
    properties:
      response:
        $ref: '#/definitions/aperture.flowcontrol.preview.v1.PreviewHTTPRequestsResponse'
  aperture.discovery.entities.v1.Entities:
    type: object
    properties:
      entities_by_ip_address:
        $ref: '#/definitions/aperture.discovery.entities.v1.Entities.Entities'
      entities_by_name:
        $ref: '#/definitions/aperture.discovery.entities.v1.Entities.Entities'
    description: Entities contains both mappings of ip address to entity and entity name to entity.
  aperture.discovery.entities.v1.Entities.Entities:
    type: object
    properties:
      entities:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.discovery.entities.v1.Entity'
    description: Entities defines mapping of entities.
  aperture.discovery.entities.v1.Entity:
    type: object
    properties:
      uid:
        type: string
        description: |-
          Unique identifier of the entity.

          @gotags: validate:"required"
      ip_address:
        type: string
        description: |-
          IP address of the entity.

          @gotags: validate:"required,ip"
      name:
        type: string
        description: Name of the entity. For example, pod name.
      namespace:
        type: string
        description: Namespace of the entity. For example, pod namespace.
      node_name:
        type: string
        description: Node name of the entity. For example, hostname.
      services:
        type: array
        items:
          type: string
        description: |-
          Services of the entity.

          @gotags: validate:"gt=0"
    description: Entity represents a pod, VM, and so on.
  aperture.flowcontrol.check.v1.CacheDeleteRequest:
    type: object
    properties:
      control_point:
        type: string
      result_cache_key:
        type: string
      global_cache_keys:
        type: array
        items:
          type: string
  aperture.flowcontrol.check.v1.CacheDeleteResponse:
    type: object
    properties:
      result_cache_response:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.KeyDeleteResponse'
      global_cache_responses:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.flowcontrol.check.v1.KeyDeleteResponse'
  aperture.flowcontrol.check.v1.CacheEntry:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
        format: byte
      ttl:
        type: string
  aperture.flowcontrol.check.v1.CacheLookupRequest:
    type: object
    properties:
      control_point:
        type: string
      result_cache_key:
        type: string
        description: Key for result cache that needs to be fetched.
      global_cache_keys:
        type: array
        items:
          type: string
        description: Keys for global cache entries that need to be fetched.
  aperture.flowcontrol.check.v1.CacheLookupResponse:
    type: object
    properties:
      result_cache_response:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.KeyLookupResponse'
      global_cache_responses:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.flowcontrol.check.v1.KeyLookupResponse'
  aperture.flowcontrol.check.v1.CacheLookupStatus:
    type: string
    enum:
      - HIT
      - MISS
    default: HIT
  aperture.flowcontrol.check.v1.CacheOperationStatus:
    type: string
    enum:
      - SUCCESS
      - ERROR
    default: SUCCESS
  aperture.flowcontrol.check.v1.CacheUpsertRequest:
    type: object
    properties:
      control_point:
        type: string
      result_cache_entry:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.CacheEntry'
      global_cache_entries:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.flowcontrol.check.v1.CacheEntry'
  aperture.flowcontrol.check.v1.CacheUpsertResponse:
    type: object
    properties:
      result_cache_response:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.KeyUpsertResponse'
      global_cache_responses:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.flowcontrol.check.v1.KeyUpsertResponse'
  aperture.flowcontrol.check.v1.CheckResponse:
    type: object
    properties:
      start:
        type: string
        format: date-time
        title: start timestamp
      end:
        type: string
        format: date-time
        title: end timestamp
      services:
        type: array
        items:
          type: string
        title: services that matched
      control_point:
        type: string
        title: control_point of request
      flow_label_keys:
        type: array
        items:
          type: string
        description: flow label keys that were matched for this request.
      telemetry_flow_labels:
        type: object
        additionalProperties:
          type: string
        description: telemetry_flow_labels are labels for telemetry purpose. The keys in telemetry_flow_labels is subset of flow_label_keys.
      decision_type:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.CheckResponse.DecisionType'
        description: decision_type contains what the decision was.
      reject_reason:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.CheckResponse.RejectReason'
        description: reject_reason contains the reason for the rejection.
      classifier_infos:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.flowcontrol.check.v1.ClassifierInfo'
        description: classifiers that were matched for this request.
      flux_meter_infos:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.flowcontrol.check.v1.FluxMeterInfo'
        description: flux meters that were matched for this request.
      limiter_decisions:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision'
        description: limiter_decisions contains information about decision made by each limiter.
      wait_time:
        type: string
        description: |-
          Recommended minimal amount of time to wait when retrying the request, if
          decision_type is REJECTED. Optional.
      denied_response_status_code:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.StatusCode'
        description: |-
          http_status contains the http status code to be returned to the client, if
          decision_type is REJECTED. Optional.
      cache_lookup_response:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.CacheLookupResponse'
        description: CacheLookupResponse contains the result of the cache lookup.
    description: CheckResponse contains fields that represent decision made by Check call.
  aperture.flowcontrol.check.v1.CheckResponse.DecisionType:
    type: string
    enum:
      - DECISION_TYPE_ACCEPTED
      - DECISION_TYPE_REJECTED
    default: DECISION_TYPE_ACCEPTED
    description: DecisionType contains fields that represent decision made by Check call.
  aperture.flowcontrol.check.v1.CheckResponse.RejectReason:
    type: string
    enum:
      - REJECT_REASON_NONE
      - REJECT_REASON_RATE_LIMITED
      - REJECT_REASON_NO_TOKENS
      - REJECT_REASON_NOT_SAMPLED
      - REJECT_REASON_NO_MATCHING_RAMP
    default: REJECT_REASON_NONE
    description: RejectReason contains fields that give further information about rejection.
  aperture.flowcontrol.check.v1.ClassifierInfo:
    type: object
    properties:
      policy_name:
        type: string
      policy_hash:
        type: string
      classifier_index:
        type: string
        format: int64
      error:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.ClassifierInfo.Error'
    description: ClassifierInfo describes details for each ClassifierInfo.
  aperture.flowcontrol.check.v1.ClassifierInfo.Error:
    type: string
    enum:
      - ERROR_NONE
      - ERROR_EVAL_FAILED
      - ERROR_EMPTY_RESULTSET
      - ERROR_AMBIGUOUS_RESULTSET
      - ERROR_MULTI_EXPRESSION
      - ERROR_EXPRESSION_NOT_MAP
    default: ERROR_NONE
    description: Error information.
  aperture.flowcontrol.check.v1.FluxMeterInfo:
    type: object
    properties:
      flux_meter_name:
        type: string
    description: FluxMeterInfo describes detail for each FluxMeterInfo.
  aperture.flowcontrol.check.v1.KeyDeleteResponse:
    type: object
    properties:
      operation_status:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.CacheOperationStatus'
      error:
        type: string
  aperture.flowcontrol.check.v1.KeyLookupResponse:
    type: object
    properties:
      value:
        type: string
        format: byte
      lookup_status:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.CacheLookupStatus'
      operation_status:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.CacheOperationStatus'
      error:
        type: string
  aperture.flowcontrol.check.v1.KeyUpsertResponse:
    type: object
    properties:
      operation_status:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.CacheOperationStatus'
      error:
        type: string
  aperture.flowcontrol.check.v1.LimiterDecision:
    type: object
    properties:
      policy_name:
        type: string
      policy_hash:
        type: string
      component_id:
        type: string
      dropped:
        type: boolean
      reason:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision.LimiterReason'
      denied_response_status_code:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.StatusCode'
      wait_time:
        type: string
      rate_limiter_info:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision.RateLimiterInfo'
      load_scheduler_info:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision.SchedulerInfo'
      sampler_info:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision.SamplerInfo'
      quota_scheduler_info:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision.QuotaSchedulerInfo'
    description: LimiterDecision describes details for each limiter.
  aperture.flowcontrol.check.v1.LimiterDecision.LimiterReason:
    type: string
    enum:
      - LIMITER_REASON_UNSPECIFIED
      - LIMITER_REASON_KEY_NOT_FOUND
    default: LIMITER_REASON_UNSPECIFIED
  aperture.flowcontrol.check.v1.LimiterDecision.QuotaSchedulerInfo:
    type: object
    properties:
      label:
        type: string
      workload_index:
        type: string
      tokens_info:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision.TokensInfo'
      priority:
        type: number
        format: double
  aperture.flowcontrol.check.v1.LimiterDecision.RateLimiterInfo:
    type: object
    properties:
      label:
        type: string
      tokens_info:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision.TokensInfo'
  aperture.flowcontrol.check.v1.LimiterDecision.SamplerInfo:
    type: object
    properties:
      label:
        type: string
  aperture.flowcontrol.check.v1.LimiterDecision.SchedulerInfo:
    type: object
    properties:
      workload_index:
        type: string
      tokens_info:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.LimiterDecision.TokensInfo'
      priority:
        type: number
        format: double
  aperture.flowcontrol.check.v1.LimiterDecision.TokensInfo:
    type: object
    properties:
      remaining:
        type: number
        format: double
        description: |-
          remaining and current may not
          provide accurate values in case
          the request times out while waiting
          for tokens.
      current:
        type: number
        format: double
      consumed:
        type: number
        format: double
  aperture.flowcontrol.check.v1.StatusCode:
    type: string
    enum:
      - Empty
      - Continue
      - OK
      - Created
      - Accepted
      - NonAuthoritativeInformation
      - NoContent
      - ResetContent
      - PartialContent
      - MultiStatus
      - AlreadyReported
      - IMUsed
      - MultipleChoices
      - MovedPermanently
      - Found
      - SeeOther
      - NotModified
      - UseProxy
      - TemporaryRedirect
      - PermanentRedirect
      - BadRequest
      - Unauthorized
      - PaymentRequired
      - Forbidden
      - NotFound
      - MethodNotAllowed
      - NotAcceptable
      - ProxyAuthenticationRequired
      - RequestTimeout
      - Conflict
      - Gone
      - LengthRequired
      - PreconditionFailed
      - PayloadTooLarge
      - URITooLong
      - UnsupportedMediaType
      - RangeNotSatisfiable
      - ExpectationFailed
      - MisdirectedRequest
      - UnprocessableEntity
      - Locked
      - FailedDependency
      - UpgradeRequired
      - PreconditionRequired
      - TooManyRequests
      - RequestHeaderFieldsTooLarge
      - InternalServerError
      - NotImplemented
      - BadGateway
      - ServiceUnavailable
      - GatewayTimeout
      - HTTPVersionNotSupported
      - VariantAlsoNegotiates
      - InsufficientStorage
      - LoopDetected
      - NotExtended
      - NetworkAuthenticationRequired
    default: Empty
    description: '- Empty: Empty - This code not part of the HTTP status code specification, but it is needed for `enum` type.'
    title: |-
      HTTP response codes.
      For more details: https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
  aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest:
    type: object
    properties:
      source:
        $ref: '#/definitions/aperture.flowcontrol.checkhttp.v1.SocketAddress'
        description: |-
          The source of a network activity, such as starting a TCP connection.
          In a multi hop network activity, the source represents the sender of the
          last hop.
      destination:
        $ref: '#/definitions/aperture.flowcontrol.checkhttp.v1.SocketAddress'
        description: |-
          The destination of a network activity, such as accepting a TCP connection.
          In a multi hop network activity, the destination represents the receiver of
          the last hop.
      request:
        $ref: '#/definitions/aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest'
        description: Represents a network request, such as an HTTP request.
      control_point:
        type: string
        description: |-
          For an SDK based insertion, a Control Point can represent a particular feature or execution block within a Service.
          In case of Service Mesh or Middleware insertion, a Control Point can identify ingress vs egress calls or distinct listeners or filter chains.
      ramp_mode:
        type: boolean
        description: A flow with ramp_mode flag will only be accepted if at least one ramp component matches and accepts the flow.
  aperture.flowcontrol.checkhttp.v1.CheckHTTPRequest.HttpRequest:
    type: object
    properties:
      method:
        type: string
        description: The HTTP request method, such as `GET`, `POST`.
      headers:
        type: object
        additionalProperties:
          type: string
        description: The HTTP request headers.
      path:
        type: string
        description: |-
          The request target, as it appears in the first line of the HTTP request. This includes
          the URL path and query-string. No decoding is performed.
      host:
        type: string
        description: The HTTP request `Host` header value.
      scheme:
        type: string
        description: The HTTP URL scheme, such as `http` and `https`.
      size:
        type: string
        format: int64
        description: The HTTP request size in bytes. If unknown, it must be -1.
      protocol:
        type: string
        description: The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".
      body:
        type: string
        description: The HTTP request body.
    description: |-
      This message defines attributes for an HTTP request.
      HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
  aperture.flowcontrol.checkhttp.v1.CheckHTTPResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/google.rpc.Status'
        title: Status `OK` allows the request. Any other status indicates the request should be denied
      denied_response:
        $ref: '#/definitions/aperture.flowcontrol.checkhttp.v1.DeniedHttpResponse'
        description: Supplies http attributes for a denied response.
      ok_response:
        $ref: '#/definitions/aperture.flowcontrol.checkhttp.v1.OkHttpResponse'
        description: Supplies http attributes for an ok response.
      dynamic_metadata:
        type: object
        description: |-
          Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
          filter.
  aperture.flowcontrol.checkhttp.v1.DeniedHttpResponse:
    type: object
    properties:
      status:
        type: integer
        format: int32
        description: |-
          This field allows the authorization service to send an HTTP response status code to the
          downstream client. If not set, Envoy sends `403 Forbidden` HTTP status code by default.
      headers:
        type: object
        additionalProperties:
          type: string
        description: |-
          This field allows the authorization service to send HTTP response headers
          to the downstream client.
      body:
        type: string
        description: |-
          This field allows the authorization service to send a response body data
          to the downstream client.
    description: HTTP attributes for a denied response.
  aperture.flowcontrol.checkhttp.v1.OkHttpResponse:
    type: object
    properties:
      headers:
        type: object
        additionalProperties:
          type: string
        description: HTTP entity headers in addition to the original request headers.
      dynamic_metadata:
        type: object
    description: HTTP attributes for an OK response.
  aperture.flowcontrol.checkhttp.v1.SocketAddress:
    type: object
    properties:
      protocol:
        $ref: '#/definitions/aperture.flowcontrol.checkhttp.v1.SocketAddress.Protocol'
      address:
        type: string
        description: The address for this socket.
      port:
        type: integer
        format: int64
        description: The port for this socket.
  aperture.flowcontrol.checkhttp.v1.SocketAddress.Protocol:
    type: string
    enum:
      - TCP
      - UDP
    default: TCP
  aperture.flowcontrol.controlpoints.v1.FlowControlPoint:
    type: object
    properties:
      control_point:
        type: string
      type:
        type: string
      service:
        type: string
  aperture.flowcontrol.controlpoints.v1.FlowControlPoints:
    type: object
    properties:
      flow_control_points:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.flowcontrol.controlpoints.v1.FlowControlPoint'
  aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse:
    type: object
    properties:
      samples:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels'
  aperture.flowcontrol.preview.v1.PreviewFlowLabelsResponse.FlowLabels:
    type: object
    properties:
      labels:
        type: object
        additionalProperties:
          type: string
  aperture.flowcontrol.preview.v1.PreviewHTTPRequestsResponse:
    type: object
    properties:
      samples:
        type: array
        items:
          type: object
  aperture.flowcontrol.preview.v1.PreviewRequest:
    type: object
    properties:
      samples:
        type: string
        format: int64
        description: Number of samples to collect.
      control_point:
        type: string
        description: Control point to preview.
      service:
        type: string
        description: Service to preview.
      label_matcher:
        $ref: '#/definitions/aperture.policy.language.v1.LabelMatcher'
        description: Flow labels to match. Optional parameter for advanced filtering.
  aperture.fluxninja.v1.ControllerInfo:
    type: object
    properties:
      id:
        type: string
  aperture.fluxninja.v1.OverlappingService:
    type: object
    properties:
      service1:
        type: string
      service2:
        type: string
      entities_count:
        type: integer
        format: int32
    description: OverlappingService contains info about a service that overlaps with another one.
  aperture.fluxninja.v1.ReportRequest:
    type: object
    properties:
      version_info:
        $ref: '#/definitions/aperture.info.v1.VersionInfo'
      process_info:
        $ref: '#/definitions/aperture.info.v1.ProcessInfo'
      host_info:
        $ref: '#/definitions/aperture.info.v1.HostInfo'
      agent_group:
        type: string
      controller_info:
        $ref: '#/definitions/aperture.fluxninja.v1.ControllerInfo'
      peers:
        $ref: '#/definitions/aperture.peers.v1.Peers'
      services_list:
        $ref: '#/definitions/aperture.fluxninja.v1.ServicesList'
      all_statuses:
        $ref: '#/definitions/aperture.status.v1.GroupStatus'
      policies:
        $ref: '#/definitions/aperture.policy.sync.v1.PolicyWrappers'
      flow_control_points:
        $ref: '#/definitions/aperture.flowcontrol.controlpoints.v1.FlowControlPoints'
      auto_scale_kubernetes_control_points:
        $ref: '#/definitions/aperture.autoscale.kubernetes.controlpoints.v1.AutoScaleKubernetesControlPoints'
      installation_mode:
        type: string
  aperture.fluxninja.v1.ReportResponse:
    type: object
    description: ReportResponse is empty for now.
  aperture.fluxninja.v1.Service:
    type: object
    properties:
      name:
        type: string
      entities_count:
        type: integer
        format: int32
    description: |-
      Service contains information about single service discovered in agent group by a
      particular agent.
  aperture.fluxninja.v1.ServicesList:
    type: object
    properties:
      services:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.fluxninja.v1.Service'
      overlapping_services:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.fluxninja.v1.OverlappingService'
  aperture.info.v1.HostInfo:
    type: object
    properties:
      uuid:
        type: string
      hostname:
        type: string
      local_ip:
        type: string
  aperture.info.v1.ProcessInfo:
    type: object
    properties:
      start_time:
        type: string
        format: date-time
      uptime:
        type: string
      extensions:
        type: array
        items:
          type: string
  aperture.info.v1.VersionInfo:
    type: object
    properties:
      version:
        type: string
      service:
        type: string
      build_host:
        type: string
      build_os:
        type: string
      build_time:
        type: string
      git_branch:
        type: string
      git_commit_hash:
        type: string
  aperture.peers.v1.Peer:
    type: object
    properties:
      address:
        type: string
      hostname:
        type: string
      services:
        type: object
        additionalProperties:
          type: string
    description: Peer holds peer info and services.
  aperture.peers.v1.Peers:
    type: object
    properties:
      self_peer:
        $ref: '#/definitions/aperture.peers.v1.Peer'
      peers:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.peers.v1.Peer'
    description: Peers holds the peer info of this peer and a mapping of address to other peers.
  aperture.policy.language.v1.AIADLoadScheduler:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.AIADLoadScheduler.Ins'
        description: Input ports for the _AIAD Load Scheduler_.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.AIADLoadScheduler.Outs'
        description: Output ports for the _AIAD Load Scheduler_.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.AIADLoadScheduler.Parameters'
        description: |-
          Parameters for the _AIAD Load Scheduler_.

          @gotags: validate:"required"
      dry_run:
        type: boolean
        description: |-
          Decides whether to run the load scheduler in dry-run mode. In dry run mode the scheduler acts as pass through to all flow and does not queue flows.
          It is useful for observing the behavior of load scheduler without disrupting any real traffic.
      dry_run_config_key:
        type: string
        description: Configuration key for setting dry run mode through dynamic configuration.
      overload_condition:
        type: string
        description: '@gotags: default:"gt" validate:"required,oneof=gt lt gte lte"'
        title: |-
          Overload condition determines the criteria to determine overload state. The default condition is "gt", that is, when the signal is greater than the setpoint. The condition must be one of:
          <!-- vale off -->
          - "gt": greater than
          - "lt": less than
          - "gte": greater than or equal to
          - "lte": less than or equal to
          <!-- vale on -->
    description: |-
      _AIAD Load Scheduler_ reduces the token rate linearly over time while in overload state.
      During recovery, it increases the token rate linearly until the system is not overloaded.
  aperture.policy.language.v1.AIADLoadScheduler.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The input signal to the controller.

          @gotags: validate:"required"
      setpoint:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The setpoint input to the controller.

          @gotags: validate:"required"
      overload_confirmation:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The `overload_confirmation` port provides additional criteria to determine overload state which
          results in _Flow_ throttling at the service.
    description: Input ports for the _AIAD Load Scheduler_.
  aperture.policy.language.v1.AIADLoadScheduler.Outs:
    type: object
    properties:
      is_overload:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: A Boolean signal that indicates whether the service is in overload state.
      desired_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Desired Load multiplier is the ratio of desired token rate to the incoming token rate.
      observed_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Observed Load multiplier is the ratio of accepted token rate to the incoming token rate.
    description: Output ports for the _AIAD Load Scheduler_.
  aperture.policy.language.v1.AIADLoadScheduler.Parameters:
    type: object
    properties:
      load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.LoadScheduler.Parameters'
        description: |-
          Parameters for the _Load Scheduler_.

          @gotags: validate:"required"
      min_load_multiplier:
        type: number
        format: double
        description: |-
          The minimum load multiplier that can be reached during an overload state.

          @gotags: default:"0.0" validate:"gte=0"
      load_multiplier_linear_decrement:
        type: number
        format: double
        description: |-
          Linear decrement to load multiplier every 10 seconds while the system is
          in the overloaded state, up until the `min_load_multiplier` is reached.

          @gotags: default:"0.05" validate:"gte=0"
      max_load_multiplier:
        type: number
        format: double
        description: |-
          The maximum load multiplier that can be reached during recovery from an overload state.
          - Helps protect the service from request bursts while the system is still recovering.
          - Once this value is reached, the scheduler enters the pass-through mode, allowing requests to bypass the scheduler and be sent directly to the service.
          - The pass-through mode gets disabled if the system enters the overload state again.

          @gotags: default:"2.0" validate:"gte=0"
      load_multiplier_linear_increment:
        type: number
        format: double
        description: |-
          Linear increment to load multiplier every 10 seconds while the system is
          not in the overloaded state, up until the `max_load_multiplier` is reached.

          @gotags: default:"0.025" validate:"gte=0"
      alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: |-
          Configuration parameters for the embedded Alerter.

          @gotags: validate:"required"
  aperture.policy.language.v1.AIMDLoadScheduler:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.AIMDLoadScheduler.Ins'
        description: Input ports for the _AIMD Load Scheduler_.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.AIMDLoadScheduler.Outs'
        description: Output ports for the _AIMD Load Scheduler_.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.AIMDLoadScheduler.Parameters'
        description: |-
          Parameters for the _AIMD Load Scheduler_.

          @gotags: validate:"required"
      dry_run:
        type: boolean
        description: |-
          Decides whether to run the load scheduler in dry-run mode. In dry run mode the scheduler acts as pass through to all flow and does not queue flows.
          It is useful for observing the behavior of load scheduler without disrupting any real traffic.
      dry_run_config_key:
        type: string
        description: Configuration key for setting dry run mode through dynamic configuration.
    description: |-
      _AIMD Load Scheduler_ uses a Gradient Controller to throttle the token rate based on the deviation of the signal from the setpoint.
      It takes a signal and setpoint as inputs and reduces token rate proportionally (or any arbitrary power) based on deviation of the signal from setpoint.
      During recovery, it increases the token rate linearly until the system is not overloaded.
  aperture.policy.language.v1.AIMDLoadScheduler.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The input signal to the controller.

          @gotags: validate:"required"
      setpoint:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The setpoint input to the controller.

          @gotags: validate:"required"
      overload_confirmation:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The `overload_confirmation` port provides additional criteria to determine overload state which
          results in _Flow_ throttling at the service.
    description: Input ports for the _AIMD Load Scheduler_.
  aperture.policy.language.v1.AIMDLoadScheduler.Outs:
    type: object
    properties:
      is_overload:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: A Boolean signal that indicates whether the service is in overload state.
      desired_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Desired Load multiplier is the ratio of desired token rate to the incoming token rate.
      observed_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Observed Load multiplier is the ratio of accepted token rate to the incoming token rate.
    description: Output ports for the _AIMD Load Scheduler_.
  aperture.policy.language.v1.AIMDLoadScheduler.Parameters:
    type: object
    properties:
      load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.LoadScheduler.Parameters'
        description: |-
          Parameters for the _Load Scheduler_.

          @gotags: validate:"required"
      gradient:
        $ref: '#/definitions/aperture.policy.language.v1.GradientController.Parameters'
        description: |-
          Parameters for the Gradient Controller.

          @gotags: validate:"required"
      max_load_multiplier:
        type: number
        format: double
        description: |-
          The maximum load multiplier that can be reached during recovery from an overload state.
          - Helps protect the service from request bursts while the system is still recovering.
          - Once this value is reached, the scheduler enters the pass-through mode, allowing requests to bypass the scheduler and be sent directly to the service.
          - The pass-through mode gets disabled if the system enters the overload state again.

          @gotags: default:"2.0" validate:"gt=0"
      load_multiplier_linear_increment:
        type: number
        format: double
        description: |-
          Linear increment to load multiplier every 10 seconds while the system is
          not in the overloaded state, up until the `max_load_multiplier` is reached.

          @gotags: default:"0.025" validate:"gte=0"
      alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: |-
          Configuration parameters for the embedded Alerter.

          @gotags: validate:"required"
  aperture.policy.language.v1.AdaptiveLoadScheduler:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.AdaptiveLoadScheduler.Ins'
        description: |-
          Collection of input ports for the _Adaptive Load Scheduler_ component.

          @gotags: validate:"required"
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.AdaptiveLoadScheduler.Outs'
        description: Collection of output ports for the _Adaptive Load Scheduler_ component.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.AdaptiveLoadScheduler.Parameters'
        description: |-
          Parameters for the _Adaptive Load Scheduler_ component.

          @gotags: validate:"required"
      dry_run:
        type: boolean
        description: |-
          Decides whether to run the load scheduler in dry-run mode. In dry run mode the scheduler acts as pass through to all flow and does not queue flows.
          It is useful for observing the behavior of load scheduler without disrupting any real traffic.
      dry_run_config_key:
        type: string
        description: Configuration key for setting dry run mode through dynamic configuration.
    description: |-
      The _Adaptive Load Scheduler_ adjusts the accepted token rate based on the deviation of the input signal from the setpoint.
      Deprecated: v3.0.0. Use _AIMD Load Scheduler_ instead.
  aperture.policy.language.v1.AdaptiveLoadScheduler.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The input signal to the controller.

          @gotags: validate:"required"
      setpoint:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The setpoint input to the controller.

          @gotags: validate:"required"
      overload_confirmation:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The `overload_confirmation` port provides additional criteria to determine overload state which
          results in _Flow_ throttling at the service.
    description: Input ports for the _Adaptive Load Scheduler_ component.
  aperture.policy.language.v1.AdaptiveLoadScheduler.Outs:
    type: object
    properties:
      is_overload:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: A Boolean signal that indicates whether the service is in overload state.
      desired_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Desired Load multiplier is the ratio of desired token rate to the incoming token rate.
      observed_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Observed Load multiplier is the ratio of accepted token rate to the incoming token rate.
    description: Output ports for the _Adaptive Load Scheduler_ component.
  aperture.policy.language.v1.AdaptiveLoadScheduler.Parameters:
    type: object
    properties:
      load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.LoadScheduler.Parameters'
        description: |-
          Parameters for the _Load Scheduler_.

          @gotags: validate:"required"
      gradient:
        $ref: '#/definitions/aperture.policy.language.v1.GradientController.Parameters'
        description: |-
          Parameters for the _Gradient Controller_.

          @gotags: validate:"required"
      max_load_multiplier:
        type: number
        format: double
        description: |-
          The maximum load multiplier that can be reached during recovery from an overload state.
          - Helps protect the service from request bursts while the system is still recovering.
          - Once this value is reached, the scheduler enters the pass-through mode, allowing requests to bypass the scheduler and be sent directly to the service.
          - The pass-through mode gets disabled if the system enters the overload state again.

          @gotags: default:"2.0"
      load_multiplier_linear_increment:
        type: number
        format: double
        description: |-
          Linear increment to load multiplier every 10 seconds while the system is
          not in the overloaded state, up until the `max_load_multiplier` is reached.

          @gotags: default:"0.0025"
      alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: |-
          Configuration parameters for the embedded Alerter.

          @gotags: validate:"required"
    description: Parameters for the _Adaptive Load Scheduler_ component.
  aperture.policy.language.v1.AddressExtractor:
    type: object
    properties:
      from:
        type: string
        description: |-
          Attribute path pointing to some string - for example, `source.address`.

          @gotags: validate:"required"
    description: |-
      IP addresses in attribute context are defined as objects with separate IP and port fields.
      This is a helper to display an address as a single string.

      :::caution

      This might introduce high-cardinality flow label values.

      :::

      [ext-authz-address]: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/core/v3/address.proto#config-core-v3-address

      Example:
      ```yaml
      from: "source.address # or destination.address"
      ```
    title: Display an [Address][ext-authz-address] as a single string, for example, `<ip>:<port>`
  aperture.policy.language.v1.Alerter:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Ins'
        description: Input ports for the Alerter component.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: '@gotags: validate:"required"'
        title: Alerter configuration
    description: Alerter reacts to a signal and generates alert to send to alert manager.
  aperture.policy.language.v1.Alerter.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Signal which Alerter is monitoring. If the signal greater than 0, Alerter generates an alert.
    description: Inputs for the Alerter component.
  aperture.policy.language.v1.Alerter.Parameters:
    type: object
    properties:
      alert_name:
        type: string
        description: |-
          Name of the alert.

          @gotags: validate:"required"
      severity:
        type: string
        description: |-
          Severity of the alert, one of 'info', 'warn' or 'crit'.

          @gotags: default:"info" validate:"oneof=info warn crit"
      resolve_timeout:
        type: string
        description: |-
          Duration of alert resolver.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"5s"
      alert_channels:
        type: array
        items:
          type: string
        description: A list of alert channel strings.
      labels:
        type: object
        additionalProperties:
          type: string
        description: Additional labels to add to alert.
    description: Alerter Parameters configure parameters such as alert name, severity, resolve timeout, alert channels and labels.
  aperture.policy.language.v1.And:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.And.Ins'
        description: Input ports for the And component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.And.Outs'
        description: Output ports for the And component.
    description: |-
      Logical AND.

      Signals are mapped to Boolean values as follows:
      * Zero is treated as false.
      * Any non-zero is treated as true.
      * Invalid inputs are considered unknown.

        :::note

        Treating invalid inputs as "unknowns" has a consequence that the result
        might end up being valid even when some inputs are invalid. For example, `unknown && false == false`,
        because the result would end up false no matter if
        first signal was true or false. Conversely, `unknown && true == unknown`.

        :::
  aperture.policy.language.v1.And.Ins:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
    description: Inputs for the And component.
  aperture.policy.language.v1.And.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: |-
          Result of logical AND of all the input signals.

          Will always be 0 (false), 1 (true) or invalid (unknown).
    description: Output ports for the And component.
  aperture.policy.language.v1.ArithmeticCombinator:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.ArithmeticCombinator.Ins'
        description: Input ports for the Arithmetic Combinator component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.ArithmeticCombinator.Outs'
        description: Output ports for the Arithmetic Combinator component.
      operator:
        type: string
        description: |-
          Operator of the arithmetic operation.

          The arithmetic operation can be addition, subtraction, multiplication, division, XOR, right bit shift or left bit shift.
          In case of XOR and bit shifts, value of signals is cast to integers before performing the operation.

          @gotags: validate:"oneof=add sub mul div xor lshift rshift"
    title: Type of Combinator that computes the arithmetic operation on the operand signals
  aperture.policy.language.v1.ArithmeticCombinator.Ins:
    type: object
    properties:
      lhs:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Left hand side of the arithmetic operation.
      rhs:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Right hand side of the arithmetic operation.
    description: Inputs for the Arithmetic Combinator component.
  aperture.policy.language.v1.ArithmeticCombinator.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Result of arithmetic operation.
    description: Outputs for the Arithmetic Combinator component.
  aperture.policy.language.v1.AutoScale:
    type: object
    properties:
      pod_scaler:
        $ref: '#/definitions/aperture.policy.language.v1.PodScaler'
        description: PodScaler provides pod horizontal scaling functionality for scalable Kubernetes resources.
      auto_scaler:
        $ref: '#/definitions/aperture.policy.language.v1.AutoScaler'
        description: _AutoScaler_ provides auto-scaling functionality for any scalable resource.
      private:
        $ref: '#/definitions/google.protobuf.Any'
        description: Extends auto scale with private components.
    description: AutoScale components are used to scale a service.
  aperture.policy.language.v1.AutoScaler:
    type: object
    properties:
      scaling_backend:
        $ref: '#/definitions/aperture.policy.language.v1.AutoScaler.ScalingBackend'
        title: '@gotags: validate:"required"'
      scale_out_controllers:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.ScaleOutController'
        description: |-
          List of _Controllers_ for scaling out.

          @gotags: validate:"dive"
      scale_in_controllers:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.ScaleInController'
        description: |-
          List of _Controllers_ for scaling in.

          @gotags: validate:"dive"
      scaling_parameters:
        $ref: '#/definitions/aperture.policy.language.v1.AutoScaler.ScalingParameters'
        description: |-
          Parameters that define the scaling behavior.

          @gotags: validate:"required"
      dry_run:
        type: boolean
        description: |-
          Dry run mode ensures that no scaling is invoked by this auto scaler.
          This is useful for observing the behavior of auto scaler without disrupting any real deployment.
          This parameter sets the default value of dry run setting which can be overridden at runtime using dynamic configuration.
      dry_run_config_key:
        type: string
        description: Configuration key for overriding dry run setting through dynamic configuration.
    description: _AutoScaler_ provides auto-scaling functionality for any scalable resource. Multiple _Controllers_ can be defined on the _AutoScaler_ for performing scale-out or scale-in. The _AutoScaler_ can interface with infrastructure APIs such as Kubernetes to perform auto-scale.
  aperture.policy.language.v1.AutoScaler.ScalingBackend:
    type: object
    properties:
      kubernetes_replicas:
        $ref: '#/definitions/aperture.policy.language.v1.AutoScaler.ScalingBackend.KubernetesReplicas'
  aperture.policy.language.v1.AutoScaler.ScalingBackend.KubernetesReplicas:
    type: object
    properties:
      kubernetes_object_selector:
        $ref: '#/definitions/aperture.policy.language.v1.KubernetesObjectSelector'
        description: |-
          The Kubernetes object on which horizontal scaling is applied.

          @gotags: validate:"required"
      min_replicas:
        type: string
        format: int64
        description: |-
          The minimum replicas to which the _AutoScaler_ can scale-in.

          @gotags: default:"0" validate:"gte=0"
      max_replicas:
        type: string
        format: int64
        description: |-
          The maximum replicas to which the _AutoScaler_ can scale-out.

          @gotags: default:"9223372036854775807" validate:"gt=0"
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.AutoScaler.ScalingBackend.KubernetesReplicas.Outs'
        description: Output ports for _Kubernetes Replicas_.
    description: KubernetesReplicas defines a horizontal pod scaler for Kubernetes.
  aperture.policy.language.v1.AutoScaler.ScalingBackend.KubernetesReplicas.Outs:
    type: object
    properties:
      actual_replicas:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
      configured_replicas:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
      desired_replicas:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
    title: Outputs
  aperture.policy.language.v1.AutoScaler.ScalingParameters:
    type: object
    properties:
      max_scale_out_percentage:
        type: number
        format: double
        description: |-
          The maximum increase of scale (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 10% of current scale value.

          @gotags: default:"10"
      max_scale_in_percentage:
        type: number
        format: double
        description: |-
          The maximum decrease of scale (for example, pods) at one time. Defined as percentage of current scale value. Can never go below one even if percentage computation is less than one. Defaults to 1% of current scale value.

          @gotags: default:"1"
      scale_out_cooldown:
        type: string
        description: |-
          The amount of time to wait after a scale-out operation for another scale-out or scale-in operation.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"30s"
      scale_in_cooldown:
        type: string
        description: |-
          The amount of time to wait after a scale-in operation for another scale-in operation.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"120s"
      cooldown_override_percentage:
        type: number
        format: double
        description: |-
          Cooldown override percentage defines a threshold change in scale-out beyond which previous cooldown is overridden.
          For example, if the cooldown is 5 minutes and the cooldown override percentage is 10%, then if the
          scale-increases by 10% or more, the previous cooldown is canceled. Defaults to 50%.

          @gotags: default:"50"
      scale_out_alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: |-
          Configuration for scale-out Alerter.

          @gotags: validate:"required"
      scale_in_alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: |-
          Configuration for scale-in Alerter.

          @gotags: validate:"required"
  aperture.policy.language.v1.BoolVariable:
    type: object
    properties:
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.BoolVariable.Outs'
        description: Output ports for the BoolVariable component.
      constant_output:
        type: boolean
        description: The constant Boolean signal emitted by this component. The value of the constant Boolean signal can be overridden at runtime through dynamic configuration.
      config_key:
        type: string
        description: Configuration key for overriding value setting through dynamic configuration.
    description: Component that emits a constant Boolean signal which can be changed at runtime through dynamic configuration.
  aperture.policy.language.v1.BoolVariable.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The value is emitted to the output port.
    description: Outputs for the BoolVariable component.
  aperture.policy.language.v1.Circuit:
    type: object
    properties:
      evaluation_interval:
        type: string
        description: |-
          Evaluation interval (tick) is the time between consecutive runs of the policy circuit.
          This interval is typically aligned with how often the corrective action (actuation) needs to be taken.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"1s"
      components:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Component'
        description: |-
          Defines a signal processing graph as a list of components.

          @gotags: validate:"dive"
    description: |-
      Circuit is graph of inter-connected signal processing components.

      :::info

      See also [Circuit overview](/concepts/advanced/circuit.md).

      :::

      Signals flow between components through ports.
      As signals traverse the circuit, they get processed, stored within components or get acted upon (for example, load-shed, rate-limit, auto-scale and so on).
      Circuit is evaluated periodically to respond to changes in signal readings.

      :::info Signals

      Signals are floating point values.

      A signal can also have a special **Invalid** value. It's usually used to
      communicate that signal does not have a meaningful value at the moment, for example,
      [PromQL](#prom-q-l) emits such a value if it cannot execute a query.
      Components know when their input signals are invalid and can act
      accordingly. They can either propagate the invalid signal, by making their
      output itself invalid (for example,
      [ArithmeticCombinator](#arithmetic-combinator)) or use some different
      logic, for example, [Extrapolator](#extrapolator). Refer to a component's
      docs on how exactly it handles invalid inputs.

      :::
  aperture.policy.language.v1.Classifier:
    type: object
    properties:
      rules:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.language.v1.Rule'
        description: |-
          A map of {key, value} pairs mapping from
          [flow label](/concepts/flow-label.md) keys to rules that define
          how to extract and propagate flow labels with that key.

          @gotags: validate:"dive,keys,required,endkeys,required"
      rego:
        $ref: '#/definitions/aperture.policy.language.v1.Rego'
        description: |-
          Rego is a policy language used to express complex policies in a concise and declarative way.
          It can be used to define flow classification rules by writing custom queries that extract values from request metadata.
          For simple cases, such as directly reading a value from header or a field from JSON body, declarative extractors are recommended.
        title: Rego based classification
      selectors:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Selector'
        description: |-
          Selectors for flows that will be classified by this _Classifier_.

          @gotags: validate:"required,gt=0,dive"
    description: |-
      :::info

      See also [Classifier overview](/concepts/advanced/classifier.md).

      :::
      Example
      ```yaml
      selectors:
         - agent_group: demoapp
           service: service1-demo-app.demoapp.svc.cluster.local
           control_point: ingress
           label_matcher:
              match_labels:
                user_tier: gold
              match_expressions:
                - key: user_type
                  operator: In
      rules:
        user:
         extractor:
           from: request.http.headers.user-agent
        telemetry: false
      ```
    title: Set of classification rules sharing a common selector
  aperture.policy.language.v1.Component:
    type: object
    properties:
      gradient_controller:
        $ref: '#/definitions/aperture.policy.language.v1.GradientController'
        description: |-
          Gradient controller calculates the ratio between the signal and the setpoint to determine the magnitude of the correction that need to be applied.
          This controller can be used to build AIMD (Additive Increase, Multiplicative Decrease) or MIMD style response.
      ema:
        $ref: '#/definitions/aperture.policy.language.v1.EMA'
        description: Exponential Moving Average filter.
      arithmetic_combinator:
        $ref: '#/definitions/aperture.policy.language.v1.ArithmeticCombinator'
        description: Applies the given operator on input operands (signals) and emits the result.
      decider:
        $ref: '#/definitions/aperture.policy.language.v1.Decider'
        description: Decider emits the binary result of comparison operator on two operands.
      switcher:
        $ref: '#/definitions/aperture.policy.language.v1.Switcher'
        description: Switcher acts as a switch that emits one of the two signals based on third signal.
      sma:
        $ref: '#/definitions/aperture.policy.language.v1.SMA'
        description: Simple Moving Average filter.
      variable:
        $ref: '#/definitions/aperture.policy.language.v1.Variable'
        description: Emits a variable signal which can be changed at runtime through dynamic configuration.
      unary_operator:
        $ref: '#/definitions/aperture.policy.language.v1.UnaryOperator'
        description: Takes an input signal and emits the square root of the input signal.
      extrapolator:
        $ref: '#/definitions/aperture.policy.language.v1.Extrapolator'
        description: Takes an input signal and emits the extrapolated value; either mirroring the input value or repeating the last known value up to the maximum extrapolation interval.
      max:
        $ref: '#/definitions/aperture.policy.language.v1.Max'
        description: Emits the maximum of the input signals.
      min:
        $ref: '#/definitions/aperture.policy.language.v1.Min'
        description: Emits the minimum of the input signals.
      first_valid:
        $ref: '#/definitions/aperture.policy.language.v1.FirstValid'
        description: Picks the first valid input signal and emits it.
      alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter'
        description: Alerter reacts to a signal and generates alert to send to alert manager.
      integrator:
        $ref: '#/definitions/aperture.policy.language.v1.Integrator'
        description: Accumulates sum of signal every tick.
      differentiator:
        $ref: '#/definitions/aperture.policy.language.v1.Differentiator'
        description: |-
          Differentiator calculates rate of change per tick.
          Deprecated: v3.0.0. Use `PIDController` instead.

          @gotags: validate:"deprecated"
      and:
        $ref: '#/definitions/aperture.policy.language.v1.And'
        description: Logical AND.
      or:
        $ref: '#/definitions/aperture.policy.language.v1.Or'
        description: Logical OR.
      inverter:
        $ref: '#/definitions/aperture.policy.language.v1.Inverter'
        description: Logical NOT.
      pulse_generator:
        $ref: '#/definitions/aperture.policy.language.v1.PulseGenerator'
        description: Generates 0 and 1 in turns.
      holder:
        $ref: '#/definitions/aperture.policy.language.v1.Holder'
        description: Holds the last valid signal value for the specified duration then waits for next valid value to hold.
      nested_circuit:
        $ref: '#/definitions/aperture.policy.language.v1.NestedCircuit'
        description: Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
      nested_signal_ingress:
        $ref: '#/definitions/aperture.policy.language.v1.NestedSignalIngress'
        description: Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
      nested_signal_egress:
        $ref: '#/definitions/aperture.policy.language.v1.NestedSignalEgress'
        description: Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
      signal_generator:
        $ref: '#/definitions/aperture.policy.language.v1.SignalGenerator'
        description: Generates the specified signal.
      bool_variable:
        $ref: '#/definitions/aperture.policy.language.v1.BoolVariable'
        description: BoolVariable emits a constant Boolean signal which can be changed at runtime through dynamic configuration.
      pid_controller:
        $ref: '#/definitions/aperture.policy.language.v1.PIDController'
        description: PID Controller is a proportional–integral–derivative controller.
      polynomial_range_function:
        $ref: '#/definitions/aperture.policy.language.v1.PolynomialRangeFunction'
        description: Polynomial Range Function is a function that maps a signal to a range of values following a polynomial function.
      query:
        $ref: '#/definitions/aperture.policy.language.v1.Query'
        description: Query components that are query databases such as Prometheus.
      flow_control:
        $ref: '#/definitions/aperture.policy.language.v1.FlowControl'
        description: FlowControl components are used to regulate requests flow.
      auto_scale:
        $ref: '#/definitions/aperture.policy.language.v1.AutoScale'
        description: AutoScale components are used to scale the service.
    description: |-
      :::info

      See also [Components overview](/concepts/advanced/circuit.md#components).

      :::

      Signals flow into the components from input ports and results are emitted on output ports.
      Components are wired to each other based on signal names forming an execution graph of the circuit.

      :::note

      Loops are broken by the runtime at the earliest component index that is part of the loop.
      The looped signals are saved in the tick they're generated and served in the subsequent tick.

      :::

      See also [Policy](#policy) for a higher-level explanation of circuits.
    title: Computational block that forms the circuit
  aperture.policy.language.v1.ConstantSignal:
    type: object
    properties:
      special_value:
        type: string
        description: |-
          A special value such as NaN, +Inf, -Inf.

          @gotags: validate:"oneof=NaN +Inf -Inf"
      value:
        type: number
        format: double
        description: A constant value.
    description: Special constant input for ports and Variable component. Can provide either a constant value or special Nan/+-Inf value.
  aperture.policy.language.v1.Decider:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Decider.Ins'
        description: Input ports for the Decider component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Decider.Outs'
        description: Output ports for the Decider component.
      operator:
        type: string
        description: |-
          Comparison operator that computes operation on LHS and RHS input signals.

          @gotags: validate:"oneof=gt lt gte lte eq neq"
      true_for:
        type: string
        description: |-
          Duration of time to wait before changing to true state.
          If the duration is zero, the change will happen instantaneously.```
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"0s"
      false_for:
        type: string
        description: |-
          Duration of time to wait before changing to false state.
          If the duration is zero, the change will happen instantaneously.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"0s"
    description: |-
      The comparison operator can be greater-than, less-than, greater-than-or-equal, less-than-or-equal, equal, or not-equal.

      This component also supports time-based response (the output)
      transitions between 1.0 or 0.0 signal if the decider condition is
      true or false for at least `true_for` or `false_for` duration. If
      `true_for` and `false_for` durations are zero then the transitions are
      instantaneous.
    title: Type of Combinator that computes the comparison operation on LHS and RHS signals
  aperture.policy.language.v1.Decider.Ins:
    type: object
    properties:
      lhs:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Left hand side input signal for the comparison operation.
      rhs:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Right hand side input signal for the comparison operation.
    description: Inputs for the Decider component.
  aperture.policy.language.v1.Decider.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Selected signal (1.0 or 0.0).
    description: Outputs for the Decider component.
  aperture.policy.language.v1.DecreasingGradient:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.DecreasingGradient.Ins'
        description: Input ports for the Gradient.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.DecreasingGradient.Parameters'
        title: |-
          Gradient parameters for the controller. Defaults and constraints:
          * `slope` = 1
          * `min_gradient` = -Inf (must be less than 1)
          * `max_gradient` = 1 (cannot be changed)
    description: Decreasing Gradient defines a controller for scaling in based on Gradient Controller.
  aperture.policy.language.v1.DecreasingGradient.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The signal to use for scale-in.
      setpoint:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The setpoint to use for scale-in.
    description: Inputs for Gradient.
  aperture.policy.language.v1.DecreasingGradient.Parameters:
    type: object
    properties:
      slope:
        type: number
        format: double
        title: '@gotags: default:"1.0"'
      min_gradient:
        type: number
        format: double
        title: '@gotags: default:"-1.79769313486231570814527423731704356798070e+308" validate:"lte=1.0"'
    description: This allows subset of parameters with constrained values compared to a regular gradient controller. For full documentation of these parameters, refer to the [GradientControllerParameters](#gradient-controller-parameters).
  aperture.policy.language.v1.Differentiator:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Differentiator.Ins'
        description: Input ports for the Differentiator component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Differentiator.Outs'
        description: Output ports for the Differentiator component.
      window:
        type: string
        description: |-
          The window of time over which differentiator operates.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"5s"
    description: Differentiator calculates rate of change per tick.
  aperture.policy.language.v1.Differentiator.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
    description: Inputs for the Differentiator component.
  aperture.policy.language.v1.Differentiator.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
    description: Outputs for the Differentiator component.
  aperture.policy.language.v1.EMA:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.EMA.Ins'
        description: Input ports for the EMA component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.EMA.Outs'
        description: Output ports for the EMA component.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.EMA.Parameters'
        description: |-
          Parameters for the EMA component.

          @gotags: validate:"required"
    description: |-
      At any time EMA component operates in one of the following states:
      1. Warm up state: The first `warmup_window` samples are used to compute the initial EMA.
         If an invalid reading is received during the `warmup_window`, the last good average is emitted and the state gets reset back to beginning of warm up state.
      2. Normal state: The EMA is computed using following formula.

      The EMA for a series $Y$ is calculated recursively as:
      <!-- vale off -->
      $$
      \text{EMA} _t =
      \begin{cases}
        Y_0, &\text{for } t = 0 \\
        \alpha Y_t + (1 - \alpha) \text{EMA}_{t-1}, &\text{for }t > 0
      \end{cases}
      $$

      The coefficient $\alpha$ represents the degree of weighting decrease, a constant smoothing factor between 0 and 1.
      A higher $\alpha$ discounts older observations faster.
      The $\alpha$ is computed using ema\_window:

      $$
      \alpha = \frac{2}{N + 1} \quad\text{where } N = \frac{\text{ema\_window}}{\text{evaluation\_period}}
      $$
      <!-- vale on -->
    title: Exponential Moving Average (EMA) is a type of moving average that applies exponentially more weight to recent signal readings
  aperture.policy.language.v1.EMA.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Input signal to be used for the EMA computation.
      max_envelope:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Upper bound of the moving average.

          When the signal exceeds `max_envelope` it is multiplied by
          `correction_factor_on_max_envelope_violation` **once per tick**.

          :::note

          If the signal deviates from `max_envelope` faster than the correction
          faster, it might end up exceeding the envelope.

          :::
      min_envelope:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Lower bound of the moving average.

          Behavior is similar to `max_envelope`.
    description: Inputs for the EMA component.
  aperture.policy.language.v1.EMA.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Exponential moving average of the series of reading as an output signal.
    description: Outputs for the EMA component.
  aperture.policy.language.v1.EMA.Parameters:
    type: object
    properties:
      ema_window:
        type: string
        description: |-
          EMA window duration.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: validate:"required"
      warmup_window:
        type: string
        description: |-
          Duration of EMA warming up window.

          The initial value of the EMA is the average of signal readings received during the warm up window.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: validate:"required"
      correction_factor_on_min_envelope_violation:
        type: number
        format: double
        description: |-
          Correction factor to apply on the output value if its in violation of the min envelope.

          @gotags: validate:"gte=1.0" default:"1.0"
      correction_factor_on_max_envelope_violation:
        type: number
        format: double
        description: |-
          Correction factor to apply on the output value if its in violation of the max envelope.

          @gotags: validate:"gte=0,lte=1.0" default:"1.0"
      valid_during_warmup:
        type: boolean
        description: |-
          Whether the output is valid during the warm-up stage.

          @gotags: default:"false"
    description: Parameters for the EMA component.
  aperture.policy.language.v1.EqualsMatchExpression:
    type: object
    properties:
      label:
        type: string
        description: |-
          Name of the label to equal match the value.

          @gotags: validate:"required"
      value:
        type: string
        description: Exact value that the label should be equal to.
    description: Label selector expression of the equal form `label == value`.
  aperture.policy.language.v1.Extractor:
    type: object
    properties:
      from:
        type: string
        description: |-
          Attribute path is a dot-separated path to attribute.

          Should be either:
          * one of the fields of [Attribute Context](https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/auth/v3/attribute_context.proto), or
          * a special `request.http.bearer` pseudo-attribute.
          For example, `request.http.method` or `request.http.header.user-agent`

          Note: The same attribute path syntax is shared by other extractor variants,
          wherever attribute path is needed in their "from" syntax.

          Example:
          ```yaml
          from: request.http.headers.user-agent
          ```
        title: Use an attribute with no conversion
      json:
        $ref: '#/definitions/aperture.policy.language.v1.JSONExtractor'
        description: Parse JSON, and extract one of the fields.
      address:
        $ref: '#/definitions/aperture.policy.language.v1.AddressExtractor'
        description: Display an address as a single string - `<ip>:<port>`.
      jwt:
        $ref: '#/definitions/aperture.policy.language.v1.JWTExtractor'
        description: Parse the attribute as JWT and read the payload.
      path_templates:
        $ref: '#/definitions/aperture.policy.language.v1.PathTemplateMatcher'
        description: Match HTTP Path to given path templates.
    description: There are multiple variants of extractor, specify exactly one.
    title: Defines a high-level way to specify how to extract a flow label value given HTTP request metadata, without a need to write Rego code
  aperture.policy.language.v1.Extrapolator:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Extrapolator.Ins'
        description: Input ports for the Extrapolator component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Extrapolator.Outs'
        description: Output ports for the Extrapolator component.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.Extrapolator.Parameters'
        description: |-
          Parameters for the Extrapolator component.

          @gotags: validate:"required"
    description: It does so until `maximum_extrapolation_interval` is reached, beyond which it emits invalid signal unless input signal becomes valid again.
    title: Extrapolates the input signal by repeating the last valid value during the period in which it is invalid
  aperture.policy.language.v1.Extrapolator.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Input signal for the Extrapolator component.
    description: Inputs for the Extrapolator component.
  aperture.policy.language.v1.Extrapolator.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Extrapolated signal.
    description: Outputs for the Extrapolator component.
  aperture.policy.language.v1.Extrapolator.Parameters:
    type: object
    properties:
      max_extrapolation_interval:
        type: string
        description: |-
          Maximum time interval to repeat the last valid value of input signal.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: validate:"required"
    description: Parameters for the Extrapolator component.
  aperture.policy.language.v1.FirstValid:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.FirstValid.Ins'
        description: Input ports for the FirstValid component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.FirstValid.Outs'
        description: Output ports for the FirstValid component.
    title: Picks the first valid input signal from the array of input signals and emits it as an output signal
  aperture.policy.language.v1.FirstValid.Ins:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
    description: Inputs for the FirstValid component.
  aperture.policy.language.v1.FirstValid.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: First valid input signal as an output signal.
    description: Outputs for the FirstValid component.
  aperture.policy.language.v1.FlowControl:
    type: object
    properties:
      quota_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.QuotaScheduler'
      rate_limiter:
        $ref: '#/definitions/aperture.policy.language.v1.RateLimiter'
        description: _Rate Limiter_ provides service protection by applying rate limits using the token bucket algorithm.
      load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.LoadScheduler'
        description: _Load Scheduler_ provides service protection by creating a prioritized workload queue in front of the service using Weighted Fair Queuing.
      adaptive_load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.AdaptiveLoadScheduler'
        description: |-
          _Adaptive Load Scheduler_ component does additive increase of load multiplier during non-overload state. During overload, the load multiplier is throttled based on the provided strategy.
          Deprecated: v3.0.0. Use _AIMD Load Scheduler_ instead.

          @gotags: validate:"deprecated"
      sampler:
        $ref: '#/definitions/aperture.policy.language.v1.Sampler'
        description: Sampler is a component that regulates the flow of requests to the service by allowing only the specified percentage of requests or sticky sessions.
      load_ramp:
        $ref: '#/definitions/aperture.policy.language.v1.LoadRamp'
        description: _Load Ramp_ smoothly regulates the flow of requests over specified steps.
      aimd_load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.AIMDLoadScheduler'
        description: AIMD Load Scheduler.
      range_driven_load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.RangeDrivenLoadScheduler'
        description: Range Driven Load Scheduler.
      aiad_load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.AIADLoadScheduler'
        description: AIAD Load Scheduler.
      private:
        $ref: '#/definitions/google.protobuf.Any'
        description: Extends flow control with private components.
    description: _Flow Control_ encompasses components that manage the flow of requests or access to features within a service.
  aperture.policy.language.v1.FlowControlResources:
    type: object
    properties:
      flux_meters:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.language.v1.FluxMeter'
        description: |-
          Flux Meters are installed in the data-plane and form the observability leg of the feedback loop.

          Flux Meter created metrics can be consumed as input to the circuit through the PromQL component.

          @gotags: validate:"dive"
      classifiers:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Classifier'
        description: |-
          Classifiers are installed in the data-plane and are used to label the requests based on payload content.

          The flow labels created by Classifiers can be matched by Flux Meters to create metrics for control purposes.

          @gotags: validate:"dive"
    title: FlowControl Resources
  aperture.policy.language.v1.FluxMeter:
    type: object
    properties:
      static_buckets:
        $ref: '#/definitions/aperture.policy.language.v1.FluxMeter.StaticBuckets'
      linear_buckets:
        $ref: '#/definitions/aperture.policy.language.v1.FluxMeter.LinearBuckets'
      exponential_buckets:
        $ref: '#/definitions/aperture.policy.language.v1.FluxMeter.ExponentialBuckets'
      exponential_buckets_range:
        $ref: '#/definitions/aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange'
      attribute_key:
        type: string
        description: |-
          Key of the attribute in access log or span from which the metric for this flux meter is read.

          :::info

          For list of available attributes in Envoy access logs, refer
          [Envoy Filter](/aperture-for-infra/integrations/istio/istio.md#envoy-filter)

          :::

          @gotags: default:"workload_duration_ms"
      selectors:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Selector'
        description: |-
          Selectors for flows that will be metered by this _Flux Meter_.

          @gotags: validate:"required,gt=0,dive"
    description: |-
      Flux Meter gathers metrics for the traffic that matches its selector.
      The histogram created by Flux Meter measures the workload latency by default.

      :::info

      See also [Flux Meter overview](/concepts/advanced/flux-meter.md).

      :::
      Example:
      ```yaml
      static_buckets:
         buckets: [5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]
      selectors:
         - agent_group: demoapp
           service: service1-demo-app.demoapp.svc.cluster.local
           control_point: ingress
      attribute_key: response_duration_ms
      ```
  aperture.policy.language.v1.FluxMeter.ExponentialBuckets:
    type: object
    properties:
      start:
        type: number
        format: double
        description: |-
          Upper bound of the lowest bucket.

          @gotags: validate:"gt=0.0"
      factor:
        type: number
        format: double
        description: |-
          Factor to be multiplied to the previous bucket's upper bound to calculate the following bucket's upper bound.

          @gotags: validate:"gt=1.0"
      count:
        type: integer
        format: int32
        description: |-
          Number of buckets.

          @gotags: validate:"gt=0"
    description: |-
      ExponentialBuckets creates `count` number of buckets where the lowest bucket has an upper bound of `start`
      and each following bucket's upper bound is `factor` times the previous bucket's upper bound. The final +inf
      bucket is not counted.
  aperture.policy.language.v1.FluxMeter.ExponentialBucketsRange:
    type: object
    properties:
      min:
        type: number
        format: double
        description: |-
          Lowest bucket.

          @gotags: validate:"gt=0.0"
      max:
        type: number
        format: double
        description: Highest bucket.
      count:
        type: integer
        format: int32
        description: |-
          Number of buckets.

          @gotags: validate:"gt=0"
    description: |-
      ExponentialBucketsRange creates `count` number of buckets where the lowest bucket is `min` and the highest
      bucket is `max`. The final +inf bucket is not counted.
  aperture.policy.language.v1.FluxMeter.LinearBuckets:
    type: object
    properties:
      start:
        type: number
        format: double
        description: Upper bound of the lowest bucket.
      width:
        type: number
        format: double
        description: Width of each bucket.
      count:
        type: integer
        format: int32
        description: |-
          Number of buckets.

          @gotags: validate:"gt=0"
    description: |-
      LinearBuckets creates `count` number of buckets, each `width` wide, where the lowest bucket has an
      upper bound of `start`. The final +inf bucket is not counted.
  aperture.policy.language.v1.FluxMeter.StaticBuckets:
    type: object
    properties:
      buckets:
        type: array
        items:
          type: number
          format: double
        description: |-
          The buckets in which latency histogram will be stored.

          @gotags: default:"[5.0,10.0,25.0,50.0,100.0,250.0,500.0,1000.0,2500.0,5000.0,10000.0]"
    description: StaticBuckets holds the static value of the buckets where latency histogram will be stored.
  aperture.policy.language.v1.GetDecisionsResponse:
    type: object
    properties:
      decisions:
        type: object
        additionalProperties:
          type: string
    description: GetDecisionsResponse is a response containing decisions for a given decision type.
  aperture.policy.language.v1.GetDynamicConfigResponse:
    type: object
    properties:
      dynamic_config:
        type: object
    description: GetDynamicConfigResponse is a response containing dynamic configuration for Policy.
  aperture.policy.language.v1.GetPoliciesResponse:
    type: object
    properties:
      policies:
        $ref: '#/definitions/aperture.policy.language.v1.Policies'
    description: GetPoliciesResponse is a response containing all Policies.
  aperture.policy.language.v1.GetPolicyResponse:
    type: object
    properties:
      policy:
        $ref: '#/definitions/aperture.policy.language.v1.Policy'
      status:
        $ref: '#/definitions/aperture.policy.language.v1.GetPolicyResponse.Status'
      reason:
        type: string
    description: GetPolicyResponse is a response containing the requested Policy.
  aperture.policy.language.v1.GetPolicyResponse.Status:
    type: string
    enum:
      - VALID
      - INVALID
      - NOT_LOADED
      - STALE
      - OUTDATED
    default: VALID
    description: |2-
       - VALID: Policy is valid, present in etcd and running in the controller.
       - INVALID: Policy is present in etcd, but fails to parse.
       - NOT_LOADED: Policy is present in etcd, but is not (yet) running in the controller.
       - STALE: Policy is running on the controller, but is not present in etcd.
       - OUTDATED: Policy is present in etcd and policy with the same name is running in
      the controller, but these policies differ.
  aperture.policy.language.v1.GradientController:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.GradientController.Ins'
        description: Input ports of the Gradient Controller.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.GradientController.Outs'
        description: Output ports of the Gradient Controller.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.GradientController.Parameters'
        description: |-
          Gradient Parameters.

          @gotags: validate:"required"
      manual_mode:
        type: boolean
        description: In manual mode, the controller does not adjust the control variable. It emits the same output as the control variable input. This setting can be adjusted at runtime through dynamic configuration without restarting the policy.
      manual_mode_config_key:
        type: string
        description: Configuration key for overriding `manual_mode` setting through dynamic configuration.
    description: |-
      The `gradient` describes a corrective factor that should be applied to the
      control variable to get the signal closer to the setpoint. It's computed as follows:

      $$
      \text{gradient} = \left(\frac{\text{signal}}{\text{setpoint}}\right)^{\text{slope}}
      $$

      `gradient` is then clamped to `[min_gradient, max_gradient]` range.

      The output of gradient controller is computed as follows:
      $$
      \text{output} = \text{gradient}_{\text{clamped}} \cdot \text{control\_variable} + \text{optimize}.
      $$

      Note the additional `optimize` signal, that can be used to "nudge" the
      controller into desired idle state.

      The output can be _optionally_ clamped to desired range using `max` and
      `min` input.
    title: |-
      Gradient controller is a type of controller which tries to adjust the
      control variable proportionally to the relative difference between setpoint
      and actual value of the signal
  aperture.policy.language.v1.GradientController.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Signal to be used for the gradient computation.
      setpoint:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Setpoint to be used for the gradient computation.
      max:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Maximum value to limit the output signal.
      min:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Minimum value to limit the output signal.
      control_variable:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Actual current value of the control variable.

          This signal is multiplied by the gradient to produce the output.
    description: Inputs for the Gradient Controller component.
  aperture.policy.language.v1.GradientController.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Computed desired value of the control variable.
    description: Outputs for the Gradient Controller component.
  aperture.policy.language.v1.GradientController.Parameters:
    type: object
    properties:
      slope:
        type: number
        format: double
        description: |-
          Slope controls the aggressiveness and direction of the Gradient Controller.

          Slope is used as exponent on the signal to setpoint ratio in computation
          of the gradient (see the [main description](#gradient-controller) for
          exact equation). This parameter decides how aggressive the controller
          responds to the deviation of signal from the setpoint.
          for example:
          * $\text{slope} = 1$: when signal is too high, increase control variable,
          * $\text{slope} = -1$: when signal is too high, decrease control variable,
          * $\text{slope} = -0.5$: when signal is too high, decrease control variable gradually.

          The sign of slope depends on correlation between the signal and control variable:
          * Use $\text{slope} < 0$ if there is a _positive_ correlation between the signal and
          the control variable (for example, Per-pod CPU usage and total concurrency).
          * Use $\text{slope} > 0$ if there is a _negative_ correlation between the signal and
          the control variable (for example, Per-pod CPU usage and number of pods).

          :::note

          You need to set _negative_ slope for a _positive_ correlation, as you're
          describing the _action_ which controller should make when the signal
          increases.

          :::

          The magnitude of slope describes how aggressively should the controller
          react to a deviation of signal.
          With $|\text{slope}| = 1$, the controller will aim to bring the signal to
          the setpoint in one tick (assuming linear correlation with signal and setpoint).
          Smaller magnitudes of slope will make the controller adjust the control
          variable gradually.

          Setting $|\text{slope}| < 1$ (for example, $\pm0.8$) is recommended.
          If you experience overshooting, consider lowering the magnitude even more.
          Values of $|\text{slope}| > 1$ aren't recommended.

          :::note

          Remember that the gradient and output signal can be (optionally) clamped,
          so the _slope_ might not fully describe aggressiveness of the controller.

          :::

          @gotags: validate:"required"
      min_gradient:
        type: number
        format: double
        description: |-
          Minimum gradient which clamps the computed gradient value to the range, `[min_gradient, max_gradient]`.

          @gotags: default:"-1.79769313486231570814527423731704356798070e+308"
      max_gradient:
        type: number
        format: double
        description: |-
          Maximum gradient which clamps the computed gradient value to the range, `[min_gradient, max_gradient]`.

          @gotags: default:"1.79769313486231570814527423731704356798070e+308"
    description: Gradient Parameters.
  aperture.policy.language.v1.Holder:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Holder.Ins'
        description: Input ports for the Holder component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Holder.Outs'
        description: Output ports for the Holder component.
      hold_for:
        type: string
        description: |-
          Holding the last valid signal value for the `hold_for` duration.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"5s"
    description: |-
      Holds the last valid signal value for the specified duration then waits for next valid value to hold.
      If it is holding a value that means it ignores both valid and invalid new signals until the `hold_for` duration is finished.
  aperture.policy.language.v1.Holder.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The input signal.
      reset:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Resets the holder output to the current input signal when reset signal is valid and non-zero.
    description: Inputs for the Holder component.
  aperture.policy.language.v1.Holder.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The output signal.
    description: Outputs for the Holder component.
  aperture.policy.language.v1.InPort:
    type: object
    properties:
      signal_name:
        type: string
        description: Name of the incoming Signal on the InPort.
      constant_signal:
        $ref: '#/definitions/aperture.policy.language.v1.ConstantSignal'
        description: Constant value to be used for this InPort instead of a signal.
    title: Components receive input from other components through InPorts
  aperture.policy.language.v1.IncreasingGradient:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.IncreasingGradient.Ins'
        description: Input ports for the Gradient.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.IncreasingGradient.Parameters'
        title: |-
          Gradient parameters for the controller. Defaults and constraints:
          * `slope` = 1
          * `min_gradient` = 1 (cannot be changed)
          * `max_gradient` = +Inf (must be greater than 1)
    description: Increasing Gradient defines a controller for scaling out based on _Gradient Controller_.
  aperture.policy.language.v1.IncreasingGradient.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The signal to use for scale-out.
      setpoint:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The setpoint to use for scale-out.
    description: Inputs for Gradient.
  aperture.policy.language.v1.IncreasingGradient.Parameters:
    type: object
    properties:
      slope:
        type: number
        format: double
        title: '@gotags: default:"1.0"'
      max_gradient:
        type: number
        format: double
        title: '@gotags: default:"1.79769313486231570814527423731704356798070e+308" validate:"gte=1.0"'
    description: This allows subset of parameters with constrained values compared to a regular gradient controller. For full documentation of these parameters, refer to the [GradientControllerParameters](#gradient-controller-parameters).
  aperture.policy.language.v1.InfraMeter:
    type: object
    properties:
      receivers:
        type: object
        additionalProperties:
          type: object
        description: |-
          Receivers define receivers to be used in custom metrics pipelines. This should
          be in [OTel format](https://opentelemetry.io/docs/collector/configuration/#receivers).
      processors:
        type: object
        additionalProperties:
          type: object
        description: |-
          Processors define processors to be used in custom metrics pipelines. This should
          be in [OTel format](https://opentelemetry.io/docs/collector/configuration/#processors).
      pipeline:
        $ref: '#/definitions/aperture.policy.language.v1.InfraMeter.MetricsPipeline'
        description: |-
          Pipeline is an OTel metrics pipeline definition, which **only** uses receivers
          and processors defined above. Exporter would be added automatically.

          If there are no processors defined or only one processor is defined, the
          pipeline definition can be omitted. In such cases, the pipeline will
          automatically use all given receivers and the defined processor (if
          any).  However, if there are more than one processor, the pipeline must
          be defined explicitly.
      per_agent_group:
        type: boolean
        description: |-
          PerAgentGroup marks the pipeline to be instantiated only once per agent
          group. This is helpful for receivers that scrape for example, some cluster-wide
          metrics. When not set, pipeline will be instantiated on every Agent.

          @gotags: default:"false"
      agent_group:
        type: string
        description: |-
          AgentGroup is the agent group to sync this InfraMeter with.

          @gotags: default:"default"
    description: |-
      InfraMeter is a resource that sets up OpenTelemetry pipelines.
      It defines receivers, processors, and a single metrics pipeline
      which will be exported to the configured Prometheus instance.
      Environment variables can be used in the configuration using format `${ENV_VAR_NAME}`.

      :::info

      See also [Get Started / Setup Integrations / Metrics](/aperture-for-infra/integrations/metrics/metrics.md).

      :::
  aperture.policy.language.v1.InfraMeter.MetricsPipeline:
    type: object
    properties:
      receivers:
        type: array
        items:
          type: string
      processors:
        type: array
        items:
          type: string
    description: MetricsPipelineConfig defines a custom metrics pipeline.
  aperture.policy.language.v1.Integrator:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Integrator.Ins'
        description: Input ports for the Integrator component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Integrator.Outs'
        description: Output ports for the Integrator component.
      initial_value:
        type: number
        format: double
        description: |-
          Initial value of the integrator.

          @gotags: default:"0"
      evaluation_interval:
        type: string
        description: |-
          The evaluation interval of the Integrator. This determines how often the Integrator is incremented. Defaults to the evaluation interval of the circuit.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.
    description: Accumulates sum of signal every tick.
  aperture.policy.language.v1.Integrator.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The input signal.
      reset:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Resets the integrator output to zero when reset signal is valid and non-zero. Reset also resets the max and min constraints.
      max:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The maximum output.
      min:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The minimum output.
    description: Inputs for the Integrator component.
  aperture.policy.language.v1.Integrator.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
    description: Outputs for the Integrator component.
  aperture.policy.language.v1.Inverter:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Inverter.Ins'
        description: Input ports for the Inverter component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Inverter.Outs'
        description: Output ports for the Inverter component.
    description: |-
      Logical NOT.

      See [And component](#and) on how signals are mapped onto Boolean values.
  aperture.policy.language.v1.Inverter.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Signal to be negated.

          @gotags: validate:"dive"
    description: Inputs for the Inverter component.
  aperture.policy.language.v1.Inverter.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: |-
          Logical negation of the input signal.

          Will always be 0 (false), 1 (true) or invalid (unknown).
    description: Output ports for the Inverter component.
  aperture.policy.language.v1.JSONExtractor:
    type: object
    properties:
      from:
        type: string
        description: |-
          Attribute path pointing to some strings - for example, `request.http.body`.

          @gotags: validate:"required"
      pointer:
        type: string
        description: |-
          JSON pointer represents a parsed JSON pointer which allows to select a specified field from the payload.

          Note: Uses [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
          for example, `/foo/bar`. If the pointer points into an object, it'd be converted to a string.
    description: |-
      Example:
      ```yaml
      from: request.http.body
      pointer: /user/name
      ```
    title: Parse JSON, and extract one of the fields
  aperture.policy.language.v1.JWTExtractor:
    type: object
    properties:
      from:
        type: string
        description: |-
          JWT (JSON Web Token) can be extracted from any input attribute, but most likely you'd want to use `request.http.bearer`.

          @gotags: validate:"required"
      json_pointer:
        type: string
        description: |-
          JSON pointer allowing to select a specified field from the payload.

          Note: Uses [JSON pointer](https://datatracker.ietf.org/doc/html/rfc6901) syntax,
          for example, `/foo/bar`. If the pointer points into an object, it'd be converted to a string.
    description: |-
      Specify a field to be extracted from payload using `json_pointer`.

      Note: The signature is not verified against the secret (assuming there's some
      other part of the system that handles such verification).

      Example:
      ```yaml
      from: request.http.bearer
      json_pointer: /user/email
      ```
    title: Parse the attribute as JWT and read the payload
  aperture.policy.language.v1.K8sLabelMatcherRequirement:
    type: object
    properties:
      key:
        type: string
        description: |-
          Label key that the selector applies to.

          @gotags: validate:"required"
      operator:
        type: string
        description: |-
          Logical operator which represents a key's relationship to a set of values.
          Valid operators are In, NotIn, Exists and DoesNotExist.

          @gotags: validate:"required,oneof=In NotIn Exists DoesNotExist"
      values:
        type: array
        items:
          type: string
        description: |-
          An array of string values that relates to the key by an operator.
          If the operator is In or NotIn, the values array must be non-empty.
          If the operator is Exists or DoesNotExist, the values array must be empty.
    description: Label selector requirement which is a selector that contains values, a key, and an operator that relates the key and values.
  aperture.policy.language.v1.KubernetesObjectSelector:
    type: object
    properties:
      agent_group:
        type: string
        description: |-
          Which [agent-group](/concepts/selector.md#agent-group) this
          selector applies to.

          @gotags: default:"default"
      namespace:
        type: string
        description: |-
          Kubernetes namespace that the resource belongs to.

          @gotags: validate:"required"
      api_version:
        type: string
        description: '@gotags: validate:"required"'
        title: API version of Kubernetes resource
      kind:
        type: string
        description: |-
          Kubernetes resource type.

          @gotags: validate:"required"
      name:
        type: string
        description: |-
          Kubernetes resource name.

          @gotags: validate:"required"
    description: |-
      Describes which pods a control or observability
      component should apply to.
  aperture.policy.language.v1.LabelMatcher:
    type: object
    properties:
      match_labels:
        type: object
        additionalProperties:
          type: string
        description: |-
          A map of {key,value} pairs representing labels to be matched.
          A single {key,value} in the `match_labels` requires that the label `key` is present and equal to `value`.

          Note: The requirements are combined using the logical AND operator.
      match_expressions:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.K8sLabelMatcherRequirement'
        description: |-
          List of Kubernetes-style label matcher requirements.

          Note: The requirements are combined using the logical AND operator.

          @gotags: validate:"dive"
      expression:
        $ref: '#/definitions/aperture.policy.language.v1.MatchExpression'
        description: An arbitrary expression to be evaluated on the labels.
    description: |-
      It provides three ways to define requirements:
      - match labels
      - match expressions
      - arbitrary expression

      If multiple requirements are set, they're all combined using the logical AND operator.
      An empty label matcher always matches.
    title: |-
      Allows to define rules whether a map of
      [labels](/concepts/flow-label.md)
      should be considered a match or not
  aperture.policy.language.v1.LoadRamp:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.LoadRamp.Ins'
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.LoadRamp.Outs'
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.LoadRamp.Parameters'
        title: '@gotags: validate:"required"'
      pass_through_label_values:
        type: array
        items:
          type: string
        description: Specify certain label values to be always accepted by the _Sampler_ regardless of accept percentage.
      pass_through_label_values_config_key:
        type: string
        description: Configuration key for setting pass through label values through dynamic configuration.
    description: |-
      The _Load Ramp_ produces a smooth and continuous traffic load
      that changes progressively over time, based on the specified steps.

      Each step is defined by two parameters:
      - The `target_accept_percentage`.
      - The `duration` for the signal to change from the
        previous step's `target_accept_percentage` to the current step's
        `target_accept_percentage`.

      The percentage of requests accepted starts at the `target_accept_percentage`
      defined in the first step and gradually ramps up or down linearly from
      the previous step's `target_accept_percentage` to the next
      `target_accept_percentage`, over the `duration` specified for each step.
  aperture.policy.language.v1.LoadRamp.Ins:
    type: object
    properties:
      forward:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Whether to progress the _Load Ramp_ towards the next step.
      backward:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Whether to progress the _Load Ramp_ towards the previous step.
      reset:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Whether to reset the _Load Ramp_ to the first step.
    description: Inputs for the _Load Ramp_ component.
  aperture.policy.language.v1.LoadRamp.Outs:
    type: object
    properties:
      accept_percentage:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The percentage of flows being accepted by the _Load Ramp_.
      at_start:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: A Boolean signal indicating whether the _Load Ramp_ is at the start of signal generation.
      at_end:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: A Boolean signal indicating whether the _Load Ramp_ is at the end of signal generation.
    description: Outputs for the _Load Ramp_ component.
  aperture.policy.language.v1.LoadRamp.Parameters:
    type: object
    properties:
      sampler:
        $ref: '#/definitions/aperture.policy.language.v1.Sampler.Parameters'
        description: |-
          Parameters for the _Sampler_.

          @gotags: validate:"required"
      steps:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.LoadRamp.Parameters.Step'
        title: '@gotags: validate:"required,gt=0,dive"'
    description: Parameters for the _Load Ramp_ component.
  aperture.policy.language.v1.LoadRamp.Parameters.Step:
    type: object
    properties:
      target_accept_percentage:
        type: number
        format: double
        description: |-
          The value of the step.

          @gotags: validate:"gte=0,lte=100"
      duration:
        type: string
        description: |-
          Duration for which the step is active.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: validate:"required"
      denied_response_status_code:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.StatusCode'
        description: This field allows you to override the default HTTP status code (`503 Service Unavailable`) that is returned when a request is denied.
  aperture.policy.language.v1.LoadScheduler:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.LoadScheduler.Ins'
        description: |-
          Input ports for the LoadScheduler component.

          @gotags: validate:"required"
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.LoadScheduler.Outs'
        description: Output ports for the LoadScheduler component.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.LoadScheduler.Parameters'
        title: '@gotags: validate:"required"'
      dry_run:
        type: boolean
        description: |-
          Decides whether to run the load scheduler in dry-run mode. In dry run mode the scheduler acts as pass through to all flow and does not queue flows.
          It is useful for observing the behavior of load scheduler without disrupting any real traffic.
      dry_run_config_key:
        type: string
        description: Configuration key for setting dry run mode through dynamic configuration.
    description: |-
      :::info

      See also [_Load Scheduler_ overview](/concepts/scheduler/load-scheduler.md).

      :::

      To make scheduling decisions the Flows are mapped into Workloads by providing match rules.
      A workload determines the priority and cost of admitting each Flow that belongs to it.
      Scheduling of Flows is based on Weighted Fair Queuing principles.

      The signal at port `load_multiplier` determines the fraction of incoming tokens that get admitted. The signals gets acted on once every 10 seconds.
    title: _Load Scheduler_ creates a queue for flows in front of a service to provide active service protection
  aperture.policy.language.v1.LoadScheduler.Ins:
    type: object
    properties:
      load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Load multiplier is proportion of incoming
          token rate that needs to be accepted. The signal gets updated once every 10 seconds.
    description: Input for the LoadScheduler component.
  aperture.policy.language.v1.LoadScheduler.Outs:
    type: object
    properties:
      observed_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Observed load multiplier is the proportion of incoming token rate that is being accepted. The signal gets updated once every 10 seconds.
    description: Output for the LoadScheduler component.
  aperture.policy.language.v1.LoadScheduler.Parameters:
    type: object
    properties:
      workload_latency_based_tokens:
        type: boolean
        description: |-
          Automatically estimate the size of flows within each workload, based on
          historical latency. Each workload's `tokens` will be set to average
          latency of flows in that workload during the last few seconds (exact duration
          of this average can change).
          This setting is useful in concurrency limiting use-case, where the
          concurrency is calculated as `(avg. latency \* in-flight flows)` (Little's Law).

          The value of tokens estimated takes a lower precedence
          than the value of `tokens` specified in the workload definition
          and `tokens` explicitly specified in the flow labels.

          @gotags: default:"false"
      scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.Scheduler'
        description: |-
          Configuration of Weighted Fair Queuing-based workload scheduler.

          Contains configuration of per-agent scheduler
      selectors:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Selector'
        description: |-
          Selectors for the component.

          @gotags: validate:"required,gt=0,dive"
    title: Parameters for _Load Scheduler_ component
  aperture.policy.language.v1.MatchExpression:
    type: object
    properties:
      not:
        $ref: '#/definitions/aperture.policy.language.v1.MatchExpression'
        description: The expression negates the result of sub expression.
      all:
        $ref: '#/definitions/aperture.policy.language.v1.MatchExpression.List'
        description: The expression is true when all sub expressions are true.
      any:
        $ref: '#/definitions/aperture.policy.language.v1.MatchExpression.List'
        description: The expression is true when any sub expression is true.
      label_exists:
        type: string
        description: The expression is true when label with given name exists.
      label_equals:
        $ref: '#/definitions/aperture.policy.language.v1.EqualsMatchExpression'
        description: The expression is true when label value equals given value.
      label_matches:
        $ref: '#/definitions/aperture.policy.language.v1.MatchesMatchExpression'
        description: The expression is true when label matches given regular expression.
    description: |-
      MatchExpression has multiple variants, exactly one should be set.

      Example:
      ```yaml
      all:
        of:
          - label_exists: foo
          - label_equals:
              label: app
              value: frobnicator
      ```
  aperture.policy.language.v1.MatchExpression.List:
    type: object
    properties:
      of:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.MatchExpression'
        description: List of sub expressions of the match expression.
    description: 'for example, `{any: {of: [expr1, expr2]}}`.'
    title: List of MatchExpressions that is used for all or any matching
  aperture.policy.language.v1.MatchesMatchExpression:
    type: object
    properties:
      label:
        type: string
        description: |-
          Name of the label to match the regular expression.

          @gotags: validate:"required"
      regex:
        type: string
        description: |-
          Regular expression that should match the label value.
          It uses [Go's regular expression syntax](https://github.com/google/re2/wiki/Syntax).

          @gotags: validate:"required"
    description: Label selector expression of the form `label matches regex`.
  aperture.policy.language.v1.Max:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Max.Ins'
        description: Input ports for the Max component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Max.Outs'
        description: Output ports for the Max component.
    description: 'Max: output = max([]inputs).'
    title: Takes a list of input signals and emits the signal with the maximum value
  aperture.policy.language.v1.Max.Ins:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
    description: Inputs for the Max component.
  aperture.policy.language.v1.Max.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Signal with maximum value as an output signal.
    description: Output for the Max component.
  aperture.policy.language.v1.Min:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Min.Ins'
        description: Input ports for the Min component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Min.Outs'
        description: Output ports for the Min component.
    description: |-
      Takes an array of input signals and emits the signal with the minimum value
      Min: output = min([]inputs).
  aperture.policy.language.v1.Min.Ins:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
    description: Inputs for the Min component.
  aperture.policy.language.v1.Min.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Signal with minimum value as an output signal.
    description: Output ports for the Min component.
  aperture.policy.language.v1.NestedCircuit:
    type: object
    properties:
      in_ports_map:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Maps input port names to input ports.
      out_ports_map:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Maps output port names to output ports.
      components:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Component'
        description: |-
          List of components in the nested circuit.

          @gotags: validate:"dive"
    description: Nested circuit defines a sub-circuit as a high-level component. It consists of a list of components and a map of input and output ports.
  aperture.policy.language.v1.NestedSignalEgress:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.NestedSignalEgress.Ins'
        description: Input ports for the NestedSignalEgress component.
      port_name:
        type: string
        description: Name of the port.
    description: Nested signal egress is a special type of component that allows to extract a signal from a nested circuit.
  aperture.policy.language.v1.NestedSignalEgress.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Egress signal.
    description: Inputs for the NestedSignalEgress component.
  aperture.policy.language.v1.NestedSignalIngress:
    type: object
    properties:
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.NestedSignalIngress.Outs'
        description: Output ports for the NestedSignalIngress component.
      port_name:
        type: string
        description: Name of the port.
    description: Nested signal ingress is a special type of component that allows to inject a signal into a nested circuit.
  aperture.policy.language.v1.NestedSignalIngress.Outs:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Ingress signal.
    description: Outputs for the NestedSignalIngress component.
  aperture.policy.language.v1.Or:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Or.Ins'
        description: Input ports for the Or component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Or.Outs'
        description: Output ports for the Or component.
    description: |-
      Logical OR.

      See [And component](#and) on how signals are mapped onto Boolean values.
  aperture.policy.language.v1.Or.Ins:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Array of input signals.

          @gotags: validate:"dive"
    description: Inputs for the Or component.
  aperture.policy.language.v1.Or.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: |-
          Result of logical OR of all the input signals.

          Will always be 0 (false), 1 (true) or invalid (unknown).
    description: Output ports for the Or component.
  aperture.policy.language.v1.OutPort:
    type: object
    properties:
      signal_name:
        type: string
        description: Name of the outgoing Signal on the OutPort.
    title: Components produce output for other components through OutPorts
  aperture.policy.language.v1.PIDController:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.PIDController.Ins'
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.PIDController.Outs'
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.PIDController.Parameters'
        title: '@gotags: validate:"required"'
    title: |-
      PID Controller is a popular control mechanism for closed-loop feedback control. It takes a signal and a setpoint as inputs and uses the PID algorithm to compute proportional (proportional to the magnitude of error), integral (proportional to accumulation of error), and derivative (proportional to how fast the signal is changing) terms which are summed up to get a desired output.
      <!-- vale off -->
      $$
      error = setpoint - signal \\
      integral_i = integral_{i-1} + k_i \cdot error \\
      output_i = k_p \cdot error + k_d \cdot (signal_i - signal_{i-1}) + integral_i
      $$
      <!-- vale on -->
  aperture.policy.language.v1.PIDController.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        title: The signal to be controlled
      setpoint:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        title: The desired setpoint for the signal
      min:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        title: Minimum allowed output
      max:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        title: Maximum allowed output
  aperture.policy.language.v1.PIDController.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        title: Output of the PID controller
  aperture.policy.language.v1.PIDController.Parameters:
    type: object
    properties:
      kp:
        type: number
        format: double
        description: |-
          The proportional gain of the PID controller.

          @gotags: validate:"gte=0" default:"0"
      ki:
        type: number
        format: double
        description: |-
          The integral gain of the PID controller.

          @gotags: validate:"gte=0" default:"0"
      kd:
        type: number
        format: double
        description: |-
          The derivative gain of the PID controller.

          @gotags: validate:"gte=0" default:"0"
      evaluation_interval:
        type: string
        description: |-
          The evaluation interval of the PID controller. This determines how often the PID output is computed. Defaults to the evaluation interval of the circuit.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.
      reset_after_invalid_samples:
        type: integer
        format: int32
        description: |-
          The integrator resets after the specified number of ticks if the signal or setpoint are continuously invalid. Defaults to 4 invalid samples.

          @gotags: validate:"gte=1" default:"4"
  aperture.policy.language.v1.PathTemplateMatcher:
    type: object
    properties:
      template_values:
        type: object
        additionalProperties:
          type: string
        description: |-
          Template value keys are OpenAPI-inspired path templates.

          * Static path segment `/foo` matches a path segment exactly
          * `/{param}` matches arbitrary path segment.
            (The parameter name is ignored and can be omitted (`{}`))
          * The parameter must cover whole segment.
          * Additionally, path template can end with `/*` wildcard to match
            arbitrary number of trailing segments (0 or more).
          * Multiple consecutive `/` are ignored, as well as trailing `/`.
          * Parametrized path segments must come after static segments.
          * `*`, if present, must come last.
          * Most specific template "wins" (`/foo` over `/{}` and `/{}` over `/*`).

          See also <https://swagger.io/specification/#path-templating-matching>

          Example:
          ```yaml
          /register: register
          "/user/{userId}": user
          /static/*: other
          ```

          @gotags: validate:"gt=0,dive,keys,required,endkeys,required"
    description: |-
      HTTP path will be matched against given path templates.
      If a match occurs, the value associated with the path template will be treated as a result.
      In case of multiple path templates matching, the most specific one will be chosen.
    title: Matches HTTP Path to given path templates
  aperture.policy.language.v1.PeriodicDecrease:
    type: object
    properties:
      period:
        type: string
        description: |-
          The period of the timer.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: validate:"required"
      scale_in_percentage:
        type: number
        format: double
        description: |-
          The percentage of scale to reduce.

          @gotags: validate:"required,gte=0,lte=100"
    description: PeriodicDecrease defines a controller for scaling in based on a periodic timer.
  aperture.policy.language.v1.PodScaler:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.PodScaler.Ins'
        description: Input ports for the PodScaler component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.PodScaler.Outs'
        description: Output ports for the PodScaler component.
      dry_run:
        type: boolean
        description: |-
          Dry run mode ensures that no scaling is invoked by this pod scaler.
          This is useful for observing the behavior of pod scaler without disrupting any real deployment.
          This parameter sets the default value of dry run setting which can be overridden at runtime using dynamic configuration.
      dry_run_config_key:
        type: string
        description: Configuration key for overriding dry run setting through dynamic configuration.
      kubernetes_object_selector:
        $ref: '#/definitions/aperture.policy.language.v1.KubernetesObjectSelector'
        description: |-
          The Kubernetes object to which this pod scaler applies.

          @gotags: validate:"required"
    description: Component for scaling pods based on a signal.
  aperture.policy.language.v1.PodScaler.Ins:
    type: object
    properties:
      replicas:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        title: The number of replicas to configure for the Kubernetes resource
    description: Inputs for the PodScaler component.
  aperture.policy.language.v1.PodScaler.Outs:
    type: object
    properties:
      actual_replicas:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The number of replicas that are currently running.
      configured_replicas:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The number of replicas that are desired.
    description: Outputs for the PodScaler component.
  aperture.policy.language.v1.Policies:
    type: object
    properties:
      policies:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.language.v1.GetPolicyResponse'
    description: Policies is a collection of Policies.
  aperture.policy.language.v1.Policy:
    type: object
    properties:
      circuit:
        $ref: '#/definitions/aperture.policy.language.v1.Circuit'
        description: |-
          Defines the control-loop logic of the policy.

          @gotags: validate:"required_without=Resources"
      resources:
        $ref: '#/definitions/aperture.policy.language.v1.Resources'
        description: |-
          Resources (such as Flux Meters, Classifiers) to setup.

          @gotags: validate:"required_without=Circuit"
    description: |-
      Policy expresses observability-driven control logic.

      :::info

      See also [Policy overview](/concepts/advanced/policy.md).

      :::

      Policy specification contains a circuit that defines the controller logic and resources that need to be setup.
  aperture.policy.language.v1.PolynomialRangeFunction:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.PolynomialRangeFunction.Ins'
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.PolynomialRangeFunction.Outs'
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.PolynomialRangeFunction.Parameters'
        title: '@gotags: validate:"required"'
    description: |-
      Curve Types by Degree:
      - Degree 1: Linear
      - Degree 2: Quadratic
      - Degree 3: Cubic
      - and so on.
  aperture.policy.language.v1.PolynomialRangeFunction.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The input signal.
  aperture.policy.language.v1.PolynomialRangeFunction.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The output signal.
  aperture.policy.language.v1.PolynomialRangeFunction.Parameters:
    type: object
    properties:
      start:
        $ref: '#/definitions/aperture.policy.language.v1.PolynomialRangeFunction.Parameters.Datapoint'
        title: Starting data-point for the range function
      end:
        $ref: '#/definitions/aperture.policy.language.v1.PolynomialRangeFunction.Parameters.Datapoint'
        title: Ending data-point for the range function
      degree:
        type: number
        format: double
        title: Degree of the polynomial
      clamp_to_datapoint:
        type: boolean
        title: Clamp to the nearest data-point
      clamp_to_custom_values:
        $ref: '#/definitions/aperture.policy.language.v1.PolynomialRangeFunction.Parameters.ClampToCustomValues'
        title: Clamp to custom values
      continue_curve:
        type: boolean
        title: Continue polynomial curve
  aperture.policy.language.v1.PolynomialRangeFunction.Parameters.ClampToCustomValues:
    type: object
    properties:
      pre_start:
        type: number
        format: double
      post_end:
        type: number
        format: double
  aperture.policy.language.v1.PolynomialRangeFunction.Parameters.Datapoint:
    type: object
    properties:
      input:
        type: number
        format: double
      output:
        type: number
        format: double
  aperture.policy.language.v1.PromQL:
    type: object
    properties:
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.PromQL.Outs'
        description: Output ports for the PromQL component.
      query_string:
        type: string
        description: |-
          Describes the [PromQL](https://prometheus.io/docs/prometheus/latest/querying/basics/) query to be run.

          :::note

          The query must return a single value either as a scalar or as a vector with a single element.

          :::

          :::info Usage with Flux Meter

          [Flux Meter](/concepts/advanced/flux-meter.md) metrics can be queried using PromQL. Flux Meter defines histogram type of metrics in Prometheus.
          Therefore, one can refer to `flux_meter_sum`, `flux_meter_count` and `flux_meter_bucket`.
          The particular Flux Meter can be identified with the `flux_meter_name` label.
          There are additional labels available on a Flux Meter such as `valid`, `flow_status`, `http_status_code` and `decision_type`.

          :::

          :::info Usage with OpenTelemetry Metrics

          Aperture supports OpenTelemetry metrics. See [reference](/aperture-for-infra/integrations/metrics/metrics.md) for more details.

          :::
      evaluation_interval:
        type: string
        description: |-
          Describes the interval between successive evaluations of the Prometheus query.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"10s"
    title: Component that runs a Prometheus query periodically and returns the result as an output signal
  aperture.policy.language.v1.PromQL.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The result of the Prometheus query as an output signal.
    description: Output for the PromQL component.
  aperture.policy.language.v1.PulseGenerator:
    type: object
    properties:
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.PulseGenerator.Outs'
        description: Output ports for the PulseGenerator component.
      true_for:
        type: string
        description: |-
          Emitting 1 for the `true_for` duration.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"5s"
      false_for:
        type: string
        description: |-
          Emitting 0 for the `false_for` duration.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"5s"
    description: Generates 0 and 1 in turns.
  aperture.policy.language.v1.PulseGenerator.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
    description: Outputs for the PulseGenerator component.
  aperture.policy.language.v1.Query:
    type: object
    properties:
      promql:
        $ref: '#/definitions/aperture.policy.language.v1.PromQL'
        description: Periodically runs a Prometheus query in the background and emits the result.
    description: Query components that are query databases such as Prometheus.
  aperture.policy.language.v1.QuotaScheduler:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.RateLimiter.Ins'
        title: '@gotags: validate:"required"'
      selectors:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Selector'
        title: '@gotags: validate:"required,gt=0,dive"'
      rate_limiter:
        $ref: '#/definitions/aperture.policy.language.v1.RateLimiter.Parameters'
        title: '@gotags: validate:"required"'
      scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.Scheduler'
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.QuotaScheduler.Outs'
        description: Output ports for the _Quota Scheduler_ component.
    description: Schedules the traffic based on token-bucket based quotas.
  aperture.policy.language.v1.QuotaScheduler.Outs:
    type: object
    properties:
      accept_percentage:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The percentage of flows being accepted by the _Quota Scheduler_.
    description: Outputs for the _Quota Scheduler_ component.
  aperture.policy.language.v1.RangeDrivenLoadScheduler:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.RangeDrivenLoadScheduler.Ins'
        description: Input ports for the _Range Load Scheduler_.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.RangeDrivenLoadScheduler.Outs'
        description: Output ports for the _Range Load Scheduler_.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.RangeDrivenLoadScheduler.Parameters'
        description: |-
          Parameters for the _Range Load Scheduler_.

          @gotags: validate:"required"
      dry_run:
        type: boolean
        description: |-
          Decides whether to run the load scheduler in dry-run mode. In dry run mode the scheduler acts as pass through to all flow and does not queue flows.
          It is useful for observing the behavior of load scheduler without disrupting any real traffic.
      dry_run_config_key:
        type: string
        description: Configuration key for setting dry run mode through dynamic configuration.
    description: _Range Load Scheduler_ uses the [polynomial range function](#polynomial-range-function) to throttle the token rate based on the range of the signal.
  aperture.policy.language.v1.RangeDrivenLoadScheduler.Datapoint:
    type: object
    properties:
      signal_value:
        type: number
        format: double
      load_multiplier:
        type: number
        format: double
        title: '@gotags: validate:"gte=0,lte=1"'
  aperture.policy.language.v1.RangeDrivenLoadScheduler.Ins:
    type: object
    properties:
      signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The input signal to the controller.

          @gotags: validate:"required"
      overload_confirmation:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          The `overload_confirmation` port provides additional criteria to determine overload state which
          results in _Flow_ throttling at the service.
    description: Input ports for the _Range Load Scheduler_.
  aperture.policy.language.v1.RangeDrivenLoadScheduler.Outs:
    type: object
    properties:
      is_overload:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: A Boolean signal that indicates whether the service is in overload state.
      desired_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Desired Load multiplier is the ratio of desired token rate to the incoming token rate.
      observed_load_multiplier:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Observed Load multiplier is the ratio of accepted token rate to the incoming token rate.
    description: Output ports for the _Range Load Scheduler_.
  aperture.policy.language.v1.RangeDrivenLoadScheduler.Parameters:
    type: object
    properties:
      load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.LoadScheduler.Parameters'
        description: |-
          Parameters for the _Load Scheduler_.

          @gotags: validate:"required"
      low_throttle_threshold:
        $ref: '#/definitions/aperture.policy.language.v1.RangeDrivenLoadScheduler.Datapoint'
        description: '@gotags: validate:"required"'
        title: Starting data-point of the throttling range
      high_throttle_threshold:
        $ref: '#/definitions/aperture.policy.language.v1.RangeDrivenLoadScheduler.Datapoint'
        description: '@gotags: validate:"required"'
        title: Ending data-point of the throttling range
      degree:
        type: number
        format: double
        description: '@gotags: validate:"required"'
        title: |-
          Degree determines shape of the throttling curve.
          degree=1: linear
          degree=2: quadratic
          degree=3: cubic
      alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: |-
          Configuration parameters for the embedded Alerter.

          @gotags: validate:"required"
  aperture.policy.language.v1.RateLimiter:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.RateLimiter.Ins'
        description: '@gotags: validate:"required"'
        title: Input ports for the _Rate Limiter_ component
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.RateLimiter.Parameters'
        description: '@gotags: validate:"required"'
        title: Parameters for the _Rate Limiter_ component
      selectors:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Selector'
        description: |-
          Selectors for the component.

          @gotags: validate:"required,gt=0,dive"
      request_parameters:
        $ref: '#/definitions/aperture.policy.language.v1.RateLimiter.RequestParameters'
        title: RequestParameters for the component
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.RateLimiter.Outs'
        description: Output ports for the _Rate Limiter_ component.
    description: |-
      :::info

      See also [_Rate Limiter_ overview](/concepts/rate-limiter.md).

      :::

      RateLimiting is done on per-label-value (`label_key`) basis and it uses the _Token Bucket Algorithm_.
    title: Limits the traffic on a control point to specified rate
  aperture.policy.language.v1.RateLimiter.Ins:
    type: object
    properties:
      bucket_capacity:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Capacity of the bucket to allow for bursty traffic.

          @gotags: validate:"required"
      fill_amount:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: |-
          Number of tokens to fill within an `interval`.

          @gotags: validate:"required"
      pass_through:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        title: PassThrough port determines whether all requests
    title: Inputs for the _Rate Limiter_ component
  aperture.policy.language.v1.RateLimiter.Outs:
    type: object
    properties:
      accept_percentage:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The percentage of flows being accepted by the _Rate Limiter_.
    description: Outputs for the _Rate Limiter_ component.
  aperture.policy.language.v1.RateLimiter.Parameters:
    type: object
    properties:
      label_key:
        type: string
        description: |-
          Specifies which label the rate limiter should be keyed by.

          Rate limiting is done independently for each value of the
          [label](/concepts/flow-label.md) with given key.
          For example, to give each user a separate limit, assuming you
          have a _user_ flow
          label set up, set `label_key: "user"`.
          If no label key is specified, then all requests matching the
          selectors will be rate limited based on the global bucket.
          Deprecated: v3.0.0. Use _limit_by_label_key_ instead.

          @gotags: validate:"deprecated"
      limit_by_label_key:
        type: string
        description: |-
          Specifies which label the rate limiter should be keyed by.

          Rate limiting is done independently for each value of the
          [label](/concepts/flow-label.md) with given key.
          For example, to give each user a separate limit, assuming you
          have a _user_ flow
          label set up, set `limit_by_label_key: "user"`.
          If no label key is specified, then all requests matching the
          selectors will be rate limited based on the global bucket.
      adaptive_load_scheduler:
        $ref: '#/definitions/aperture.policy.language.v1.AdaptiveLoadScheduler'
      interval:
        type: string
        description: |-
          Interval defines the time interval in which the token bucket
          will fill tokens specified by `fill_amount` signal.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: validate:"required"
      continuous_fill:
        type: boolean
        description: |-
          Continuous fill determines whether the token bucket should be filled
          continuously or only on discrete intervals.

          @gotags: default:"true"
      max_idle_time:
        type: string
        description: |-
          Max idle time before token bucket state for a label is removed.
          If set to 0, the state is never removed.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"7200s"
      lazy_sync:
        $ref: '#/definitions/aperture.policy.language.v1.RateLimiter.Parameters.LazySync'
        title: Configuration of lazy-syncing behavior of rate limiter
      delay_initial_fill:
        type: boolean
        description: |-
          Delays the initial filling of the token bucket.
          If set to false, the token bucket will start filling immediately
          after the first request is received. This can potentially lead to
          more requests being accepted than the specified rate limit during
          the first interval.
          When set to true, the token bucket will be given a chance to
          empty out before the filling starts. The delay is equal to the
          time it takes to fill the bucket.

          @gotags: default:"false"
  aperture.policy.language.v1.RateLimiter.Parameters.LazySync:
    type: object
    properties:
      enabled:
        type: boolean
        description: '@gotags: default:"false"'
        title: Enables lazy sync
      num_sync:
        type: integer
        format: int64
        description: |-
          Number of times to lazy sync within the `interval`.

          @gotags: default:"4" validate:"gt=0"
  aperture.policy.language.v1.RateLimiter.RequestParameters:
    type: object
    properties:
      tokens_label_key:
        type: string
        description: |-
          Flow label key that will be used to override the number of tokens
          for this request.
          This is an optional parameter and takes highest precedence
          when assigning tokens to a request.
          The label value must be a valid number.
      denied_response_status_code:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.StatusCode'
        description: This field allows you to override the default HTTP status code (`429 Too Many Requests`) that is returned when a request is denied.
  aperture.policy.language.v1.Rego:
    type: object
    properties:
      labels:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.language.v1.Rego.LabelProperties'
        description: |-
          A map of {key, value} pairs mapping from
          [flow label](/concepts/flow-label.md) keys to queries that define
          how to extract and propagate flow labels with that key.
          The name of the label maps to a variable in the Rego module. It maps to `data.<package>.<label>` variable.

          @gotags: validate:"required,gt=0,dive,keys,required,endkeys,required"
      module:
        type: string
        description: |-
          Source code of the Rego module.

          :::note

          Must include a "package" declaration.

          :::

          @gotags: validate:"required"
    description: |-
      Rego define a set of labels that are extracted after evaluating a Rego module.

      :::info

      You can use the [live-preview](/concepts/advanced/classifier.md#live-previewing-requests) feature to first preview the input to the classifier before writing the labeling logic.

      :::

      Example of Rego module which also disables telemetry visibility of label:
      ```yaml
      rego:
        labels:
          user:
            telemetry: false
        module: |
          package user_from_cookie
          cookies := split(input.attributes.request.http.headers.cookie, "; ")
          user := user {
              cookie := cookies[_]
              startswith(cookie, "session=")
              session := substring(cookie, count("session="), -1)
              parts := split(session, ".")
              object := json.unmarshal(base64url.decode(parts[0]))
              user := object.user
          }
      ```
  aperture.policy.language.v1.Rego.LabelProperties:
    type: object
    properties:
      telemetry:
        type: boolean
        description: |-
          :::note

          The flow label is always accessible in Aperture Policies regardless of this setting.

          :::

          :::caution

          When using [FluxNinja extension](/reference/fluxninja.md), telemetry enabled
          labels are sent to Aperture Cloud for observability. Telemetry should
          be disabled for sensitive labels.

          :::

          @gotags: default:"true"
        title: |-
          Decides if the created flow label should be available as an attribute in OLAP telemetry and
          propagated in [baggage](/concepts/flow-label.md#baggage)
  aperture.policy.language.v1.Resources:
    type: object
    properties:
      telemetry_collectors:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.TelemetryCollector'
        description: |-
          TelemetryCollector configures OpenTelemetry collector integration.
          Deprecated: v3.0.0. Use `infra_meters` instead.

          @gotags: validate:"deprecated"
      infra_meters:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.language.v1.InfraMeter'
        description: |-
          _Infra Meters_ configure custom metrics OpenTelemetry collector pipelines, which will
          receive and process telemetry at the agents and send metrics to the configured Prometheus.
          Key in this map refers to OTel pipeline name. Prefixing pipeline name with `metrics/`
          is optional, as all the components and pipeline names would be normalized.

          Example:

          ```yaml
          infra_meters:
            rabbitmq:
              agent_group: default
              per_agent_group: true
              processors:
          	     batch:
          	       send_batch_size: 10
          	       timeout: 10s
          	   receivers:
          	     rabbitmq:
          	       collection_interval: 10s
                  endpoint: http://<rabbitmq-svc-fqdn>:15672
                  password: secretpassword
                  username: admin

          ```

          :::caution

          Validate the OTel configuration before applying it to the
          production cluster.
          Incorrect configuration will get rejected at the agents and might cause
          shutdown of the agent(s).

          :::
      flow_control:
        $ref: '#/definitions/aperture.policy.language.v1.FlowControlResources'
        description: FlowControlResources are resources that are provided by flow control integration.
    description: |-
      :::info

      See also [Resources overview](/concepts/advanced/policy.md).

      :::
    title: Resources that need to be setup for the policy to function
  aperture.policy.language.v1.Rule:
    type: object
    properties:
      extractor:
        $ref: '#/definitions/aperture.policy.language.v1.Extractor'
        description: High-level declarative extractor.
      telemetry:
        type: boolean
        description: |-
          :::note

          The flow label is always accessible in Aperture Policies regardless of this setting.

          :::

          :::caution

          When using [FluxNinja extension](/reference/fluxninja.md), telemetry enabled
          labels are sent to Aperture Cloud for observability. Telemetry should be
          disabled for sensitive labels.

          :::

          @gotags: default:"true"
        title: |-
          Decides if the created flow label should be available as an attribute in OLAP telemetry and
          propagated in [baggage](/concepts/flow-label.md#baggage)
    description: |-
      Example of a JSON extractor:
      ```yaml
      extractor:
        json:
          from: request.http.body
          pointer: /user/name
      ```
    title: Rule describes a single classification Rule
  aperture.policy.language.v1.SMA:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.SMA.Ins'
        description: Input ports for the SMA component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.SMA.Outs'
        description: Output ports for the SMA component.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.SMA.Parameters'
        description: |-
          Parameters for the SMA component.

          @gotags: validate:"required"
    description: Simple Moving Average (SMA) is a type of moving average that computes the average of a fixed number of signal readings.
  aperture.policy.language.v1.SMA.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Signal to be used for the moving average computation.
  aperture.policy.language.v1.SMA.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Computed moving average.
  aperture.policy.language.v1.SMA.Parameters:
    type: object
    properties:
      sma_window:
        type: string
        description: |-
          Window of time over which the moving average is computed.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: validate:"required"
      valid_during_warmup:
        type: boolean
        description: |-
          Whether the output is valid during the warm-up stage.

          @gotags: default:"false"
  aperture.policy.language.v1.Sampler:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Sampler.Ins'
        description: Input ports for the _Sampler_.
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.Sampler.Parameters'
        description: |-
          Parameters for the _Sampler_.

          @gotags: validate:"required"
      pass_through_label_values:
        type: array
        items:
          type: string
        description: Specify certain label values to be always accepted by this _Sampler_ regardless of accept percentage.
      pass_through_label_values_config_key:
        type: string
        description: Configuration key for setting pass through label values through dynamic configuration.
    description: |-
      _Sampler_ is a component that regulates the load at a
      [_Control Point_](/concepts/selector.md/#control-point) by allowing only a specified percentage of
      flows at random or by sticky sessions.

      :::info

      See also [_Sampler_ overview](/concepts/advanced/load-ramp.md#sampler).

      :::
  aperture.policy.language.v1.Sampler.Ins:
    type: object
    properties:
      accept_percentage:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: The percentage of requests to accept.
  aperture.policy.language.v1.Sampler.Parameters:
    type: object
    properties:
      session_label_key:
        type: string
        description: |-
          The flow label key for identifying sessions.
          - When label key is specified, _Sampler_ acts as a sticky filter.
            The series of flows with the same value of label key get the same
            decision provided that the `accept_percentage` is same or higher.
          - When label key is not specified, _Sampler_ acts as a stateless filter.
            Percentage of flows are selected randomly for rejection.
      selectors:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Selector'
        description: |-
          Selectors for the component.

          @gotags: validate:"required,gt=0,dive"
      denied_response_status_code:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.StatusCode'
        description: This field allows you to override the default HTTP status code (`503 Service Unavailable`) that is returned when a request is denied.
      ramp_mode:
        type: boolean
        description: |-
          Ramp component can accept flows with `ramp_mode` flag set.

          @gotags: default:"false"
  aperture.policy.language.v1.ScaleInController:
    type: object
    properties:
      controller:
        $ref: '#/definitions/aperture.policy.language.v1.ScaleInController.Controller'
        description: '@gotags: validate:"required"'
        title: Controller
      alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: |-
          Configuration for embedded Alerter.

          @gotags: validate:"required"
  aperture.policy.language.v1.ScaleInController.Controller:
    type: object
    properties:
      gradient:
        $ref: '#/definitions/aperture.policy.language.v1.DecreasingGradient'
      periodic:
        $ref: '#/definitions/aperture.policy.language.v1.PeriodicDecrease'
  aperture.policy.language.v1.ScaleOutController:
    type: object
    properties:
      controller:
        $ref: '#/definitions/aperture.policy.language.v1.ScaleOutController.Controller'
        description: '@gotags: validate:"required"'
        title: Controller
      alerter:
        $ref: '#/definitions/aperture.policy.language.v1.Alerter.Parameters'
        description: |-
          Configuration for embedded Alerter.

          @gotags: validate:"required"
  aperture.policy.language.v1.ScaleOutController.Controller:
    type: object
    properties:
      gradient:
        $ref: '#/definitions/aperture.policy.language.v1.IncreasingGradient'
  aperture.policy.language.v1.Scheduler:
    type: object
    properties:
      workloads:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.Scheduler.Workload'
        description: |-
          List of workloads to be used in scheduler.

          Categorizing flows into workloads
          allows for load throttling to be "intelligent" instead of queueing flows in an arbitrary order.
          There are two aspects of this "intelligence":
          * Scheduler can more precisely calculate concurrency if it understands
            that flows belonging to different classes have different weights (for example, insert queries compared to select queries).
          * Setting different priorities to different workloads lets the scheduler
            avoid dropping important traffic during overload.

          Each workload in this list specifies also a matcher that is used to
          determine which flow will be categorized into which workload.
          In case of multiple matching workloads, the first matching one will be used.
          If none of workloads match, `default_workload` will be used.

          :::info

          See also [workload definition in the concepts
          section](/concepts/scheduler/scheduler.md#workload).

          :::

          @gotags: validate:"dive"
      default_workload_parameters:
        $ref: '#/definitions/aperture.policy.language.v1.Scheduler.Workload.Parameters'
        description: Parameters to be used if none of workloads specified in `workloads` match.
      decision_deadline_margin:
        type: string
        description: |-
          Decision deadline margin is the amount of time that the scheduler will
          subtract from the request deadline to determine the deadline for the
          decision. This is to ensure that the scheduler has enough time to
          make a decision before the request deadline happens, accounting for
          processing delays.
          The request deadline is based on the
          [gRPC deadline](https://grpc.io/blog/deadlines) or the
          [`grpc-timeout` HTTP header](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests).

          Fail-open logic is use for flow control APIs, so if the gRPC deadline
          reaches, the flow will end up being unconditionally allowed while
          it is still waiting on the scheduler.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: default:"0.01s"
      tokens_label_key:
        type: string
        description: |-
          Key for a flow label that can be used to override the default number of tokens for this request.
          The value associated with this key must be a valid number.
          If this parameter is not provided, the number of tokens for the flow will be determined by the matched workload's token count.
      priority_label_key:
        type: string
        description: |-
          Key for a flow label that can be used to override the default priority for this flow.
          The value associated with this key must be a valid number. Higher numbers means higher priority.
          If this parameter is not provided, the priority for the flow will be determined by the matched workload's priority.
      denied_response_status_code:
        $ref: '#/definitions/aperture.flowcontrol.check.v1.StatusCode'
        description: This field allows you to override the default HTTP status code (`503 Service Unavailable`) that is returned when a request is denied.
      workload_label_key:
        type: string
        description: |-
          Key for a flow label that can be used to provide workloads for this request.
          If this parameter is not provided, the workloads for the flow will be determined by the matched workload's name in the policy.
    description: |-
      :::note

      Each Agent instantiates an independent copy of the scheduler, but output
      signals for accepted and incoming token rate are aggregated across all agents.

      :::
    title: Weighted Fair Queuing-based workload scheduler
  aperture.policy.language.v1.Scheduler.Workload:
    type: object
    properties:
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.Scheduler.Workload.Parameters'
        description: Parameters associated with flows matching the label matcher.
      label_matcher:
        $ref: '#/definitions/aperture.policy.language.v1.LabelMatcher'
        description: |-
          Label Matcher to select a Workload based on
          [flow labels](/concepts/flow-label.md).

          @gotags: validate:"required"
      name:
        type: string
        description: Name of the workload.
    description: Workload defines a class of flows that preferably have similar properties such as response latency and desired priority.
  aperture.policy.language.v1.Scheduler.Workload.Parameters:
    type: object
    properties:
      priority:
        type: number
        format: double
        description: |-
          $$
          inverted\_priority = {\frac {1} {priority}}
          $$

          $$
          virtual\_finish\_time = virtual\_time + \left(tokens \cdot inverted\_priority\right)
          $$

          @gotags: validate:"gt=0" default:"1.0"
        title: |-
          Describes priority level of the flows within the workload.
          Priority level is unbounded and can be any positive number.
          Higher numbers means higher priority level.
          The following formula is used to determine the position of a flow in the queue based on virtual finish time:
      tokens:
        type: number
        format: double
        description: |-
          Tokens determines the cost of admitting a single flow in the workload,
          which is typically defined as milliseconds of flow latency (time to response or duration of a feature) or
          simply equal to 1 if the resource being accessed is constrained by the
          number of flows (3rd party rate limiters).
          This override is applicable only if tokens for the flow aren't specified
          in the flow labels.

          @gotags: validate:"gte=0" default:"1"
      queue_timeout:
        type: string
        description: |-
          Timeout for the flow in the workload.
          If timeout is provided on the Check call as well, the minimum of the two is picked.
          If this override is not provided, the timeout provided in the check call is used.
          0 timeout value implies that the request will not wait in the queue and will be accepted or dropped immediately.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.
    description: Parameters such as priority and tokens that are applicable to flows within a workload.
  aperture.policy.language.v1.Selector:
    type: object
    properties:
      control_point:
        type: string
        description: |-
          [Control Point](/concepts/control-point.md)
          identifies location within services where policies can act on flows.
          For an SDK based insertion,
          a _Control Point_ can represent a particular feature or execution
          block within a service. In case of service mesh or middleware insertion, a
          _Control Point_ can identify ingress or egress calls or distinct listeners
          or filter chains.

          @gotags: validate:"required"
      agent_group:
        type: string
        description: |-
          [_Agent Group_](/concepts/selector.md#agent-group) this
          selector applies to.

          :::info

          Agent Groups are used to scope policies to a subset of agents connected to the same controller.
          The agents within an agent group receive exact same policy configuration and
          form a peer to peer cluster to constantly share state.

          :::

          @gotags: default:"aperture-cloud"
      service:
        type: string
        description: |-
          The Fully Qualified Domain Name of the
          [service](/concepts/selector.md) to select.

          In Kubernetes, this is the FQDN of the Service object.

          :::info

          `any` matches all services.

          :::

          :::info

          An entity (for example, Kubernetes pod) might belong to multiple services.

          :::

          @gotags: default:"any"
      label_matcher:
        $ref: '#/definitions/aperture.policy.language.v1.LabelMatcher'
        description: |-
          [Label Matcher](/concepts/selector.md#label-matcher)
          can be used to match flows based on flow labels.
    description: |-
      Selects flows based on control point, flow labels, agent group and the service
      that the flow control component
      will operate on.

      :::info

      See also [Selector overview](/concepts/selector.md).

      :::

      Example:
      ```yaml
      control_point: ingress
      label_matcher:
        match_labels:
          user_tier: gold
        match_expressions:
          - key: query
            operator: In
            values:
              - insert
              - delete
        expression:
          label_matches:
              - label: user_agent
                regex: ^(?!.*Chrome).*Safari
      ```
  aperture.policy.language.v1.SignalGenerator:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.SignalGenerator.Ins'
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.SignalGenerator.Outs'
      parameters:
        $ref: '#/definitions/aperture.policy.language.v1.SignalGenerator.Parameters'
        description: |-
          Parameters for the _Signal Generator_ component.

          @gotags: validate:"required"
    description: |-
      The _Signal Generator_ component generates a smooth and continuous signal
      by following a sequence of specified steps. Each step has two parameters:
      - `target_output`: The desired output value at the end of the step.
      - `duration`: The time it takes for the signal to change linearly from the
        previous step's `target_output` to the current step's `target_output`.

      The output signal starts at the `target_output` of the first step and
      changes linearly between steps based on their `duration`. The _Signal
      Generator_ can be controlled to move forwards, backwards, or reset to the
      beginning based on input signals.
  aperture.policy.language.v1.SignalGenerator.Ins:
    type: object
    properties:
      forward:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Whether to progress the _Signal Generator_ towards the next step.
      backward:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Whether to progress the _Signal Generator_ towards the previous step.
      reset:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Whether to reset the _Signal Generator_ to the first step.
    description: Inputs for the _Signal Generator_ component.
  aperture.policy.language.v1.SignalGenerator.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The generated signal.
      at_start:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: A Boolean signal indicating whether the _Signal Generator_ is at the start of signal generation.
      at_end:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: A Boolean signal indicating whether the _Signal Generator_ is at the end of signal generation.
    description: Outputs for the _Signal Generator_ component.
  aperture.policy.language.v1.SignalGenerator.Parameters:
    type: object
    properties:
      steps:
        type: array
        items:
          type: object
          $ref: '#/definitions/aperture.policy.language.v1.SignalGenerator.Parameters.Step'
        title: '@gotags: validate:"required,gt=0,dive"'
    description: Parameters for the _Signal Generator_ component.
  aperture.policy.language.v1.SignalGenerator.Parameters.Step:
    type: object
    properties:
      target_output:
        $ref: '#/definitions/aperture.policy.language.v1.ConstantSignal'
        description: The value of the step.
      duration:
        type: string
        description: |-
          Duration for which the step is active.
          This field employs the [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json) JSON representation from Protocol Buffers. The format accommodates fractional seconds up to nine digits after the decimal point, offering nanosecond precision. Every duration value must be suffixed with an "s" to indicate 'seconds.' For example, a value of "10s" would signify a duration of 10 seconds.

          @gotags: validate:"required"
  aperture.policy.language.v1.Switcher:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Switcher.Ins'
        description: Input ports for the Switcher component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Switcher.Outs'
        description: Output ports for the Switcher component.
    description: |-
      `on_signal` will be returned if switch input is valid and not equal to 0.0 ,
       otherwise `off_signal` will be returned.
    title: Type of Combinator that switches between `on_signal` and `off_signal` signals based on switch input
  aperture.policy.language.v1.Switcher.Ins:
    type: object
    properties:
      on_signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Output signal when switch is valid and not 0.0.
      off_signal:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Output signal when switch is invalid or 0.0.
      switch:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Decides whether to return `on_signal` or `off_signal`.
    description: Inputs for the Switcher component.
  aperture.policy.language.v1.Switcher.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Selected signal (`on_signal` or `off_signal`).
    description: Outputs for the Switcher component.
  aperture.policy.language.v1.TelemetryCollector:
    type: object
    properties:
      agent_group:
        type: string
        title: '@gotags: default:"default"'
      infra_meters:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.language.v1.InfraMeter'
        description: |-
          _Infra Meters_ configure custom metrics OpenTelemetry collector pipelines, which will
          receive and process telemetry at the agents and send metrics to the configured Prometheus.
          Key in this map refers to OTel pipeline name. Prefixing pipeline name with `metrics/`
          is optional, as all the components and pipeline names would be normalized.

          Example:

          ```yaml
           telemetry_collectors:
             - agent_group: default
               infra_meters:
          	      rabbitmq:
          	        processors:
          	          batch:
          	            send_batch_size: 10
          	            timeout: 10s
          	        receivers:
          	          rabbitmq:
          	            collection_interval: 10s
          	            endpoint: http://<rabbitmq-svc-fqdn>:15672
          	            password: secretpassword
          	            username: admin
          	        per_agent_group: true

          ```

          :::caution

          Validate the OTel configuration before applying it to the
          production cluster.
          Incorrect configuration will get rejected at the agents and might cause
          shutdown of the agent(s).

          :::
    title: |-
      TelemetryCollector defines the telemetry configuration to be synced with the agents.
      Deprecated: v3.0.0. Use `InfraMeter` instead.
      It consists of two parts:
      - Agent Group: Agent group to sync telemetry configuration with
      - Infra Meters: OTel compatible metrics pipelines
  aperture.policy.language.v1.UnaryOperator:
    type: object
    properties:
      in_ports:
        $ref: '#/definitions/aperture.policy.language.v1.UnaryOperator.Ins'
        description: Input ports for the UnaryOperator component.
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.UnaryOperator.Outs'
        description: Output ports for the UnaryOperator component.
      operator:
        type: string
        description: |-
          Unary Operator to apply.

          The unary operator can be one of the following:
          * `abs`: Absolute value with the sign removed.
          * `acos`: `arccosine`, in radians.
          * `acosh`: Inverse hyperbolic cosine.
          * `asin`: `arcsine`, in radians.
          * `asinh`: Inverse hyperbolic sine.
          * `atan`: `arctangent`, in radians.
          * `atanh`: Inverse hyperbolic tangent.
          * `cbrt`: Cube root.
          * `ceil`: Least integer value greater than or equal to input signal.
          * `cos`: `cosine`, in radians.
          * `cosh`: Hyperbolic cosine.
          * `erf`: Error function.
          * `erfc`: Complementary error function.
          * `erfcinv`: Inverse complementary error function.
          * `erfinv`: Inverse error function.
          * `exp`: The base-e exponential of input signal.
          * `exp2`: The base-2 exponential of input signal.
          * `expm1`: The base-e exponential of input signal minus 1.
          * `floor`: Greatest integer value less than or equal to input signal.
          * `gamma`: Gamma function.
          * `j0`: Bessel function of the first kind of order 0.
          * `j1`: Bessel function of the first kind of order 1.
          * `lgamma`: Natural logarithm of the absolute value of the gamma function.
          * `log`: Natural logarithm of input signal.
          * `log10`: Base-10 logarithm of input signal.
          * `log1p`: Natural logarithm of input signal plus 1.
          * `log2`: Base-2 logarithm of input signal.
          * `round`: Round to nearest integer.
          * `roundtoeven`: Round to nearest integer, with ties going to the nearest even integer.
          * `sin`: `sine`, in radians.
          * `sinh`: Hyperbolic sine.
          * `sqrt`: Square root.
          * `tan`: `tangent`, in radians.
          * `tanh`: Hyperbolic tangent.
          * `trunc`: Truncate to integer.
          * `y0`: Bessel function of the second kind of order 0.
          * `y1`: Bessel function of the second kind of order 1.

          @gotags: validate:"oneof=abs acos acosh asin asinh atan atanh cbrt ceil cos cosh erf erfc erfcinv erfinv exp exp2 expm1 floor gamma j0 j1 lgamma log log10 log1p log2 round roundtoeven sin sinh sqrt tan tanh trunc y0 y1"
    description: |-
      $$
      \text{output} = \unary_operator{\text{input}}
      $$
    title: Takes an input signal and emits the output after applying the specified unary operator
  aperture.policy.language.v1.UnaryOperator.Ins:
    type: object
    properties:
      input:
        $ref: '#/definitions/aperture.policy.language.v1.InPort'
        description: Input signal.
    description: Inputs for the UnaryOperator component.
  aperture.policy.language.v1.UnaryOperator.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: Output signal.
    description: Outputs for the UnaryOperator component.
  aperture.policy.language.v1.UpsertPolicyResponse:
    type: object
    properties:
      policy_hash:
        type: string
        title: |-
          A hash of the policy, as reported in heartbeats (note: the hash might
          change after updating controller with new aperture version)
    title: UpsertPolicyResponse is a response to UpsertPolicy
  aperture.policy.language.v1.Variable:
    type: object
    properties:
      out_ports:
        $ref: '#/definitions/aperture.policy.language.v1.Variable.Outs'
        description: Output ports for the Variable component.
      constant_output:
        $ref: '#/definitions/aperture.policy.language.v1.ConstantSignal'
        description: |-
          The constant signal emitted by this component. The value of the constant signal can be overridden at runtime through dynamic configuration.

          @gotags: validate:"required"
      config_key:
        type: string
        description: Configuration key for overriding value setting through dynamic configuration.
    description: Component that emits a constant signal which can be changed at runtime through dynamic configuration.
  aperture.policy.language.v1.Variable.Outs:
    type: object
    properties:
      output:
        $ref: '#/definitions/aperture.policy.language.v1.OutPort'
        description: The value is emitted to the output port.
    description: Outputs for the Variable component.
  aperture.policy.sync.v1.CommonAttributes:
    type: object
    properties:
      policy_name:
        type: string
        description: Name of the Policy.
      policy_hash:
        type: string
        description: |-
          Hash of the entire Policy spec.

          This is the 128 bits of sha256 sum of the policy, as stored in etcd. This
          hash will never change after applying policy.  For k8s-managed policies,
          the hash might change with new version of the controller.
      component_id:
        type: string
        description: The id of Component within the circuit.
  aperture.policy.sync.v1.PolicyWrapper:
    type: object
    properties:
      common_attributes:
        $ref: '#/definitions/aperture.policy.sync.v1.CommonAttributes'
        title: CommonAttributes
      policy:
        $ref: '#/definitions/aperture.policy.language.v1.Policy'
        title: Policy
      source:
        $ref: '#/definitions/aperture.policy.sync.v1.PolicyWrapper.Source'
        title: Where did the policy came from
  aperture.policy.sync.v1.PolicyWrapper.Source:
    type: string
    enum:
      - UNKNOWN
      - ETCD
      - K8S
    default: UNKNOWN
  aperture.policy.sync.v1.PolicyWrappers:
    type: object
    properties:
      policy_wrappers:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.policy.sync.v1.PolicyWrapper'
  aperture.status.v1.GroupStatus:
    type: object
    properties:
      status:
        $ref: '#/definitions/aperture.status.v1.Status'
      groups:
        type: object
        additionalProperties:
          $ref: '#/definitions/aperture.status.v1.GroupStatus'
    description: |-
      Groups is nested structure that holds status information about the node and a
      pointer to the next node.
  aperture.status.v1.Status:
    type: object
    properties:
      message:
        $ref: '#/definitions/google.protobuf.Any'
      error:
        $ref: '#/definitions/aperture.status.v1.Status.Error'
      timestamp:
        type: string
        format: date-time
    description: Status holds details about a status that can be reported to the registry.
  aperture.status.v1.Status.Error:
    type: object
    properties:
      message:
        type: string
    description: Error holds raw error message and its cause in a nested field.
  google.protobuf.Any:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  google.protobuf.NullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  google.rpc.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: |-
          The status code, which should be an enum value of
          [google.rpc.Code][google.rpc.Code].
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized
          by the client.
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/google.protobuf.Any'
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
