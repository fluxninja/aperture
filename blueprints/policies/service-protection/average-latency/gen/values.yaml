# Generated values file for policies/service-protection/average-latency blueprint
# Documentation/Reference for objects and parameters can be found at:
# https://docs.fluxninja.com/reference/policies/bundled-blueprints/policies/service-protection/average-latency

common:
  # Name of the policy.
  # Type: string
  # Required: True
  policy_name: __REQUIRED_FIELD__

policy:
  # List of additional circuit components.
  # Type: []aperture.spec.v1.Component
  components: []
  # Additional resources.
  # Type: aperture.spec.v1.Resources
  resources:
    flow_control:
      classifiers: []
  # The interval between successive evaluations of the Circuit.
  # Type: string
  evaluation_interval: "1s"
  service_protection_core:
    # List of overload confirmation criteria. Load scheduler can shed flows when all of the specified overload confirmation criteria are met.
    # Type: []overload_confirmation
    overload_confirmations:
      - operator: __REQUIRED_FIELD__
        query_string: __REQUIRED_FIELD__
        threshold: __REQUIRED_FIELD__
    adaptive_load_scheduler:
      # The selectors determine the flows that are protected by this policy.
      # Type: []aperture.spec.v1.Selector
      # Required: True
      selectors:
        - control_point: __REQUIRED_FIELD__
          service: __REQUIRED_FIELD__
      # Scheduler parameters.
      # Type: aperture.spec.v1.SchedulerParameters
      scheduler:
        auto_tokens: true
      # Gradient Controller parameters.
      # Type: aperture.spec.v1.GradientControllerParameters
      gradient:
        max_gradient: 1
        min_gradient: 0.1
        slope: -1
      # Parameters for the Alerter that detects load throttling.
      # Type: aperture.spec.v1.AlerterParameters
      alerter:
        alert_name: "Load Throttling Event"
      # Current accepted concurrency is multiplied with this number to dynamically calculate the upper concurrency limit of a Service during normal (non-overload) state. This protects the Service from sudden spikes.
      # Type: float64
      max_load_multiplier: 2
      # Linear increment to load multiplier in each execution tick (0.5s) when the system is not in overloaded state.
      # Type: float64
      load_multiplier_linear_increment: 0.0025
      # Default configuration for concurrency controller that can be updated at the runtime without shutting down the
      # Type: aperture.spec.v1.LoadActuatorDynamicConfig
      default_config:
        dry_run: false
  latency_baseliner:
    # Flux Meter defines the scope of latency measurements.
    # Type: aperture.spec.v1.FluxMeter
    # Required: True
    flux_meter:
      selectors:
        - control_point: __REQUIRED_FIELD__
          service: __REQUIRED_FIELD__
    # EMA parameters.
    # Type: aperture.spec.v1.EMAParameters
    ema:
      correction_factor_on_max_envelope_violation: 0.95
      ema_window: "1500s"
      warmup_window: "60s"
    # Tolerance factor beyond which the service is considered to be in overloaded state. E.g. if EMA of latency is 50ms and if Tolerance is 1.1, then service is considered to be in overloaded state if current latency is more than 55ms.
    # Type: float64
    latency_tolerance_multiplier: 1.1
    # Current latency value is multiplied with this factor to calculate maximum envelope of Latency EMA.
    # Type: float64
    latency_ema_limit_multiplier: 2

dashboard:
  # Refresh interval for dashboard panels.
  # Type: string
  refresh_interval: "5s"
  # From time of dashboard.
  # Type: string
  time_from: "now-15m"
  # To time of dashboard.
  # Type: string
  time_to: "now"
  datasource:
    # Datasource name.
    # Type: string
    name: "$datasource"
    # Datasource filter regex.
    # Type: string
    filter_regex: ""
