local statPanel = import '../../../panels/stat.libsonnet';
local promUtils = import '../../../utils/prometheus.libsonnet';

function(policyName, infraMeterName, datasource, extraFilters) {
  local stringFilters = promUtils.dictToPrometheusFilter(extraFilters { policy_name: policyName, infra_meter_name: infraMeterName }),

  local nodes = statPanel('Nodes',
                          datasource,
                          'max(elasticsearch_cluster_nodes{%(filters)s"})' % { filters: stringFilters },
                          instantQuery=true,
                          range=false,
                          panelColor='blue'),

  local dataNodes = statPanel('Data Nodes',
                              datasource,
                              'max(elasticsearch_cluster_data_nodes{%(filters)s"})' % { filters: stringFilters },
                              instantQuery=true,
                              range=false,
                              panelColor='blue'),

  local activeShards = statPanel('Active Shards',
                                 datasource,
                                 'max(elasticsearch_cluster_shards{%(filters)s", state="active"})' % { filters: stringFilters },
                                 instantQuery=true,
                                 range=false),

  local activePrimaryShards = statPanel('Active Primary Shards',
                                        datasource,
                                        'max(elasticsearch_cluster_shards{%(filters)s", state="active_primary"})' % { filters: stringFilters },
                                        instantQuery=true,
                                        range=false),

  local initializingShards = statPanel('Initializing Shards',
                                       datasource,
                                       'max(elasticsearch_cluster_shards{%(filters)s", state="initializing"})' % { filters: stringFilters },
                                       instantQuery=true,
                                       range=false),

  local unassignedShards = statPanel('Unassigned Shards',
                                     datasource,
                                     'max(elasticsearch_cluster_shards{%(filters)s", state="unassigned"})' % { filters: stringFilters },
                                     instantQuery=true,
                                     range=false,
                                     panelColor='yellow'),
  local delayedUnassignedShards = statPanel('Delayed Unassigned Shards',
                                            datasource,
                                            'max(elasticsearch_cluster_shards{%(filters)s", state="unassigned_delayed"})' % { filters: stringFilters },
                                            instantQuery=true,
                                            range=false,
                                            panelColor='yellow'),

  local relocatingShards = statPanel('Relocating Shards',
                                     datasource,
                                     'max(elasticsearch_cluster_shards{%(filters)s", state="relocating"})' % { filters: stringFilters },
                                     instantQuery=true,
                                     range=false),

  local numberOfPendingTasks = statPanel('Cluster-level Pending Tasks',
                                         datasource,
                                         'max(elasticsearch_cluster_pending_tasks{%(filters)s"})' % { filters: stringFilters },
                                         instantQuery=true,
                                         range=false),
  local greenHealth = statPanel('Green Health',
                                datasource,
                                'max(elasticsearch_cluster_health{%(filters)s",status="green"})' % { filters: stringFilters },
                                instantQuery=true,
                                range=false),

  local yellowHealth = statPanel('Yellow Health',
                                 datasource,
                                 'max(elasticsearch_cluster_health{%(filters)s",status="yellow"})' % { filters: stringFilters },
                                 instantQuery=true,
                                 range=false,
                                 panelColor='yellow'),

  local redHealth = statPanel('Red Health',
                              datasource,
                              'max(elasticsearch_cluster_health{%(filters)s",status="red"})' % { filters: stringFilters },
                              instantQuery=true,
                              range=false,
                              panelColor='red'),

  nodes: nodes,
  dataNodes: dataNodes,
  activeShards: activeShards,
  activePrimaryShards: activePrimaryShards,
  initializingShards: initializingShards,
  unassignedShards: unassignedShards,
  delayedUnassignedShards: delayedUnassignedShards,
  relocatingShards: relocatingShards,
  numberOfPendingTasks: numberOfPendingTasks,
  greenHealth: greenHealth,
  yellowHealth: yellowHealth,
  redHealth: redHealth,
}
