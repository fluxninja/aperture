{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "load-scheduling/average-latency blueprint",
  "additionalProperties": false,
  "required": ["policy"],
  "properties": {
    "policy": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "policy_name",
        "service_protection_core",
        "latency_baseliner"
      ],
      "properties": {
        "components": {
          "description": "List of additional circuit components.",
          "default": [],
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "../../../gen/jsonschema/_definitions.json#/definitions/Component"
          }
        },
        "policy_name": {
          "description": "Name of the policy.",
          "default": "__REQUIRED_FIELD__",
          "type": "string"
        },
        "resources": {
          "description": "Additional resources.",
          "default": {
            "flow_control": {
              "classifiers": []
            }
          },
          "type": "object",
          "$ref": "../../../gen/jsonschema/_definitions.json#/definitions/Resources"
        },
        "evaluation_interval": {
          "description": "The interval between successive evaluations of the Circuit.",
          "default": "10s",
          "type": "string"
        },
        "kubeletstats_infra_meter": {
          "description": "Infra meter for scraping Kubelet metrics.",
          "default": {
            "agent_group": "default",
            "enabled": false,
            "filter": {}
          },
          "type": "object",
          "$ref": "#/$defs/kubeletstats_infra_meter"
        },
        "service_protection_core": {
          "type": "object",
          "additionalProperties": false,
          "required": ["adaptive_load_scheduler"],
          "properties": {
            "adaptive_load_scheduler": {
              "description": "Parameters for Adaptive Load Scheduler.",
              "default": {
                "alerter": {
                  "alert_name": "Load Throttling Event"
                },
                "gradient": {
                  "max_gradient": 1,
                  "min_gradient": 0.1,
                  "slope": -1
                },
                "load_multiplier_linear_increment": 0.025,
                "load_scheduler": {
                  "selectors": [
                    {
                      "control_point": "__REQUIRED_FIELD__",
                      "service": "__REQUIRED_FIELD__"
                    }
                  ]
                },
                "max_load_multiplier": 2
              },
              "type": "object",
              "$ref": "../../../gen/jsonschema/_definitions.json#/definitions/AdaptiveLoadSchedulerParameters"
            },
            "dry_run": {
              "description": "Default configuration for setting dry run mode on Load Scheduler. In dry run mode, the Load Scheduler acts as a passthrough and does not throttle flows. This config can be updated at runtime without restarting the policy.",
              "default": false,
              "type": "boolean"
            },
            "overload_confirmations": {
              "description": "List of overload confirmation criteria. Load scheduler can throttle flows when all of the specified overload confirmation criteria are met.",
              "default": [],
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/$defs/overload_confirmation"
              }
            }
          }
        },
        "latency_baseliner": {
          "type": "object",
          "additionalProperties": false,
          "required": ["flux_meter"],
          "properties": {
            "flux_meter": {
              "description": "Flux Meter defines the scope of latency measurements.",
              "default": {
                "selectors": [
                  {
                    "control_point": "__REQUIRED_FIELD__",
                    "service": "__REQUIRED_FIELD__"
                  }
                ]
              },
              "type": "object",
              "$ref": "../../../gen/jsonschema/_definitions.json#/definitions/FluxMeter"
            },
            "latency_tolerance_multiplier": {
              "description": "Tolerance factor beyond which the service is considered to be in overloaded state. E.g. if the long-term average of latency is L and if the tolerance is T, then the service is considered to be in an overloaded state if the short-term average of latency is more than L*T.",
              "default": 1.25,
              "type": "number",
              "format": "double"
            },
            "long_term_query_interval": {
              "description": "Interval for long-term latency query, i.e., how far back in time the query is run. The value should be a string representing the duration in seconds.",
              "default": "1800s",
              "type": "string"
            },
            "long_term_query_periodic_interval": {
              "description": "Periodic interval for long-term latency query, i.e., how often the query is run. The value should be a string representing the duration in seconds.",
              "default": "30s",
              "type": "string"
            }
          }
        }
      }
    },
    "dashboard": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "extra_filters": {
          "description": "Additional filters to pass to each query to Grafana datasource.",
          "default": {},
          "type": "object",
          "additionalProperties": true
        },
        "refresh_interval": {
          "description": "Refresh interval for dashboard panels.",
          "default": "15s",
          "type": "string"
        },
        "time_from": {
          "description": "From time of dashboard.",
          "default": "now-15m",
          "type": "string"
        },
        "time_to": {
          "description": "To time of dashboard.",
          "default": "now",
          "type": "string"
        },
        "title": {
          "description": "Name of the main dashboard.",
          "default": "Aperture Service Protection",
          "type": "string"
        },
        "datasource": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "filter_regex": {
              "description": "Datasource filter regex.",
              "default": "",
              "type": "string"
            },
            "name": {
              "description": "Datasource name.",
              "default": "$datasource",
              "type": "string"
            }
          }
        }
      }
    }
  },
  "$defs": {
    "kubeletstats_infra_meter": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "agent_group": {
          "description": "Agent group to be used for the infra_meter.",
          "default": "default",
          "type": "string"
        },
        "enabled": {
          "description": "Adds infra_meter for scraping Kubelet metrics.",
          "default": false,
          "type": "boolean"
        },
        "filter": {
          "description": "Filter to be applied to the infra_meter.",
          "default": {},
          "type": "object",
          "$ref": "#/$defs/kubeletstats_infra_meter_filter"
        }
      }
    },
    "kubeletstats_infra_meter_filter": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "fields": {
          "description": "Fields allows to filter pods by generic k8s fields. Supported operations are: equals, not-equals.",
          "default": [],
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/$defs/kubeletstats_infra_meter_label_filter"
          }
        },
        "labels": {
          "description": "Labels allows to filter pods by generic k8s pod labels.",
          "default": [],
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/$defs/kubeletstats_infra_meter_label_filter"
          }
        },
        "namespace": {
          "description": "Namespace filters all pods by the provided namespace. All other pods are ignored.",
          "default": "",
          "type": "string"
        },
        "node": {
          "description": "Node represents a k8s node or host. If specified, any pods not running on the specified node will be ignored by the tagger.",
          "default": "",
          "type": "string"
        },
        "node_from_env_var": {
          "description": "odeFromEnv can be used to extract the node name from an environment variable. For example: `NODE_NAME`.",
          "default": "",
          "type": "string"
        }
      }
    },
    "kubeletstats_infra_meter_label_filter": {
      "type": "object",
      "additionalProperties": false,
      "required": ["key", "op", "value"],
      "properties": {
        "key": {
          "description": "Key represents the key or name of the field or labels that a filter can apply on.",
          "default": "__REQUIRED_FIELD__",
          "type": "string"
        },
        "op": {
          "description": "Op represents the filter operation to apply on the given Key: Value pair. The supported operations are: equals, not-equals, exists, does-not-exist.",
          "default": "__REQUIRED_FIELD__",
          "type": "string"
        },
        "value": {
          "description": "Value represents the value associated with the key that a filter operation specified by the `Op` field applies on.",
          "default": "__REQUIRED_FIELD__",
          "type": "string"
        }
      }
    },
    "overload_confirmation": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "operator": {
          "description": "The operator for the overload confirmation criteria. oneof: `gt | lt | gte | lte | eq | neq`",
          "type": "string"
        },
        "query_string": {
          "description": "The Prometheus query to be run. Must return a scalar or a vector with a single element.",
          "type": "string"
        },
        "threshold": {
          "description": "The threshold for the overload confirmation criteria.",
          "type": "number",
          "format": "double"
        }
      }
    }
  }
}
