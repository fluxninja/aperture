// Code generated by "enumer -type=ComparisonOperator -transform=lower -output=decider-comparison-operator-string.go"; DO NOT EDIT.

package components

import (
	"fmt"
	"strings"
)

const _ComparisonOperatorName = "unknowncomparisongtltgtelteeqneq"

var _ComparisonOperatorIndex = [...]uint8{0, 17, 19, 21, 24, 27, 29, 32}

const _ComparisonOperatorLowerName = "unknowncomparisongtltgtelteeqneq"

func (i ComparisonOperator) String() string {
	if i < 0 || i >= ComparisonOperator(len(_ComparisonOperatorIndex)-1) {
		return fmt.Sprintf("ComparisonOperator(%d)", i)
	}
	return _ComparisonOperatorName[_ComparisonOperatorIndex[i]:_ComparisonOperatorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ComparisonOperatorNoOp() {
	var x [1]struct{}
	_ = x[UnknownComparison-(0)]
	_ = x[GT-(1)]
	_ = x[LT-(2)]
	_ = x[GTE-(3)]
	_ = x[LTE-(4)]
	_ = x[EQ-(5)]
	_ = x[NEQ-(6)]
}

var _ComparisonOperatorValues = []ComparisonOperator{UnknownComparison, GT, LT, GTE, LTE, EQ, NEQ}

var _ComparisonOperatorNameToValueMap = map[string]ComparisonOperator{
	_ComparisonOperatorName[0:17]:       UnknownComparison,
	_ComparisonOperatorLowerName[0:17]:  UnknownComparison,
	_ComparisonOperatorName[17:19]:      GT,
	_ComparisonOperatorLowerName[17:19]: GT,
	_ComparisonOperatorName[19:21]:      LT,
	_ComparisonOperatorLowerName[19:21]: LT,
	_ComparisonOperatorName[21:24]:      GTE,
	_ComparisonOperatorLowerName[21:24]: GTE,
	_ComparisonOperatorName[24:27]:      LTE,
	_ComparisonOperatorLowerName[24:27]: LTE,
	_ComparisonOperatorName[27:29]:      EQ,
	_ComparisonOperatorLowerName[27:29]: EQ,
	_ComparisonOperatorName[29:32]:      NEQ,
	_ComparisonOperatorLowerName[29:32]: NEQ,
}

var _ComparisonOperatorNames = []string{
	_ComparisonOperatorName[0:17],
	_ComparisonOperatorName[17:19],
	_ComparisonOperatorName[19:21],
	_ComparisonOperatorName[21:24],
	_ComparisonOperatorName[24:27],
	_ComparisonOperatorName[27:29],
	_ComparisonOperatorName[29:32],
}

// ComparisonOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ComparisonOperatorString(s string) (ComparisonOperator, error) {
	if val, ok := _ComparisonOperatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ComparisonOperatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ComparisonOperator values", s)
}

// ComparisonOperatorValues returns all values of the enum
func ComparisonOperatorValues() []ComparisonOperator {
	return _ComparisonOperatorValues
}

// ComparisonOperatorStrings returns a slice of all String values of the enum
func ComparisonOperatorStrings() []string {
	strs := make([]string, len(_ComparisonOperatorNames))
	copy(strs, _ComparisonOperatorNames)
	return strs
}

// IsAComparisonOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ComparisonOperator) IsAComparisonOperator() bool {
	for _, v := range _ComparisonOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}
