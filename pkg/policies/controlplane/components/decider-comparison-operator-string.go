// Code generated by "enumer -type=comparisonOperator -output=decider-comparison-operator-string.go"; DO NOT EDIT.

package components

import (
	"fmt"
	"strings"
)

const _comparisonOperatorName = "unknownComparisongtltgtelteeqneq"

var _comparisonOperatorIndex = [...]uint8{0, 17, 19, 21, 24, 27, 29, 32}

const _comparisonOperatorLowerName = "unknowncomparisongtltgtelteeqneq"

func (i comparisonOperator) String() string {
	if i < 0 || i >= comparisonOperator(len(_comparisonOperatorIndex)-1) {
		return fmt.Sprintf("comparisonOperator(%d)", i)
	}
	return _comparisonOperatorName[_comparisonOperatorIndex[i]:_comparisonOperatorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _comparisonOperatorNoOp() {
	var x [1]struct{}
	_ = x[unknownComparison-(0)]
	_ = x[gt-(1)]
	_ = x[lt-(2)]
	_ = x[gte-(3)]
	_ = x[lte-(4)]
	_ = x[eq-(5)]
	_ = x[neq-(6)]
}

var _comparisonOperatorValues = []comparisonOperator{unknownComparison, gt, lt, gte, lte, eq, neq}

var _comparisonOperatorNameToValueMap = map[string]comparisonOperator{
	_comparisonOperatorName[0:17]:       unknownComparison,
	_comparisonOperatorLowerName[0:17]:  unknownComparison,
	_comparisonOperatorName[17:19]:      gt,
	_comparisonOperatorLowerName[17:19]: gt,
	_comparisonOperatorName[19:21]:      lt,
	_comparisonOperatorLowerName[19:21]: lt,
	_comparisonOperatorName[21:24]:      gte,
	_comparisonOperatorLowerName[21:24]: gte,
	_comparisonOperatorName[24:27]:      lte,
	_comparisonOperatorLowerName[24:27]: lte,
	_comparisonOperatorName[27:29]:      eq,
	_comparisonOperatorLowerName[27:29]: eq,
	_comparisonOperatorName[29:32]:      neq,
	_comparisonOperatorLowerName[29:32]: neq,
}

var _comparisonOperatorNames = []string{
	_comparisonOperatorName[0:17],
	_comparisonOperatorName[17:19],
	_comparisonOperatorName[19:21],
	_comparisonOperatorName[21:24],
	_comparisonOperatorName[24:27],
	_comparisonOperatorName[27:29],
	_comparisonOperatorName[29:32],
}

// comparisonOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func comparisonOperatorString(s string) (comparisonOperator, error) {
	if val, ok := _comparisonOperatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _comparisonOperatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to comparisonOperator values", s)
}

// comparisonOperatorValues returns all values of the enum
func comparisonOperatorValues() []comparisonOperator {
	return _comparisonOperatorValues
}

// comparisonOperatorStrings returns a slice of all String values of the enum
func comparisonOperatorStrings() []string {
	strs := make([]string, len(_comparisonOperatorNames))
	copy(strs, _comparisonOperatorNames)
	return strs
}

// IsAcomparisonOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i comparisonOperator) IsAcomparisonOperator() bool {
	for _, v := range _comparisonOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}
