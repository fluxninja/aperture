// Code generated by "enumer -type=UnaryOp -transform=lower -output=unary-op-string.go"; DO NOT EDIT.

package components

import (
	"fmt"
	"strings"
)

const _UnaryOpName = "unknownunaryabsacosacoshasinasinhatanatanhcbrtceilcoscosherferfcerfcinverfinvexpexp2expm1floorgammaj0j1lgammaloglog10log1plog2roundroundtoevensinsinhsqrttantanhtruncy0y1"

var _UnaryOpIndex = [...]uint8{0, 12, 15, 19, 24, 28, 33, 37, 42, 46, 50, 53, 57, 60, 64, 71, 77, 80, 84, 89, 94, 99, 101, 103, 109, 112, 117, 122, 126, 131, 142, 145, 149, 153, 156, 160, 165, 167, 169}

const _UnaryOpLowerName = "unknownunaryabsacosacoshasinasinhatanatanhcbrtceilcoscosherferfcerfcinverfinvexpexp2expm1floorgammaj0j1lgammaloglog10log1plog2roundroundtoevensinsinhsqrttantanhtruncy0y1"

func (i UnaryOp) String() string {
	if i < 0 || i >= UnaryOp(len(_UnaryOpIndex)-1) {
		return fmt.Sprintf("UnaryOp(%d)", i)
	}
	return _UnaryOpName[_UnaryOpIndex[i]:_UnaryOpIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _UnaryOpNoOp() {
	var x [1]struct{}
	_ = x[UnknownUnary-(0)]
	_ = x[Abs-(1)]
	_ = x[Acos-(2)]
	_ = x[Acosh-(3)]
	_ = x[Asin-(4)]
	_ = x[Asinh-(5)]
	_ = x[Atan-(6)]
	_ = x[Atanh-(7)]
	_ = x[Cbrt-(8)]
	_ = x[Ceil-(9)]
	_ = x[Cos-(10)]
	_ = x[Cosh-(11)]
	_ = x[Erf-(12)]
	_ = x[Erfc-(13)]
	_ = x[Erfcinv-(14)]
	_ = x[Erfinv-(15)]
	_ = x[Exp-(16)]
	_ = x[Exp2-(17)]
	_ = x[Expm1-(18)]
	_ = x[Floor-(19)]
	_ = x[Gamma-(20)]
	_ = x[J0-(21)]
	_ = x[J1-(22)]
	_ = x[Lgamma-(23)]
	_ = x[Log-(24)]
	_ = x[Log10-(25)]
	_ = x[Log1p-(26)]
	_ = x[Log2-(27)]
	_ = x[Round-(28)]
	_ = x[RoundToEven-(29)]
	_ = x[Sin-(30)]
	_ = x[Sinh-(31)]
	_ = x[Sqrt-(32)]
	_ = x[Tan-(33)]
	_ = x[Tanh-(34)]
	_ = x[Trunc-(35)]
	_ = x[Y0-(36)]
	_ = x[Y1-(37)]
}

var _UnaryOpValues = []UnaryOp{UnknownUnary, Abs, Acos, Acosh, Asin, Asinh, Atan, Atanh, Cbrt, Ceil, Cos, Cosh, Erf, Erfc, Erfcinv, Erfinv, Exp, Exp2, Expm1, Floor, Gamma, J0, J1, Lgamma, Log, Log10, Log1p, Log2, Round, RoundToEven, Sin, Sinh, Sqrt, Tan, Tanh, Trunc, Y0, Y1}

var _UnaryOpNameToValueMap = map[string]UnaryOp{
	_UnaryOpName[0:12]:         UnknownUnary,
	_UnaryOpLowerName[0:12]:    UnknownUnary,
	_UnaryOpName[12:15]:        Abs,
	_UnaryOpLowerName[12:15]:   Abs,
	_UnaryOpName[15:19]:        Acos,
	_UnaryOpLowerName[15:19]:   Acos,
	_UnaryOpName[19:24]:        Acosh,
	_UnaryOpLowerName[19:24]:   Acosh,
	_UnaryOpName[24:28]:        Asin,
	_UnaryOpLowerName[24:28]:   Asin,
	_UnaryOpName[28:33]:        Asinh,
	_UnaryOpLowerName[28:33]:   Asinh,
	_UnaryOpName[33:37]:        Atan,
	_UnaryOpLowerName[33:37]:   Atan,
	_UnaryOpName[37:42]:        Atanh,
	_UnaryOpLowerName[37:42]:   Atanh,
	_UnaryOpName[42:46]:        Cbrt,
	_UnaryOpLowerName[42:46]:   Cbrt,
	_UnaryOpName[46:50]:        Ceil,
	_UnaryOpLowerName[46:50]:   Ceil,
	_UnaryOpName[50:53]:        Cos,
	_UnaryOpLowerName[50:53]:   Cos,
	_UnaryOpName[53:57]:        Cosh,
	_UnaryOpLowerName[53:57]:   Cosh,
	_UnaryOpName[57:60]:        Erf,
	_UnaryOpLowerName[57:60]:   Erf,
	_UnaryOpName[60:64]:        Erfc,
	_UnaryOpLowerName[60:64]:   Erfc,
	_UnaryOpName[64:71]:        Erfcinv,
	_UnaryOpLowerName[64:71]:   Erfcinv,
	_UnaryOpName[71:77]:        Erfinv,
	_UnaryOpLowerName[71:77]:   Erfinv,
	_UnaryOpName[77:80]:        Exp,
	_UnaryOpLowerName[77:80]:   Exp,
	_UnaryOpName[80:84]:        Exp2,
	_UnaryOpLowerName[80:84]:   Exp2,
	_UnaryOpName[84:89]:        Expm1,
	_UnaryOpLowerName[84:89]:   Expm1,
	_UnaryOpName[89:94]:        Floor,
	_UnaryOpLowerName[89:94]:   Floor,
	_UnaryOpName[94:99]:        Gamma,
	_UnaryOpLowerName[94:99]:   Gamma,
	_UnaryOpName[99:101]:       J0,
	_UnaryOpLowerName[99:101]:  J0,
	_UnaryOpName[101:103]:      J1,
	_UnaryOpLowerName[101:103]: J1,
	_UnaryOpName[103:109]:      Lgamma,
	_UnaryOpLowerName[103:109]: Lgamma,
	_UnaryOpName[109:112]:      Log,
	_UnaryOpLowerName[109:112]: Log,
	_UnaryOpName[112:117]:      Log10,
	_UnaryOpLowerName[112:117]: Log10,
	_UnaryOpName[117:122]:      Log1p,
	_UnaryOpLowerName[117:122]: Log1p,
	_UnaryOpName[122:126]:      Log2,
	_UnaryOpLowerName[122:126]: Log2,
	_UnaryOpName[126:131]:      Round,
	_UnaryOpLowerName[126:131]: Round,
	_UnaryOpName[131:142]:      RoundToEven,
	_UnaryOpLowerName[131:142]: RoundToEven,
	_UnaryOpName[142:145]:      Sin,
	_UnaryOpLowerName[142:145]: Sin,
	_UnaryOpName[145:149]:      Sinh,
	_UnaryOpLowerName[145:149]: Sinh,
	_UnaryOpName[149:153]:      Sqrt,
	_UnaryOpLowerName[149:153]: Sqrt,
	_UnaryOpName[153:156]:      Tan,
	_UnaryOpLowerName[153:156]: Tan,
	_UnaryOpName[156:160]:      Tanh,
	_UnaryOpLowerName[156:160]: Tanh,
	_UnaryOpName[160:165]:      Trunc,
	_UnaryOpLowerName[160:165]: Trunc,
	_UnaryOpName[165:167]:      Y0,
	_UnaryOpLowerName[165:167]: Y0,
	_UnaryOpName[167:169]:      Y1,
	_UnaryOpLowerName[167:169]: Y1,
}

var _UnaryOpNames = []string{
	_UnaryOpName[0:12],
	_UnaryOpName[12:15],
	_UnaryOpName[15:19],
	_UnaryOpName[19:24],
	_UnaryOpName[24:28],
	_UnaryOpName[28:33],
	_UnaryOpName[33:37],
	_UnaryOpName[37:42],
	_UnaryOpName[42:46],
	_UnaryOpName[46:50],
	_UnaryOpName[50:53],
	_UnaryOpName[53:57],
	_UnaryOpName[57:60],
	_UnaryOpName[60:64],
	_UnaryOpName[64:71],
	_UnaryOpName[71:77],
	_UnaryOpName[77:80],
	_UnaryOpName[80:84],
	_UnaryOpName[84:89],
	_UnaryOpName[89:94],
	_UnaryOpName[94:99],
	_UnaryOpName[99:101],
	_UnaryOpName[101:103],
	_UnaryOpName[103:109],
	_UnaryOpName[109:112],
	_UnaryOpName[112:117],
	_UnaryOpName[117:122],
	_UnaryOpName[122:126],
	_UnaryOpName[126:131],
	_UnaryOpName[131:142],
	_UnaryOpName[142:145],
	_UnaryOpName[145:149],
	_UnaryOpName[149:153],
	_UnaryOpName[153:156],
	_UnaryOpName[156:160],
	_UnaryOpName[160:165],
	_UnaryOpName[165:167],
	_UnaryOpName[167:169],
}

// UnaryOpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func UnaryOpString(s string) (UnaryOp, error) {
	if val, ok := _UnaryOpNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _UnaryOpNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to UnaryOp values", s)
}

// UnaryOpValues returns all values of the enum
func UnaryOpValues() []UnaryOp {
	return _UnaryOpValues
}

// UnaryOpStrings returns a slice of all String values of the enum
func UnaryOpStrings() []string {
	strs := make([]string, len(_UnaryOpNames))
	copy(strs, _UnaryOpNames)
	return strs
}

// IsAUnaryOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i UnaryOp) IsAUnaryOp() bool {
	for _, v := range _UnaryOpValues {
		if i == v {
			return true
		}
	}
	return false
}
