// Code generated by "enumer -type=arithmeticOperator -output=arithmetic-operator-string.go"; DO NOT EDIT.

package components

import (
	"fmt"
	"strings"
)

const _arithmeticOperatorName = "unknownArithmeticaddsubmuldivxorlshiftrshift"

var _arithmeticOperatorIndex = [...]uint8{0, 17, 20, 23, 26, 29, 32, 38, 44}

const _arithmeticOperatorLowerName = "unknownarithmeticaddsubmuldivxorlshiftrshift"

func (i arithmeticOperator) String() string {
	if i < 0 || i >= arithmeticOperator(len(_arithmeticOperatorIndex)-1) {
		return fmt.Sprintf("arithmeticOperator(%d)", i)
	}
	return _arithmeticOperatorName[_arithmeticOperatorIndex[i]:_arithmeticOperatorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _arithmeticOperatorNoOp() {
	var x [1]struct{}
	_ = x[unknownArithmetic-(0)]
	_ = x[add-(1)]
	_ = x[sub-(2)]
	_ = x[mul-(3)]
	_ = x[div-(4)]
	_ = x[xor-(5)]
	_ = x[lshift-(6)]
	_ = x[rshift-(7)]
}

var _arithmeticOperatorValues = []arithmeticOperator{unknownArithmetic, add, sub, mul, div, xor, lshift, rshift}

var _arithmeticOperatorNameToValueMap = map[string]arithmeticOperator{
	_arithmeticOperatorName[0:17]:       unknownArithmetic,
	_arithmeticOperatorLowerName[0:17]:  unknownArithmetic,
	_arithmeticOperatorName[17:20]:      add,
	_arithmeticOperatorLowerName[17:20]: add,
	_arithmeticOperatorName[20:23]:      sub,
	_arithmeticOperatorLowerName[20:23]: sub,
	_arithmeticOperatorName[23:26]:      mul,
	_arithmeticOperatorLowerName[23:26]: mul,
	_arithmeticOperatorName[26:29]:      div,
	_arithmeticOperatorLowerName[26:29]: div,
	_arithmeticOperatorName[29:32]:      xor,
	_arithmeticOperatorLowerName[29:32]: xor,
	_arithmeticOperatorName[32:38]:      lshift,
	_arithmeticOperatorLowerName[32:38]: lshift,
	_arithmeticOperatorName[38:44]:      rshift,
	_arithmeticOperatorLowerName[38:44]: rshift,
}

var _arithmeticOperatorNames = []string{
	_arithmeticOperatorName[0:17],
	_arithmeticOperatorName[17:20],
	_arithmeticOperatorName[20:23],
	_arithmeticOperatorName[23:26],
	_arithmeticOperatorName[26:29],
	_arithmeticOperatorName[29:32],
	_arithmeticOperatorName[32:38],
	_arithmeticOperatorName[38:44],
}

// arithmeticOperatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func arithmeticOperatorString(s string) (arithmeticOperator, error) {
	if val, ok := _arithmeticOperatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _arithmeticOperatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to arithmeticOperator values", s)
}

// arithmeticOperatorValues returns all values of the enum
func arithmeticOperatorValues() []arithmeticOperator {
	return _arithmeticOperatorValues
}

// arithmeticOperatorStrings returns a slice of all String values of the enum
func arithmeticOperatorStrings() []string {
	strs := make([]string, len(_arithmeticOperatorNames))
	copy(strs, _arithmeticOperatorNames)
	return strs
}

// IsAarithmeticOperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i arithmeticOperator) IsAarithmeticOperator() bool {
	for _, v := range _arithmeticOperatorValues {
		if i == v {
			return true
		}
	}
	return false
}
