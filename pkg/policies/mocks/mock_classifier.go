// Code generated by MockGen. DO NOT EDIT.
// Source: classifier.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	languagev1 "github.com/fluxninja/aperture/api/v2/gen/proto/go/aperture/policy/language/v1"
	iface "github.com/fluxninja/aperture/v2/pkg/policies/flowcontrol/iface"
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockClassifier is a mock of Classifier interface.
type MockClassifier struct {
	ctrl     *gomock.Controller
	recorder *MockClassifierMockRecorder
}

// MockClassifierMockRecorder is the mock recorder for MockClassifier.
type MockClassifierMockRecorder struct {
	mock *MockClassifier
}

// NewMockClassifier creates a new mock instance.
func NewMockClassifier(ctrl *gomock.Controller) *MockClassifier {
	mock := &MockClassifier{ctrl: ctrl}
	mock.recorder = &MockClassifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClassifier) EXPECT() *MockClassifierMockRecorder {
	return m.recorder
}

// GetClassifierID mocks base method.
func (m *MockClassifier) GetClassifierID() iface.ClassifierID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassifierID")
	ret0, _ := ret[0].(iface.ClassifierID)
	return ret0
}

// GetClassifierID indicates an expected call of GetClassifierID.
func (mr *MockClassifierMockRecorder) GetClassifierID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassifierID", reflect.TypeOf((*MockClassifier)(nil).GetClassifierID))
}

// GetRequestCounter mocks base method.
func (m *MockClassifier) GetRequestCounter() prometheus.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestCounter")
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// GetRequestCounter indicates an expected call of GetRequestCounter.
func (mr *MockClassifierMockRecorder) GetRequestCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestCounter", reflect.TypeOf((*MockClassifier)(nil).GetRequestCounter))
}

// GetSelectors mocks base method.
func (m *MockClassifier) GetSelectors() []*languagev1.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectors")
	ret0, _ := ret[0].([]*languagev1.Selector)
	return ret0
}

// GetSelectors indicates an expected call of GetSelectors.
func (mr *MockClassifierMockRecorder) GetSelectors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectors", reflect.TypeOf((*MockClassifier)(nil).GetSelectors))
}
