// Code generated by MockGen. DO NOT EDIT.
// Source: limiter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	checkv1 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/flowcontrol/check/v1"
	languagev1 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/policy/language/v1"
	iface "github.com/fluxninja/aperture/v2/pkg/policies/flowcontrol/iface"
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockLimiter is a mock of Limiter interface.
type MockLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockLimiterMockRecorder
}

// MockLimiterMockRecorder is the mock recorder for MockLimiter.
type MockLimiterMockRecorder struct {
	mock *MockLimiter
}

// NewMockLimiter creates a new mock instance.
func NewMockLimiter(ctrl *gomock.Controller) *MockLimiter {
	mock := &MockLimiter{ctrl: ctrl}
	mock.recorder = &MockLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimiter) EXPECT() *MockLimiterMockRecorder {
	return m.recorder
}

// Decide mocks base method.
func (m *MockLimiter) Decide(ctx context.Context, labels map[string]string) *checkv1.LimiterDecision {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decide", ctx, labels)
	ret0, _ := ret[0].(*checkv1.LimiterDecision)
	return ret0
}

// Decide indicates an expected call of Decide.
func (mr *MockLimiterMockRecorder) Decide(ctx, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decide", reflect.TypeOf((*MockLimiter)(nil).Decide), ctx, labels)
}

// GetLimiterID mocks base method.
func (m *MockLimiter) GetLimiterID() iface.LimiterID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimiterID")
	ret0, _ := ret[0].(iface.LimiterID)
	return ret0
}

// GetLimiterID indicates an expected call of GetLimiterID.
func (mr *MockLimiterMockRecorder) GetLimiterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimiterID", reflect.TypeOf((*MockLimiter)(nil).GetLimiterID))
}

// GetPolicyName mocks base method.
func (m *MockLimiter) GetPolicyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyName indicates an expected call of GetPolicyName.
func (mr *MockLimiterMockRecorder) GetPolicyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyName", reflect.TypeOf((*MockLimiter)(nil).GetPolicyName))
}

// GetRequestCounter mocks base method.
func (m *MockLimiter) GetRequestCounter(labels map[string]string) prometheus.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestCounter", labels)
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// GetRequestCounter indicates an expected call of GetRequestCounter.
func (mr *MockLimiterMockRecorder) GetRequestCounter(labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestCounter", reflect.TypeOf((*MockLimiter)(nil).GetRequestCounter), labels)
}

// GetSelectors mocks base method.
func (m *MockLimiter) GetSelectors() []*languagev1.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectors")
	ret0, _ := ret[0].([]*languagev1.Selector)
	return ret0
}

// GetSelectors indicates an expected call of GetSelectors.
func (mr *MockLimiterMockRecorder) GetSelectors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectors", reflect.TypeOf((*MockLimiter)(nil).GetSelectors))
}

// Revert mocks base method.
func (m *MockLimiter) Revert(labels map[string]string, decision *checkv1.LimiterDecision) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Revert", labels, decision)
}

// Revert indicates an expected call of Revert.
func (mr *MockLimiterMockRecorder) Revert(labels, decision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revert", reflect.TypeOf((*MockLimiter)(nil).Revert), labels, decision)
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Decide mocks base method.
func (m *MockRateLimiter) Decide(ctx context.Context, labels map[string]string) *checkv1.LimiterDecision {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decide", ctx, labels)
	ret0, _ := ret[0].(*checkv1.LimiterDecision)
	return ret0
}

// Decide indicates an expected call of Decide.
func (mr *MockRateLimiterMockRecorder) Decide(ctx, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decide", reflect.TypeOf((*MockRateLimiter)(nil).Decide), ctx, labels)
}

// GetLimiterID mocks base method.
func (m *MockRateLimiter) GetLimiterID() iface.LimiterID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimiterID")
	ret0, _ := ret[0].(iface.LimiterID)
	return ret0
}

// GetLimiterID indicates an expected call of GetLimiterID.
func (mr *MockRateLimiterMockRecorder) GetLimiterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimiterID", reflect.TypeOf((*MockRateLimiter)(nil).GetLimiterID))
}

// GetPolicyName mocks base method.
func (m *MockRateLimiter) GetPolicyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyName indicates an expected call of GetPolicyName.
func (mr *MockRateLimiterMockRecorder) GetPolicyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyName", reflect.TypeOf((*MockRateLimiter)(nil).GetPolicyName))
}

// GetRequestCounter mocks base method.
func (m *MockRateLimiter) GetRequestCounter(labels map[string]string) prometheus.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestCounter", labels)
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// GetRequestCounter indicates an expected call of GetRequestCounter.
func (mr *MockRateLimiterMockRecorder) GetRequestCounter(labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestCounter", reflect.TypeOf((*MockRateLimiter)(nil).GetRequestCounter), labels)
}

// GetSelectors mocks base method.
func (m *MockRateLimiter) GetSelectors() []*languagev1.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectors")
	ret0, _ := ret[0].([]*languagev1.Selector)
	return ret0
}

// GetSelectors indicates an expected call of GetSelectors.
func (mr *MockRateLimiterMockRecorder) GetSelectors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectors", reflect.TypeOf((*MockRateLimiter)(nil).GetSelectors))
}

// Revert mocks base method.
func (m *MockRateLimiter) Revert(labels map[string]string, decision *checkv1.LimiterDecision) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Revert", labels, decision)
}

// Revert indicates an expected call of Revert.
func (mr *MockRateLimiterMockRecorder) Revert(labels, decision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revert", reflect.TypeOf((*MockRateLimiter)(nil).Revert), labels, decision)
}

// TakeN mocks base method.
func (m *MockRateLimiter) TakeN(labels map[string]string, count int) (string, bool, int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeN", labels, count)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(int)
	return ret0, ret1, ret2, ret3
}

// TakeN indicates an expected call of TakeN.
func (mr *MockRateLimiterMockRecorder) TakeN(labels, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeN", reflect.TypeOf((*MockRateLimiter)(nil).TakeN), labels, count)
}

// MockLoadScheduler is a mock of LoadScheduler interface.
type MockLoadScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockLoadSchedulerMockRecorder
}

// MockLoadSchedulerMockRecorder is the mock recorder for MockLoadScheduler.
type MockLoadSchedulerMockRecorder struct {
	mock *MockLoadScheduler
}

// NewMockLoadScheduler creates a new mock instance.
func NewMockLoadScheduler(ctrl *gomock.Controller) *MockLoadScheduler {
	mock := &MockLoadScheduler{ctrl: ctrl}
	mock.recorder = &MockLoadSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadScheduler) EXPECT() *MockLoadSchedulerMockRecorder {
	return m.recorder
}

// Decide mocks base method.
func (m *MockLoadScheduler) Decide(ctx context.Context, labels map[string]string) *checkv1.LimiterDecision {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decide", ctx, labels)
	ret0, _ := ret[0].(*checkv1.LimiterDecision)
	return ret0
}

// Decide indicates an expected call of Decide.
func (mr *MockLoadSchedulerMockRecorder) Decide(ctx, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decide", reflect.TypeOf((*MockLoadScheduler)(nil).Decide), ctx, labels)
}

// GetLatencyObserver mocks base method.
func (m *MockLoadScheduler) GetLatencyObserver(labels map[string]string) prometheus.Observer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatencyObserver", labels)
	ret0, _ := ret[0].(prometheus.Observer)
	return ret0
}

// GetLatencyObserver indicates an expected call of GetLatencyObserver.
func (mr *MockLoadSchedulerMockRecorder) GetLatencyObserver(labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatencyObserver", reflect.TypeOf((*MockLoadScheduler)(nil).GetLatencyObserver), labels)
}

// GetLimiterID mocks base method.
func (m *MockLoadScheduler) GetLimiterID() iface.LimiterID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLimiterID")
	ret0, _ := ret[0].(iface.LimiterID)
	return ret0
}

// GetLimiterID indicates an expected call of GetLimiterID.
func (mr *MockLoadSchedulerMockRecorder) GetLimiterID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLimiterID", reflect.TypeOf((*MockLoadScheduler)(nil).GetLimiterID))
}

// GetPolicyName mocks base method.
func (m *MockLoadScheduler) GetPolicyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyName indicates an expected call of GetPolicyName.
func (mr *MockLoadSchedulerMockRecorder) GetPolicyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyName", reflect.TypeOf((*MockLoadScheduler)(nil).GetPolicyName))
}

// GetRequestCounter mocks base method.
func (m *MockLoadScheduler) GetRequestCounter(labels map[string]string) prometheus.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestCounter", labels)
	ret0, _ := ret[0].(prometheus.Counter)
	return ret0
}

// GetRequestCounter indicates an expected call of GetRequestCounter.
func (mr *MockLoadSchedulerMockRecorder) GetRequestCounter(labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestCounter", reflect.TypeOf((*MockLoadScheduler)(nil).GetRequestCounter), labels)
}

// GetSelectors mocks base method.
func (m *MockLoadScheduler) GetSelectors() []*languagev1.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelectors")
	ret0, _ := ret[0].([]*languagev1.Selector)
	return ret0
}

// GetSelectors indicates an expected call of GetSelectors.
func (mr *MockLoadSchedulerMockRecorder) GetSelectors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelectors", reflect.TypeOf((*MockLoadScheduler)(nil).GetSelectors))
}

// Revert mocks base method.
func (m *MockLoadScheduler) Revert(labels map[string]string, decision *checkv1.LimiterDecision) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Revert", labels, decision)
}

// Revert indicates an expected call of Revert.
func (mr *MockLoadSchedulerMockRecorder) Revert(labels, decision interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revert", reflect.TypeOf((*MockLoadScheduler)(nil).Revert), labels, decision)
}
