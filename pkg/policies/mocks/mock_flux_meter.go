// Code generated by MockGen. DO NOT EDIT.
// Source: flux-meter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	languagev1 "github.com/fluxninja/aperture/api/gen/proto/go/aperture/policy/language/v1"
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockFluxMeter is a mock of FluxMeter interface.
type MockFluxMeter struct {
	ctrl     *gomock.Controller
	recorder *MockFluxMeterMockRecorder
}

// MockFluxMeterMockRecorder is the mock recorder for MockFluxMeter.
type MockFluxMeterMockRecorder struct {
	mock *MockFluxMeter
}

// NewMockFluxMeter creates a new mock instance.
func NewMockFluxMeter(ctrl *gomock.Controller) *MockFluxMeter {
	mock := &MockFluxMeter{ctrl: ctrl}
	mock.recorder = &MockFluxMeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFluxMeter) EXPECT() *MockFluxMeterMockRecorder {
	return m.recorder
}

// GetAgentGroup mocks base method.
func (m *MockFluxMeter) GetAgentGroup() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentGroup")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAgentGroup indicates an expected call of GetAgentGroup.
func (mr *MockFluxMeterMockRecorder) GetAgentGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentGroup", reflect.TypeOf((*MockFluxMeter)(nil).GetAgentGroup))
}

// GetBuckets mocks base method.
func (m *MockFluxMeter) GetBuckets() []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuckets")
	ret0, _ := ret[0].([]float64)
	return ret0
}

// GetBuckets indicates an expected call of GetBuckets.
func (mr *MockFluxMeterMockRecorder) GetBuckets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuckets", reflect.TypeOf((*MockFluxMeter)(nil).GetBuckets))
}

// GetComponentIndex mocks base method.
func (m *MockFluxMeter) GetComponentIndex() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentIndex")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetComponentIndex indicates an expected call of GetComponentIndex.
func (mr *MockFluxMeterMockRecorder) GetComponentIndex() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentIndex", reflect.TypeOf((*MockFluxMeter)(nil).GetComponentIndex))
}

// GetFluxMeterProto mocks base method.
func (m *MockFluxMeter) GetFluxMeterProto() *languagev1.FluxMeter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFluxMeterProto")
	ret0, _ := ret[0].(*languagev1.FluxMeter)
	return ret0
}

// GetFluxMeterProto indicates an expected call of GetFluxMeterProto.
func (mr *MockFluxMeterMockRecorder) GetFluxMeterProto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFluxMeterProto", reflect.TypeOf((*MockFluxMeter)(nil).GetFluxMeterProto))
}

// GetHistogram mocks base method.
func (m *MockFluxMeter) GetHistogram() prometheus.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistogram")
	ret0, _ := ret[0].(prometheus.Histogram)
	return ret0
}

// GetHistogram indicates an expected call of GetHistogram.
func (mr *MockFluxMeterMockRecorder) GetHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistogram", reflect.TypeOf((*MockFluxMeter)(nil).GetHistogram))
}

// GetMetricID mocks base method.
func (m *MockFluxMeter) GetMetricID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMetricID indicates an expected call of GetMetricID.
func (mr *MockFluxMeterMockRecorder) GetMetricID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricID", reflect.TypeOf((*MockFluxMeter)(nil).GetMetricID))
}

// GetMetricName mocks base method.
func (m *MockFluxMeter) GetMetricName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMetricName indicates an expected call of GetMetricName.
func (mr *MockFluxMeterMockRecorder) GetMetricName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricName", reflect.TypeOf((*MockFluxMeter)(nil).GetMetricName))
}

// GetPolicyHash mocks base method.
func (m *MockFluxMeter) GetPolicyHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyHash indicates an expected call of GetPolicyHash.
func (mr *MockFluxMeterMockRecorder) GetPolicyHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyHash", reflect.TypeOf((*MockFluxMeter)(nil).GetPolicyHash))
}

// GetPolicyName mocks base method.
func (m *MockFluxMeter) GetPolicyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyName indicates an expected call of GetPolicyName.
func (mr *MockFluxMeterMockRecorder) GetPolicyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyName", reflect.TypeOf((*MockFluxMeter)(nil).GetPolicyName))
}

// GetSelector mocks base method.
func (m *MockFluxMeter) GetSelector() *languagev1.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelector")
	ret0, _ := ret[0].(*languagev1.Selector)
	return ret0
}

// GetSelector indicates an expected call of GetSelector.
func (mr *MockFluxMeterMockRecorder) GetSelector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelector", reflect.TypeOf((*MockFluxMeter)(nil).GetSelector))
}
