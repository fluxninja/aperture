// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	checkv1 "github.com/fluxninja/aperture/v2/api/gen/proto/go/aperture/flowcontrol/check/v1"
	agentinfo "github.com/fluxninja/aperture/v2/pkg/agentinfo"
	iface "github.com/fluxninja/aperture/v2/pkg/policies/flowcontrol/iface"
	gomock "github.com/golang/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// GetAgentInfo mocks base method.
func (m *MockEngine) GetAgentInfo() *agentinfo.AgentInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentInfo")
	ret0, _ := ret[0].(*agentinfo.AgentInfo)
	return ret0
}

// GetAgentInfo indicates an expected call of GetAgentInfo.
func (mr *MockEngineMockRecorder) GetAgentInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockEngine)(nil).GetAgentInfo))
}

// GetFluxMeter mocks base method.
func (m *MockEngine) GetFluxMeter(fluxMeterName string) iface.FluxMeter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFluxMeter", fluxMeterName)
	ret0, _ := ret[0].(iface.FluxMeter)
	return ret0
}

// GetFluxMeter indicates an expected call of GetFluxMeter.
func (mr *MockEngineMockRecorder) GetFluxMeter(fluxMeterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFluxMeter", reflect.TypeOf((*MockEngine)(nil).GetFluxMeter), fluxMeterName)
}

// GetLoadScheduler mocks base method.
func (m *MockEngine) GetLoadScheduler(limiterID iface.LimiterID) iface.LoadScheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadScheduler", limiterID)
	ret0, _ := ret[0].(iface.LoadScheduler)
	return ret0
}

// GetLoadScheduler indicates an expected call of GetLoadScheduler.
func (mr *MockEngineMockRecorder) GetLoadScheduler(limiterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadScheduler", reflect.TypeOf((*MockEngine)(nil).GetLoadScheduler), limiterID)
}

// GetRateLimiter mocks base method.
func (m *MockEngine) GetRateLimiter(limiterID iface.LimiterID) iface.RateLimiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimiter", limiterID)
	ret0, _ := ret[0].(iface.RateLimiter)
	return ret0
}

// GetRateLimiter indicates an expected call of GetRateLimiter.
func (mr *MockEngineMockRecorder) GetRateLimiter(limiterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiter", reflect.TypeOf((*MockEngine)(nil).GetRateLimiter), limiterID)
}

// GetRegulator mocks base method.
func (m *MockEngine) GetRegulator(limiterID iface.LimiterID) iface.Limiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegulator", limiterID)
	ret0, _ := ret[0].(iface.Limiter)
	return ret0
}

// GetRegulator indicates an expected call of GetRegulator.
func (mr *MockEngineMockRecorder) GetRegulator(limiterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegulator", reflect.TypeOf((*MockEngine)(nil).GetRegulator), limiterID)
}

// ProcessRequest mocks base method.
func (m *MockEngine) ProcessRequest(ctx context.Context, requestContext iface.RequestContext) *checkv1.CheckResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRequest", ctx, requestContext)
	ret0, _ := ret[0].(*checkv1.CheckResponse)
	return ret0
}

// ProcessRequest indicates an expected call of ProcessRequest.
func (mr *MockEngineMockRecorder) ProcessRequest(ctx, requestContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRequest", reflect.TypeOf((*MockEngine)(nil).ProcessRequest), ctx, requestContext)
}

// RegisterFluxMeter mocks base method.
func (m *MockEngine) RegisterFluxMeter(fm iface.FluxMeter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFluxMeter", fm)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterFluxMeter indicates an expected call of RegisterFluxMeter.
func (mr *MockEngineMockRecorder) RegisterFluxMeter(fm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFluxMeter", reflect.TypeOf((*MockEngine)(nil).RegisterFluxMeter), fm)
}

// RegisterLabelPreview mocks base method.
func (m *MockEngine) RegisterLabelPreview(l iface.LabelPreview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterLabelPreview", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterLabelPreview indicates an expected call of RegisterLabelPreview.
func (mr *MockEngineMockRecorder) RegisterLabelPreview(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLabelPreview", reflect.TypeOf((*MockEngine)(nil).RegisterLabelPreview), l)
}

// RegisterLoadScheduler mocks base method.
func (m *MockEngine) RegisterLoadScheduler(ls iface.LoadScheduler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterLoadScheduler", ls)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterLoadScheduler indicates an expected call of RegisterLoadScheduler.
func (mr *MockEngineMockRecorder) RegisterLoadScheduler(ls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLoadScheduler", reflect.TypeOf((*MockEngine)(nil).RegisterLoadScheduler), ls)
}

// RegisterRateLimiter mocks base method.
func (m *MockEngine) RegisterRateLimiter(l iface.RateLimiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRateLimiter", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRateLimiter indicates an expected call of RegisterRateLimiter.
func (mr *MockEngineMockRecorder) RegisterRateLimiter(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRateLimiter", reflect.TypeOf((*MockEngine)(nil).RegisterRateLimiter), l)
}

// RegisterRegulator mocks base method.
func (m *MockEngine) RegisterRegulator(l iface.Limiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRegulator", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRegulator indicates an expected call of RegisterRegulator.
func (mr *MockEngineMockRecorder) RegisterRegulator(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRegulator", reflect.TypeOf((*MockEngine)(nil).RegisterRegulator), l)
}

// UnregisterFluxMeter mocks base method.
func (m *MockEngine) UnregisterFluxMeter(fm iface.FluxMeter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterFluxMeter", fm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterFluxMeter indicates an expected call of UnregisterFluxMeter.
func (mr *MockEngineMockRecorder) UnregisterFluxMeter(fm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterFluxMeter", reflect.TypeOf((*MockEngine)(nil).UnregisterFluxMeter), fm)
}

// UnregisterLabelPreview mocks base method.
func (m *MockEngine) UnregisterLabelPreview(l iface.LabelPreview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterLabelPreview", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterLabelPreview indicates an expected call of UnregisterLabelPreview.
func (mr *MockEngineMockRecorder) UnregisterLabelPreview(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLabelPreview", reflect.TypeOf((*MockEngine)(nil).UnregisterLabelPreview), l)
}

// UnregisterLoadScheduler mocks base method.
func (m *MockEngine) UnregisterLoadScheduler(ls iface.LoadScheduler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterLoadScheduler", ls)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterLoadScheduler indicates an expected call of UnregisterLoadScheduler.
func (mr *MockEngineMockRecorder) UnregisterLoadScheduler(ls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLoadScheduler", reflect.TypeOf((*MockEngine)(nil).UnregisterLoadScheduler), ls)
}

// UnregisterRateLimiter mocks base method.
func (m *MockEngine) UnregisterRateLimiter(l iface.RateLimiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterRateLimiter", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterRateLimiter indicates an expected call of UnregisterRateLimiter.
func (mr *MockEngineMockRecorder) UnregisterRateLimiter(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterRateLimiter", reflect.TypeOf((*MockEngine)(nil).UnregisterRateLimiter), l)
}

// UnregisterRegulator mocks base method.
func (m *MockEngine) UnregisterRegulator(l iface.Limiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterRegulator", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterRegulator indicates an expected call of UnregisterRegulator.
func (mr *MockEngineMockRecorder) UnregisterRegulator(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterRegulator", reflect.TypeOf((*MockEngine)(nil).UnregisterRegulator), l)
}
