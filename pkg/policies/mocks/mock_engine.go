// Code generated by MockGen. DO NOT EDIT.
// Source: engine.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	checkv1 "github.com/fluxninja/aperture/api/v2/gen/proto/go/aperture/flowcontrol/check/v1"
	agentinfo "github.com/fluxninja/aperture/v2/pkg/agent-info"
	iface "github.com/fluxninja/aperture/v2/pkg/policies/flowcontrol/iface"
	gomock "github.com/golang/mock/gomock"
)

// MockEngine is a mock of Engine interface.
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine.
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance.
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// FlowEnd mocks base method.
func (m *MockEngine) FlowEnd(ctx context.Context, request *checkv1.FlowEndRequest) *checkv1.FlowEndResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlowEnd", ctx, request)
	ret0, _ := ret[0].(*checkv1.FlowEndResponse)
	return ret0
}

// FlowEnd indicates an expected call of FlowEnd.
func (mr *MockEngineMockRecorder) FlowEnd(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlowEnd", reflect.TypeOf((*MockEngine)(nil).FlowEnd), ctx, request)
}

// GetAgentInfo mocks base method.
func (m *MockEngine) GetAgentInfo() *agentinfo.AgentInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentInfo")
	ret0, _ := ret[0].(*agentinfo.AgentInfo)
	return ret0
}

// GetAgentInfo indicates an expected call of GetAgentInfo.
func (mr *MockEngineMockRecorder) GetAgentInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentInfo", reflect.TypeOf((*MockEngine)(nil).GetAgentInfo))
}

// GetFlowEnder mocks base method.
func (m *MockEngine) GetFlowEnder(limiterID iface.LimiterID) iface.FlowEnder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlowEnder", limiterID)
	ret0, _ := ret[0].(iface.FlowEnder)
	return ret0
}

// GetFlowEnder indicates an expected call of GetFlowEnder.
func (mr *MockEngineMockRecorder) GetFlowEnder(limiterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlowEnder", reflect.TypeOf((*MockEngine)(nil).GetFlowEnder), limiterID)
}

// GetFluxMeter mocks base method.
func (m *MockEngine) GetFluxMeter(fluxMeterName string) iface.FluxMeter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFluxMeter", fluxMeterName)
	ret0, _ := ret[0].(iface.FluxMeter)
	return ret0
}

// GetFluxMeter indicates an expected call of GetFluxMeter.
func (mr *MockEngineMockRecorder) GetFluxMeter(fluxMeterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFluxMeter", reflect.TypeOf((*MockEngine)(nil).GetFluxMeter), fluxMeterName)
}

// GetRateLimiter mocks base method.
func (m *MockEngine) GetRateLimiter(limiterID iface.LimiterID) iface.Limiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimiter", limiterID)
	ret0, _ := ret[0].(iface.Limiter)
	return ret0
}

// GetRateLimiter indicates an expected call of GetRateLimiter.
func (mr *MockEngineMockRecorder) GetRateLimiter(limiterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimiter", reflect.TypeOf((*MockEngine)(nil).GetRateLimiter), limiterID)
}

// GetSampler mocks base method.
func (m *MockEngine) GetSampler(limiterID iface.LimiterID) iface.Limiter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSampler", limiterID)
	ret0, _ := ret[0].(iface.Limiter)
	return ret0
}

// GetSampler indicates an expected call of GetSampler.
func (mr *MockEngineMockRecorder) GetSampler(limiterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSampler", reflect.TypeOf((*MockEngine)(nil).GetSampler), limiterID)
}

// GetScheduler mocks base method.
func (m *MockEngine) GetScheduler(limiterID iface.LimiterID) iface.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduler", limiterID)
	ret0, _ := ret[0].(iface.Scheduler)
	return ret0
}

// GetScheduler indicates an expected call of GetScheduler.
func (mr *MockEngineMockRecorder) GetScheduler(limiterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduler", reflect.TypeOf((*MockEngine)(nil).GetScheduler), limiterID)
}

// ProcessRequest mocks base method.
func (m *MockEngine) ProcessRequest(ctx context.Context, requestContext iface.RequestContext) *checkv1.CheckResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessRequest", ctx, requestContext)
	ret0, _ := ret[0].(*checkv1.CheckResponse)
	return ret0
}

// ProcessRequest indicates an expected call of ProcessRequest.
func (mr *MockEngineMockRecorder) ProcessRequest(ctx, requestContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessRequest", reflect.TypeOf((*MockEngine)(nil).ProcessRequest), ctx, requestContext)
}

// RegisterCache mocks base method.
func (m *MockEngine) RegisterCache(c iface.Cache) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCache", c)
}

// RegisterCache indicates an expected call of RegisterCache.
func (mr *MockEngineMockRecorder) RegisterCache(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCache", reflect.TypeOf((*MockEngine)(nil).RegisterCache), c)
}

// RegisterConcurrencyLimiter mocks base method.
func (m *MockEngine) RegisterConcurrencyLimiter(l iface.ConcurrencyLimiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterConcurrencyLimiter", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterConcurrencyLimiter indicates an expected call of RegisterConcurrencyLimiter.
func (mr *MockEngineMockRecorder) RegisterConcurrencyLimiter(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConcurrencyLimiter", reflect.TypeOf((*MockEngine)(nil).RegisterConcurrencyLimiter), l)
}

// RegisterConcurrencyScheduler mocks base method.
func (m *MockEngine) RegisterConcurrencyScheduler(l iface.ConcurrencyScheduler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterConcurrencyScheduler", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterConcurrencyScheduler indicates an expected call of RegisterConcurrencyScheduler.
func (mr *MockEngineMockRecorder) RegisterConcurrencyScheduler(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConcurrencyScheduler", reflect.TypeOf((*MockEngine)(nil).RegisterConcurrencyScheduler), l)
}

// RegisterFluxMeter mocks base method.
func (m *MockEngine) RegisterFluxMeter(fm iface.FluxMeter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterFluxMeter", fm)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterFluxMeter indicates an expected call of RegisterFluxMeter.
func (mr *MockEngineMockRecorder) RegisterFluxMeter(fm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterFluxMeter", reflect.TypeOf((*MockEngine)(nil).RegisterFluxMeter), fm)
}

// RegisterLabelPreview mocks base method.
func (m *MockEngine) RegisterLabelPreview(l iface.LabelPreview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterLabelPreview", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterLabelPreview indicates an expected call of RegisterLabelPreview.
func (mr *MockEngineMockRecorder) RegisterLabelPreview(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterLabelPreview", reflect.TypeOf((*MockEngine)(nil).RegisterLabelPreview), l)
}

// RegisterRateLimiter mocks base method.
func (m *MockEngine) RegisterRateLimiter(l iface.Limiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterRateLimiter", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterRateLimiter indicates an expected call of RegisterRateLimiter.
func (mr *MockEngineMockRecorder) RegisterRateLimiter(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRateLimiter", reflect.TypeOf((*MockEngine)(nil).RegisterRateLimiter), l)
}

// RegisterSampler mocks base method.
func (m *MockEngine) RegisterSampler(l iface.Limiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterSampler", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterSampler indicates an expected call of RegisterSampler.
func (mr *MockEngineMockRecorder) RegisterSampler(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterSampler", reflect.TypeOf((*MockEngine)(nil).RegisterSampler), l)
}

// RegisterScheduler mocks base method.
func (m *MockEngine) RegisterScheduler(ls iface.Scheduler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterScheduler", ls)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterScheduler indicates an expected call of RegisterScheduler.
func (mr *MockEngineMockRecorder) RegisterScheduler(ls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterScheduler", reflect.TypeOf((*MockEngine)(nil).RegisterScheduler), ls)
}

// UnregisterConcurrencyLimiter mocks base method.
func (m *MockEngine) UnregisterConcurrencyLimiter(l iface.ConcurrencyLimiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterConcurrencyLimiter", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterConcurrencyLimiter indicates an expected call of UnregisterConcurrencyLimiter.
func (mr *MockEngineMockRecorder) UnregisterConcurrencyLimiter(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterConcurrencyLimiter", reflect.TypeOf((*MockEngine)(nil).UnregisterConcurrencyLimiter), l)
}

// UnregisterConcurrencyScheduler mocks base method.
func (m *MockEngine) UnregisterConcurrencyScheduler(l iface.ConcurrencyScheduler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterConcurrencyScheduler", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterConcurrencyScheduler indicates an expected call of UnregisterConcurrencyScheduler.
func (mr *MockEngineMockRecorder) UnregisterConcurrencyScheduler(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterConcurrencyScheduler", reflect.TypeOf((*MockEngine)(nil).UnregisterConcurrencyScheduler), l)
}

// UnregisterFluxMeter mocks base method.
func (m *MockEngine) UnregisterFluxMeter(fm iface.FluxMeter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterFluxMeter", fm)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterFluxMeter indicates an expected call of UnregisterFluxMeter.
func (mr *MockEngineMockRecorder) UnregisterFluxMeter(fm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterFluxMeter", reflect.TypeOf((*MockEngine)(nil).UnregisterFluxMeter), fm)
}

// UnregisterLabelPreview mocks base method.
func (m *MockEngine) UnregisterLabelPreview(l iface.LabelPreview) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterLabelPreview", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterLabelPreview indicates an expected call of UnregisterLabelPreview.
func (mr *MockEngineMockRecorder) UnregisterLabelPreview(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterLabelPreview", reflect.TypeOf((*MockEngine)(nil).UnregisterLabelPreview), l)
}

// UnregisterRateLimiter mocks base method.
func (m *MockEngine) UnregisterRateLimiter(l iface.Limiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterRateLimiter", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterRateLimiter indicates an expected call of UnregisterRateLimiter.
func (mr *MockEngineMockRecorder) UnregisterRateLimiter(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterRateLimiter", reflect.TypeOf((*MockEngine)(nil).UnregisterRateLimiter), l)
}

// UnregisterSampler mocks base method.
func (m *MockEngine) UnregisterSampler(l iface.Limiter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterSampler", l)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterSampler indicates an expected call of UnregisterSampler.
func (mr *MockEngineMockRecorder) UnregisterSampler(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterSampler", reflect.TypeOf((*MockEngine)(nil).UnregisterSampler), l)
}

// UnregisterScheduler mocks base method.
func (m *MockEngine) UnregisterScheduler(ls iface.Scheduler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterScheduler", ls)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterScheduler indicates an expected call of UnregisterScheduler.
func (mr *MockEngineMockRecorder) UnregisterScheduler(ls interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterScheduler", reflect.TypeOf((*MockEngine)(nil).UnregisterScheduler), ls)
}
