// Code generated by MockGen. DO NOT EDIT.
// Source: policy.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	status "github.com/fluxninja/aperture/pkg/status"
	gomock "github.com/golang/mock/gomock"
)

// MockPolicyBase is a mock of PolicyBase interface.
type MockPolicyBase struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyBaseMockRecorder
}

// MockPolicyBaseMockRecorder is the mock recorder for MockPolicyBase.
type MockPolicyBaseMockRecorder struct {
	mock *MockPolicyBase
}

// NewMockPolicyBase creates a new mock instance.
func NewMockPolicyBase(ctrl *gomock.Controller) *MockPolicyBase {
	mock := &MockPolicyBase{ctrl: ctrl}
	mock.recorder = &MockPolicyBaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyBase) EXPECT() *MockPolicyBaseMockRecorder {
	return m.recorder
}

// GetPolicyHash mocks base method.
func (m *MockPolicyBase) GetPolicyHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyHash indicates an expected call of GetPolicyHash.
func (mr *MockPolicyBaseMockRecorder) GetPolicyHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyHash", reflect.TypeOf((*MockPolicyBase)(nil).GetPolicyHash))
}

// GetPolicyName mocks base method.
func (m *MockPolicyBase) GetPolicyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyName indicates an expected call of GetPolicyName.
func (mr *MockPolicyBaseMockRecorder) GetPolicyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyName", reflect.TypeOf((*MockPolicyBase)(nil).GetPolicyName))
}

// MockPolicy is a mock of Policy interface.
type MockPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy.
type MockPolicyMockRecorder struct {
	mock *MockPolicy
}

// NewMockPolicy creates a new mock instance.
func NewMockPolicy(ctrl *gomock.Controller) *MockPolicy {
	mock := &MockPolicy{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicy) EXPECT() *MockPolicyMockRecorder {
	return m.recorder
}

// GetEvaluationInterval mocks base method.
func (m *MockPolicy) GetEvaluationInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetEvaluationInterval indicates an expected call of GetEvaluationInterval.
func (mr *MockPolicyMockRecorder) GetEvaluationInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationInterval", reflect.TypeOf((*MockPolicy)(nil).GetEvaluationInterval))
}

// GetPolicyHash mocks base method.
func (m *MockPolicy) GetPolicyHash() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyHash")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyHash indicates an expected call of GetPolicyHash.
func (mr *MockPolicyMockRecorder) GetPolicyHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyHash", reflect.TypeOf((*MockPolicy)(nil).GetPolicyHash))
}

// GetPolicyName mocks base method.
func (m *MockPolicy) GetPolicyName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPolicyName indicates an expected call of GetPolicyName.
func (mr *MockPolicyMockRecorder) GetPolicyName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyName", reflect.TypeOf((*MockPolicy)(nil).GetPolicyName))
}

// GetStatusRegistry mocks base method.
func (m *MockPolicy) GetStatusRegistry() status.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatusRegistry")
	ret0, _ := ret[0].(status.Registry)
	return ret0
}

// GetStatusRegistry indicates an expected call of GetStatusRegistry.
func (mr *MockPolicyMockRecorder) GetStatusRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatusRegistry", reflect.TypeOf((*MockPolicy)(nil).GetStatusRegistry))
}
