// Code generated by MockGen. DO NOT EDIT.
// Source: tracker.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	notifiers "github.com/FluxNinja/aperture/pkg/notifiers"
	gomock "github.com/golang/mock/gomock"
)

// MockTrackers is a mock of Trackers interface.
type MockTrackers struct {
	ctrl     *gomock.Controller
	recorder *MockTrackersMockRecorder
}

// MockTrackersMockRecorder is the mock recorder for MockTrackers.
type MockTrackersMockRecorder struct {
	mock *MockTrackers
}

// NewMockTrackers creates a new mock instance.
func NewMockTrackers(ctrl *gomock.Controller) *MockTrackers {
	mock := &MockTrackers{ctrl: ctrl}
	mock.recorder = &MockTrackersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackers) EXPECT() *MockTrackersMockRecorder {
	return m.recorder
}

// AddKeyNotifier mocks base method.
func (m *MockTrackers) AddKeyNotifier(arg0 notifiers.KeyNotifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddKeyNotifier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddKeyNotifier indicates an expected call of AddKeyNotifier.
func (mr *MockTrackersMockRecorder) AddKeyNotifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddKeyNotifier", reflect.TypeOf((*MockTrackers)(nil).AddKeyNotifier), arg0)
}

// AddPrefixNotifier mocks base method.
func (m *MockTrackers) AddPrefixNotifier(arg0 notifiers.PrefixNotifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrefixNotifier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPrefixNotifier indicates an expected call of AddPrefixNotifier.
func (mr *MockTrackersMockRecorder) AddPrefixNotifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrefixNotifier", reflect.TypeOf((*MockTrackers)(nil).AddPrefixNotifier), arg0)
}

// GetCurrentValue mocks base method.
func (m *MockTrackers) GetCurrentValue(key notifiers.Key) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentValue", key)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetCurrentValue indicates an expected call of GetCurrentValue.
func (mr *MockTrackersMockRecorder) GetCurrentValue(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentValue", reflect.TypeOf((*MockTrackers)(nil).GetCurrentValue), key)
}

// Purge mocks base method.
func (m *MockTrackers) Purge(prefix string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Purge", prefix)
}

// Purge indicates an expected call of Purge.
func (mr *MockTrackersMockRecorder) Purge(prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purge", reflect.TypeOf((*MockTrackers)(nil).Purge), prefix)
}

// RemoveEvent mocks base method.
func (m *MockTrackers) RemoveEvent(key notifiers.Key) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveEvent", key)
}

// RemoveEvent indicates an expected call of RemoveEvent.
func (mr *MockTrackersMockRecorder) RemoveEvent(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEvent", reflect.TypeOf((*MockTrackers)(nil).RemoveEvent), key)
}

// RemoveKeyNotifier mocks base method.
func (m *MockTrackers) RemoveKeyNotifier(arg0 notifiers.KeyNotifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveKeyNotifier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveKeyNotifier indicates an expected call of RemoveKeyNotifier.
func (mr *MockTrackersMockRecorder) RemoveKeyNotifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveKeyNotifier", reflect.TypeOf((*MockTrackers)(nil).RemoveKeyNotifier), arg0)
}

// RemovePrefixNotifier mocks base method.
func (m *MockTrackers) RemovePrefixNotifier(arg0 notifiers.PrefixNotifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePrefixNotifier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePrefixNotifier indicates an expected call of RemovePrefixNotifier.
func (mr *MockTrackersMockRecorder) RemovePrefixNotifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePrefixNotifier", reflect.TypeOf((*MockTrackers)(nil).RemovePrefixNotifier), arg0)
}

// Start mocks base method.
func (m *MockTrackers) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockTrackersMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTrackers)(nil).Start))
}

// Stop mocks base method.
func (m *MockTrackers) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTrackersMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTrackers)(nil).Stop))
}

// WriteEvent mocks base method.
func (m *MockTrackers) WriteEvent(key notifiers.Key, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteEvent", key, value)
}

// WriteEvent indicates an expected call of WriteEvent.
func (mr *MockTrackersMockRecorder) WriteEvent(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteEvent", reflect.TypeOf((*MockTrackers)(nil).WriteEvent), key, value)
}
