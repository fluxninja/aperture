apiVersion: fluxninja.com/v1alpha1
kind: Policy
metadata:
  annotations:
    fluxninja.com/blueprint-name: policies/service-protection/jmx
    fluxninja.com/blueprints-uri: local
    fluxninja.com/values: '{"policy": {"latency_baseliner": {"flux_meter": {"selectors":
      [{"control_point": "awesomeFeature", "service": "service3-demo-app.demoapp.svc.cluster.local"}]}},
      "policy_name": "jmx-service-protection", "resources": {"telemetry_collectors":
      [{"agent_group": "default", "infra_meters": {"prometheus": {"per_agent_group":
      true, "pipeline": {"receivers": ["prometheus"]}, "receivers": {"prometheus":
      {"config": {"scrape_configs": [{"job_name": "java-demo-app-jmx", "kubernetes_sd_configs":
      [{"namespaces": {"names": ["demoapp"]}, "role": "pod"}], "relabel_configs":
      [{"action": "keep", "regex": true, "source_labels": ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]},
      {"action": "keep", "regex": "(.*?:8087)", "source_labels": ["__address__"]}],
      "scrape_interval": "10s"}, {"job_name": "java-demo-app-micrometer", "kubernetes_sd_configs":
      [{"namespaces": {"names": ["demoapp"]}, "role": "pod"}], "metrics_path": "/actuator/prometheus",
      "relabel_configs": [{"action": "keep", "regex": true, "source_labels": ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]},
      {"action": "keep", "regex": "(.*?:8099)", "source_labels": ["__address__"]}],
      "scrape_interval": "10s"}]}}}}}}]}, "service_protection_core": {"adaptive_load_scheduler":
      {"load_multiplier_linear_increment": 0.0025000000000000001, "load_scheduler":
      {"selectors": [{"control_point": "awesomeFeature", "service": "service1-demo-app.demoapp.svc.cluster.local"}]}},
      "overload_confirmations": [{"operator": "gt", "query_string": "avg(java_lang_OperatingSystem_CpuLoad{k8s_pod_name=~\"service3-demo-app-.*\"})",
      "threshold": 0.34999999999999998}, {"operator": "gt", "query_string": "avg(java_lang_Copy_LastGcInfo_duration{k8s_pod_name=~\"service3-demo-app-.*\"})",
      "threshold": 30}]}}}'
  labels:
    fluxninja.com/validate: "true"
  name: jmx-service-protection
spec:
  circuit:
    components:
    - query:
        promql:
          evaluation_interval: 1s
          out_ports:
            output:
              signal_name: PROMQL_0
          query_string: avg(java_lang_OperatingSystem_CpuLoad{k8s_pod_name=~"service3-demo-app-.*"})
    - decider:
        in_ports:
          lhs:
            signal_name: PROMQL_0
          rhs:
            constant_signal:
              value: 0.35
        operator: gt
        out_ports:
          output:
            signal_name: CONFIRMATION_SIGNAL_0
    - first_valid:
        in_ports:
          inputs:
          - signal_name: CONFIRMATION_SIGNAL_0
          - constant_signal:
              value: 0
        out_ports:
          output:
            signal_name: OVERLOAD_CONFIRMATION_0
    - query:
        promql:
          evaluation_interval: 1s
          out_ports:
            output:
              signal_name: PROMQL_1
          query_string: avg(java_lang_Copy_LastGcInfo_duration{k8s_pod_name=~"service3-demo-app-.*"})
    - decider:
        in_ports:
          lhs:
            signal_name: PROMQL_1
          rhs:
            constant_signal:
              value: 30
        operator: gt
        out_ports:
          output:
            signal_name: CONFIRMATION_SIGNAL_1
    - first_valid:
        in_ports:
          inputs:
          - signal_name: CONFIRMATION_SIGNAL_1
          - constant_signal:
              value: 0
        out_ports:
          output:
            signal_name: OVERLOAD_CONFIRMATION_1
    - and:
        in_ports:
          inputs:
          - signal_name: OVERLOAD_CONFIRMATION_0
          - signal_name: OVERLOAD_CONFIRMATION_1
        out_ports:
          output:
            signal_name: OVERLOAD_CONFIRMATION
    - flow_control:
        adaptive_load_scheduler:
          dry_run: false
          dry_run_config_key: dry_run
          in_ports:
            overload_confirmation:
              signal_name: OVERLOAD_CONFIRMATION
            setpoint:
              signal_name: SETPOINT
            signal:
              signal_name: SIGNAL
          out_ports:
            desired_load_multiplier:
              signal_name: DESIRED_LOAD_MULTIPLIER
            observed_load_multiplier:
              signal_name: OBSERVED_LOAD_MULTIPLIER
          parameters:
            alerter:
              alert_name: Load Throttling Event
            gradient:
              max_gradient: 1
              min_gradient: 0.1
              slope: -1
            load_multiplier_linear_increment: 0.0025
            load_scheduler:
              selectors:
              - control_point: awesomeFeature
                service: service1-demo-app.demoapp.svc.cluster.local
            max_load_multiplier: 2
    - query:
        promql:
          evaluation_interval: 1s
          out_ports:
            output:
              signal_name: SIGNAL
          query_string: sum(increase(flux_meter_sum{flow_status="OK", flux_meter_name="jmx-service-protection"}[5s]))/sum(increase(flux_meter_count{flow_status="OK",
            flux_meter_name="jmx-service-protection"}[5s]))
    - arithmetic_combinator:
        in_ports:
          lhs:
            signal_name: SIGNAL
          rhs:
            constant_signal:
              value: 2
        operator: mul
        out_ports:
          output:
            signal_name: MAX_EMA
    - ema:
        in_ports:
          input:
            signal_name: SIGNAL
          max_envelope:
            signal_name: MAX_EMA
        out_ports:
          output:
            signal_name: SIGNAL_EMA
        parameters:
          correction_factor_on_max_envelope_violation: 0.95
          ema_window: 1500s
          warmup_window: 60s
    - arithmetic_combinator:
        in_ports:
          lhs:
            signal_name: SIGNAL_EMA
          rhs:
            constant_signal:
              value: 1.1
        operator: mul
        out_ports:
          output:
            signal_name: SETPOINT
    evaluation_interval: 1s
  resources:
    flow_control:
      classifiers: []
      flux_meters:
        jmx-service-protection:
          selectors:
          - control_point: awesomeFeature
            service: service3-demo-app.demoapp.svc.cluster.local
    telemetry_collectors:
    - agent_group: default
      infra_meters:
        prometheus:
          per_agent_group: true
          pipeline:
            receivers:
            - prometheus
          receivers:
            prometheus:
              config:
                scrape_configs:
                - job_name: java-demo-app-jmx
                  kubernetes_sd_configs:
                  - namespaces:
                      names:
                      - demoapp
                    role: pod
                  relabel_configs:
                  - action: keep
                    regex: true
                    source_labels:
                    - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                  - action: keep
                    regex: (.*?:8087)
                    source_labels:
                    - __address__
                  scrape_interval: 10s
                - job_name: java-demo-app-micrometer
                  kubernetes_sd_configs:
                  - namespaces:
                      names:
                      - demoapp
                    role: pod
                  metrics_path: /actuator/prometheus
                  relabel_configs:
                  - action: keep
                    regex: true
                    source_labels:
                    - __meta_kubernetes_pod_annotation_prometheus_io_scrape
                  - action: keep
                    regex: (.*?:8099)
                    source_labels:
                    - __address__
                  scrape_interval: 10s
