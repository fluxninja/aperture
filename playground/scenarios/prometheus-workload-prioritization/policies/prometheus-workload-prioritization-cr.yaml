apiVersion: fluxninja.com/v1alpha1
kind: Policy
metadata:
  labels:
    fluxninja.com/validate: "true"
  name: prometheus-workload-prioritization
spec:
  circuit:
    components:
    - flow_control:
        adaptive_load_scheduler:
          dry_run: false
          dry_run_config_key: dry_run
          in_ports:
            overload_confirmation:
              constant_signal:
                value: 1
            setpoint:
              signal_name: SETPOINT
            signal:
              signal_name: SIGNAL
          out_ports:
            desired_load_multiplier:
              signal_name: DESIRED_LOAD_MULTIPLIER
            observed_load_multiplier:
              signal_name: OBSERVED_LOAD_MULTIPLIER
          parameters:
            alerter:
              alert_name: Load Throttling Event
            gradient:
              max_gradient: 1
              min_gradient: 0.1
              slope: -1
            load_multiplier_linear_increment: 0.025
            load_scheduler:
              scheduler:
                workloads:
                - label_matcher:
                    match_labels:
                      is_demo_app_requests_total: "true"
                  parameters:
                    priority: 50
                - label_matcher:
                    match_labels:
                      is_demo_app_request_duration_micro_seconds: "true"
                  parameters:
                    priority: 200
              selectors:
              - agent_group: default
                control_point: ingress
                label_matcher:
                  match_labels:
                    http.path: /api/v1/write
                    is_demo_app: "true"
                service: controller-prometheus-server.aperture-controller.svc.cluster.local
              workload_latency_based_tokens: true
            max_load_multiplier: 2
    - query:
        promql:
          evaluation_interval: 10s
          out_ports:
            output:
              signal_name: SIGNAL
          query_string: sum(increase(flux_meter_sum{flow_status="OK", flux_meter_name="prometheus-workload-prioritization",
            policy_name="prometheus-workload-prioritization"}[30s]))/sum(increase(flux_meter_count{flow_status="OK",
            flux_meter_name="prometheus-workload-prioritization", policy_name="prometheus-workload-prioritization"}[30s]))
    - query:
        promql:
          evaluation_interval: 30s
          out_ports:
            output:
              signal_name: SIGNAL_LONG_TERM
          query_string: sum(increase(flux_meter_sum{flow_status="OK", flux_meter_name="prometheus-workload-prioritization",
            policy_name="prometheus-workload-prioritization"}[1800s]))/sum(increase(flux_meter_count{flow_status="OK",
            flux_meter_name="prometheus-workload-prioritization", policy_name="prometheus-workload-prioritization"}[1800s]))
    - arithmetic_combinator:
        in_ports:
          lhs:
            signal_name: SIGNAL_LONG_TERM
          rhs:
            constant_signal:
              value: 1.1
        operator: mul
        out_ports:
          output:
            signal_name: SETPOINT
    evaluation_interval: 1s
  resources:
    flow_control:
      classifiers:
      - rego:
          labels:
            is_demo_app:
              telemetry: true
            is_demo_app_request_duration_micro_seconds:
              telemetry: true
            is_demo_app_requests_total:
              telemetry: true
          module: |
            package prometheus_label

            default is_demo_app = false

            body := input.attributes.request.http.body

            is_demo_app_requests_total := contains(body, "demo_app_requests_total")

            is_demo_app_request_duration_micro_seconds := contains(body, "demo_app_request_duration_micro_seconds")

            is_demo_app {
              is_demo_app_requests_total
            }

            is_demo_app {
              is_demo_app_request_duration_micro_seconds
            }
        selectors:
        - agent_group: default
          control_point: ingress
          label_matcher:
            match_labels:
              http.path: /api/v1/write
          service: controller-prometheus-server.aperture-controller.svc.cluster.local
      flux_meters:
        prometheus-workload-prioritization:
          selectors:
          - agent_group: default
            control_point: ingress
            service: controller-prometheus-server.aperture-controller.svc.cluster.local
    infra_meters: {}
