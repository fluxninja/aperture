apiVersion: fluxninja.com/v1alpha1
kind: Policy
metadata:
  annotations:
    fluxninja.com/blueprint-name: policies/rate-limiting
    fluxninja.com/blueprints-uri: local
    fluxninja.com/values: '{"policy": {"policy_name": "graphql-rate-limiting", "rate_limiter":
      {"bucket_capacity": 40, "fill_amount": 2, "parameters": {"interval": "1s", "label_key":
      "user_id", "lazy_sync": {"enabled": true, "num_sync": 5}}, "selectors": [{"agent_group":
      "default", "control_point": "ingress", "service": "service-graphql-demo-app.demoapp.svc.cluster.local"}]},
      "resources": {"flow_control": {"classifiers": [{"rego": {"labels": {"user_id":
      {"telemetry": true}}, "module": "package graphql_example\nimport future.keywords.if\nquery_ast
      := graphql.parse_query(input.parsed_body.query)\nclaims := payload if {\n  io.jwt.verify_hs256(bearer_token,
      \"secret\")\n  [_, payload, _] := io.jwt.decode(bearer_token)\n}\nbearer_token
      := t if {\n  v := input.attributes.request.http.headers.authorization\n  startswith(v,
      \"Bearer \")\n  t := substring(v, count(\"Bearer \"), -1)\n}\nqueryIsCreateTodo
      if {\n  some operation\n  walk(query_ast, [_, operation])\n  operation.Name
      == \"createTodo\"\n  count(operation.SelectionSet) > 0\n  some selection\n  walk(operation.SelectionSet,
      [_, selection])\n  selection.Name == \"createTodo\"\n}\nuser_id := u if {\n  queryIsCreateTodo\n  u
      := claims.userID\n}\n"}, "selectors": [{"agent_group": "default", "control_point":
      "ingress", "service": "service-graphql-demo-app.demoapp.svc.cluster.local"}]}]}}}}'
  labels:
    fluxninja.com/validate: "true"
  name: graphql-rate-limiting
spec:
  circuit:
    components:
    - flow_control:
        rate_limiter:
          in_ports:
            bucket_capacity:
              constant_signal:
                value: 40
            fill_amount:
              constant_signal:
                value: 2
          parameters:
            interval: 1s
            label_key: user_id
            lazy_sync:
              enabled: true
              num_sync: 5
          selectors:
          - agent_group: default
            control_point: ingress
            service: service-graphql-demo-app.demoapp.svc.cluster.local
    evaluation_interval: 1s
  resources:
    flow_control:
      classifiers:
      - rego:
          labels:
            user_id:
              telemetry: true
          module: |
            package graphql_example
            import future.keywords.if
            query_ast := graphql.parse_query(input.parsed_body.query)
            claims := payload if {
              io.jwt.verify_hs256(bearer_token, "secret")
              [_, payload, _] := io.jwt.decode(bearer_token)
            }
            bearer_token := t if {
              v := input.attributes.request.http.headers.authorization
              startswith(v, "Bearer ")
              t := substring(v, count("Bearer "), -1)
            }
            queryIsCreateTodo if {
              some operation
              walk(query_ast, [_, operation])
              operation.Name == "createTodo"
              count(operation.SelectionSet) > 0
              some selection
              walk(operation.SelectionSet, [_, selection])
              selection.Name == "createTodo"
            }
            user_id := u if {
              queryIsCreateTodo
              u := claims.userID
            }
        selectors:
        - agent_group: default
          control_point: ingress
          service: service-graphql-demo-app.demoapp.svc.cluster.local
