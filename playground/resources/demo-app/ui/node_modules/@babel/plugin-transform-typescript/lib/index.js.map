{"version":3,"names":["_helperPluginUtils","require","_pluginSyntaxTypescript","_helperCreateClassFeaturesPlugin","_constEnum","_enum","_namespace","isInType","path","parent","type","parentPath","findParent","exportKind","GLOBAL_TYPES","WeakMap","NEEDS_EXPLICIT_ESM","PARSED_PARAMS","WeakSet","isGlobalType","scope","name","hasBinding","get","has","console","warn","registerGlobalType","programScope","add","safeRemove","ids","getBindingIdentifiers","Object","keys","binding","getBinding","identifier","removeBinding","opts","noScope","remove","_default","declare","api","types","t","template","assertVersion","JSX_PRAGMA_REGEX","allowNamespaces","jsxPragma","jsxPragmaFrag","onlyRemoveTypeImports","optimizeConstEnums","allowDeclareFields","classMemberVisitors","field","node","buildCodeFrameError","value","decorators","definite","isClassPrivateProperty","abstract","accessibility","readonly","optional","typeAnnotation","override","method","constructor","classPath","assigns","paramPath","param","parameter","id","isIdentifier","isAssignmentPattern","left","push","statement","ast","cloneNode","replaceWith","registerBinding","injectInitialization","inherits","syntaxTypeScript","visitor","Pattern","visitPattern","Identifier","RestElement","Program","enter","state","file","fileJsxPragma","fileJsxPragmaFrag","set","Set","comments","comment","jsxMatches","exec","pragmaImportName","split","pragmaFragImportName","stmt","isImportDeclaration","program","importKind","specifier","specifiers","local","importsToRemove","specifiersLength","length","isAllSpecifiersElided","size","isImportTypeOnly","programPath","importPath","isExportDeclaration","isVariableDeclaration","isTSTypeAliasDeclaration","isTSDeclareFunction","isTSInterfaceDeclaration","isClassDeclaration","isTSEnumDeclaration","isTSModuleDeclaration","exit","sourceType","pushContainer","exportNamedDeclaration","ExportNamedDeclaration","source","every","isExportSpecifier","ExportAllDeclaration","ExportSpecifier","ExportDefaultDeclaration","declaration","TSDeclareFunction","TSDeclareMethod","VariableDeclaration","VariableDeclarator","TSIndexSignature","ClassDeclaration","Class","typeParameters","superTypeParameters","implements","forEach","child","isClassMethod","isClassPrivateMethod","kind","isClassProperty","isClassAccessorProperty","Function","returnType","params","shift","TSModuleDeclaration","transpileNamespace","TSInterfaceDeclaration","TSTypeAliasDeclaration","TSEnumDeclaration","const","transpileConstEnum","transpileEnum","TSImportEqualsDeclaration","isTSExternalModuleReference","moduleReference","expression","variableDeclaration","variableDeclarator","entityNameToExpr","registerDeclaration","TSExportAssignment","TSTypeAssertion","tsSatisfiesExpression","isTSAsExpression","isTSSatisfiesExpression","tsInstantiationExpression","CallExpression","OptionalCallExpression","NewExpression","JSXOpeningElement","TaggedTemplateExpression","isTSQualifiedName","memberExpression","right","referencePaths","sourceFileHasJsx","traverse","JSXElement|JSXFragment","stop","exports","default"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport syntaxTypeScript from \"@babel/plugin-syntax-typescript\";\nimport type { types as t } from \"@babel/core\";\nimport { injectInitialization } from \"@babel/helper-create-class-features-plugin\";\nimport type { Binding, NodePath, Scope } from \"@babel/traverse\";\nimport type { Options as SyntaxOptions } from \"@babel/plugin-syntax-typescript\";\n\nimport transpileConstEnum from \"./const-enum\";\nimport type { NodePathConstEnum } from \"./const-enum\";\nimport transpileEnum from \"./enum\";\nimport transpileNamespace from \"./namespace\";\n\nfunction isInType(path: NodePath) {\n  switch (path.parent.type) {\n    case \"TSTypeReference\":\n    case \"TSExpressionWithTypeArguments\":\n    case \"TSTypeQuery\":\n      return true;\n    case \"TSQualifiedName\":\n      return (\n        // `import foo = ns.bar` is transformed to `var foo = ns.bar` and should not be removed\n        path.parentPath.findParent(path => path.type !== \"TSQualifiedName\")\n          .type !== \"TSImportEqualsDeclaration\"\n      );\n    case \"ExportSpecifier\":\n      return (\n        // export { type foo };\n        path.parent.exportKind === \"type\" ||\n        // export type { foo };\n        // @ts-expect-error: DeclareExportDeclaration does not have `exportKind`\n        (path.parentPath as NodePath<t.ExportSpecifier>).parent.exportKind ===\n          \"type\"\n      );\n    default:\n      return false;\n  }\n}\n\nconst GLOBAL_TYPES = new WeakMap<Scope, Set<string>>();\n// Track programs which contain imports/exports of values, so that we can include\n// empty exports for programs that do not, but were parsed as modules. This allows\n// tools to infer unambiguously that results are ESM.\nconst NEEDS_EXPLICIT_ESM = new WeakMap();\nconst PARSED_PARAMS = new WeakSet();\n\nfunction isGlobalType({ scope }: NodePath, name: string) {\n  if (scope.hasBinding(name)) return false;\n  if (GLOBAL_TYPES.get(scope).has(name)) return true;\n\n  console.warn(\n    `The exported identifier \"${name}\" is not declared in Babel's scope tracker\\n` +\n      `as a JavaScript value binding, and \"@babel/plugin-transform-typescript\"\\n` +\n      `never encountered it as a TypeScript type declaration.\\n` +\n      `It will be treated as a JavaScript value.\\n\\n` +\n      `This problem is likely caused by another plugin injecting\\n` +\n      `\"${name}\" without registering it in the scope tracker. If you are the author\\n` +\n      ` of that plugin, please use \"scope.registerDeclaration(declarationPath)\".`,\n  );\n\n  return false;\n}\n\nfunction registerGlobalType(programScope: Scope, name: string) {\n  GLOBAL_TYPES.get(programScope).add(name);\n}\n\n// A hack to avoid removing the impl Binding when we remove the declare NodePath\nfunction safeRemove(path: NodePath) {\n  const ids = path.getBindingIdentifiers();\n  for (const name of Object.keys(ids)) {\n    const binding = path.scope.getBinding(name);\n    if (binding && binding.identifier === ids[name]) {\n      binding.scope.removeBinding(name);\n    }\n  }\n  path.opts.noScope = true;\n  path.remove();\n  path.opts.noScope = false;\n}\n\nexport interface Options extends SyntaxOptions {\n  /** @default true */\n  allowNamespaces?: boolean;\n  /** @default \"React.createElement\" */\n  jsxPragma?: string;\n  /** @default \"React.Fragment\" */\n  jsxPragmaFrag?: string;\n  onlyRemoveTypeImports?: boolean;\n  optimizeConstEnums?: boolean;\n  allowDeclareFields?: boolean;\n}\n\ntype ExtraNodeProps = {\n  declare?: unknown;\n  accessibility?: unknown;\n  abstract?: unknown;\n  optional?: unknown;\n  override?: unknown;\n};\n\nexport default declare((api, opts: Options) => {\n  // `@babel/core` and `@babel/types` are bundled in some downstream libraries.\n  // Ref: https://github.com/babel/babel/issues/15089\n  const { types: t, template } = api;\n\n  api.assertVersion(7);\n\n  const JSX_PRAGMA_REGEX = /\\*?\\s*@jsx((?:Frag)?)\\s+([^\\s]+)/;\n\n  const {\n    allowNamespaces = true,\n    jsxPragma = \"React.createElement\",\n    jsxPragmaFrag = \"React.Fragment\",\n    onlyRemoveTypeImports = false,\n    optimizeConstEnums = false,\n  } = opts;\n\n  if (!process.env.BABEL_8_BREAKING) {\n    // eslint-disable-next-line no-var\n    var { allowDeclareFields = false } = opts;\n  }\n\n  const classMemberVisitors = {\n    field(\n      path: NodePath<\n        (t.ClassPrivateProperty | t.ClassProperty | t.ClassAccessorProperty) &\n          ExtraNodeProps\n      >,\n    ) {\n      const { node } = path;\n\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!allowDeclareFields && node.declare) {\n          throw path.buildCodeFrameError(\n            `The 'declare' modifier is only allowed when the 'allowDeclareFields' option of ` +\n              `@babel/plugin-transform-typescript or @babel/preset-typescript is enabled.`,\n          );\n        }\n      }\n      if (node.declare) {\n        if (node.value) {\n          throw path.buildCodeFrameError(\n            `Fields with the 'declare' modifier cannot be initialized here, but only in the constructor`,\n          );\n        }\n        if (!node.decorators) {\n          path.remove();\n        }\n      } else if (node.definite) {\n        if (node.value) {\n          throw path.buildCodeFrameError(\n            `Definitely assigned fields cannot be initialized here, but only in the constructor`,\n          );\n        }\n        if (!process.env.BABEL_8_BREAKING) {\n          // keep the definitely assigned fields only when `allowDeclareFields` (equivalent of\n          // Typescript's `useDefineForClassFields`) is true\n          if (\n            !allowDeclareFields &&\n            !node.decorators &&\n            !t.isClassPrivateProperty(node)\n          ) {\n            path.remove();\n          }\n        }\n      } else if (node.abstract) {\n        path.remove();\n      } else if (!process.env.BABEL_8_BREAKING) {\n        if (\n          !allowDeclareFields &&\n          !node.value &&\n          !node.decorators &&\n          !t.isClassPrivateProperty(node)\n        ) {\n          path.remove();\n        }\n      }\n\n      if (node.accessibility) node.accessibility = null;\n      if (node.abstract) node.abstract = null;\n      if (node.readonly) node.readonly = null;\n      if (node.optional) node.optional = null;\n      if (node.typeAnnotation) node.typeAnnotation = null;\n      if (node.definite) node.definite = null;\n      if (node.declare) node.declare = null;\n      if (node.override) node.override = null;\n    },\n    method({ node }: NodePath<t.ClassMethod | t.ClassPrivateMethod>) {\n      if (node.accessibility) node.accessibility = null;\n      if (node.abstract) node.abstract = null;\n      if (node.optional) node.optional = null;\n      if (node.override) node.override = null;\n\n      // Rest handled by Function visitor\n    },\n    constructor(path: NodePath<t.ClassMethod>, classPath: NodePath<t.Class>) {\n      if (path.node.accessibility) path.node.accessibility = null;\n      // Collects parameter properties so that we can add an assignment\n      // for each of them in the constructor body\n      //\n      // We use a WeakSet to ensure an assignment for a parameter\n      // property is only added once. This is necessary for cases like\n      // using `transform-classes`, which causes this visitor to run\n      // twice.\n      const assigns = [];\n      const { scope } = path;\n      for (const paramPath of path.get(\"params\")) {\n        const param = paramPath.node;\n        if (param.type === \"TSParameterProperty\") {\n          const parameter = param.parameter;\n          if (PARSED_PARAMS.has(parameter)) continue;\n          PARSED_PARAMS.add(parameter);\n          let id;\n          if (t.isIdentifier(parameter)) {\n            id = parameter;\n          } else if (\n            t.isAssignmentPattern(parameter) &&\n            t.isIdentifier(parameter.left)\n          ) {\n            id = parameter.left;\n          } else {\n            throw paramPath.buildCodeFrameError(\n              \"Parameter properties can not be destructuring patterns.\",\n            );\n          }\n          assigns.push(template.statement.ast`\n          this.${t.cloneNode(id)} = ${t.cloneNode(id)}`);\n\n          paramPath.replaceWith(paramPath.get(\"parameter\"));\n          scope.registerBinding(\"param\", paramPath);\n        }\n      }\n      injectInitialization(classPath, path, assigns);\n    },\n  };\n\n  return {\n    name: \"transform-typescript\",\n    inherits: syntaxTypeScript,\n\n    visitor: {\n      //\"Pattern\" alias doesn't include Identifier or RestElement.\n      Pattern: visitPattern,\n      Identifier: visitPattern,\n      RestElement: visitPattern,\n\n      Program: {\n        enter(path, state) {\n          const { file } = state;\n          let fileJsxPragma = null;\n          let fileJsxPragmaFrag = null;\n          const programScope = path.scope;\n\n          if (!GLOBAL_TYPES.has(programScope)) {\n            GLOBAL_TYPES.set(programScope, new Set());\n          }\n\n          if (file.ast.comments) {\n            for (const comment of file.ast.comments) {\n              const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);\n              if (jsxMatches) {\n                if (jsxMatches[1]) {\n                  // isFragment\n                  fileJsxPragmaFrag = jsxMatches[2];\n                } else {\n                  fileJsxPragma = jsxMatches[2];\n                }\n              }\n            }\n          }\n\n          let pragmaImportName = fileJsxPragma || jsxPragma;\n          if (pragmaImportName) {\n            [pragmaImportName] = pragmaImportName.split(\".\");\n          }\n\n          let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;\n          if (pragmaFragImportName) {\n            [pragmaFragImportName] = pragmaFragImportName.split(\".\");\n          }\n\n          // remove type imports\n          for (let stmt of path.get(\"body\")) {\n            if (stmt.isImportDeclaration()) {\n              if (!NEEDS_EXPLICIT_ESM.has(state.file.ast.program)) {\n                NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true);\n              }\n\n              if (stmt.node.importKind === \"type\") {\n                for (const specifier of stmt.node.specifiers) {\n                  registerGlobalType(programScope, specifier.local.name);\n                }\n                stmt.remove();\n                continue;\n              }\n\n              const importsToRemove: Set<NodePath<t.Node>> = new Set();\n              const specifiersLength = stmt.node.specifiers.length;\n              const isAllSpecifiersElided = () =>\n                specifiersLength > 0 &&\n                specifiersLength === importsToRemove.size;\n\n              for (const specifier of stmt.node.specifiers) {\n                if (\n                  specifier.type === \"ImportSpecifier\" &&\n                  specifier.importKind === \"type\"\n                ) {\n                  registerGlobalType(programScope, specifier.local.name);\n                  const binding = stmt.scope.getBinding(specifier.local.name);\n                  if (binding) {\n                    importsToRemove.add(binding.path);\n                  }\n                }\n              }\n\n              // If onlyRemoveTypeImports is `true`, only remove type-only imports\n              // and exports introduced in TypeScript 3.8.\n              if (onlyRemoveTypeImports) {\n                NEEDS_EXPLICIT_ESM.set(path.node, false);\n              } else {\n                // Note: this will allow both `import { } from \"m\"` and `import \"m\";`.\n                // In TypeScript, the former would be elided.\n                if (stmt.node.specifiers.length === 0) {\n                  NEEDS_EXPLICIT_ESM.set(path.node, false);\n                  continue;\n                }\n\n                for (const specifier of stmt.node.specifiers) {\n                  const binding = stmt.scope.getBinding(specifier.local.name);\n\n                  // The binding may not exist if the import node was explicitly\n                  // injected by another plugin. Currently core does not do a good job\n                  // of keeping scope bindings synchronized with the AST. For now we\n                  // just bail if there is no binding, since chances are good that if\n                  // the import statement was injected then it wasn't a typescript type\n                  // import anyway.\n                  if (binding && !importsToRemove.has(binding.path)) {\n                    if (\n                      isImportTypeOnly({\n                        binding,\n                        programPath: path,\n                        pragmaImportName,\n                        pragmaFragImportName,\n                      })\n                    ) {\n                      importsToRemove.add(binding.path);\n                    } else {\n                      NEEDS_EXPLICIT_ESM.set(path.node, false);\n                    }\n                  }\n                }\n              }\n\n              if (isAllSpecifiersElided() && !onlyRemoveTypeImports) {\n                stmt.remove();\n              } else {\n                for (const importPath of importsToRemove) {\n                  importPath.remove();\n                }\n              }\n\n              continue;\n            }\n\n            if (stmt.isExportDeclaration()) {\n              stmt = stmt.get(\"declaration\");\n            }\n\n            if (stmt.isVariableDeclaration({ declare: true })) {\n              for (const name of Object.keys(stmt.getBindingIdentifiers())) {\n                registerGlobalType(programScope, name);\n              }\n            } else if (\n              stmt.isTSTypeAliasDeclaration() ||\n              (stmt.isTSDeclareFunction() && stmt.get(\"id\").isIdentifier()) ||\n              stmt.isTSInterfaceDeclaration() ||\n              stmt.isClassDeclaration({ declare: true }) ||\n              stmt.isTSEnumDeclaration({ declare: true }) ||\n              (stmt.isTSModuleDeclaration({ declare: true }) &&\n                stmt.get(\"id\").isIdentifier())\n            ) {\n              registerGlobalType(\n                programScope,\n                (stmt.node.id as t.Identifier).name,\n              );\n            }\n          }\n        },\n        exit(path) {\n          if (\n            path.node.sourceType === \"module\" &&\n            NEEDS_EXPLICIT_ESM.get(path.node)\n          ) {\n            // If there are no remaining value exports, this file can no longer\n            // be inferred to be ESM. Leave behind an empty export declaration\n            // so it can be.\n            path.pushContainer(\"body\", t.exportNamedDeclaration());\n          }\n        },\n      },\n\n      ExportNamedDeclaration(path, state) {\n        if (!NEEDS_EXPLICIT_ESM.has(state.file.ast.program)) {\n          NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true);\n        }\n\n        if (path.node.exportKind === \"type\") {\n          path.remove();\n          return;\n        }\n\n        // remove export declaration that is filled with type-only specifiers\n        //   export { type A1, type A2 } from \"a\";\n        if (\n          path.node.source &&\n          path.node.specifiers.length > 0 &&\n          path.node.specifiers.every(\n            specifier =>\n              specifier.type === \"ExportSpecifier\" &&\n              specifier.exportKind === \"type\",\n          )\n        ) {\n          path.remove();\n          return;\n        }\n\n        // remove export declaration if it's exporting only types\n        // This logic is needed when exportKind is \"value\", because\n        // currently the \"type\" keyword is optional.\n        // TODO:\n        // Also, currently @babel/parser sets exportKind to \"value\" for\n        //   export interface A {}\n        //   etc.\n        if (\n          !path.node.source &&\n          path.node.specifiers.length > 0 &&\n          path.node.specifiers.every(\n            specifier =>\n              t.isExportSpecifier(specifier) &&\n              isGlobalType(path, specifier.local.name),\n          )\n        ) {\n          path.remove();\n          return;\n        }\n\n        NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);\n      },\n\n      ExportAllDeclaration(path) {\n        if (path.node.exportKind === \"type\") path.remove();\n      },\n\n      ExportSpecifier(path) {\n        // remove type exports\n        type Parent = t.ExportDeclaration & { source?: t.StringLiteral };\n        const parent = path.parent as Parent;\n        if (\n          (!parent.source && isGlobalType(path, path.node.local.name)) ||\n          path.node.exportKind === \"type\"\n        ) {\n          path.remove();\n        }\n      },\n\n      ExportDefaultDeclaration(path, state) {\n        if (!NEEDS_EXPLICIT_ESM.has(state.file.ast.program)) {\n          NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true);\n        }\n\n        // remove whole declaration if it's exporting a TS type\n        if (\n          t.isIdentifier(path.node.declaration) &&\n          isGlobalType(path, path.node.declaration.name)\n        ) {\n          path.remove();\n\n          return;\n        }\n\n        NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);\n      },\n\n      TSDeclareFunction(path) {\n        safeRemove(path);\n      },\n\n      TSDeclareMethod(path) {\n        safeRemove(path);\n      },\n\n      VariableDeclaration(path) {\n        if (path.node.declare) {\n          safeRemove(path);\n        }\n      },\n\n      VariableDeclarator({ node }) {\n        if (node.definite) node.definite = null;\n      },\n\n      TSIndexSignature(path) {\n        path.remove();\n      },\n\n      ClassDeclaration(path) {\n        const { node } = path;\n        if (node.declare) {\n          safeRemove(path);\n        }\n      },\n\n      Class(path) {\n        const { node }: { node: typeof path.node & ExtraNodeProps } = path;\n\n        if (node.typeParameters) node.typeParameters = null;\n        if (node.superTypeParameters) node.superTypeParameters = null;\n        if (node.implements) node.implements = null;\n        if (node.abstract) node.abstract = null;\n\n        // Similar to the logic in `transform-flow-strip-types`, we need to\n        // handle `TSParameterProperty` and `ClassProperty` here because the\n        // class transform would transform the class, causing more specific\n        // visitors to not run.\n        path.get(\"body.body\").forEach(child => {\n          if (child.isClassMethod() || child.isClassPrivateMethod()) {\n            if (child.node.kind === \"constructor\") {\n              classMemberVisitors.constructor(\n                // @ts-expect-error A constructor must not be a private method\n                child,\n                path,\n              );\n            } else {\n              classMemberVisitors.method(child);\n            }\n          } else if (\n            child.isClassProperty() ||\n            child.isClassPrivateProperty() ||\n            child.isClassAccessorProperty()\n          ) {\n            classMemberVisitors.field(child);\n          }\n        });\n      },\n\n      Function(path) {\n        const { node } = path;\n        if (node.typeParameters) node.typeParameters = null;\n        if (node.returnType) node.returnType = null;\n\n        const params = node.params;\n        if (params.length > 0 && t.isIdentifier(params[0], { name: \"this\" })) {\n          params.shift();\n        }\n      },\n\n      TSModuleDeclaration(path) {\n        transpileNamespace(path, allowNamespaces);\n      },\n\n      TSInterfaceDeclaration(path) {\n        path.remove();\n      },\n\n      TSTypeAliasDeclaration(path) {\n        path.remove();\n      },\n\n      TSEnumDeclaration(path) {\n        if (optimizeConstEnums && path.node.const) {\n          transpileConstEnum(path as NodePathConstEnum, t);\n        } else {\n          transpileEnum(path, t);\n        }\n      },\n\n      TSImportEqualsDeclaration(path: NodePath<t.TSImportEqualsDeclaration>) {\n        if (t.isTSExternalModuleReference(path.node.moduleReference)) {\n          // import alias = require('foo');\n          throw path.buildCodeFrameError(\n            `\\`import ${path.node.id.name} = require('${path.node.moduleReference.expression.value}')\\` ` +\n              \"is not supported by @babel/plugin-transform-typescript\\n\" +\n              \"Please consider using \" +\n              `\\`import ${path.node.id.name} from '${path.node.moduleReference.expression.value}';\\` alongside ` +\n              \"Typescript's --allowSyntheticDefaultImports option.\",\n          );\n        }\n\n        // import alias = Namespace;\n        path.replaceWith(\n          t.variableDeclaration(\"var\", [\n            t.variableDeclarator(\n              path.node.id,\n              entityNameToExpr(path.node.moduleReference),\n            ),\n          ]),\n        );\n        path.scope.registerDeclaration(path);\n      },\n\n      TSExportAssignment(path) {\n        throw path.buildCodeFrameError(\n          \"`export =` is not supported by @babel/plugin-transform-typescript\\n\" +\n            \"Please consider using `export <value>;`.\",\n        );\n      },\n\n      TSTypeAssertion(path) {\n        path.replaceWith(path.node.expression);\n      },\n\n      [`TSAsExpression${\n        // Added in Babel 7.20.0\n        t.tsSatisfiesExpression ? \"|TSSatisfiesExpression\" : \"\"\n      }`](path: NodePath<t.TSAsExpression | t.TSSatisfiesExpression>) {\n        let { node }: { node: t.Expression } = path;\n        do {\n          node = node.expression;\n        } while (t.isTSAsExpression(node) || t.isTSSatisfiesExpression?.(node));\n        path.replaceWith(node);\n      },\n\n      [process.env.BABEL_8_BREAKING\n        ? \"TSNonNullExpression|TSInstantiationExpression\"\n        : /* This has been introduced in Babel 7.18.0\n             We use api.types.* and not t.* for feature detection,\n             because the Babel version that is running this plugin\n             (where we check if the visitor is valid) might be different\n             from the Babel version that we resolve with `import \"@babel/core\"`.\n             This happens, for example, with Next.js that bundled `@babel/core`\n             but allows loading unbundled plugin (which cannot obviously import\n             the bundled `@babel/core` version).\n           */\n        api.types.tsInstantiationExpression\n        ? \"TSNonNullExpression|TSInstantiationExpression\"\n        : \"TSNonNullExpression\"](\n        path: NodePath<t.TSNonNullExpression | t.TSExpressionWithTypeArguments>,\n      ) {\n        path.replaceWith(path.node.expression);\n      },\n\n      CallExpression(path) {\n        path.node.typeParameters = null;\n      },\n\n      OptionalCallExpression(path) {\n        path.node.typeParameters = null;\n      },\n\n      NewExpression(path) {\n        path.node.typeParameters = null;\n      },\n\n      JSXOpeningElement(path) {\n        path.node.typeParameters = null;\n      },\n\n      TaggedTemplateExpression(path) {\n        path.node.typeParameters = null;\n      },\n    },\n  };\n\n  function entityNameToExpr(node: t.TSEntityName): t.Expression {\n    if (t.isTSQualifiedName(node)) {\n      return t.memberExpression(entityNameToExpr(node.left), node.right);\n    }\n\n    return node;\n  }\n\n  function visitPattern({\n    node,\n  }: NodePath<t.Identifier | t.Pattern | t.RestElement>) {\n    if (node.typeAnnotation) node.typeAnnotation = null;\n    if (t.isIdentifier(node) && node.optional) node.optional = null;\n    // 'access' and 'readonly' are only for parameter properties, so constructor visitor will handle them.\n  }\n\n  function isImportTypeOnly({\n    binding,\n    programPath,\n    pragmaImportName,\n    pragmaFragImportName,\n  }: {\n    binding: Binding;\n    programPath: NodePath<t.Program>;\n    pragmaImportName: string;\n    pragmaFragImportName: string;\n  }) {\n    for (const path of binding.referencePaths) {\n      if (!isInType(path)) {\n        return false;\n      }\n    }\n\n    if (\n      binding.identifier.name !== pragmaImportName &&\n      binding.identifier.name !== pragmaFragImportName\n    ) {\n      return true;\n    }\n\n    // \"React\" or the JSX pragma is referenced as a value if there are any JSX elements/fragments in the code.\n    let sourceFileHasJsx = false;\n    programPath.traverse({\n      \"JSXElement|JSXFragment\"(path) {\n        sourceFileHasJsx = true;\n        path.stop();\n      },\n    });\n    return !sourceFileHasJsx;\n  }\n});\n"],"mappings":"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"}
