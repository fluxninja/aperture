{"version":3,"file":"index.js","sources":["../src/util/location.ts","../src/parse-error/credentials.ts","../src/parse-error/module-errors.ts","../src/parse-error/to-node-description.ts","../src/parse-error/standard-errors.ts","../src/parse-error/strict-mode-errors.ts","../src/parse-error/pipeline-operator-errors.ts","../src/parse-error.ts","../src/plugins/estree.ts","../src/tokenizer/context.ts","../src/tokenizer/types.ts","../../babel-helper-validator-identifier/src/identifier.ts","../../babel-helper-validator-identifier/src/keyword.ts","../src/util/identifier.ts","../src/util/scopeflags.ts","../src/util/scope.ts","../src/plugins/flow/scope.ts","../src/parser/base.ts","../src/parser/comments.ts","../src/util/whitespace.ts","../src/tokenizer/state.ts","../../babel-helper-string-parser/src/index.ts","../src/tokenizer/index.ts","../src/util/class-scope.ts","../src/util/expression-scope.ts","../src/util/production-parameter.ts","../src/parser/util.ts","../src/parser/node.ts","../src/plugins/flow/index.ts","../src/plugins/jsx/xhtml.ts","../src/plugins/jsx/index.ts","../src/plugins/typescript/scope.ts","../src/parser/lval.ts","../src/plugins/typescript/index.ts","../src/plugins/placeholders.ts","../src/plugins/v8intrinsic.ts","../src/plugin-utils.ts","../src/options.ts","../src/parser/expression.ts","../src/parser/statement.ts","../src/parser/index.ts","../src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ParenthesizedExpression\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.\",\n  DecoratorsBeforeAfterExport:\n    \"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level or inside a block.\",\n  SloppyFunctionAnnexB:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparenthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparenthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import type { TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b0000000_0000_01,\n             BIND_KIND_TYPE             = 0b0000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b0000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b0000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b0000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b0000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b00000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b00000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b00000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b00001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b00010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b00100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b01000000_0000_00,\n             // Whether \"let\" should be allowed in bound names in sloppy mode\n             BIND_FLAGS_NO_LET_IN_LEXICAL = 0b10000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS|BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_CATCH_PARAM   = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM|BIND_FLAGS_NO_LET_IN_LEXICAL,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE          ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE          ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                        ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT     ,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        // Annex B.3.4\n        // https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/g;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport type { ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return process.env.BABEL_8_BREAKING\n    ? { pos, str: out, firstInvalidLoc, lineStart, curLine }\n    : {\n        pos,\n        str: out,\n        firstInvalidLoc,\n        lineStart,\n        curLine,\n        containsInvalid: !!firstInvalidLoc,\n      };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport type { TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n  skipWhiteSpaceInLine,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  /**\n   * Similar to nextToken, but it will stop at line break when it is seen before the next token\n   *\n   * @returns {number} position of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  nextTokenInLineStart(): number {\n    return this.nextTokenInLineStartSince(this.state.pos);\n  }\n\n  nextTokenInLineStartSince(pos: number): number {\n    skipWhiteSpaceInLine.lastIndex = pos;\n    return skipWhiteSpaceInLine.test(this.input)\n      ? skipWhiteSpaceInLine.lastIndex\n      : pos;\n  }\n\n  /**\n   * Similar to lookaheadCharCode, but it will return the char code of line break if it is\n   * seen before the next token\n   *\n   * @returns {number} char code of the next token start or line break, whichever is seen first.\n   * @memberof Tokenizer\n   */\n  lookaheadInLineCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenInLineStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related properties.\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (\n            ch === charCodes.dash &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (\n            ch === charCodes.lessThan &&\n            !this.inModule &&\n            this.options.annexB\n          ) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","import type { Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(node: Undone<N.FlowDeclare>, isClass: boolean): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (isClass) {\n        node.implements = [];\n        node.mixins = [];\n\n        if (this.eatContextual(tt._mixins)) {\n          do {\n            node.mixins.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n\n        if (this.eatContextual(tt._implements)) {\n          do {\n            node.implements.push(this.flowParseInterfaceExtends());\n          } while (this.eat(tt.comma));\n        }\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node, /* isClass */ false);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n          this.unexpected();\n          return;\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n        return;\n      }\n\n      super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const decl = super.parseExport(node, decorators);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          this.finishOp(tt.questionDot, 2);\n        } else {\n          // allow double nullable types in Flow: ??string\n          this.finishOp(tt.question, 1);\n        }\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        this.readIterator();\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      isConstructor: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node, false);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport type { Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                this.finishToken(tt.jsxTagStart);\n              } else {\n                super.getTokenFromCode(ch);\n              }\n              return;\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            this.finishToken(tt.jsxText, out);\n            return;\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      this.finishToken(tt.jsxName, this.input.slice(start, this.state.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        this.jsxReadToken();\n        return;\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          this.jsxReadWord();\n          return;\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          this.finishToken(tt.jsxTagEnd);\n          return;\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          this.jsxReadString(code);\n          return;\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        this.finishToken(tt.jsxTagStart);\n        return;\n      }\n\n      super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_FLAGS_NO_LET_IN_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport const enum ParseBindingListFlags {\n  ALLOW_EMPTY = 1 << 0,\n  IS_FUNCTION_PARAMS = 1 << 1,\n  IS_CONSTRUCTOR_PARAMS = 1 << 2,\n}\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParameterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          ParseBindingListFlags.ALLOW_EMPTY,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: (typeof charCodes)[keyof typeof charCodes],\n    flags: ParseBindingListFlags,\n  ): Array<Pattern | TSParameterProperty> {\n    const allowEmpty = flags & ParseBindingListFlags.ALLOW_EMPTY;\n\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(\n          this.parseAssignableListItemTypes(this.parseRestBinding(), flags),\n        );\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(flags, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    flags: ParseBindingListFlags,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left, flags);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(\n    param: Pattern,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flags: ParseBindingListFlags,\n  ): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus its descendants must be subsequently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, { at: expression, ancestor });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      type === \"ArrayPattern\" ||\n      type === \"ObjectPattern\" ||\n      type === \"ParenthesizedExpression\"\n        ? ({ type } as const)\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (bindingType & BIND_FLAGS_NO_LET_IN_LEXICAL && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: (typeof charCodes)[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\nimport { ParseBindingListFlags } from \"../../parser/lval\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | \"const\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TupleOptionalAfterType:\n    \"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(value: string): N.TsKeywordTypeType | undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (\n        !tokenIsIdentifier(this.state.type) &&\n        this.state.type !== tt._in &&\n        this.state.type !== tt._const\n      ) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers<N extends ModifierBase>(\n      {\n        allowedModifiers,\n        disallowedModifiers,\n        stopOnStartOfClassStaticBlock,\n        errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n      }: {\n        allowedModifiers: readonly TsModifier[];\n        disallowedModifiers?: TsModifier[];\n        stopOnStartOfClassStaticBlock?: boolean;\n        errorTemplate?: typeof TSErrors.InvalidModifierOnTypeMember;\n      },\n      modified: N,\n    ): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\n        \"const\",\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseConstModifier = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"const\"],\n      // for better error recovery\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n    });\n\n    tsParseInOutConstModifiers = this.tsParseModifiers.bind(this, {\n      allowedModifiers: [\"in\", \"out\", \"const\"],\n      disallowedModifiers: [\n        \"public\",\n        \"private\",\n        \"protected\",\n        \"readonly\",\n        \"declare\",\n        \"abstract\",\n        \"override\",\n      ],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n    });\n\n    tsParseTypeParameter(\n      parseModifiers: (node: Undone<N.TsTypeParameter>) => void,\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers: (node: N.TsTypeParameter) => void,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(parseModifiers: (node: N.TsTypeParameter) => void) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      const list = super.parseBindingList(\n        tt.parenR,\n        charCodes.rightParenthesis,\n        ParseBindingListFlags.IS_FUNCTION_PARAMS,\n      );\n      for (const pattern of list) {\n        const { type } = pattern;\n        if (type === \"AssignmentPattern\" || type === \"TSParameterProperty\") {\n          this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n            at: pattern,\n            type,\n          });\n        }\n      }\n      return list as Exclude<\n        (typeof list)[0],\n        N.AssignmentPattern | N.TSParameterProperty\n      >[];\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\"readonly\"],\n          disallowedModifiers: [\n            \"declare\",\n            \"abstract\",\n            \"private\",\n            \"protected\",\n            \"public\",\n            \"static\",\n            \"override\",\n          ],\n        },\n        node,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsNamedTupleMember | N.TsType {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n\n      let labeled: boolean;\n      let label: N.Identifier;\n      let optional: boolean;\n      let type: N.TsNamedTupleMember | N.TsType;\n\n      const isWord = tokenIsKeywordOrIdentifier(this.state.type);\n      const chAfterWord = isWord ? this.lookaheadCharCode() : null;\n      if (chAfterWord === charCodes.colon) {\n        labeled = true;\n        optional = false;\n        label = this.parseIdentifier(true);\n        this.expect(tt.colon);\n        type = this.tsParseType();\n      } else if (chAfterWord === charCodes.questionMark) {\n        optional = true;\n        const startLoc = this.state.startLoc;\n        const wordName = this.state.value;\n        const typeOrLabel = this.tsParseNonArrayType();\n\n        if (this.lookaheadCharCode() === charCodes.colon) {\n          labeled = true;\n          label = this.createIdentifier(\n            this.startNodeAt<N.Identifier>(startLoc),\n            wordName,\n          );\n          this.expect(tt.question);\n          this.expect(tt.colon);\n          type = this.tsParseType();\n        } else {\n          labeled = false;\n          type = typeOrLabel;\n          this.expect(tt.question);\n        }\n      } else {\n        type = this.tsParseType();\n        optional = this.eat(tt.question);\n        // In this case (labeled === true) could be only in invalid label.\n        // E.g. [x.y:type]\n        // An error is raised while processing node.\n        labeled = this.eat(tt.colon);\n      }\n\n      if (labeled) {\n        let labeledNode: Undone<N.TsNamedTupleMember>;\n        if (label) {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(label);\n          labeledNode.optional = optional;\n          labeledNode.label = label;\n          labeledNode.elementType = type;\n\n          if (this.eat(tt.question)) {\n            labeledNode.optional = true;\n            this.raise(TSErrors.TupleOptionalAfterType, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n        } else {\n          labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n          labeledNode.optional = optional;\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n          labeledNode.elementType = this.tsParseType();\n        }\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      switch (this.state.type) {\n        case tt.num:\n        case tt.bigint:\n        case tt.string:\n        case tt._true:\n        case tt._false:\n          // For compatibility to estree we cannot call parseLiteral directly here\n          // @ts-expect-error refine typings\n          node.literal = super.parseExprAtom();\n          break;\n        default:\n          this.unexpected();\n      }\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            ParseBindingListFlags.ALLOW_EMPTY,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined {\n      if (this.match(tt.colon)) {\n        return this.tsParseTypeAnnotation();\n      }\n    }\n\n    tsTryParseType(): N.TsType | undefined {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers,\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | undefined {\n      if (this.match(token)) {\n        return this.tsNextThenParseType();\n      }\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsInType(() => {\n        this.expect(token);\n        return this.tsParseType();\n      });\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsInType(() => {\n        this.next();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      }\n      this.state = state;\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let startType = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        startType = tt._var;\n        kind = \"let\";\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        switch (startType) {\n          case tt._function:\n            nany.declare = true;\n            return super.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* isHangingDeclaration */ false,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to know how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._enum:\n            return this.tsParseEnumDeclaration(nany, { declare: true });\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          case tt._const:\n          case tt._var:\n            if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n              nany.declare = true;\n              return this.parseVarStatement(\n                nany,\n                kind || this.state.value,\n                true,\n              );\n            }\n\n            // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n            this.expect(tt._const);\n            return this.tsParseEnumDeclaration(nany, {\n              const: true,\n              declare: true,\n            });\n          case tt._interface: {\n            const result = this.tsParseInterfaceDeclaration(nany, {\n              declare: true,\n            });\n            if (result) return result;\n          }\n          // fallthrough\n          default:\n            if (tokenIsIdentifier(startType)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n                /* decorators */ null,\n              );\n            }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n          }\n          return declaration;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined {\n      if (!this.match(tt.lt)) return;\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters(\n            this.tsParseConstModifier,\n          );\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) return;\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) return;\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      } else if (!this.state.inType && this.curContext() === tc.brace) {\n        // rescan `>` when we are no longer in type context and JSX parsing context\n        // since it was tokenized when `inType` is `true`.\n        this.reScan_lt_gt();\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      flags: ParseBindingListFlags,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      const modified: ModifierBase = {};\n      this.tsParseModifiers(\n        {\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        },\n        modified,\n      );\n      const accessibility = modified.accessibility;\n      const override = modified.override;\n      const readonly = modified.readonly;\n      if (\n        !(flags & ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS) &&\n        (accessibility || readonly || override)\n      ) {\n        this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left, flags);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    tsDisallowOptionalPattern(node: Undone<N.Function>) {\n      for (const param of node.params) {\n        if (\n          param.type !== \"Identifier\" &&\n          (param as any).optional &&\n          !this.state.isAmbientContext\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n      }\n    }\n\n    setArrowFunctionParameters(\n      node: Undone<N.ArrowFunctionExpression>,\n      params: N.Expression[],\n      trailingCommaLoc?: Position | null,\n    ): void {\n      super.setArrowFunctionParameters(node, params, trailingCommaLoc);\n      this.tsDisallowOptionalPattern(node);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n      this.tsDisallowOptionalPattern(node);\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodiless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        node.exportKind = \"value\";\n\n        if (this.isContextual(tt._type)) {\n          const ch = this.lookaheadCharCode();\n          if (ch === charCodes.leftCurlyBrace || ch === charCodes.asterisk) {\n            this.next();\n            node.exportKind = \"type\";\n          }\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers(\n        {\n          allowedModifiers: modifiers,\n          disallowedModifiers: [\"in\", \"out\"],\n          stopOnStartOfClassStaticBlock: true,\n          errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n        },\n        member,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutConstModifiers,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, { at: node });\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, isConstructor: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseConstModifier,\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, isConstructor);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters(this.tsParseConstModifier);\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.params[0].constraint &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      }\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(\n      param: N.Pattern,\n      flags: ParseBindingListFlags,\n    ) {\n      if (!(flags & ParseBindingListFlags.IS_FUNCTION_PARAMS)) return param;\n\n      if (this.eat(tt.question)) {\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      if (this.state.type === tt._this) {\n        return this.parseIdentifier(/* liberal */ true);\n      }\n      return super.parseBindingAtom();\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: (typeof charCodes)[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      }\n      return super.checkCommaAfterRest(close);\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          this.finishOp(tt.gt, 1);\n          return;\n        }\n        if (code === charCodes.lessThan) {\n          this.finishOp(tt.lt, 1);\n          return;\n        }\n      }\n      super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initialized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  }\n  return (\n    expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\"\n  );\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression as N.UnaryExpression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\" || expression.computed) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        this.finishOp(tt.placeholder, 2);\n      } else {\n        super.getTokenFromCode(code);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrSloppyAnnexBFunctionDeclaration();\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\n        \"'decoratorsBeforeExport' must be a boolean, if specified.\",\n      );\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowNewTargetOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n  annexB: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, new.target outside a function or class is not\n  // considered an error.\n  allowNewTargetOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n  // When enabled, the parser will support Annex B syntax.\n  // https://tc39.es/ecma262/#sec-additional-ecmascript-features-for-web-browsers\n  annexB: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  if (opts && opts.annexB != null && opts.annexB !== false) {\n    throw new Error(\"The `annexB` option can only be set to `false`.\");\n  }\n\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(node: N.Function, isConstructor?: boolean): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls) {\n        this.raise(Errors.OptionalChainingNoNew, {\n          at: this.state.startLoc,\n        });\n        if (this.lookaheadCharCode() === charCodes.leftParenthesis) {\n          // stop at `?.` when parsing `new a?.()`\n          state.stop = true;\n          return base;\n        }\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        }\n        this.unexpected();\n        break;\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n        } else {\n          this.unexpected();\n        }\n        break;\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadInLineCharCode() === charCodes.leftCurlyBrace\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (\n        !this.scope.inNonArrowFunction &&\n        !this.scope.inClass &&\n        !this.options.allowNewTargetOutsideFunction\n      ) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, isConstructor);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been guarded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n      return;\n    } else if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n  BIND_CATCH_PARAM,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\nimport { ParseBindingListFlags } from \"./lval\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identifier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration in the same line so that it should be interpreted as\n   * a keyword.\n   */\n  hasInLineFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenInLineStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const { type, containsEsc } = this.lookahead();\n    if (type === tt._of && !containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else if (tokenIsIdentifier(type) && !this.hasFollowingLineBreak()) {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        // This function is actually also used to parse StatementItems,\n        // which with Annex B enabled allows labeled functions.\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        (!this.options.annexB || this.state.strict\n          ? 0\n          : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  parseStatementOrSloppyAnnexBFunctionDeclaration(\n    this: Parser,\n    allowLabeledFunction: boolean = false,\n  ) {\n    let flags: ParseStatementFlag = ParseStatementFlag.StatementOnly;\n    if (this.options.annexB && !this.state.strict) {\n      flags |= ParseStatementFlag.AllowFunctionDeclaration;\n      if (allowLabeledFunction) {\n        flags |= ParseStatementFlag.AllowLabeledFunction;\n      }\n    }\n    return this.parseStatementLike(flags);\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowFunctionDeclaration) {\n          this.raise(\n            this.state.strict\n              ? Errors.StrictFunction\n              : this.options.annexB\n              ? Errors.SloppyFunctionAnnexB\n              : Errors.SloppyFunction,\n            { at: this.state.startLoc },\n          );\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.state.containsEsc ||\n          !this.hasInLineFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc,\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") !== false\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      if (classNode.decorators && classNode.decorators.length > 0) {\n        // Note: decorators attachment is only attempred multiple times\n        // when the class is part of an export declaration.\n        if (\n          typeof this.getPluginOption(\n            \"decorators\",\n            \"decoratorsBeforeExport\",\n          ) !== \"boolean\"\n        ) {\n          // If `decoratorsBeforeExport` was set to `true` or `false`, we\n          // already threw an error about decorators not being in a valid\n          // position.\n          this.raise(Errors.DecoratorsBeforeAfterExport, {\n            at: classNode.decorators[0],\n          });\n        }\n        classNode.decorators.unshift(...maybeDecorators);\n      } else {\n        classNode.decorators = maybeDecorators;\n      }\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const startsWithUsing = this.isContextual(tt._using);\n    const isLetOrUsing =\n      (startsWithLet && this.hasFollowingBindingAtom()) ||\n      (startsWithUsing && this.startsUsingForOf());\n    if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      const isForIn = this.match(tt._in);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, { at: init });\n      }\n      if (\n        (isForIn || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrSloppyAnnexBFunctionDeclaration();\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrSloppyAnnexBFunctionDeclaration()\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    this.scope.enter(\n      this.options.annexB && param.type === \"Identifier\"\n        ? SCOPE_SIMPLE_CATCH\n        : 0,\n    );\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_CATCH_PARAM,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrSloppyAnnexBFunctionDeclaration(true)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        !this.options.annexB ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc,\n        });\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* isConstructor */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    isConstructor?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      ParseBindingListFlags.IS_FUNCTION_PARAMS |\n        (isConstructor ? ParseBindingListFlags.IS_CONSTRUCTOR_PARAMS : 0),\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      !this.options.annexB || this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) {\n      this.unexpected(null, tt.braceL);\n    }\n\n    if (hasNamespace && parseAfterNamespace) {\n      this.unexpected(null, tt._from);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (\n          this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\") === true\n        ) {\n          this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  parseMaybeImportReflection(node: Undone<N.ImportDeclaration>) {\n    let isImportReflection = false;\n    if (this.isContextual(tt._module)) {\n      const lookahead = this.lookahead();\n      const nextType = lookahead.type;\n      if (tokenIsIdentifier(nextType)) {\n        if (nextType !== tt._from) {\n          // import module x\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(\n            this.nextTokenStartSince(lookahead.end),\n          );\n          if (nextNextTokenFirstChar === charCodes.lowercaseF) {\n            // import module from from ...\n            isImportReflection = true;\n          }\n        }\n      } else if (nextType !== tt.comma) {\n        // import module { x } ...\n        // import module \"foo\"\n        // They are invalid, we will continue parsing and throw\n        // a recoverable error later\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next(); // eat tt._module;\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      this.parseMaybeImportReflection(node);\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      in: { type },\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries AssertEntries}\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import type { Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","assign","split","instance","defineProperty","configurable","ModuleErrors","ImportMetaOutsideModule","message","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","StandardErrors","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorsBeforeAfterExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","SloppyFunctionAnnexB","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictModeErrors","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipelineOperatorErrors","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","_ref","toMessage","_objectWithoutPropertiesLoose","_excluded","loc","details","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","_ref2","rest","_excluded2","Errors","toUnenumerable","toESTreeLocation","node","estree","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","args","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","_node$arguments$","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","_declaration$decorato","declaration","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_FLAGS_NO_LET_IN_LEXICAL","BIND_CLASS","BIND_LEXICAL","BIND_CATCH_PARAM","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStart","ct","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","nextTokenInLineStart","nextTokenInLineStartSince","lookaheadInLineCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","annexB","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","flowParseInterfaceExtends","implements","mixins","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","_startLoc","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","unwrapParenthesizedExpression","LValParser","_node$extra3","_node$extra2","operator","arg","checkToRestConversion","elt","element","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","ParseBindingListFlags","parseObjectLike","closeCharCode","allowEmpty","elts","checkCommaAfterRest","parseDecorator","parseAssignableListItem","parseBindingRestProperty","parseBindingProperty","parsePropertyName","_left","ObjectProperty","checkLVal","in","checkClashes","hasParenthesizedAncestor","_expression$extra","checkIdentifier","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","declareNameFromIdentifier","identifier","allowPattern","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TupleOptionalAfterType","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","typescript","TypeScriptParserMixin","tsParseInOutModifiers","tsParseModifiers","bind","allowedModifiers","disallowedModifiers","errorTemplate","tsParseConstModifier","tsParseInOutConstModifiers","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","modified","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","checkType","isLabeled","labeled","isWord","chAfterWord","wordName","typeOrLabel","tsParseNonArrayType","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","startType","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","reScan_lt_gt","tsIsDeclarationStart","override","pp","parameter","isSimpleParameter","tsDisallowOptionalPattern","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartLoc","minPrec","isSatisfies","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","_typeCast","_typeCast2","typeCast","_typeParameters","reportReservedArrowTypeParam","trailingComma","sawUnary","toAssignableParenthesizedExpression","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","placeholders","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrSloppyAnnexBFunctionDeclaration","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowNewTargetOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","_resultError$loc","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasInLineFollowingBindingIdentifier","startsUsingForOf","parseModuleItem","ParseStatementFlag","parseStatementListItem","allowLabeledFunction","parseStatement","starttype","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithUsing","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","ParseFunctionFlag","discriminant","cases","cur","sawDefault","isCase","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","_declaration$extra","nodes","surrogate","isJSONModuleImport","_node$assertions","nonDefaultNamedSpecifier","parseMaybeImportReflection","isImportReflection","nextNextTokenFirstChar","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC;AAEj+C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC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"}
