{"version":3,"names":["_helperPluginUtils","require","_core","_noHelperImplementation","buildLoopBody","path","declar","newBody","block","bodyPath","get","body","node","t","isBlockStatement","Object","keys","getBindingIdentifiers","some","id","scope","hasOwnBinding","blockStatement","toBlock","unshift","_default","declare","api","options","_options$assumeArray","_options$allowArrayLi","_api$assumption","assertVersion","assumeArray","allowArrayLike","loose","Error","test","version","iterableIsArray","assumption","arrayLikeIsIterable","skipIteratorClosing","name","visitor","ForOfStatement","left","right","await","isAwait","i","generateUidIdentifier","array","maybeGenerateMemoised","inits","variableDeclarator","numericLiteral","push","item","memberExpression","cloneNode","assignment","isVariableDeclaration","declarations","init","expressionStatement","assignmentExpression","replaceWith","forStatement","variableDeclaration","binaryExpression","identifier","updateExpression","buildForOfArray","template","buildForOfNoIteratorClosing","statements","buildForOf","builder","build","helper","getContainer","nodes","_ForOfStatementArray","generateUidIdentifierBasedOnNode","iterationKey","loop","BODY","KEY","NAME","ARR","inherits","iterationValue","state","isArrayExpression","isGenericType","isArrayTypeAnnotation","getTypeAnnotation","availableHelper","transformWithoutHelper","parent","stepKey","generateUid","stepValue","kind","CREATE_ITERATOR_HELPER","addHelper","ITERATOR_HELPER","ARRAY_LIKE_IS_ITERABLE","booleanLiteral","STEP_KEY","OBJECT","container","isLabeledStatement","labeledStatement","label","parentPath","replaceWithMultiple","skip","exports","default"],"sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { template, types as t } from \"@babel/core\";\nimport type { NodePath } from \"@babel/traverse\";\n\nimport transformWithoutHelper from \"./no-helper-implementation\";\n\nexport interface Options {\n  allowArrayLike?: boolean;\n  assumeArray?: boolean;\n  loose?: boolean;\n}\n\nfunction buildLoopBody(\n  path: NodePath<t.ForXStatement>,\n  declar: t.Statement,\n  newBody?: t.Statement | t.Expression,\n) {\n  let block;\n  const bodyPath = path.get(\"body\");\n  const body = newBody ?? bodyPath.node;\n  if (\n    t.isBlockStatement(body) &&\n    Object.keys(path.getBindingIdentifiers()).some(id =>\n      bodyPath.scope.hasOwnBinding(id),\n    )\n  ) {\n    block = t.blockStatement([declar, body]);\n  } else {\n    block = t.toBlock(body);\n    block.body.unshift(declar);\n  }\n  return block;\n}\n\nexport default declare((api, options: Options) => {\n  api.assertVersion(7);\n\n  {\n    const { assumeArray, allowArrayLike, loose } = options;\n\n    if (loose === true && assumeArray === true) {\n      throw new Error(\n        `The loose and assumeArray options cannot be used together in @babel/plugin-transform-for-of`,\n      );\n    }\n\n    if (assumeArray === true && allowArrayLike === true) {\n      throw new Error(\n        `The assumeArray and allowArrayLike options cannot be used together in @babel/plugin-transform-for-of`,\n      );\n    }\n\n    if (!process.env.BABEL_8_BREAKING) {\n      // TODO: Remove in Babel 8\n      if (allowArrayLike && /^7\\.\\d\\./.test(api.version)) {\n        throw new Error(\n          `The allowArrayLike is only supported when using @babel/core@^7.10.0`,\n        );\n      }\n    }\n  }\n\n  const iterableIsArray =\n    options.assumeArray ??\n    // Loose mode is not compatible with 'assumeArray', so we shouldn't read\n    // 'iterableIsArray' if 'loose' is true.\n    (!options.loose && api.assumption(\"iterableIsArray\"));\n\n  const arrayLikeIsIterable =\n    options.allowArrayLike ?? api.assumption(\"arrayLikeIsIterable\");\n\n  const skipIteratorClosing =\n    api.assumption(\"skipForOfIteratorClosing\") ?? options.loose;\n\n  if (iterableIsArray && arrayLikeIsIterable) {\n    throw new Error(\n      `The \"iterableIsArray\" and \"arrayLikeIsIterable\" assumptions are not compatible.`,\n    );\n  }\n\n  if (iterableIsArray) {\n    return {\n      name: \"transform-for-of\",\n\n      visitor: {\n        ForOfStatement(path) {\n          const { scope } = path;\n          const { left, right, await: isAwait } = path.node;\n          if (isAwait) {\n            return;\n          }\n          const i = scope.generateUidIdentifier(\"i\");\n          let array: t.Identifier | t.ThisExpression =\n            scope.maybeGenerateMemoised(right, true);\n\n          const inits = [t.variableDeclarator(i, t.numericLiteral(0))];\n          if (array) {\n            inits.push(t.variableDeclarator(array, right));\n          } else {\n            array = right as t.Identifier | t.ThisExpression;\n          }\n\n          const item = t.memberExpression(\n            t.cloneNode(array),\n            t.cloneNode(i),\n            true,\n          );\n          let assignment;\n          if (t.isVariableDeclaration(left)) {\n            assignment = left;\n            assignment.declarations[0].init = item;\n          } else {\n            assignment = t.expressionStatement(\n              t.assignmentExpression(\"=\", left, item),\n            );\n          }\n\n          path.replaceWith(\n            t.forStatement(\n              t.variableDeclaration(\"let\", inits),\n              t.binaryExpression(\n                \"<\",\n                t.cloneNode(i),\n                t.memberExpression(t.cloneNode(array), t.identifier(\"length\")),\n              ),\n              t.updateExpression(\"++\", t.cloneNode(i)),\n              buildLoopBody(path, assignment),\n            ),\n          );\n        },\n      },\n    };\n  }\n\n  const buildForOfArray = template`\n    for (var KEY = 0, NAME = ARR; KEY < NAME.length; KEY++) BODY;\n  `;\n\n  const buildForOfNoIteratorClosing = template.statements`\n    for (var ITERATOR_HELPER = CREATE_ITERATOR_HELPER(OBJECT, ARRAY_LIKE_IS_ITERABLE), STEP_KEY;\n        !(STEP_KEY = ITERATOR_HELPER()).done;) BODY;\n  `;\n\n  const buildForOf = template.statements`\n    var ITERATOR_HELPER = CREATE_ITERATOR_HELPER(OBJECT, ARRAY_LIKE_IS_ITERABLE), STEP_KEY;\n    try {\n      for (ITERATOR_HELPER.s(); !(STEP_KEY = ITERATOR_HELPER.n()).done;) BODY;\n    } catch (err) {\n      ITERATOR_HELPER.e(err);\n    } finally {\n      ITERATOR_HELPER.f();\n    }\n  `;\n\n  const builder = skipIteratorClosing\n    ? {\n        build: buildForOfNoIteratorClosing,\n        helper: \"createForOfIteratorHelperLoose\",\n        getContainer: (nodes: t.Statement[]): [t.ForStatement] =>\n          nodes as [t.ForStatement],\n      }\n    : {\n        build: buildForOf,\n        helper: \"createForOfIteratorHelper\",\n        getContainer: (nodes: t.Statement[]): [t.ForStatement] =>\n          (nodes[1] as t.TryStatement).block.body as [t.ForStatement],\n      };\n\n  function _ForOfStatementArray(path: NodePath<t.ForOfStatement>) {\n    const { node, scope } = path;\n\n    const right = scope.generateUidIdentifierBasedOnNode(node.right, \"arr\");\n    const iterationKey = scope.generateUidIdentifier(\"i\");\n\n    const loop = buildForOfArray({\n      BODY: node.body,\n      KEY: iterationKey,\n      NAME: right,\n      ARR: node.right,\n    }) as t.For;\n\n    t.inherits(loop, node);\n\n    const iterationValue = t.memberExpression(\n      t.cloneNode(right),\n      t.cloneNode(iterationKey),\n      true,\n    );\n\n    let declar;\n    const left = node.left;\n    if (t.isVariableDeclaration(left)) {\n      left.declarations[0].init = iterationValue;\n      declar = left;\n    } else {\n      declar = t.expressionStatement(\n        t.assignmentExpression(\"=\", left, iterationValue),\n      );\n    }\n\n    loop.body = buildLoopBody(path, declar, loop.body);\n\n    return loop;\n  }\n\n  return {\n    name: \"transform-for-of\",\n    visitor: {\n      ForOfStatement(path, state) {\n        const right = path.get(\"right\");\n        if (\n          right.isArrayExpression() ||\n          (process.env.BABEL_8_BREAKING\n            ? right.isGenericType(\"Array\")\n            : right.isGenericType(\"Array\") ||\n              t.isArrayTypeAnnotation(right.getTypeAnnotation()))\n        ) {\n          path.replaceWith(_ForOfStatementArray(path));\n          return;\n        }\n\n        if (!process.env.BABEL_8_BREAKING) {\n          if (!state.availableHelper(builder.helper)) {\n            // Babel <7.9.0 doesn't support this helper\n            transformWithoutHelper(skipIteratorClosing, path, state);\n            return;\n          }\n        }\n\n        const { node, parent, scope } = path;\n        const left = node.left;\n        let declar;\n\n        const stepKey = scope.generateUid(\"step\");\n        const stepValue = t.memberExpression(\n          t.identifier(stepKey),\n          t.identifier(\"value\"),\n        );\n\n        if (t.isVariableDeclaration(left)) {\n          // for (let i of test)\n          declar = t.variableDeclaration(left.kind, [\n            t.variableDeclarator(left.declarations[0].id, stepValue),\n          ]);\n        } else {\n          // for (i of test), for ({ i } of test)\n          declar = t.expressionStatement(\n            t.assignmentExpression(\"=\", left, stepValue),\n          );\n        }\n\n        const nodes = builder.build({\n          CREATE_ITERATOR_HELPER: state.addHelper(builder.helper),\n          ITERATOR_HELPER: scope.generateUidIdentifier(\"iterator\"),\n          ARRAY_LIKE_IS_ITERABLE: arrayLikeIsIterable\n            ? t.booleanLiteral(true)\n            : null,\n          STEP_KEY: t.identifier(stepKey),\n          OBJECT: node.right,\n          BODY: buildLoopBody(path, declar),\n        });\n        const container = builder.getContainer(nodes);\n\n        t.inherits(container[0], node);\n        t.inherits(container[0].body, node.body);\n\n        if (t.isLabeledStatement(parent)) {\n          // @ts-expect-error replacing node types\n          container[0] = t.labeledStatement(parent.label, container[0]);\n\n          path.parentPath.replaceWithMultiple(nodes);\n\n          // The parent has been replaced, prevent Babel from traversing a detached path\n          path.skip();\n        } else {\n          path.replaceWithMultiple(nodes);\n        }\n      },\n    },\n  };\n});\n"],"mappings":"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"}
