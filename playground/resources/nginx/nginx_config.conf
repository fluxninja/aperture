worker_processes auto;
pid /run/nginx.pid;
env APERTURE_AGENT_ENDPOINT;

events {
    worker_connections 1024;
}

http {
    default_type application/octet-stream;
    resolver 10.96.0.10;

    sendfile on;
    keepalive_timeout 65;

    map $connection $protocol {
        # Use a regular expression to extract the protocol (TCP or UDP) from the $connection variable
        '~^(?<protocol>[A-Z]+)\s' $protocol;
    }

    map $request $http_version {
        # Use a regular expression to extract the HTTP version from the $request variable
        '~\sHTTP/(?<http_version>[0-9]+\.[0-9]+)$' "HTTP/$http_version";
    }

    init_by_lua_block {
        access = require "aperture-plugin.access"
        log = require "aperture-plugin.log"

        if access == nil  then
            ngx.log(ngx.ERR, "access is nil")
        end
    }

    access_by_lua_block {
        local authorized_status = access(ngx.var.destination_hostname, ngx.var.destination_port)

        if authorized_status ~= ngx.HTTP_OK then
          return ngx.exit(authorized_status)
        end
    }

    body_filter_by_lua_block {
        log()
    }

    server {
        listen 80;
        proxy_http_version 1.1;

        location /service1 {
            set $destination_hostname "service1-demo-app.demoapp.svc.cluster.local";
            set $destination_port "80";
            proxy_pass http://$destination_hostname:$destination_port/request;
        }

        location /service2 {
            set $destination_hostname "service2-demo-app.demoapp.svc.cluster.local";
            set $destination_port "80";
            proxy_pass http://$destination_hostname:$destination_port/request;
        }

        location /service3 {
            set $destination_hostname "service3-demo-app.demoapp.svc.cluster.local";
            set $destination_port "80";
            proxy_pass http://$destination_hostname:$destination_port/request;
        }
    }
}
